[{"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js":"1","C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js":"2","C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js":"3","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js":"4","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js":"5","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js":"6","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js":"7","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js":"8","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js":"9","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js":"10","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js":"11","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js":"12","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\index.js":"13","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\App.js":"14","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\reportWebVitals.js":"15","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Routes\\Routes.js":"16","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100010.js":"17","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100090.js":"18","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100040.js":"19","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100060.js":"20","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100130.js":"21","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100050.js":"22","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100150.js":"23","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100140.js":"24","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Pagination.js":"25","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100070.js":"26","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\LeaseAgreement.js":"27","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Dashboard.js":"28","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Orders.js":"29","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\listItems.js":"30","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Title.js":"31","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\PostCard.js":"32","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100100.js":"33","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100160.js":"34","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\PrivateRoute.js":"35","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100151.js":"36","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\test.js":"37"},{"size":555,"mtime":1609727657789,"results":"38","hashOfConfig":"39"},{"size":240,"mtime":1609727648266,"results":"40","hashOfConfig":"39"},{"size":362,"mtime":499162500000,"results":"41","hashOfConfig":"39"},{"size":11524,"mtime":1609829204925,"results":"42","hashOfConfig":"39"},{"size":1055,"mtime":1609833591029,"results":"43","hashOfConfig":"39"},{"size":8135,"mtime":1609830177180,"results":"44","hashOfConfig":"39"},{"size":2082,"mtime":1609828498424,"results":"45","hashOfConfig":"39"},{"size":994,"mtime":1609727352401,"results":"46","hashOfConfig":"39"},{"size":1306,"mtime":1609834092417,"results":"47","hashOfConfig":"39"},{"size":4553,"mtime":1609836098390,"results":"48","hashOfConfig":"39"},{"size":4356,"mtime":1609833363720,"results":"49","hashOfConfig":"39"},{"size":5135,"mtime":1609835439756,"results":"50","hashOfConfig":"39"},{"size":502,"mtime":1613487653161,"results":"51","hashOfConfig":"52"},{"size":194,"mtime":1611382711135,"results":"53","hashOfConfig":"52"},{"size":362,"mtime":499162500000,"results":"54","hashOfConfig":"52"},{"size":2979,"mtime":1615338026785,"results":"55","hashOfConfig":"52"},{"size":78196,"mtime":1615334792154,"results":"56","hashOfConfig":"52"},{"size":25654,"mtime":1615279086471,"results":"57","hashOfConfig":"52"},{"size":23598,"mtime":1615273742682,"results":"58","hashOfConfig":"52"},{"size":19589,"mtime":1615201049868,"results":"59","hashOfConfig":"52"},{"size":23296,"mtime":1615199375114,"results":"60","hashOfConfig":"52"},{"size":32973,"mtime":1615338928015,"results":"61","hashOfConfig":"52"},{"size":11403,"mtime":1615277214486,"results":"62","hashOfConfig":"52"},{"size":13469,"mtime":1615199358098,"results":"63","hashOfConfig":"52"},{"size":775,"mtime":1613554840662,"results":"64","hashOfConfig":"52"},{"size":22644,"mtime":1615201053210,"results":"65","hashOfConfig":"52"},{"size":26458,"mtime":1614653551543,"results":"66","hashOfConfig":"52"},{"size":5720,"mtime":1614488904684,"results":"67","hashOfConfig":"52"},{"size":3389,"mtime":1613717991896,"results":"68","hashOfConfig":"52"},{"size":1914,"mtime":1614919516667,"results":"69","hashOfConfig":"52"},{"size":356,"mtime":1613452929179,"results":"70","hashOfConfig":"52"},{"size":771,"mtime":1613825634853,"results":"71","hashOfConfig":"52"},{"size":40725,"mtime":1615201060144,"results":"72","hashOfConfig":"52"},{"size":19138,"mtime":1615201070793,"results":"73","hashOfConfig":"52"},{"size":861,"mtime":1614920325221,"results":"74","hashOfConfig":"52"},{"size":11673,"mtime":1615201068204,"results":"75","hashOfConfig":"52"},{"size":0,"mtime":1615196861815,"results":"76","hashOfConfig":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"2g9vyx",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"79"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"79"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"79"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"79"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"79"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"79"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"1i31dyy",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":55,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"112"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"112"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"112"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"112"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"112"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"112"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"112"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"112"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"112"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"112"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"112"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"112"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"112"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"112"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js",[],["178","179"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js",["180","181"],"import React,{ Component, Fragment,useEffect,useState } from 'react';\r\nimport './Counseling.css';\r\nimport Main from'../Main/Main.js';\r\nimport axios from \"axios\";\r\nimport CounselStatus from './CounselStatus';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n//모달창 라이브러리 끝-->\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\nvar rNum = '';\r\nvar Rnum = 0;\r\n\r\n\r\nvar Methods = []\r\n\r\nfunction Counseling (props) {\r\n\r\n    const[ConsultRegists, setConsultRegists] = useState([])\r\n\r\n    useEffect(()=>{\r\n        \r\n        axios.post('/api/register/registers')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    console.log(response.data.rows)\r\n                    setConsultRegists(response.data.rows)\r\n                }else{ \r\n                    alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n\r\n    },[])\r\n    \r\n    const[method, setMethod]=useState([])\r\n    \r\n    useEffect(()=>{\r\n        axios.post('/api/register/insertMethod')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log('insertMethod',response.data);\r\n                let arr = [{value: '전체', text: '전체' }]\r\n\r\n                response.data.rows.map((data) => \r\n                    arr.push({\r\n                    value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                }));\r\n                \r\n                Methods=arr;\r\n\r\n                console.log('insertMethodArr',arr);\r\n            }else{\r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n            }\r\n        })\r\n\r\n        \r\n        \r\n    },[])\r\n\r\n    //<!--모달창 속성 및 이벤트 \r\n    const [open, setOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    const [CRegists,setCRegists] = useState({});\r\n\r\n\r\n\r\n    //상담등록 모달\r\n    const onhandleClickOpen = () => {\r\n        setStoreOpen(true); \r\n     \r\n     };  \r\n\r\n                //상담등록 저장버튼이벤트\r\n                // const onhandleStoreClose = () => {\r\n                //     setOpen(false);\r\n                // }\r\n            \r\n     const onhandleClose = (event) => {\r\n          \r\n        axios.post('/api/register/registers')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log(response.data.rows)\r\n                setConsultRegists(response.data.rows)\r\n            }else{ \r\n                alert(\"상담등록 페이지 가져오기를 실패하였습니다.\")\r\n            }\r\n\r\n        })\r\n\r\n        setStoreOpen(false);\r\n       };\r\n    //상담등록 모달 끝\r\n\r\n    //상세보기 모달\r\n    const handleClickOpen = (e) => {\r\n       setOpen(true); \r\n       rNum = e.target.innerHTML\r\n       Rnum= parseInt(rNum);\r\n       //console.log(Rnum)\r\n\r\n       axios.get(`/api/register/register_by_id?id=${Rnum}&type=single`) \r\n       .then(response => {\r\n           if(response.data.success){\r\n               console.log(response.data)\r\n               setCRegists(response.data.rows[0])\r\n               //console.log(response.data.consultRegistInfo.num)\r\n           }else{\r\n               alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n           }\r\n\r\n       })\r\n    };  \r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n      //상세보기 모달 끝 \r\n    //모달창 속성 및 이벤트 끝-->\r\n\r\n\r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n\r\n        // if(method.valueOf('전체') ||!startDate||!endDate||!searchName){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n         const body = {\r\n            startDate,\r\n            searchName,\r\n            method,\r\n            endDate\r\n        }\r\n        \r\n        //console.log(body);\r\n        \r\n        axios.post(\"/api/register/search\",body)\r\n        .then(response => {\r\n            if(response?.data?.success){\r\n                console.log('search',response.data.rows);\r\n                setConsultRegists(response.data.rows);\r\n            }else{\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    \r\n\r\n\r\n    const[searchName, setSearchName] = useState(\"\")\r\n\r\n    const MethodChangeHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const nameSearchHandler=(event)=>{\r\n        setSearchName(event.currentTarget.value);\r\n    }\r\n\r\n    //console.log('ConsultRegists',ConsultRegists);\r\n\r\n    const resultTable = ConsultRegists.map((ConsultRegists,index)=>{\r\n\r\n        return<tr>\r\n                <td name =\"cname\" variant=\"outlined\" color=\"primary\" onClick={handleClickOpen} id={ConsultRegists.num}><u>{ConsultRegists.num}\r\n                </u></td>\r\n                {/* 모달창 시작 */}\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{CRegists.cname+\"님의 상담내용 입니다.\"}</DialogTitle>\r\n                    <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {CRegists.content}\r\n                    </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                        확인\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* 모달창 끝*/}\r\n\r\n                <td>{ConsultRegists.roomtype}</td>\r\n                <td>{ConsultRegists.counseldate}</td>\r\n                <td>{ConsultRegists.method}</td>\r\n                <td>{ConsultRegists.cname}</td>\r\n                <td>{ConsultRegists.phone}</td>\r\n                <td>{ConsultRegists.path}</td>\r\n                \r\n            </tr>\r\n    })\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                \r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>상담현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                        문의일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        문의구분 \r\n                        <select onChange ={MethodChangeHandler} value ={method}>   \r\n                        \r\n                            {Methods.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                    \r\n                        </select>\r\n                        &nbsp; \r\n\r\n                        문의자명\r\n                         <input type=\"text\" value = {searchName} id=\"searchlName\" name=\"searchName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onhandleClickOpen} >상담등록</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    {/* 모달창 시작 --> 504에러 */}\r\n                        <Dialog\r\n                            open={storeOpen}\r\n                            onClose={onhandleClose}\r\n                            aria-labelledby=\"alert-dialog-title\"\r\n                            aria-describedby=\"alert-dialog-description\"\r\n                        >\r\n                            <DialogTitle id=\"alert-dialog-title\"><h1>상담등록</h1></DialogTitle>\r\n                            <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                                 <CounselStatus/>\r\n                            </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                            {/* <Button onClick={onhandleStoreClose} color=\"primary\" autoFocus>\r\n                                저장\r\n                            </Button> */}\r\n                            <Button onClick={onhandleClose} color=\"primary\">\r\n                                닫기\r\n                            </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                     {/* // 모달창 끝        */}\r\n\r\n                    \r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>No</th>\r\n                            <th>문의 구분</th>\r\n                            <th>문의일자</th>\r\n                            <th>문의방법</th>\r\n                            <th>문의자명</th>\r\n                            <th>연락처</th>\r\n                            <th>접근경로</th>\r\n                        </tr>\r\n\r\n                        \r\n                            {resultTable}\r\n                       \r\n\r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Counseling;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js",["182","183"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\nimport { addDays } from 'date-fns';\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nimport \"./CounselStatus.css\";\r\nregisterLocale(\"ko\", ko);\r\n\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction CounselStatus(props) {\r\n\r\n    //Lov(List of Value)를 데이터 베이스에서 가져오기 \r\n        //select\r\n        const[RoomType,setRoomType] = useState(1)\r\n        const[Method, setMethod] = useState(1)\r\n        const[Path, setPath] = useState(1)\r\n\r\n        //문의구분\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/roomType')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('roomType',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    RoomTypes = arr;\r\n\r\n                    //console.log('roomTypeArr',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n            \r\n            \r\n        },[])\r\n\r\n        //문의방법\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/methodA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('method',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Methods = arr;\r\n\r\n                    //console.log('method',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n\r\n        //접근경로\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/pathA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('Paths',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Paths = arr;\r\n\r\n                    //console.log('Paths',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n    //Lov끝    \r\n\r\n\r\n    \r\n    //datepicker속성 및 이벤트 시작\r\n    const [StartDate, setStartDate] = useState(new Date());\r\n    //datepicker속성 및 이벤트 끝\r\n    console.log(StartDate.getMonth()+1);\r\n    console.log(StartDate);\r\n    \r\n    const[CounselName, setCounselName] = useState(\"\")\r\n    const[UserPhone, setUserPhone] = useState(\"\")\r\n    const[Content, setContent] = useState(\"\")\r\n\r\n\r\n    const onNameHandler=(event)=>{\r\n        setCounselName(event.currentTarget.value);\r\n    }\r\n\r\n    const MethodHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const PathHandler=(event)=>{\r\n        setPath(event.currentTarget.value);\r\n    }\r\n\r\n    const onPhoneHandler=(event)=>{\r\n        setUserPhone(event.currentTarget.value);\r\n    }\r\n\r\n    const onContentHandler=(event)=>{\r\n        setContent(event.currentTarget.value);\r\n    }\r\n\r\n    const RoomTypeChangeHandler=(event)=>{\r\n        setRoomType(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n        //console.log(RoomType)\r\n    \r\n        // if(RoomType.valueOf('전체') ||!CounselName||Method.valueOf('전체')||Path.valueOf('전체')||!UserPhone||!Content){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n        \r\n        \r\n        //서버에 채운 값들을 request로 보낸다.\r\n        const body = {\r\n            roomtype: RoomType,\r\n            counseldate: StartDate,\r\n            cname: CounselName,\r\n            method: Method,\r\n            path: Path,\r\n            phone: UserPhone,\r\n            content: Content\r\n            \r\n        }\r\n        \r\n        \r\n        Axios.post(\"/api/register\",body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 등록되었습니다.')\r\n               // props.history.push('/counseling')\r\n            }else{\r\n                alert('등록에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          {/* <Main/>\r\n          <h1>상담등록</h1> */}\r\n          <table>\r\n            <tr>\r\n                <th>문의구분</th>\r\n                    <td>\r\n                        <select onChange ={RoomTypeChangeHandler} value ={RoomType}>   \r\n                        \r\n                            {RoomTypes.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                        \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의일자</th>\r\n                    <td>   \r\n                    <DatePicker\r\n                        locale=\"ko\"\r\n                        selected={StartDate}\r\n                        onChange={date => setStartDate(date)}\r\n                        minDate={new Date()}\r\n                        maxDate={addDays(new Date(), 0)}  \r\n                        dateFormat=\"yyyy.MM.dd (eee)\"\r\n                    />\r\n\r\n                    </td>\r\n                <th>문의자명</th>\r\n                    <td>\r\n                    <input type=\"text\" value = {CounselName}id=\"counselName\" name=\"counselName\" size = \"7\"\r\n                    onChange={onNameHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n            <tr>\r\n                <th>문의방법</th>\r\n                    <td>\r\n                        <select value={Method} onChange={MethodHandler} >\r\n                        {Methods.map(item=>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                        ))}\r\n                        </select>\r\n                    </td>\r\n                <th>접근경로</th>\r\n                    <td>\r\n                        <select value={Path} onChange={PathHandler} >\r\n                            {Paths.map(item =>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                            ))}\r\n                            \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의자연락처</th>\r\n                    <td>\r\n                    <input type = \"text\" value = {UserPhone}id = \"userPhone\" name = \"userPhone\" size = \"7\"\r\n                    onChange={onPhoneHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n\r\n            <tr>\r\n                <th>상담내용</th>\r\n                    <td colSpan=\"5\">\r\n                        <textarea rows =\"5\" cols = \"100\" value = {Content}id=\"content\" name = \"content\"\r\n                        onChange={onContentHandler}></textarea>\r\n                    </td>\r\n            </tr>\r\n          </table>\r\n          <div id = \"popbtn\"> \r\n            <button type = \"submit\">저장</button>\r\n            {/* <button>닫기</button> */}\r\n          </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n\r\nexport default CounselStatus;",["184","185"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js",["186"],"// import { Component, Fragment } from 'react';\r\n// import {useDispatch} from 'react-redux';\r\n//import {loginUser} from '../_actions/user_action';\r\nimport axios from 'axios';\r\nimport React,{Fragment} from 'react';\r\nimport {useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js'\r\n\r\n\r\nfunction LoginPage( props){\r\n  // const dispatch = useDispatch();\r\n\r\n  const [E_mal,setE_mal] = useState(\"\")\r\n  const [Password, setPassword] = useState(\"\")\r\n\r\n  const onEmailHandler = (event) => {\r\n    setE_mal(event.currentTarget.value)\r\n  }\r\n\r\n  const onPasswordHandler = (event) => {\r\n    setPassword(event.currentTarget.value)\r\n  }\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    let body = {\r\n        Email: E_mal,\r\n        PASSWORD: Password\r\n    }\r\n\r\n   axios.post('/api/users/login',body)\r\n        .then(response => {\r\n            if (response.data.loginResult) {\r\n                alert('로그인 되었습니다.')\r\n                //props.history.push('/counseling')\r\n                console.log(response.data.loginResult)\r\n            } else {\r\n                alert('아이디와 비밀번호를 확인하세요')\r\n            }\r\n        })\r\n      }\r\n\r\n    return (\r\n      <Fragment>\r\n          <Main/>\r\n          <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%',height:'50vh'}}>\r\n            <form style = {{display:'flex', flexDirection:'column'}}\r\n             onSubmit={onSubmitHandler}\r\n            >\r\n              \r\n                <label style={{fontFamily:'Jua',width:'180px'}}>Email</label>\r\n                <input style={{width:\"300px\"}} type = \"email\" value={E_mal} onChange={onEmailHandler} />\r\n                <label style={{fontFamily:'Jua'}}>Password</label>\r\n                <input style={{width:\"300px\"}} type = \"password\" value={Password} onChange={onPasswordHandler}/>\r\n                <br/>\r\n                <button type=\"submit\">Login</button>\r\n            \r\n            \r\n            </form>\r\n          </div>\r\n         \r\n          </Fragment>\r\n    )\r\n}\r\n\r\nexport default LoginPage","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js",["187"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Member from './Components/Member/Member';\r\nimport Counseling from './Components/Counseling/Counseling';\r\nimport CounselStatus from './Components/Counseling/CounselStatus';\r\nimport LoginPage from './Components/LoginPage/LoginPage';\r\nimport PaymentStatus from './Components/PaymentStatus/PaymentStatus';\r\nimport Swon from './Components/Staff/Swon';\r\nimport Main from './Components/Main/Main';\r\n\r\nexport default () => (\r\n  <Router>\r\n          {/* 메인 */}\r\n          <Route exact path = \"/\" component = {Main}></Route>\r\n\r\n\r\n          {/* 회원현황 */}\r\n          <Route exact path = \"/member\" component = {Member}></Route> \r\n          {/* 납부현황 */}\r\n          <Route path = \"/paymentStatus\" component = {PaymentStatus}></Route>\r\n          {/* 상담현황 */}\r\n          <Route exact path = \"/counseling\" component = {Counseling}></Route>\r\n          {/* 직원관리 */}\r\n          <Route exact path = \"/swon\" component = {Swon}></Route>\r\n          {/* 로그인/로그아웃*/}\r\n          <Route exact path = \"/login\" component = {LoginPage}></Route>\r\n\r\n\r\n\r\n          {/* 상담등록 */}\r\n          <Route exact path = \"/counselStatus\" component = {CounselStatus}></Route>\r\n  </Router>\r\n)\r\n\r\n","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js",["188","189","190","191","192","193","194","195","196","197","198","199","200"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\n\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction Member(props) {\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n      \r\n    }\r\n    const[userName,setUserName] = useState(\"\")\r\n    const[bnum,setBnum] = useState(\"\")\r\n    const[ownerName,setOwnerName] = useState(\"\")\r\n    const[userSort,setUserSort] = useState([])\r\n    const[endStatus,setEndStatus] = useState(\"\")\r\n    const[status,setStatus] = useState(\"\")\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          <Main/>\r\n          <h1>회원현황</h1>\r\n          <table >\r\n            <tr>\r\n                <th>회원명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {userName} id = \"userName\" name = \"userName\" size = \"7\"\r\n                        />\r\n                    </td>  \r\n                    {/* onChange={onPhoneHandler} */}\r\n                <th>사업자번호</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {bnum} id = \"bnum\" name = \"bnum\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>대표자명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {ownerName} id = \"ownerName\" name = \"ownerName\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>종류</th>\r\n                    <td>\r\n                        <select value ={endStatus}>  {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>상태</th>\r\n                    <td>\r\n                        <select value ={status}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                    <div > \r\n                        <button type = \"submit\">조회</button>\r\n                \r\n                    </div>\r\n                    </td>\r\n\r\n                \r\n            </tr>\r\n               \r\n            \r\n          </table>\r\n          <table>\r\n            <tr>\r\n                <td>\r\n                    <button>신규회원</button>\r\n                    <button>SNS</button>\r\n                    <button>메일전송</button>\r\n                    <button>엑셀다운로드</button>\r\n                </td>\r\n            </tr>\r\n          </table>\r\n          \r\n          <table>\r\n                <tr>\r\n                    <th>No</th>\r\n                    <th>문의 구분</th>\r\n                    <th>문의일자</th>\r\n                    <th>문의방법</th>\r\n                    <th>문의자명</th>\r\n                    <th>연락처</th>\r\n                    <th>접근경로</th>\r\n                </tr>\r\n          </table>\r\n\r\n      </form>\r\n\r\n      \r\n    );\r\n  }\r\n\r\n\r\nexport default Member;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js",["201"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction PaymentStatus (props) {\r\n\r\n    \r\n    const[userName, setUserName] = useState(\"\")\r\n    const[paymentStatus, setPaymentStatus]=useState([])\r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const nameSearchHandler=(event)=>{\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler=(event)=>{\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n    \r\n    const onPaymenthandler=()=>{\r\n        \r\n    }\r\n\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>고객납부현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                    납부예정일   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                        회원명\r\n                         <input type=\"text\" value = {userName} id=\"userName\" name=\"userName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp; \r\n\r\n                        납부여부\r\n                        <select onChange ={paymentStatusHandler} value ={paymentStatus}>   \r\n{/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                        </select>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onPaymenthandler}> 납부</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>No</th>\r\n                            <th>회원명</th>\r\n                            <th>납부예정일</th>\r\n                            <th>납부여부</th>\r\n                            <th>납부일자</th>\r\n                            <th>계약기간</th>\r\n                            <th>대표자</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default PaymentStatus;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js",["202"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction Swon (props) {\r\n\r\n    \r\n    const[staffName, setStaffName] = useState(\"\")\r\n    const[staffClass, setStaffClass] = useState([])\r\n    const[closeStatus, setCloseStatus] = useState([])\r\n    \r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const staffNameHandler=(event)=>{\r\n        setStaffName(event.currentTarget.value);\r\n    }\r\n\r\n    const staffClassHandler=(event)=>{\r\n        setStaffClass(event.currentTarget.value);\r\n    }\r\n    \r\n    const closeStatusHandler=(event)=>{\r\n        setCloseStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onRegistHandler = (event)=>{\r\n\r\n    }\r\n    const onModifyHandler = (event)=>{\r\n        \r\n    }\r\n    const onApprovalHandler = (event)=>{\r\n        \r\n    }\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>직원현황</h1>\r\n                    <div id = \"search\">\r\n\r\n                     성명\r\n                    <input type=\"text\" value = {staffName} id=\"staffName\" name=\"staffName\" size = \"5\"\r\n                    onChange={staffNameHandler}/>\r\n                    &nbsp; \r\n\r\n\r\n                    입사일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        직원구분\r\n                        <select onChange ={staffClassHandler} value ={staffClass}>  \r\n                    {/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                     \r\n                        </select>\r\n                        종료\r\n                        <select onChange ={closeStatusHandler} value ={closeStatus}>   \r\n                        </select>\r\n                        \r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onRegistHandler}> 등록</button> </td>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onModifyHandler}> 수정</button> </td>    \r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onApprovalHandler}> 승인</button> </td>                        \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>직번</th>\r\n                            <th>성명</th>\r\n                            <th>주민번호</th>\r\n                            <th>부서</th>\r\n                            <th>연락처</th>\r\n                            <th>E-mail</th>\r\n                            <th>직원구분</th>\r\n                            <th>승인여부</th>\r\n                            <th>직급</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Swon;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\index.js",[],["203","204"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\App.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Routes\\Routes.js",["205"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100010.js",["206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100090.js",["261","262","263","264","265","266","267","268","269","270"],"import React, { Fragment, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport S010100100 from './S010100100';\r\nimport './css/S010100090.css';\r\n\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { DatePicker } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport moment from 'moment';\r\n\r\nimport xlsx from 'xlsx';\r\n// //<!--켈린더 라이브러리시작\r\n// import DatePicker, { registerLocale } from \"react-datepicker\";\r\n// import ko from 'date-fns/locale/ko';\r\n// registerLocale(\"ko\", ko);\r\n// //켈린더 라이브러리 끝-->\r\n\r\nimport ReactPaginate from 'react-paginate';\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}));\r\n\r\nlet empNm = '';\r\nlet chkSt = '';\r\nlet memberId;\r\nlet empIdM;\r\nlet empIdMarr =[];\r\n\r\nfunction S010100090() {\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n\r\n    const [empInfo, setEmpInfo] = useState([].slice(0, 10));\r\n\r\n    const [staffName, setStaffName] = useState('');\r\n    const [memberNm, setMemberNm] = useState('');\r\n    const [staffClass, setStaffClass] = useState('');\r\n    const [staffClasses, setStaffClasses] = useState([{}])\r\n    const [closeStatus, setCloseStatus] = useState('');\r\n    const [startDate, setStartDate] = useState(new Date(moment().date('01')));\r\n    const [endDate, setEndDate] = useState(new Date());\r\n\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    const [empName, setEmpName] = useState('');\r\n    const [memId, setMemId] = useState(0);\r\n    const [empId,setEmpId] = useState();\r\n    const [dataForm, setdataForm] = useState('');\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(empInfo.length / usersPerPage);\r\n\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n\r\n\r\n    // useEffect(() => {\r\n    //     axios.post('/api/s010100150/session')\r\n    //         .then(response => {\r\n    //             if (response.data.success) {\r\n                  \r\n\r\n    //             } else {\r\n    //                 alert(response.data.message);\r\n    //             }\r\n    //         })\r\n    // }, [])\r\n    \r\n    // 직원 구분\r\n    useEffect(() => {\r\n        axios.post('/api/s010100090/classification')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                    setStaffClasses(arr);\r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        empList();\r\n    }, [])\r\n\r\n    const empList = () => {\r\n        let body = {\r\n            staffName,\r\n            memberNm,\r\n            staffClass,\r\n            retireChecked,\r\n            startDate,\r\n            endDate\r\n        }\r\n\r\n        axios.post('/api/s010100090/empList', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    setEmpInfo(response.data.rows);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"직원 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    const staffNameHandler = (event) => {\r\n        setStaffName(event.currentTarget.value);\r\n    }\r\n    const memberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const staffClassHandler = (event) => {\r\n        setStaffClass(event.currentTarget.value);\r\n    }\r\n\r\n    const closeStatusHandler = (event) => {\r\n        setCloseStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onHandleClickClose = useCallback(() => {\r\n        setStoreOpen(false);\r\n        empList();\r\n    });\r\n\r\n    const onEmpSearchHandler = () => {\r\n        empList();\r\n    }\r\n\r\n    const [retireChecked, setRetireChecked] = useState([]);\r\n\r\n    const retireHandleToggle = (event) => {\r\n\r\n        // 승인empId 현재 index값\r\n        const currentIndex = retireChecked.indexOf(event.target.id);\r\n        // 등록시 회사명\r\n\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        const newChecked = retireChecked;\r\n      \r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(event.target.id)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setRetireChecked(newChecked);\r\n     \r\n\r\n    }\r\n\r\n    const handleToggle = (event) => {\r\n\r\n        // 승인empId 현재 index값\r\n        const currentIndex = checked.indexOf(event.target.id);\r\n        // 등록시 회사명\r\n        empNm = event.target.className;\r\n      \r\n\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        const newChecked = checked;\r\n      \r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(event.target.id)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setChecked(newChecked);\r\n        // console.log(checked);\r\n        newChecked.length > 0 ? chkSt = 'check' : chkSt = '';\r\n\r\n    }\r\n    \r\n    const onRegistHandler = (event) => {\r\n        if (checked.length === 0) {\r\n            alert('선택하세요');\r\n        } else if (checked.length > 1) {\r\n            alert('하나만 체크하세요');\r\n        } else {\r\n            const checkedList = checked[0].split(',');\r\n            console.log(checkedList[0]);\r\n            \r\n            memberId = checkedList[0];\r\n            setEmpName(empNm);\r\n            setMemId(checkedList[0]);\r\n            setdataForm('I');\r\n            console.log('empNm',empNm);\r\n            setStoreOpen(true);\r\n            \r\n        \r\n        }\r\n    }\r\n    \r\n    const onModifyHandler = (event) => {\r\n        if (checked.length === 0) {\r\n            alert('선택하세요');\r\n        } else if (checked.length > 1) {\r\n            alert('하나만 체크하세요');\r\n        } else {\r\n            const checkedList = checked[0].split(',');\r\n            empIdM = checkedList[1];\r\n            console.log('empIdM',empIdM);\r\n            setdataForm('U');\r\n            setEmpId(empIdM);\r\n            setStoreOpen(true);\r\n        \r\n        }\r\n    }\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = (event) => {\r\n        let checkedMemberId;\r\n\r\n        for(let i = 0; checked.length > i; i++){\r\n           checkedMemberId = checked[i].split(',');    \r\n    }\r\n\r\n    if(JSON.parse(sessionStorage.getItem(\"member\"))[1] != checkedMemberId[0]){\r\n        alert('자회사의 직원승인만 가능합니다.');\r\n    }else if (checked.length === 0) {\r\n            alert('승인할 회원을 선택하세요');\r\n        } else {\r\n            let arr = [];\r\n\r\n            for(let i = 0; checked.length > i; i++){\r\n                const checkedList = checked[i].split(',');\r\n                console.log('checkedList[1]',checkedList[1]);\r\n                console.log('checkedList[0]',checkedList[0]);\r\n                console.log('checkedList',checkedList);\r\n               \r\n                arr.push(checkedList[1]);\r\n\r\n        }\r\n            // console.log(arr);\r\n            let body = {\r\n                arr\r\n            }\r\n            \r\n            axios.post('/api/s010100090/approval', body)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        alert('승인처리 되었습니다.');\r\n                        empList();\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert('승인처리에 실패하였습니다.');\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    const cancelConfirm = () => alert('승인 취소하였습니다.');\r\n\r\n    const onApprovalHandler = useConfirm(\r\n        \"승인하시겠습니까?\",\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n    const excelHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(empInfo);\r\n       \r\n\r\n        ['회원명', 'member_id', '직번', '성명', '생년월일', '부서', 'emp_id','연락처','직업구분','승인여부','E-mail','password','입사일자','퇴사일자']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][1] = { hidden: true };\r\n        ws['!cols'][6] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"상담현황.xlsx\");\r\n\r\n    }\r\n\r\n\r\n    const displayEmpMembers = empInfo.slice(pagesVisited, pagesVisited + usersPerPage).map((empInfo, index) => {\r\n        return (\r\n            <TableRow key={index}>\r\n                <TableCell>\r\n                    <input type=\"checkbox\" onChange={handleToggle} id={empInfo.MEMBER_ID + ',' + empInfo.EMP_ID} className={empInfo.MEMBER_NM} />\r\n                </TableCell>\r\n                <TableCell>{empInfo.MEMBER_NM}</TableCell>\r\n                <TableCell>{empInfo.EMP_NUMBER}</TableCell>\r\n                <TableCell>{empInfo.NAME}</TableCell>\r\n                <TableCell>{empInfo.BIRTH_DATE}</TableCell>\r\n                <TableCell>{empInfo.DEPT_NM}</TableCell>\r\n                <TableCell>{empInfo.EMP_HP}</TableCell>\r\n                <TableCell>{empInfo.CEO_FLAG}</TableCell>\r\n                <TableCell>{empInfo.EMP_TP}</TableCell>\r\n                <TableCell>{empInfo.APPROVAL_FLAG}</TableCell>\r\n                <TableCell>{empInfo.EMP_EMAIL}</TableCell>\r\n                <TableCell>{empInfo.PWD}</TableCell>\r\n                <TableCell>{empInfo.JOIN_DATE === '00-00-00'||null ? '' :empInfo.JOIN_DATE }</TableCell>\r\n                <TableCell>{empInfo.RETIRE_DATE === '00-00-00'||null ? '' :empInfo.RETIRE_DATE}</TableCell>\r\n            </TableRow>\r\n        );\r\n    }); \r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단파란툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                            Dashboard\r\n          </Typography>\r\n                        <IconButton color=\"inherit\">\r\n                            <Badge badgeContent={4} color=\"secondary\">\r\n                                <NotificationsIcon />\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/* 왼쪽 메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>{mainListItems}</List>\r\n                  \r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <form onSubmit={onSubmitHandler}>\r\n                                        입사일자   &nbsp;\r\n                                    {/* date클릭할 때 고정 */}\r\n\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(date)}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            defaultValue={moment(moment().date('01'), 'YYYY-MM-DD')}\r\n                                        />&nbsp; ~ &nbsp;\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(date)}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            minDate={startDate}\r\n                                            defaultValue={moment(moment(), 'YYYY-MM-DD')}\r\n                                        />\r\n\r\n                                    &nbsp;&nbsp;회원명&nbsp;&nbsp;\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                            value={memberNm} id=\"memberNm\" name=\"memberNm\"\r\n                                            onChange={memberNmHandler} />\r\n\r\n                                    &nbsp;\r\n                                    성명&nbsp;&nbsp;\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                            value={staffName} id=\"staffName\" name=\"staffName\"\r\n                                            onChange={staffNameHandler} />\r\n\r\n                                        &nbsp;&nbsp;\r\n\r\n                                        직원구분&nbsp;&nbsp;\r\n                                        <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                            multiple={false} onChange={staffClassHandler} value={staffClass}>\r\n                                            {staffClasses.map((item,index) => (\r\n                                                <option key={index} value={item.key}>{item.value}</option>\r\n                                            ))}\r\n\r\n                                        </Form.Control>\r\n                                       &nbsp;&nbsp;\r\n                                        퇴사여부&nbsp;&nbsp;\r\n                                        <input type=\"checkbox\" onChange={retireHandleToggle} id=\"Y\" />\r\n\r\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                        <Button variant=\"contained\" style={{ width: 80 }} color=\"primary\" href=\"#contained-buttons\"\r\n                                            onClick={onEmpSearchHandler}>\r\n                                            조회\r\n                                        </Button>\r\n\r\n\r\n                                    </form>\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                            <table className=\"btn\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td id=\"alignLeft\">\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" href=\"#contained-buttons\"\r\n                                                onClick={onRegistHandler}> 등록 </Button>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" href=\"#contained-buttons\"\r\n                                                onClick={onModifyHandler}> 수정 </Button>\r\n                                            <span hidden ={JSON.parse(sessionStorage.getItem(\"member\"))[0] === 'N'}>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" href=\"#contained-buttons\"\r\n                                                onClick={onApprovalHandler}> 승인 </Button>\r\n                                            </span>\r\n                                        </td>\r\n                                        <td id=\"alignRight\">\r\n                                            <Button variant=\"contained\" style={{ width: 140 }} color=\"primary\" href=\"#contained-buttons\" onClick={excelHandler}> 엑셀다운로드 </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </thead>\r\n                            </table>\r\n\r\n\r\n                            {/* 결과 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                        <Title>직원 현황</Title>\r\n                                        <Table size=\"small\">\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell>선택</TableCell>\r\n                                                    <TableCell>회원명</TableCell>\r\n                                                    <TableCell>직번</TableCell>\r\n                                                    <TableCell>성명</TableCell>\r\n                                                    <TableCell>생년월일</TableCell>\r\n                                                    <TableCell>부서</TableCell>\r\n                                                    <TableCell>연락처</TableCell>\r\n                                                    <TableCell>대표자여부</TableCell>\r\n                                                    <TableCell>직원구분</TableCell>\r\n                                                    <TableCell>승인여부</TableCell>\r\n                                                    <TableCell>E-mail</TableCell>\r\n                                                    <TableCell>password</TableCell>\r\n                                                    <TableCell>입사일자</TableCell>\r\n                                                    <TableCell>퇴사일자</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n\r\n                                            <TableBody>\r\n                                                {displayEmpMembers}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                        <div id=\"reactPage\">\r\n                                            <ReactPaginate\r\n                                                previousLabel={\"Previous\"}\r\n                                                nextLabel={\"Next\"}\r\n                                                pageCount={pageCount}\r\n                                                onPageChange={changePage}\r\n                                                containerClassName={\"paginationBtns\"}\r\n                                                previousLinkClassName={\"previousBtn\"}\r\n                                                nextLinkClassName={\"nextBtn\"}\r\n                                                disabledClassName={\"paginationDisabled\"}\r\n                                                activeClassName={\"paginationActive\"}\r\n                                            />\r\n                                        </div>\r\n                                    </React.Fragment>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={storeOpen}>\r\n                <S010100100 name={empName} memId={memberId} empIdM={empIdM} dataForm={dataForm} empList={empList} onHandleClickClose={onHandleClickClose} setStoreOpen={setStoreOpen}/>\r\n            </Dialog>\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100090;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100040.js",["271","272","273","274","275"],"import React, { Fragment, useState, useEffect, useCallback } from 'react';\r\nimport axios from \"axios\";\r\nimport './css/S010100040.css';\r\nimport S010100010 from './S010100010';\r\nimport S010100050 from './S010100050';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { DatePicker } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport moment from 'moment';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}));\r\n\r\n\r\nlet memberId = '';\r\n\r\nfunction S010100040() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [modalOpen, setModalOpen] = React.useState(false);\r\n\r\n    const [memberNm, setMemberNm] = useState('')\r\n    const [regNo, setRegNo] = useState('')\r\n    const [memberTp, setMemberTp] = useState('')\r\n    const [contractStatus, setContractStatus] = useState('')\r\n    const [memberSt, setMemberSt] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [tbMember, setTbMember] = useState([].slice(0, 5))\r\n\r\n    const [memberStatus, setMemberStatus] = useState([{}]);\r\n    const [memberType, setMemberType] = useState([{}]);\r\n\r\n    const [startDate, setStartDate] = useState(new Date(moment().date('01')));\r\n    const [endDate, setEndDate] = useState(new Date());\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    const [memberIdModal, setMemberIdModal] = useState(0);\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(tbMember.length / usersPerPage);\r\n\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/s010100040/selectMemberTp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n\r\n                        }));\r\n\r\n                    setMemberType(arr);\r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"회원상태 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    const endStatus = [{ key: '전체', value: '전체' },\r\n    { key: 'Y', value: 'Y' },\r\n    { key: 'N', value: 'N' }]\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/s010100040/selectMemberSt')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n\r\n                        }));\r\n\r\n                    setMemberStatus(arr);\r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"회원상태 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    // 조회\r\n    const memberList = () => {\r\n        const body = {\r\n            startDate,\r\n            endDate,\r\n            memberNm,\r\n            regNo,\r\n            name,\r\n            memberTp,\r\n            contractStatus,\r\n            memberSt\r\n        }\r\n\r\n        // console.log('starDate',startDate);\r\n        // console.log('endDate',endDate);\r\n\r\n        axios.post('/api/s010100040/searchMember', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    setTbMember(response.data.rows);\r\n                    // console.log('response.data.success',response.data.rows);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"데이터 목록을 가져오는 것을 실패하였습니다.\")\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        memberList();\r\n    }, [])\r\n\r\n    const onSearchSubmitHandler = (event) => {\r\n        memberList();\r\n    }\r\n\r\n    const onHandleClickOpen = () => {\r\n        setStoreOpen(true);\r\n    };\r\n\r\n    const onHandleClickClose = useCallback(() => {\r\n        setStoreOpen(false);\r\n        memberList();\r\n    });\r\n\r\n    const memberStHandler = (event) => {\r\n        setMemberSt(event.currentTarget.value);\r\n    }\r\n\r\n    const nameHandler = (event) => {\r\n        setName(event.currentTarget.value);\r\n    }\r\n\r\n    const memberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const regNoHandler = (event) => {\r\n        setRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const memberTpHandler = (event) => {\r\n        setMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n    const contractStatusHandler = (event) => {\r\n        setContractStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onHandleDetailClickOpen = (event) => {\r\n        memberId = event.target.id;\r\n        console.log('memberId',memberId);\r\n        setMemberIdModal(memberId);\r\n        setModalOpen(true);\r\n    }\r\n\r\n    const onHandleDetailClickClose = useCallback(() => {\r\n        memberList();\r\n        setModalOpen(false);\r\n    });\r\n\r\n    const onSNSHandler = (event) => {\r\n\r\n    }\r\n\r\n    const onEmailHandler = (event) => {\r\n\r\n    }\r\n\r\n    const excelHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(tbMember);\r\n\r\n        ['NO', '사업자번호', '회원명', '회원구분', '상태', '대표자 성명', '대표자 연락처', '대표자 E-mail', '종료여부']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][0] = { hidden: true };\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"회원현황.xlsx\");\r\n    }\r\n\r\n    const displayMemSt = tbMember.slice(pagesVisited, pagesVisited + usersPerPage).map((tbMember, index) => {\r\n        return (\r\n            <TableRow key={index}>\r\n                <TableCell id={tbMember.MEMBER_ID} >{tbMember.MEMBER_ID}</TableCell>\r\n                <TableCell>{tbMember.MEMBER_NM}</TableCell>\r\n                <TableCell>{tbMember.REG_NO}</TableCell>\r\n                <TableCell onClick={onHandleDetailClickOpen} className='underLineForDetail' id={tbMember.MEMBER_ID}>{tbMember.NAME}</TableCell>\r\n                <TableCell>{tbMember.EMP_HP}</TableCell>\r\n                <TableCell>{tbMember.EMP_EMAIL}</TableCell>\r\n                <TableCell>{tbMember.MEMBER_TP}</TableCell>\r\n                <TableCell>{tbMember.MEMBER_ST}</TableCell>\r\n                <TableCell>{tbMember.END_FLAG}</TableCell>\r\n            </TableRow>\r\n        )\r\n    });\r\n\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단파란툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                            Dashboard\r\n                        </Typography>\r\n                        <IconButton color=\"inherit\">\r\n                            <Badge badgeContent={4} color=\"secondary\">\r\n                                <NotificationsIcon />\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/* 왼쪽 메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>{mainListItems}</List>\r\n                    \r\n                  \r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper style={{ padding: 16 }}>\r\n                                    <form onSubmit={onSearchSubmitHandler}>\r\n                                        <div className = \"searchMenu\">\r\n                                            계약일자 \r\n                                            &nbsp;\r\n                                            <DatePicker\r\n                                            locale='ko'\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(date)}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            defaultValue={moment(moment().date('01'),'YYYY-MM-DD')}\r\n                                        /> &nbsp;~&nbsp;\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(date)}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            // minDate={startDate}\r\n                                            defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                        />\r\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                        회원명&nbsp;\r\n                                            <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                                value={memberNm} id=\"memberNm\" name=\"memberNm\" onChange={memberNmHandler} />\r\n\r\n                   &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                    사업자번호 &nbsp;\r\n                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                                value={regNo} id=\"regNo\" name=\"regNo\"\r\n                                                onChange={regNoHandler} />\r\n\r\n                   &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                    대표자명 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                                value={name} id=\"name\" name=\"name\"\r\n                                                onChange={nameHandler} />\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    회원구분 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                                multiple={false} onChange={memberTpHandler} value={memberTp}>\r\n                                                {memberType.map((item,index) => (\r\n                                                    <option key={index} value={item.key}>{item.value}</option>\r\n                                                ))}\r\n\r\n                                            </Form.Control>\r\n\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                                            </div>\r\n                                        <div className = \"searchMenu\">\r\n                                            종료 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                                multiple={false} onChange={contractStatusHandler} value={contractStatus}>\r\n                                                {endStatus.map(item => (\r\n                                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                                ))}\r\n\r\n                                            </Form.Control>\r\n\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    상태 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                                multiple={false} onChange={memberStHandler} value={memberSt}>\r\n                                                {memberStatus.map((item,index) => (\r\n                                                    <option key={index} value={item.key}>{item.value}</option>\r\n                                                ))}\r\n\r\n                                            </Form.Control>\r\n\r\n\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                    <Button variant=\"contained\" style={{ width: 80 }} color=\"primary\" onClick={onSearchSubmitHandler}>\r\n                                                조회\r\n                                    </Button>\r\n                                        </div>\r\n                                    </form>\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                            <table className=\"btn\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td colSpan=\"5\" id=\"alignLeft\">\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" onClick={onHandleClickOpen} >\r\n                                                신규회원\r\n                                            </Button>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" onClick={onSNSHandler} >\r\n                                                SNS\r\n                                            </Button>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" onClick={onEmailHandler} >\r\n                                                메일전송\r\n                                            </Button>\r\n                                        </td>\r\n\r\n\r\n                                        <td colSpan=\"5\" id=\"alignRight\">\r\n                                            <Button variant=\"contained\" style={{ width: 140 }} color=\"primary\" onClick={excelHandler}>\r\n                                                엑셀다운로드\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </thead>\r\n                            </table>\r\n\r\n                            {/* 결과 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                        <Title>회원 현황</Title>\r\n                                        <Table size=\"small\">\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell rowSpan=\"2\">No</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">회원명</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">사업자번호</TableCell>\r\n                                                    <TableCell colSpan=\"3\">대표자</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">회원구분</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">상태</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">종료여부</TableCell>\r\n                                                </TableRow>\r\n                                                <TableRow>\r\n                                                    <TableCell>성명</TableCell>\r\n                                                    <TableCell>연락처</TableCell>\r\n                                                    <TableCell>E-mail</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {displayMemSt}\r\n                                            </TableBody>\r\n                                        </Table>\r\n\r\n                                    </React.Fragment>\r\n\r\n                                    <div id=\"reactPage\">\r\n                                        <ReactPaginate\r\n                                            previousLabel={\"Previous\"}\r\n                                            nextLabel={\"Next\"}\r\n                                            pageCount={pageCount}\r\n                                            onPageChange={changePage}\r\n                                            containerClassName={\"paginationBtns\"}\r\n                                            previousLinkClassName={\"previousBtn\"}\r\n                                            nextLinkClassName={\"nextBtn\"}\r\n                                            disabledClassName={\"paginationDisabled\"}\r\n                                            activeClassName={\"paginationActive\"}\r\n                                        />\r\n                                    </div>\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n            {/* 이름클릭 상세보기 */}\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={modalOpen}\r\n                onClose={onHandleDetailClickClose}>\r\n                <S010100050 dataMemId={memberIdModal} dataForm={\"U\"} memberList={memberList} onHandleDetailClickClose={onHandleDetailClickClose} setModalOpen={setModalOpen} setModalOpen={setModalOpen}/>\r\n            </Dialog>\r\n\r\n            {/* 신규등록 */}\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={storeOpen}\r\n                onClose={onHandleClickClose}>\r\n                <S010100010 onHandleClickClose={onHandleClickClose} setStoreOpen={setStoreOpen} memberList={memberList}/>\r\n            </Dialog>\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100040;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100060.js",["276","277","278","279"],"import React, { Fragment, useEffect, useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport S010100070 from './S010100070';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { DatePicker } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport moment from 'moment';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}));\r\n\r\n\r\nlet paymentState = [{ key: '전체', value: '전체' },\r\n{ key: 'Y', value: 'Y' },\r\n{ key: 'N', value: 'N' }]\r\n\r\nfunction S010100060() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const [userName, setUserName] = useState('');\r\n    const [paymentStatus, setPaymentStatus] = useState('');\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    const [startDate, setStartDate] = useState(new Date(moment().date('01')));\r\n    const [endDate, setEndDate] = useState(new Date());\r\n\r\n    const [payStatusList, setPayStatusList] = useState([].slice(0, 5));\r\n    const [storeOpen, setStoreOpen] = useState(false);\r\n    const [dataAllContract, setDataAllContract] = useState('');\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // let startDates = startDate.getFullYear() + '.' + (startDate.getMonth() + 1) + '.' + startDate.getDate();\r\n        // let endDates = endDate.getFullYear() + '.' + (endDate.getMonth() + 1) + '.' + endDate.getDate();\r\n\r\n        let body = {\r\n            startDate: startDate,\r\n            endDate: endDate\r\n        }\r\n\r\n    \r\n        axios.post('/api/s010100060/list', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    // console.log('list60', response.data.rows);\r\n                    setPayStatusList(response.data.rows);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('데이터 조회를 실패하였습니다.')\r\n                }\r\n\r\n            })\r\n    }, [])\r\n\r\n    const paymentSearchHandler = () => {\r\n        // let startDates = startDate.getFullYear() + '.' + (startDate.getMonth() + 1) + '.' + startDate.getDate();\r\n        // let endDates = endDate.getFullYear() + '.' + (endDate.getMonth() + 1) + '.' + endDate.getDate();\r\n\r\n        let body = {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            userName: userName,\r\n            paymentStatus: paymentStatus\r\n        }\r\n\r\n        console.log(body);\r\n        axios.post('/api/s010100060/list', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('list60', response.data.rows);\r\n                    setPayStatusList(response.data.rows);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('데이터 조회를 실패하였습니다.')\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    const nameSearchHandler = (event) => {\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler = (event) => {\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onPayHandleClickClose = useCallback(() => {\r\n        setStoreOpen(false);\r\n        paymentSearchHandler();\r\n    });\r\n\r\n\r\n    const handleToggle = (e) => {\r\n        //console.log('event', e.target.id);\r\n        const currentIndex = checked.indexOf(e.target.id);\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        const newChecked = checked;\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(e.target.id)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n\r\n        setChecked(newChecked);\r\n\r\n        // console.log('currentIndex', currentIndex);\r\n        // console.log('checked', checked);\r\n\r\n    }\r\n\r\n    const onPaymenthandler = () => {\r\n        if (checked.length === 0) {\r\n            alert('선택하세요');\r\n        } else if (checked.length > 1) {\r\n            alert('하나만 체크하세요');\r\n        } else {\r\n            setDataAllContract(checked);\r\n            //console.log(checked);\r\n            setStoreOpen(true);\r\n        }\r\n    }\r\n\r\n    const excelHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(payStatusList);\r\n        console.log(payStatusList);\r\n\r\n        ['회원명', '납부예정일', '납부여부', '납부일자', '계약기간', '계약기간', '대표자 성명', '대표자 연락처', '대표자 E-mail', '계약ID']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][9] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n        xlsx.writeFile(wb, '고객납부현황.xlsx');\r\n\r\n    }\r\n   \r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n\r\n    const displayPayStList = payStatusList.slice(pagesVisited, pagesVisited + usersPerPage).map((payStatusList, index) => {\r\n        return (\r\n            <TableRow key={payStatusList.CONTRACT_ID}>\r\n                <TableCell><input type='checkbox' onChange={handleToggle} id={payStatusList.CONTRACT_ID} /></TableCell>\r\n                <TableCell>{payStatusList.CONTRACT_ID}</TableCell>\r\n                <TableCell>{payStatusList.MEMBER_NM}</TableCell>\r\n                <TableCell>{payStatusList.PAY_PLAN_DATE}</TableCell>\r\n                <TableCell>{payStatusList.PAYED_FLAG}</TableCell>\r\n                <TableCell>{payStatusList.PAYED_DATE}</TableCell>\r\n                <TableCell>{payStatusList.START_DATE} ~ {payStatusList.END_DATE}</TableCell>\r\n                <TableCell>{payStatusList.NAME}</TableCell>\r\n                <TableCell>{payStatusList.EMP_HP}</TableCell>\r\n                <TableCell>{payStatusList.EMP_EMAIL}</TableCell>\r\n            </TableRow>\r\n        )\r\n    });\r\n\r\n\r\n    const pageCount = Math.ceil(payStatusList.length / usersPerPage);\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단파란툴바 */}\r\n                <AppBar position='absolute' className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge='start'\r\n                            color='inherit'\r\n                            aria-label='open drawer'\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component='h1' variant='h6' color='inherit' noWrap className={classes.title}>\r\n                            Dashboard\r\n          </Typography>\r\n                        <IconButton color='inherit'>\r\n                            <Badge badgeContent={4} color='secondary'>\r\n                                <NotificationsIcon />\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/* 왼쪽 메뉴바 */}\r\n                <Drawer\r\n                    variant='permanent'\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>{mainListItems}</List>\r\n                   \r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth='lg' className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <form\r\n                                        onSubmit={onSubmitHandler}\r\n                                    >\r\n\r\n                                        납부예정일&nbsp;\r\n                   \r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(date)}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            defaultValue={moment(moment().date('01'),'YYYY-MM-DD')}\r\n                                        /> &nbsp;~&nbsp;\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(date)}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            minDate={startDate}\r\n                                            defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                        />\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    회원명&nbsp;\r\n\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size='sm' type='text'\r\n                                            value={userName}\r\n                                            id='userName'\r\n                                            name='userName'\r\n                                            onChange={nameSearchHandler} />\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    납부여부&nbsp;\r\n                    \r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size='sm' as='select'\r\n                                            multiple={false} onChange={paymentStatusHandler} value={paymentStatus}>\r\n                                            {paymentState.map(item => (\r\n                                                <option key={item.key} value={item.key}>{item.value}</option>\r\n                                            ))}\r\n\r\n                                        </Form.Control>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <Button variant='contained' style={{ width: 80 }} color='primary' onClick={paymentSearchHandler}>\r\n                                            조회\r\n                    </Button>\r\n\r\n                                    </form>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                            <table className='btn'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td id=\"alignLeft\">\r\n                                            <Button variant='contained' style={{ width: 80 }} color='primary' onClick = {onPaymenthandler}> 납부 </Button>\r\n                                        </td>\r\n                                        <td id=\"alignRight\">\r\n                                            <Button variant='contained' style={{ width: 140 }} color='primary' onClick = {excelHandler} >엑셀다운로드 </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </thead>\r\n                            </table>\r\n\r\n                            {/* 결과 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                        <Title>납부 현황</Title>\r\n                                        <Table size='small'>\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell rowSpan='2'>선택</TableCell>\r\n                                                    <TableCell rowSpan='2'>No</TableCell>\r\n                                                    <TableCell rowSpan='2'>회원명</TableCell>\r\n                                                    <TableCell rowSpan='2'>납부예정일</TableCell>\r\n                                                    <TableCell rowSpan='2'>납부여부</TableCell>\r\n                                                    <TableCell rowSpan='2'>납부일자</TableCell>\r\n                                                    <TableCell rowSpan='2'>계약기간</TableCell>\r\n                                                    <TableCell colSpan='3'>대표자</TableCell>\r\n                                                </TableRow>\r\n                                                <TableRow>\r\n                                                    <TableCell>성명</TableCell>\r\n                                                    <TableCell>연락처</TableCell>\r\n                                                    <TableCell>E-mail</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {displayPayStList}\r\n                                            </TableBody>\r\n                                        </Table>\r\n\r\n                                    </React.Fragment>\r\n                                    <div id='reactPage'>\r\n                                        <ReactPaginate\r\n                                            previousLabel={'Previous'}\r\n                                            nextLabel={'Next'}\r\n                                            pageCount={pageCount}\r\n                                            onPageChange={changePage}\r\n                                            containerClassName={'paginationBtns'}\r\n                                            previousLinkClassName={'previousBtn'}\r\n                                            nextLinkClassName={'nextBtn'}\r\n                                            disabledClassName={'paginationDisabled'}\r\n                                            activeClassName={'paginationActive'}\r\n                                        />\r\n                                    </div>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n\r\n            <Dialog\r\n                maxWidth={'lg'}\r\n                open={storeOpen}\r\n                onClose={onPayHandleClickClose}>\r\n                <S010100070 dataContracId={dataAllContract} onPayHandleClickClose={onPayHandleClickClose}/>\r\n            </Dialog>\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100060;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100130.js",["280","281","282","283","284","285"],"import React, { Fragment, useEffect, useState, useCallback } from 'react';\r\nimport './css/S010100130.css';\r\nimport axios from 'axios';\r\nimport S010100140 from './S010100140';\r\nimport test from './utils/test';\r\n// import 'react-datepicker/dist/react-datepicker.css';\r\n// import 'react-datepicker/dist/react-datepicker-cssmodules.min.css';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport { DatePicker } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport moment from 'moment';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 200,\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n    \r\n}));\r\n<test/>\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\nlet chkSt = '';\r\n\r\nfunction S010100130() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const [mOpen, setMOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    \r\n    const [data] = useState('I');\r\n\r\n    const [numForDetail, setNumForDetail] = useState('');\r\n    const [tb_s10_ask010, setTb_s10_ask010] = useState([].slice(0,10));\r\n    const [ask_tps, setAsk_tps] = useState([{}])\r\n    const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endAsk_date, setEndAsk_date] = useState(new Date());\r\n\r\n    // 문의구분\r\n    const [ask_tp, setAsk_tp] = useState('');\r\n    // 문의자명\r\n    const [ask_name, setAsk_name] = useState('');\r\n    // 삭제\r\n    const [checkForDelete, setCheckForDelete] = useState(true);\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    // 페이징\r\n    const [pageNumber,setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(tb_s10_ask010.length/usersPerPage);\r\n    \r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const searchAsk = () => {\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n        // console.log('startAsk_date',startAsk_date);\r\n        // console.log('endAsk_date',endAsk_date);\r\n\r\n        axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                // console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        searchAsk();\r\n    }, []);\r\n\r\n    // 문의 구분\r\n    useEffect(() => {\r\n        axios.post('/api/s010100130/ask_tp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('Lov-ask_tp',response.data);\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                    setAsk_tps(arr);\r\n\r\n                } else {\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n    \r\n    // 상담등록 모달\r\n    const onHandleClickOpen = () => {\r\n        //console.log('상담열기');\r\n        setStoreOpen(true);\r\n\r\n    };\r\n\r\n    const onHandleClickClose = useCallback(() => {\r\n        setStoreOpen(false);\r\n        searchAsk();\r\n    });\r\n\r\n    // 상세보기 모달\r\n    const onDetailHandleClickOpen = (event) => {\r\n        //console.log('target',event.target.id);\r\n        num = event.target.id;\r\n        rNum = parseInt(num);\r\n        setNumForDetail(rNum);\r\n        setMOpen(true);\r\n    };\r\n\r\n    const onDetailHandleClickClose = useCallback(() => {\r\n        setMOpen(false);\r\n        searchAsk();\r\n\r\n    });\r\n    \r\n\r\n    const handleToggle = (event) => {\r\n\r\n        const currentIndex = checked.indexOf(event.target.id);\r\n        // 전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        const newChecked = checked;\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(event.target.id)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setChecked(newChecked);\r\n\r\n        newChecked.length > 0 ? chkSt = 'check' : chkSt = ''; \r\n        // console.log('chkSt',chkSt);\r\n        // console.log('newChecked.length',newChecked.length);\r\n\r\n    }\r\n\r\n    const onAsk_tpHandler = (event) => {\r\n        setAsk_tp(event.currentTarget.value);\r\n    }\r\n\r\n    const onAsk_nameHandler = (event) => {\r\n        setAsk_name(event.currentTarget.value);\r\n    }\r\n\r\n  \r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = () => {\r\n\r\n        if (checked.length === 0) {\r\n            alert('삭제할 사용자를 선택하세요');\r\n        }  else {\r\n            let askIdArray = checked;\r\n       \r\n            axios.post('/api/s010100130/delete', askIdArray)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                            alert('삭제 하였습니다.');\r\n                            searchAsk();\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert(\"삭제에 실패하였습니다.\")\r\n                    }\r\n                })\r\n            chkSt = '';        \r\n        \r\n            setChecked([]);\r\n            setCheckForDelete(true);\r\n        }\r\n\r\n    }\r\n\r\n    const cancelConfirm = () => alert('삭제를 취소하였습니다.');\r\n\r\n    const onHandleDelete = useConfirm(\r\n        \"삭제하시겠습니까?\",\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n\r\n    // 조회 \r\n    const onHandleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n    \r\n        axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                // console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    const excelHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(tb_s10_ask010);\r\n        console.log(tb_s10_ask010);\r\n\r\n        ['NO', '문의구분', '문의일자', '문의방법', '접근경로', '문의자명', '연락처']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][0] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"상담현황.xlsx\");\r\n\r\n    }\r\n    \r\n    const displayUsers = tb_s10_ask010.slice(pagesVisited,pagesVisited + usersPerPage).map((tb_s10_ask010, index) => {\r\n        return (\r\n            <TableRow key={tb_s10_ask010.ASK_ID}>\r\n                    <TableCell >\r\n                <input  key={tb_s10_ask010.ASK_ID+1} type=\"checkbox\" onChange={handleToggle} id={tb_s10_ask010.ASK_ID} />\r\n                </TableCell>\r\n                <TableCell onClick={onDetailHandleClickOpen} id={tb_s10_ask010.ASK_ID} className='underLineForDetail'>{tb_s10_ask010.ASK_ID}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_TP}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_DATE}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_METHOD}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_NAME}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_INFO}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_PATH}</TableCell>\r\n            </TableRow>\r\n           \r\n        );\r\n    });\r\n   \r\n    return (\r\n        <Fragment>\r\n\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단 파란색 툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                            Dashboard\r\n                        </Typography>\r\n                        <IconButton color=\"inherit\">\r\n                            <Badge badgeContent={4} color=\"secondary\">\r\n                                <NotificationsIcon />\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {/* 왼쪽메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>{mainListItems}</List>\r\n                \r\n                </Drawer>\r\n\r\n\r\n                {/* 메인화면  */}\r\n                <main className={classes.content}>\r\n                    <form onSubmit={onHandleFormSubmit}>\r\n                        <div className={classes.appBarSpacer} />\r\n                        <Container maxWidth=\"lg\" className={classes.container}>\r\n                            <Grid container spacing={3}>\r\n                                {/* Chart */}\r\n                                <Grid item xs={12}>\r\n                                    <Paper style={{ padding: 16 }}>\r\n\r\n                                        <div className=\"gridInline\">\r\n\r\n                                            문의일자\r\n                                            &nbsp;\r\n                                        \r\n                                            <DatePicker\r\n                                                locale=\"ko\"\r\n                                                selected={startAsk_date}\r\n                                                onChange={date => setStartAsk_date(date)}\r\n                                                selectsStart\r\n                                                startDate={startAsk_date}\r\n                                                // endDate={endAsk_date.setHours(9, 0, 0, 0)}\r\n                                                endDate={endAsk_date}\r\n                                                dateFormat=\"yyyy.MM.dd\"\r\n                                                defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                            />\r\n                                          &nbsp;\r\n                                        ~ &nbsp;\r\n                                        <DatePicker\r\n                                                locale=\"ko\"\r\n                                                selected={endAsk_date}\r\n                                                onChange={date => setEndAsk_date(date)}\r\n                                                selectsEnd\r\n                                                startDate={startAsk_date}\r\n                                                endDate={endAsk_date}\r\n                                                minDate={startAsk_date}\r\n                                                defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                            />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                            문의구분\r\n                                            &nbsp;\r\n\r\n                                                                <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onAsk_tpHandler} value={ask_tp}>\r\n                                                                    {ask_tps.map((item,index) => (\r\n                                                                        <option key={index} value={item.key}>{item.value}</option>\r\n                                                                    ))}\r\n\r\n                                                                </Form.Control>\r\n                                                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                                            문의자명\r\n                                            &nbsp;\r\n                                            <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\" type=\"text\" value={ask_name} id=\"ask_name\" name=\"ask_name\" onChange={onAsk_nameHandler} />\r\n                                            &nbsp;\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                                            <Button variant=\"contained\" style={{ width: 80, display: 'inline' }} color=\"primary\" onClick={onHandleFormSubmit}>\r\n                                                조회\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Paper>\r\n                                </Grid>\r\n\r\n                                <table className=\"btn\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <td colSpan=\"5\"id = \"alignLeft\" >\r\n                                                \r\n                                                    <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} onClick={onHandleClickOpen} >\r\n                                                        상담등록\r\n                                                    </Button>\r\n                                                    <Button variant=\"contained\" color=\"primary\"  style={{ width: 100 }} onClick={onHandleDelete}\r\n                                                        value=\"삭제하기\" >\r\n                                                        삭제하기\r\n                                                    </Button>\r\n                                                \r\n                                            </td>\r\n                                            \r\n                                            <td  id=\"alignRight\"><Button variant=\"contained\" style={{ width: 150 }} color=\"primary\" onClick={excelHandler}>엑셀다운로드</Button></td>\r\n                                        </tr>                                \r\n                                    </thead>\r\n                                </table>\r\n\r\n\r\n                                {/*상담현황 테이블 */}\r\n                                <Grid item xs={12}>\r\n                                    <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                            <Title>상담 현황</Title>\r\n                                            <Table size=\"small\">\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                <TableCell>선택</TableCell>\r\n                                                <TableCell>No</TableCell>\r\n                                                <TableCell>문의구분</TableCell>\r\n                                                <TableCell>문의일자</TableCell>\r\n                                                <TableCell>문의방법</TableCell>\r\n                                                <TableCell>문의자명</TableCell>\r\n                                                <TableCell>연락처</TableCell>\r\n                                                <TableCell>접근경로</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                { displayUsers}\r\n                                            </TableBody>\r\n                                            </Table>\r\n                                            <div id = \"reactPage\">\r\n                                                <ReactPaginate\r\n                                                    previousLabel = {\"Previous\"}\r\n                                                    nextLabel = {\"Next\"}\r\n                                                    pageCount = {pageCount}\r\n                                                    onPageChange = {changePage}\r\n                                                    containerClassName={\"paginationBtns\"}\r\n                                                    previousLinkClassName={\"previousBtn\"}\r\n                                                    nextLinkClassName={\"nextBtn\"}\r\n                                                    disabledClassName={\"paginationDisabled\"}\r\n                                                    activeClassName={\"paginationActive\"}   \r\n                                                />\r\n                                            </div>\r\n                                        </React.Fragment>\r\n                                    </Paper>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Container>\r\n                    </form>\r\n                </main>\r\n            </div>\r\n           \r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={mOpen}>\r\n                <S010100140 dataForm={\"U\"} num={numForDetail} searchAsk ={searchAsk} onDetailHandleClickClose={onDetailHandleClickClose} setMOpen={setMOpen}/>\r\n            </Dialog>\r\n                      \r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={storeOpen}>\r\n                <S010100140 dataForm={data} num={numForDetail} searchAsk ={searchAsk} onHandleClickClose={onHandleClickClose} setStoreOpen={setStoreOpen} />\r\n            </Dialog>\r\n           \r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100130;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100050.js",["286","287","288","289","290","291","292","293","294","295","296"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100150.js",["297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313"],"import axios from 'axios';\r\nimport React, { Fragment } from 'react';\r\nimport { useState } from 'react';\r\nimport { useCookies } from 'react-cookie';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Form from 'react-bootstrap/Form';\r\nimport logos from './css/logos.png';\r\nimport S010100151 from './S010100151';\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n\r\n}));\r\n\r\n\r\n\r\nfunction S010100150(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = React.useState(true);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const [email, setEmail] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\")\r\n\r\n\r\n  const onEmailHandler = (event) => {\r\n    setEmail(event.currentTarget.value)\r\n  }\r\n\r\n  const onPasswordHandler = (event) => {\r\n    setPassword(event.currentTarget.value)\r\n  }\r\n\r\n  \r\n  const useConfirm = (message = null, onConfirm, onCancel) => {\r\n    if (!onConfirm || typeof onConfirm !== \"function\") {\r\n        return;\r\n    }\r\n    if (onCancel && typeof onCancel !== \"function\") {\r\n        return;\r\n    }\r\n\r\n    const confirmAction = () => {\r\n        if (window.confirm(message)) {\r\n            onConfirm();\r\n        } else {\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    return confirmAction;\r\n};\r\n\r\nconst approvalConfirm = () => {\r\n\r\n  axios.post('/api/s010100150/userLogout')\r\n  .then(response => {\r\n    if (response.data.logoutResult == true) {\r\n      alert('로그아웃 하였습니다.');\r\n      sessionStorage.removeItem('member');\r\n      sessionStorage.clear();\r\n      props.history.push('/');\r\n    }else if(response.data.loginResult == false){\r\n      alert(response.data.message);\r\n      alert('아이디 또는 비밀번호를 확인하세요.');\r\n    }\r\n  })\r\n\r\n}\r\n\r\nconst cancelConfirm = () => alert('삭제를 취소하였습니다.');\r\n\r\nconst onLogoutHandler = useConfirm(\r\n    \"로그아웃 하시겠습니까?\",\r\n    approvalConfirm,\r\n    cancelConfirm\r\n);\r\n\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    let body = {\r\n      email: email,\r\n      password: password\r\n    }\r\n\r\n    axios.post('/api/s010100150/userLogin', body)\r\n      .then(response => {\r\n        if (response.data.loginResult == true) {\r\n          alert('로그인 되었습니다.');\r\n          let arr = [response.data.cf,response.data.mI];\r\n          // console.log('response.data.cf',response.data.cf);\r\n          sessionStorage.setItem('member',JSON.stringify(arr));\r\n          props.history.push('/member');\r\n          // console.log(sessionStorage.getItem('member'));\r\n       \r\n        }else if(response.data.loginResult == false){\r\n          alert(response.data.message);\r\n          alert('가입되어 있지 않은 사용자 입니다.');\r\n        }\r\n      })\r\n  }\r\n\r\n  return (\r\n\r\n    <div className={classes.root}>\r\n      {/* 백그라운드 */}\r\n      <CssBaseline />\r\n      {/* 상단파란툴바 */}\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n            Dashboard\r\n        </Typography>\r\n          <IconButton color=\"inherit\">\r\n            <Badge badgeContent={4} color=\"secondary\">\r\n              <NotificationsIcon />\r\n            </Badge>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* 왼쪽 메뉴바 */}\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>{mainListItems}</List>\r\n      \r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n              <CssBaseline />\r\n              <div className={classes.paper}>\r\n              <img  src={logos} width=\"true\"></img>\r\n\r\n                <div hidden ={sessionStorage.getItem('member') != null}>\r\n                  <Typography component=\"h1\" variant=\"h5\">\r\n                    로그인\r\n                  </Typography>\r\n                </div>\r\n                <div hidden ={sessionStorage.getItem('member') === null} style={{marginTop:'5px'}}>\r\n                  <Typography component=\"h1\" variant=\"h5\">\r\n                    로그아웃\r\n                  </Typography>\r\n                </div>\r\n                <form onSubmit={onSubmitHandler} >\r\n                  <div hidden ={sessionStorage.getItem('member') != null}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      margin=\"normal\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"이메일을 입력하세요\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      autoFocus\r\n                      value={email}\r\n                      onChange={onEmailHandler}\r\n                    />\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      margin=\"normal\"\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"비밀번호를 입력하세요\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                      value={password}\r\n                      onChange={onPasswordHandler}\r\n                    />\r\n                  </div>\r\n                  <div hidden ={sessionStorage.getItem('member') != null}> \r\n                    <Button type=\"submit\"\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.submit}\r\n                    > 로그인 </Button>\r\n                  </div>\r\n                  \r\n                  <div hidden ={sessionStorage.getItem('member') === null}>\r\n                    <Button onClick = {onLogoutHandler}\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.submit}\r\n                    > 로그아웃 </Button>\r\n                  </div>\r\n                  <Grid container>\r\n                    <Grid item>\r\n                      <Link href=\"/findemailPwd\" variant=\"body2\">\r\n                        아이디 / 비밀번호찾기\r\n                      </Link>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n\r\n         \r\n                </form>\r\n              </div>\r\n\r\n            </Container>\r\n\r\n          </Grid>\r\n         \r\n        </Container>\r\n      </main>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default S010100150;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100140.js",["314","315","316"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './css/S010100140.css';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko'\r\nregisterLocale(\"ko\", ko);\r\n\r\n\r\n\r\n\r\nfunction S010100140(props) {\r\n\r\n    const rNum = props.num;\r\n    // console.log('rNum',rNum);\r\n    // 상세보기\r\n    useEffect(() => {\r\n      \r\n        if (props.dataForm === 'U') {\r\n\r\n            axios.get(`/api/s010100140/tb_s10_ask010_by_id?id=${rNum}&type=single`)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        // console.log(response.data)\r\n                        const askTp = (response.data.rows[0].ASK_TP);\r\n                        const askDate = (response.data.rows[0].ASK_DATE);\r\n                        const askMethod = (response.data.rows[0].ASK_METHOD);\r\n                        const askName = (response.data.rows[0].ASK_NAME);\r\n                        const askPath = (response.data.rows[0].ASK_PATH);\r\n                        const askInfo = (response.data.rows[0].ASK_INFO);\r\n                        const askContent = (response.data.rows[0].ASK_CONTENT);\r\n    \r\n                        setModalAskTp(askTp);\r\n                        setModalAskName(askName);\r\n                        setModalAskMethod(askMethod);\r\n                        setModalAskPath(askPath);\r\n                        setModalAskInfo(askInfo);\r\n                        setModalAskContent(askContent);\r\n                        setStartDate(new Date(askDate));\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                    }\r\n                })\r\n        }\r\n\r\n    }, [])\r\n\r\n    //select-option\r\n    const [modalAskTp, setModalAskTp] = useState('')\r\n    const [modalAskMethod, setModalAskMethod] = useState('')\r\n    const [modalAskPath, setModalAskPath] = useState('')\r\n\r\n    const [modalContractTpLov, setModalContractTpLov] = useState([{ key: '', value: '선택' }])\r\n    const [modalAskMethodLov, setModalAskMethodLov] = useState([{ key: '', value: '선택' }])\r\n    const [modalAccessPathLov, setModalAccessPathLov] = useState([{ key: '', value: '선택' }])\r\n\r\n    useEffect(() => {\r\n        getContractTpLov();\r\n        getAskMethodLov();\r\n        getAccessPathLov();\r\n    }, []);\r\n\r\n    const getContractTpLov = () => {\r\n        getLovByCdTp('CONTRACT_TP', 'ASK');\r\n    };\r\n    const getAskMethodLov = () => {\r\n        getLovByCdTp('ASK_METHOD', '');\r\n    };\r\n    const getAccessPathLov = () => {\r\n        getLovByCdTp('ACCESS_PATH', 'ASK');\r\n    };\r\n\r\n    /**\r\n     * desc : LOV에 필요한 항목을 받아 DB조회 후 조회값을 반환하는 로직\r\n     * */\r\n\r\n    async function getLovByCdTp(cdTp, attribute2) {\r\n        let arr = [{ key: '선택', value: '선택' }];\r\n        return await axios.post('/api/s010100140/selectTest', { firstVal: cdTp, secondVal: attribute2 })\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('modalAskTp',response.data.rows);\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n                        }));\r\n                    //return arr;\r\n                    switch (cdTp) {\r\n                        case 'CONTRACT_TP': setModalContractTpLov(arr); break;\r\n                        case 'ASK_METHOD': setModalAskMethodLov(arr); break;\r\n                        case 'ACCESS_PATH': setModalAccessPathLov(arr); break;\r\n                    }\r\n                    if (cdTp === 'CONTRACT_TP')\r\n                        setModalAccessPathLov(arr);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\")\r\n                }\r\n            }).catch(() => {\r\n               \r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n            })\r\n        // return arr;\r\n        // console.log('arr', arr);\r\n    }\r\n\r\n    const [startDate, setStartDate] = useState(new Date());\r\n  \r\n    const [modalAskName, setModalAskName] = useState(\"\")\r\n    const [modalAskInfo, setModalAskInfo] = useState(\"\")\r\n    const [modalAskContent, setModalAskContent] = useState(\"\")\r\n\r\n\r\n    const onAskTpHandler = (event) => {\r\n        setModalAskTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskMethodHandler = (event) => {\r\n        setModalAskMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskPathHandler = (event) => {\r\n        setModalAskPath(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskNameHandler = (event) => {\r\n        setModalAskName(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskInfoHandler = (event) => {\r\n        setModalAskInfo(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskContentHandler = (event) => {\r\n        setModalAskContent(event.currentTarget.value);\r\n    }\r\n    \r\n\r\n\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = () => {\r\n\r\n        const body = {\r\n            modalAskId: rNum,\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: startDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n\r\n        axios.post('/api/s010100140/modify', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('정상적으로 수정되었습니다.');\r\n                    props.setMOpen(false);\r\n                    props.searchAsk();\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('수정에 실패하였습니다.')\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    const cancelConfirm = () => alert('수정을 취소하였습니다.');\r\n\r\n    const onModifyHandler = useConfirm(\r\n        modalAskName+'님의 정보를 수정하시겠습니까?',\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n\r\n\r\n    // 상담 등록 저장 버튼 클릭시\r\n    const onHandleSubmit = (event) => {\r\n        event.preventDefault();\r\n        //   //문의구분 NUll체크\r\n        if (!modalAskTp || modalAskTp === '선택') {\r\n            return alert(\"문의구분을 선택하세요.\");\r\n        }\r\n\r\n        //문의방법 NUll체크\r\n        if (!modalAskMethod) {\r\n           \r\n            return alert(\"문의방법을 선택하세요.\");\r\n        }\r\n\r\n        //접근경로 NUll체크\r\n        if (!modalAskPath) {\r\n            return alert(\"접근경로를 선택하세요.\");\r\n        }\r\n\r\n        const body = {\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: startDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n\r\n        axios.post('/api/s010100140/insert', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('정상적으로 등록되었습니다.');\r\n                    props.setStoreOpen(false);\r\n                    props.searchAsk();\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('등록에 실패하였습니다.')\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={onHandleSubmit} >\r\n        \r\n            <div className=\"askInfoWrapper\">\r\n                <div className=\"memberInfoWrap\">\r\n                    {/* 회원정보란 */}\r\n                    <h5 id=\"infoTitle\">상담 등록</h5>\r\n\r\n                    <table id=\"memberDetailTable\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>문의구분</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onAskTpHandler} value={modalAskTp}>\r\n                                        {modalContractTpLov.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                <th>문의일자</th>\r\n                                <td>\r\n                                \r\n                                    <DatePicker\r\n                                        id=\"dateSize\"\r\n                                        locale=\"ko\"\r\n                                        selected={startDate.setHours(9, 0, 0, 0)}\r\n                                        onChange={date => setStartDate(date)}\r\n                                        dateFormat=\"yyyy-MM-dd (eee)\"\r\n                                    />\r\n\r\n                                </td>\r\n\r\n                                <th>문의자명</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        value={modalAskName}\r\n                                        id=\"modalAskName\"\r\n                                        name=\"modalAskName\"\r\n                                        onChange={onAskNameHandler} />\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>문의방법</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} value={modalAskMethod} onChange={onAskMethodHandler}>\r\n                                        {modalAskMethodLov.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                <th>접근경로</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} value={modalAskPath} onChange={onAskPathHandler}>\r\n                                        {modalAccessPathLov.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                <th>문의자연락처</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={modalAskInfo} id=\"modalAskInfo\" name=\"modalAskInfo\" onChange={onAskInfoHandler} />\r\n                                </td>\r\n                            </tr>\r\n\r\n\r\n                            <tr>\r\n                                <th>상담내용</th>\r\n\r\n                                <td colSpan=\"5\">\r\n                                    <Form.Control as=\"textarea\" rows={3} value={modalAskContent} id=\"modalAskContent\" name=\"modalAskContent\"\r\n                                        onChange={onAskContentHandler} />\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div id=\"btnAlign\">\r\n                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"popBtn\" onClick={onModifyHandler} hidden={props.dataForm !== 'U'} >수정하기</Button>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"popBtn\" type=\"submit\" hidden={props.dataForm === 'U'} >등록하기</Button>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"popBtn\" hidden={props.dataForm !== 'U'} onClick={props.onDetailHandleClickClose}>닫기</Button>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"popBtn\" hidden={props.dataForm === 'U'} onClick={props.onHandleClickClose}>닫기</Button>\r\n            </div>\r\n        </form>\r\n\r\n    );\r\n}\r\nexport default S010100140;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Pagination.js",["317"],"import React from 'react';\r\n\r\nconst Pagination = ({postsPerPage,totalPosts,paginate}) =>{\r\n    const pageNumbers = [];\r\n\r\n    for(let i = 1;i <= Math.ceil(totalPosts/postsPerPage);i++){\r\n        pageNumbers.push(i);\r\n\r\n    }\r\n    return(\r\n        <nav id = \"pageCenter\">\r\n            <ul className = \"pagination\" style = {{ margin:0, padding:0}} >\r\n                {pageNumbers.map(number =>(\r\n                    <li key = {number} className = \"pageItem\" style = {{float:\"left\",  margin:0, padding:0}}>\r\n                        <a onClick={()=>paginate(number)} className = \"pageLink\">\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Pagination;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100070.js",["318","319","320","321","322","323","324","325","326","327"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './css/S010100070.css';\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport Pagination from './utils/Pagination';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\n\r\nimport DatePicker, { registerLocale } from 'react-datepicker';\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 200,\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n\r\n    toolbar: {\r\n        paddingRight: 24, \r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n \r\n}));\r\n\r\n\r\n\r\n\r\nfunction S010100070(props) {\r\n\r\n    const [paymentMemberNm, setPaymentMemberNm] = useState('');\r\n    const [paymentPeriod, setPaymentPeriod] = useState('');\r\n    const [paymentCeoNm, setPaymentCeoNm] = useState('');\r\n    const [paymentEmpHp, setPaymentEmpHp] = useState('');\r\n    const [paymentEmpEmail, setPaymentEmpEmail] = useState('');\r\n    const [paymentEmpComment, setPaymentEmpComment] = useState('');\r\n    const [paymentStatusList, setPaymentStatusList] = useState([]);\r\n    const [payMethod, setPayMethod] = useState('');\r\n    // 페이징\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage, setPostsPerPage] = useState(12);\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n\r\n    const [checked, setChecked] = useState([]);\r\n    const [sequenceChk, setSequenceChk] = useState('');\r\n    const [checkStatusChk, setCheckStatusChk] = useState('');\r\n\r\n    const [pageNumber,setPageNumber] = useState(0);\r\n    const usersPerPage = 12;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(paymentStatusList/usersPerPage);\r\n        \r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const paymentMemberNmHandler = (event) => {\r\n        setPaymentMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentPeriodHandler = (event) => {\r\n        setPaymentPeriod(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentCeoNmHandler = (event) => {\r\n        setPaymentCeoNm(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentEmpHpHandler = (event) => {\r\n        setPaymentEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentEmpEmailHandler = (event) => {\r\n        setPaymentEmpEmail(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentEmpCommentHandler = (event) => {\r\n        setPaymentEmpComment(event.currentTarget.value);\r\n    }\r\n\r\n    const payMethodHandler = (event) => {\r\n        setPayMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStList = () => {\r\n        axios.get(`/api/s010100070/insert/tb_s10_contract020_by_id?id=${dataContracId}`)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //초기값 세팅\r\n                    response.data.rows.map((row) => {\r\n                        if (row.PAYED_DATE === null || row.PAYED_DATE === undefined) row.PAYED_DATE = makeYYMMDD(new Date());\r\n                        if (row.CONTRACT_COMMENT === null || row.CONTRACT_COMMENT === undefined) row.CONTRACT_COMMENT = '';\r\n                        // console.log('row', row);\r\n                    })\r\n\r\n\r\n                    setPaymentStatusList(response.data.rows);\r\n                    setPaymentMemberNm(response.data.rows[0].MEMBER_NM);\r\n                    setPaymentPeriod(response.data.rows[0].CONTRACT_TERM + '개월 ' +\r\n                        '(' + response.data.rows[0].START_DATE + ' ~ ' + response.data.rows[0].END_DATE + ')');\r\n                    setPaymentCeoNm(response.data.rows[0].NAME);\r\n                    setPaymentEmpHp(response.data.rows[0].EMP_HP);\r\n                    setPaymentEmpEmail(response.data.rows[0].EMP_EMAIL);\r\n                    setPaymentEmpComment(response.data.rows[0].COMMENT);\r\n                    setPayMethodM(response.data.rows[0].PAY_METHOD);\r\n                    setPayMethod(response.data.rows[0].PAY_METHOD_M);\r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"데이터 조회를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        paymentStList();\r\n    }, [])\r\n\r\n    let newChecked;\r\n\r\n    const toggleHandler = (event) => {\r\n\r\n\r\n            const currentIndex = checked.indexOf(event.target.id);\r\n            // const currentIndex = checked.findIndex((items,idx) => \r\n            // {return items.PAY_PLAN_DATE !== event.target.id});\r\n            //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n            // console.log('event.target.id[0]',event.target.id);\r\n            // console.log('event.target.className',event.target.className[0]);\r\n            newChecked = checked;\r\n           \r\n            if (currentIndex === -1) {\r\n                newChecked.push(event.target.id)\r\n            } else {\r\n                newChecked.splice(currentIndex, 1)\r\n            }\r\n            setChecked(newChecked);\r\n            // console.log('Checked',checked);\r\n      \r\n    }\r\n\r\n    const snsBtnHandler = (event) => {\r\n\r\n    }\r\n    const emailBtnHandler = (event) => {\r\n\r\n    }\r\n \r\n    const excelBtnHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(paymentStatusList);\r\n\r\n        ['대표자', '연락처', 'E-mail', '회원명', '계약상태', '계약기간', '계약기간', '납부일자', '특약사항', '계약기간(개월)', '납부예정일', 'contract_id', '납부여부', '비고']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][11] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"고객납부등록.xlsx\");\r\n    }\r\n\r\n\r\n    let dataContracId = props.dataContracId;\r\n\r\n    const makeYYMMDD = (value) => {\r\n        let year = (value.getFullYear() + '').substring(2);\r\n        // console.log('year',year);\r\n        let month = value.getMonth() + 1;\r\n        let date = value.getDate();\r\n        month = month < 10 ? '0' + month : month;\r\n        date = date < 10 ? '0' + date : date;\r\n        return year + '-' + month + '-' + date;\r\n    }\r\n\r\n\r\n    const displayUsers = paymentStatusList.slice(pagesVisited,pagesVisited + usersPerPage).map((paymentStatus, index) => {\r\n        let insertPayDate = paymentStatus.PAYED_DATE\r\n            ? new Date('20' + paymentStatus.PAYED_DATE)\r\n            : new Date();\r\n\r\n        return (\r\n            <TableRow key={index}>\r\n                <TableCell>\r\n                    <input type=\"checkbox\" onChange={toggleHandler} id={paymentStatus.PAY_PLAN_DATE + ',' + paymentStatus.PAYED_DATE + ',' + paymentStatus.CONTRACT_COMMENT} />\r\n                </TableCell>\r\n                <TableCell id={paymentStatus.CONTRACT_ID}>{paymentStatus.CONTRACT_ID}</TableCell>\r\n                <TableCell>{paymentStatus.PAY_PLAN_DATE}</TableCell>\r\n                <TableCell>{paymentStatus.PAYED_FLAG}</TableCell>\r\n                <TableCell>\r\n                    {/* api보고 바뀐 이벤트 값 들고오는거 찾아서 했어요 */}\r\n                    <DatePicker\r\n                        className =\"dateSize\"\r\n                        id={paymentStatus.PAY_PLAN_DATE}\r\n                        locale=\"ko\"\r\n                        selected={insertPayDate.setHours(9, 0, 0, 0)}\r\n                        onChange={\r\n                            date => {\r\n                                setPaymentStatusList(\r\n                                    paymentStatusList.map(changePaymentStatus =>\r\n                                        changePaymentStatus.PAY_PLAN_DATE === paymentStatus.PAY_PLAN_DATE ?\r\n                                            { ...changePaymentStatus, PAYED_DATE: makeYYMMDD(date) }\r\n                                            : changePaymentStatus\r\n                                    ))\r\n\r\n                                    setSequenceChk('dateChecked');\r\n                            }\r\n                        }\r\n                        selectsStart\r\n                        startDate={insertPayDate}\r\n                        dateFormat=\"yyyy.MM.dd (eee)\"\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <Form.Control as=\"textarea\" cols=\"20\" rows=\"2\"\r\n                        value={paymentStatus.CONTRACT_COMMENT}\r\n                        size=\"5\"\r\n                        id={paymentStatus.PAY_PLAN_DATE}\r\n                        onChange={(e) => {\r\n                            setPaymentStatusList(\r\n                                paymentStatusList.map((changePaymentStatus, chIndex) =>\r\n                                    chIndex === index ?\r\n                                        { ...changePaymentStatus, CONTRACT_COMMENT: e.target.value }\r\n                                        : changePaymentStatus\r\n                                ))\r\n                        }\r\n                        }\r\n                    />\r\n                </TableCell>\r\n            </TableRow>\r\n        )\r\n    });\r\n\r\n    const payCancelBtnHandler = (event) => {\r\n        let modalContractId = props.dataContracId;\r\n        let modalPayPlanDate = checked;\r\n        // console.log(checked);\r\n        // console.log('modalContractId', modalContractId);\r\n\r\n        if(checked.length > 0){\r\n            let body = {\r\n                modalContractId: modalContractId,\r\n                modalPayPlanDate: modalPayPlanDate,\r\n                payMethodM: payMethodM,\r\n                newChecked: newChecked,\r\n                checked: checked\r\n            }\r\n    \r\n            axios.post('/api/s010100070/paymentCancel', body)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        alert('취소처리되었습니다.');\r\n                        paymentStList();\r\n                        setSequenceChk('');\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert('취소처리를 실패하였습니다.');\r\n                    }\r\n                })\r\n            // paymentStList();\r\n        }else if(checked.length === 0){\r\n            alert('선택하세요');\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = () => {\r\n\r\n        let modalContractId = props.dataContracId;\r\n        let modalPayPlanDate = checked;\r\n        // console.log(checked);\r\n        // console.log('modalContractId', modalContractId);\r\n    if(checked.length > 0){\r\n        let body = {\r\n            modalContractId: modalContractId,\r\n            modalPayPlanDate: modalPayPlanDate,\r\n            payMethodM: payMethodM,\r\n            newChecked: newChecked,\r\n            checked: checked\r\n        }\r\n        // console.log('newChecked', body);\r\n\r\n        axios.post('/api/s010100070/paymentUpdate', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('납부처리되었습니다.');\r\n                    paymentStList();\r\n                    setSequenceChk('');\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('납부처리를 실패하였습니다.');\r\n                }\r\n            })\r\n        // paymentStList();\r\n    }else if(checked.length === 0){\r\n        alert('선택하세요');\r\n    }\r\n    \r\n\r\n    }\r\n\r\n    const cancelConfirm = () => alert('납부처리를 취소하였습니다.');\r\n\r\n    const payBtnHandler = useConfirm(\r\n        \r\n        paymentMemberNm+'('+ paymentCeoNm+')님의 계약건을 납부처리 하시겠습니까?',\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n    // const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    // const currentPosts = s010100070R.slice(indexOfFirstPost, indexOfLastPost);\r\n    // const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    const [payMethodM, setPayMethodM] = useState('');\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n\r\n            <form style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                width: '100%'\r\n            }}>\r\n\r\n                <div className=\"memberInfoWrapper\">\r\n                    <div className=\"memberInfoWrap\">\r\n                        <h5 id=\"infoTitle\">고객 납부 등록</h5>\r\n                        <table id=\"memberDetailTable\">\r\n                            <tbody>\r\n                            <tr>\r\n                                <th>회원명</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 12 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={paymentMemberNm} id=\"memberNm\" name=\"memberNm\"\r\n                                        onChange={paymentMemberNmHandler} />\r\n\r\n                                </td>\r\n                                <th>계약기간</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 15 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={paymentPeriod} id=\"paymentPeriod\" name=\"paymentPeriod\"\r\n                                        onChange={paymentPeriodHandler} />\r\n\r\n                                </td>\r\n                                <th>납부방법</th>\r\n                                <td >\r\n\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={payMethod} id=\"payMethod\" name=\"payMethod\"\r\n                                        onChange={payMethodHandler} />\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th> 대표자</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={paymentCeoNm} id=\"name\" name=\"name\"\r\n                                        onChange={paymentCeoNmHandler} />\r\n\r\n                                </td>\r\n                                <th>연락처</th>\r\n                                <td>\r\n                                    \r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={paymentEmpHp} id=\"ceoHp\" name=\"ceoHp\"\r\n                                        onChange={paymentEmpHpHandler} />\r\n\r\n                                </td>\r\n                                <th>메일주소</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 14 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={paymentEmpEmail} id=\"eAddr\" name=\"eAddr\"\r\n                                        onChange={paymentEmpEmailHandler} />\r\n\r\n                                </td>\r\n\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>특약사항</th>\r\n                                <td colSpan=\"5\">\r\n\r\n                                    <Form.Control as=\"textarea\" rows={3} value={paymentEmpComment} id=\"comment\"\r\n                                        name=\"comment\"\r\n                                        onChange={paymentEmpCommentHandler} />\r\n                                  \r\n                                </td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n\r\n                        <React.Fragment >\r\n                            <Table size=\"small\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>선택</TableCell>\r\n                                        <TableCell>No</TableCell>\r\n                                        <TableCell>납부예정일</TableCell>\r\n                                        <TableCell>납부여부</TableCell>\r\n                                        <TableCell>납부일자</TableCell>\r\n                                        <TableCell>비     고</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                { displayUsers}\r\n                                </TableBody>\r\n                            </Table>\r\n                            \r\n                        </React.Fragment>\r\n                        <div className=\"pageCenter\">\r\n                        <div id = \"reactPage\">\r\n                                                <ReactPaginate\r\n                                                    previousLabel = {\"Previous\"}\r\n                                                    nextLabel = {\"Next\"}\r\n                                                    pageCount = {pageCount}\r\n                                                    onPageChange = {changePage}\r\n                                                    containerClassName={\"paginationBtns\"}\r\n                                                    previousLinkClassName={\"previousBtn\"}\r\n                                                    nextLinkClassName={\"nextBtn\"}\r\n                                                    disabledClassName={\"paginationDisabled\"}\r\n                                                    activeClassName={\"paginationActive\"}   \r\n                                                />\r\n                                            </div>\r\n                        </div>\r\n                        <div id=\"btnAlign\">\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }}\r\n                                onClick={payBtnHandler}  >납부</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }}\r\n                            onClick={payCancelBtnHandler}>취소</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 110 }} className=\"new\"\r\n                                onClick={snsBtnHandler}  >SNS 전송</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"memberId\"\r\n                                onClick={emailBtnHandler} >메일 전송</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 130 }} className=\"contractId\"\r\n                                onClick={excelBtnHandler} >엑셀다운로드</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 110 }} id=\"btnWidth\">계산서발행</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} className=\"contractId\"\r\n                                onClick={props.onPayHandleClickClose} >닫기</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </form>\r\n        </Fragment>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default S010100070;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\LeaseAgreement.js",["328","329"],"import React,{Fragment, useState, useEffect}from 'react';\r\nimport axios from 'axios';\r\nimport './utilsCss/LeaseAgreement.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction LeaseAgreement (props){\r\n\r\n    // 계약시작년도,월,일\r\n    const [startYear,setStartYear] = useState('');\r\n    const [startMonth,setStartMonth] = useState('');\r\n    const [startDay,setStartDay] = useState('');\r\n    \r\n    // 계약종료년도,월,일\r\n    const [endYear,setEndYear] = useState('');\r\n    const [endMonth,setEndMonth] = useState('');\r\n    const [endDay,setEndDay] = useState('');\r\n\r\n    const [contractMoney,setContractMoney] = useState('');\r\n    const [roomLockerTp,setRoomLockerTp] = useState('');\r\n    const [contractPayDate,setContractPayDate] = useState('');\r\n    const [vatMoney, setVatMoney] = useState(0);\r\n\r\n    const [companyName,setCompanyName] = useState('');\r\n    const [ceoName,setCeoName] = useState('');\r\n    const [bLicenseNum,setBLicenseNum] = useState('');\r\n    const [companyAddr,setCompanyAddr] = useState('');\r\n    const [ceoTel,setCeoTel] = useState('');\r\n\r\n    const  numberWithCommas = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n    \r\n    const onPrintHandler = (event) => {\r\n        window.print();\r\n    }\r\n\r\n    useEffect(() => {\r\n      const rNum = props.dataNum;\r\n      axios.get(`/api/memStList/tb_s10_contract010_by_id?id=${rNum}&type=single`)\r\n          .then(response => {\r\n              if (response.data.success) {\r\n\r\n                const modalCContractDate = response.data.rows[0].CONTRACT_DATE;\r\n                const modalCContractMoney = numberWithCommas(response.data.rows[0].PAYED_PLAN_MONEY);\r\n                const contractMoney =response.data.rows[0].PAYED_PLAN_MONEY;\r\n               \r\n                const modalCContractTpValM = response.data.rows[0].CONTRACT_ROOM_M;\r\n                const modalCPayDate = response.data.rows[0].PAY_DATE;\r\n\r\n                //VAT(10%)적용한 modalCContractMoney 값\r\n                let VatMoney = numberWithCommas(contractMoney*(10/100));\r\n               \r\n                const modalCStartDate = response.data.rows[0].START_DATE;\r\n                const modalCEndDate = response.data.rows[0].END_DATE;\r\n                \r\n                let wasteStartYear = modalCStartDate.substring(0, 4);\r\n                let wasteStartMonth = modalCStartDate.substring(5, 7);\r\n                let wasteStartDay = modalCStartDate.substring(8, 10);\r\n\r\n                let wasteEndYear = modalCEndDate.substring(0, 2);\r\n                let wasteEndMonth = modalCEndDate.substring(3, 5);\r\n                let wasteEndDay = modalCEndDate.substring(6, 8);\r\n\r\n                const modalCMemberNm = response.data.rows[0].MEMBER_NM;\r\n                const modalCRegNo = response.data.rows[0].REG_NO;\r\n                const modalCName = response.data.rows[0].NAME;\r\n                const modalCEmpHp = response.data.rows[0].EMP_HP;\r\n            \r\n                const modalCZipCode = response.data.rows[0].ZIP_CODE;\r\n                const modalCAddress = response.data.rows[0].ADDRESS;\r\n                const modalCDetailAddress = response.data.rows[0].DETAIL_ADDRESS;\r\n                \r\n                \r\n                setStartYear(wasteStartYear);\r\n                setStartMonth(wasteStartMonth);\r\n                setStartDay(wasteStartDay);\r\n\r\n                setEndYear(wasteEndYear);\r\n                setEndMonth(wasteEndMonth);\r\n                setEndDay(wasteEndDay);\r\n\r\n                setContractMoney(modalCContractMoney);\r\n                setVatMoney(VatMoney);\r\n                setRoomLockerTp(modalCContractTpValM);\r\n                setContractPayDate(modalCPayDate);\r\n\r\n                setCompanyName(modalCMemberNm);\r\n                setCeoName(modalCName);\r\n\r\n                setBLicenseNum(modalCRegNo);\r\n                setCompanyAddr(modalCZipCode + ' ' + modalCAddress + ' ' + modalCDetailAddress);\r\n                setCeoTel(modalCEmpHp);\r\n\r\n              } else {\r\n                  alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n              }\r\n          })\r\n        }, [])\r\n\r\n        // 현재날짜 출력\r\n        let today = new Date();\r\n        let dd = today.getDate();\r\n        let mm = today.getMonth()+1; \r\n        let yyyy = today.getFullYear();\r\n\r\n        if(dd<10) {\r\n            dd='0'+dd\r\n        } \r\n\r\n        if(mm<10) {\r\n            mm='0'+mm\r\n        } \r\n\r\n    return(\r\n                        <Fragment>\r\n                        <div className = \"agreementWrapper\">\r\n                        <h1> 임 대 차 계 약 서 </h1>\r\n                        <br/>\r\n                            <div className = \"paragraph\">\r\n                            <h3> 갑 : ㈜에스원테크   최현수</h3>\t\t\t\t\t\t\t\t\r\n                            <h3> 을 : {companyName}\t{ceoName}\t</h3>\t\t\t\t\t\t\t\r\n                            </div>     \r\n\r\n                            <div className = \"paragraph\">                                \r\n                                위 '갑'과 '을'은  {yyyy}년 {mm}월 {dd}일 다음과 같이 회원 가입을 체결 한다.\t\t\t\t\t\t\t\t\t\r\n                            </div>   \r\n\r\n                            <div className = \"paragraph\">\r\n                                <h3>1. 본 계약의 목적</h3>                        \t\t\t\t\t\t\t\t\r\n                                    본 계약은 '갑'이 '을'에게 '갑'의 사무실 및 부대시설을 사용 할 수 있는 권리를 허용함과 동시에 '을'이\t\t\t\t\t\t\t\t\t\r\n                                    필요로하는 서비스를 제공함에 있어서 '갑-을'간의 권리의무에 관한 사항을 정하기 위한 목적에서 체결 한다.\t\t\t\t\t\t\t\t\t\r\n                            </div> \r\n\r\n                            <div className = \"paragraph\">                                   \r\n                            <h3>2. 을의 권리의 책임</h3>\r\n                                    <ul>\t\t\t\t\t\t\t\t\r\n                                        <li>\r\n                                            1) '갑'은 '을'에게 제2항 및 제3항에 규정된 바와 같이 '갑'의 사무실 및 기타 부대시설을 사용할 수 있는\t\t\t\t\t\t\t\t\t\r\n                                                권리를 부여한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            2) '을'이 사용 할 수 있는 사무실의 내역은 다음과 같다.<br/>\t\t\t\t\t\t\t\t\r\n                                            &emsp;&nbsp;대상 : 서울시 강남구 봉은사로63길 11, 3,4층      {roomLockerTp}(삼성동,명화빌딩)<br/>\t\t\t\t\t\t\t\t\t\r\n                                            &emsp;&nbsp;용도 : 업무용<br/>\t\t\t\t\t\t\t\t\t\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;월회비  :         {contractMoney}원<br/>\t\t\t\t\t\t\t\t\t\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VAT     :         {vatMoney}원<br/>\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            3) '을'은 상기한 제3항의 사무실 제공과 동시에 부대시설 (회의실, 접견실, 휴게실, OA기기)을 '갑'이\t\t\t\t\t\t\t\t\t\r\n                                            정한 원칙에 의거하여 사용할 수 있다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            4) '을'은 사무실과 부대시설을 사용함에 있어서 선량한 관리자의 주의 의무를 다해야 하며, 사무실과\t\t\t\t\t\t\t\t\t\r\n                                            부대시설에 야기된 제반 손상이나 훼손에 대하여 자신의 비용으로 이를 처리해야 한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            5) '을'은 건물주 및 '갑'의 이해관계인에게 손해 등 문제가 발생할 우려가 있는 경우, 즉시 '갑'에게 사전\t\t\t\t\t\t\t\t\t\r\n                                            고지를 해야 하며 그렇지 않을 경우, 이로 인해 발생하는 '갑'의 모든 손해 (6개월간의 월회비와 법적인\t\t\t\t\t\t\t\t\t\r\n                                            문제 해결을 위한 제반 경비)에 대하여 배상을 한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            6) 상기 5)항에 대하여 '을'은 '갑'에게 관련 정보제공, 법적인 문제인 경우 이를 해결하기 위해 적극\t\t\t\t\t\t\t\t\t\r\n                                            협조한다.(또한, 채권 가압류의 경우 즉시항고, 이의신청 등을 진행하기 위한 업무협조를 포함한다.)\t\t\t\t\t\t\t\t\t\r\n                                        </li>    \r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                 \r\n                                <h3>3. 계약기간</h3>\t\t\t\t\t\t\t\t\t\r\n                                <ul>\r\n                                    <li>\r\n                                        1) 본 계약의 계약기간은 {startYear}년 {startMonth}월 {startDay}일부터 20{endYear}년 {endMonth}월 {endDay}일까지로 한다.\t\t\t\t\t\t\t\t\t\r\n                                    </li>            \r\n                                </ul>\r\n                                </div>  \r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>4. 예치금</h3>\t\t\t\t\t\t\t\t\t\r\n                                <ul>\r\n                                    <li>\r\n                                        1) '을'은 본 계약서에 서명함과 동시에 예치금 {contractMoney}원을 '갑'에게 지급하여야 한다.\t\t\t\t\t\t\t\t\t\r\n                                    </li>\r\n                                    <li>            \r\n                                        2) 위 제1항에 명시된 예치금은 본 계약기간 동안 '갑'이 보유하며, 계약기간 만료 또는 종료 시 '을'이\t\t\t\t\t\t\t\t\t\r\n                                            '갑'에게 사무실 및 부대시설을 원상 복구하여 반환하고, '갑'에게 지급할 모든 금액의 지급을 완료하고,\t\t\t\t\t\t\t\t\t\r\n                                            사업자 주소지와 전화를 7일 이내에 옮긴다.\t\t\t\t\t\t\t\t\t\r\n                                        이것이 확인된 후 3일 이내에 예치금을 반환하기로 한다. 단, 예치금에는 이자가 발생하지 않는 것으로\t\t\t\t\t\t\t\t\t\r\n                                        한다.\r\n                                    </li>           \r\n                                </ul>\t\r\n                                </div>           \r\n\r\n                                                                    \r\n                                <div className = \"paragraph\">                                               \r\n                                <h3>5. 회비 및 부가서비스 이용대금의 지급</h3>\t\t\t\t\t\t\t\t\t\r\n                                    <ul>\r\n                                        <li>\r\n                                            1) '을'은 매월  {contractPayDate} 일에 월 회비를 '갑'에게 지급하여야 하며, 그 지급일이 공휴일인 경우에는 익일까지\t\t\t\t\t\t\t\t\t\r\n                                            납부해야 한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\r\n                                            2) 월 회비나 부가서비스 이용대금이 납부기한까지 전액 납부되지 않은 경우, '갑'은 본 계약에 의하여\t\t\t\t\t\t\t\t\t\r\n                                            부여된 여타 권리와는 별도로 연체료 월 2%를 을에게 청구할 수 있다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\t        \r\n                                    </ul>            \r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>6. '갑'의 면책사항</h3>\t\t\r\n                                    <ul>\r\n                                        <li>\r\n                                            1) 본 계약서의 내용은 사정에 의하여 변동될 수 있으며, '갑'은 이러한 변경에 대하여 '을'에게\t\t\t\t\t\t\t\t\t\r\n                                            사전고지하고 상호 합의가 있는 경우, '을'은 본 계약 위반의 책임을 지지 아니한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            2) '을'이나 제3자가 다음과 같은 원인에 의하여 다치거나 재산상의 손해를 입게 된 경우 \t\t\t\t\t\t\t\t\t\r\n                                            '갑'은 이에 대하여 여하한 배상책임도 부담하지 않는다.\t\r\n                                            <ul>\r\n                                                <li>\t\t\t\t\t\t\t\t\r\n                                                - 배수관, 스프링쿨러, 연기 혹은 기타 물질이 건물에서 누출 될 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                - 건물의 서비스와 설비에 결함이 있는 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                - 건물의 보안이나 보호\r\n                                                </li>\r\n                                            </ul>    \r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            3) '갑'이 '을'에게 제공하는 세무전문서비스는 '을'과 '갑'의 제휴세무사가 직접 계약을 체결하기로 한다.\t\t\t\t\t\t\t\t\t\r\n                                            세무전문서비스의 제공과 관련하는 발생하는 문제에 대하여 '갑'은 책임을 지지 아니한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                    </ul>           \r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>7. 계약의 양도 금지</h3>\t\t\t\t\t\t\t\t\t\r\n                                '을'은 본 계약상의 권리나 의무를 '갑'의 동의 없이 제3자에게 양도하거나 처분할 수 없다.\t\t\t\t\t\t\t\t\t\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>8. 계약의 해지 및 갱신</h3>\r\n                                    <ul>\r\n                                        <li>\t\t\t\t\t\t\t\t\r\n                                            1) '을'이 본 계약의 해지 및 갱신을 원하는 경우, 본 계약서 제 3조에 명시된 계약기간의 만료 15일 전까지\t\t\t\t\t\t\t\t\t\r\n                                            그러한 의사를 '갑'에게 반드시 통지 해야한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>        \r\n                                            2) 계약 만료일 15일전에 의사표시를 하지않는 경우에는, 계약만료를 통보한 날로부터 15일 이후를\t\t\t\t\t\t\t\t\t\r\n                                            계약만료일로 하며, 해당 기간의 사용료를 손해배상금으로 '갑'에게  지급한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>        \r\n                                            3) 월회비 할인률이 적용된 경우,  '을'의 사정으로 계약만료일 이전에 중도 해지할 경우는 해당기간 동안\t\t\t\t\t\t\t\t\t\r\n                                            할인 받은 총금액을 최종 정산시 일괄 반환한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>       \r\n                                            4) '갑'이 부득이한 사정으로 인하여 중도에 본 계약을 해지하고자 하는 경우 '갑'은 1개월 전에 해지의사를\t\t\t\t\t\t\t\t\t\r\n                                            '을'에게 표시하여야 한다.\r\n                                        </li>\r\n                                        <li>    \t\t\t\t\t\t\t\t\t\r\n                                            5) 다음의 경우에는 '갑'이 일방적으로 계약을 해지 할 수 있다.\r\n                                                <ul>\r\n                                                <li>\r\n                                                    - '을' 이 30일 이내 2회 이상 '갑'으로부터 납부 권고를 받고도 월 이용회비를 납부하지 않은 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '갑' 이 규정한 ‘회원이용안내’의 규칙을 준수하지 않고 질서를 문란하여 타 회원에게 피해를\t\t\t\t\t\t\t\t\t\r\n                                                    입힌 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '을'이  '갑' 의 사전 승인 없이 회원계약을 제 3자에게 인도한 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '을' 의 업무가 반사회적이거나, 현행 법률에 저촉되어 물의가 될 것으로 판단되는 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '을' 로 인해  '갑' 과  '갑'의 이해당사자에게 법적인 문제(채권 가압류등) 및 피해가 발생한 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                </ul>\r\n                                            </li>\r\n                                    \r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>9. 위 제8조 제5항에 의거하여 '갑'이 일방적으로 본 계약을 해지 할 경우</h3>\r\n                                    <ul>\t\r\n                                        <li>\t\t\t\t\t\t\t\t\r\n                                            1) 해지 3일 전에 서면 또는 전자메일로 통보하며 계약해지에 따른 월회비나 서비스 이용대금을 정산하고\t\t\t\t\t\t\t\t\t\r\n                                            '을'의 회원자격을 박탈한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            2) '을'은 계약해지를 통보 받은 날로부터 3일 이내에 '갑'의 유치물품을 퇴거해야 하며, 퇴거하지 않을 경우\t\t\t\t\t\t\t\t\t\r\n                                            '을'의 유치물품에 대한 분실이나 도난에 대해 '갑'은 책임을 지지 않는다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>                            \r\n                                            3) 본 계약서에 명시된 월회비나 서비스 이용대금을 전액 납부하지 않은 경우, '갑'은 사무실 또는 건물에\t\t\t\t\t\t\t\t\t\r\n                                            있는 '을'의 자산에 대하여 최우선적인 담보권을 취득한다. 만일 '을'이 '갑'의 서면 통지를 받은\t\t\t\t\t\t\t\t\t\r\n                                            날로부터 10일 내에 미지급된 금액을 납부하지 않을 경우, '갑'은 '을'의 동의 없이 '갑'이 자산을 이전\t\t\t\t\t\t\t\t\t\r\n                                            및 임의 처분할 권리를 가진다.\r\n                                        </li>\r\n                                    </ul>\t\t\t\t\t\t\t\t\t\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>10. 분쟁의 해결</h3>\r\n                                    <ul>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            1) '갑'과 '을'간에 본 계약과 관련하여 분쟁이 야기되는 경우, 해당 분쟁은 대한상사중재원에게 상사중재에 \t\t\t\t\t\t\t\t\t\r\n                                                의하여 상호 해결하는데 동의한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            2) 본 계약의 준거법은 대한국민법으로 한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            3) '을'이 계약을 해지하고자 할 경우에는 해지를 희망하는 날로부터 15일전에 '갑'에게 서면 통지하여야\t\t\t\t\t\t\t\t\t\r\n                                                하며, '갑'은 사용료를 일할 정산한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>        \r\n                                    </ul>\r\n                                </div>                                    \r\n                                <br/>\r\n                                                             \r\n                                <div className = \"paragraph\">\r\n                                이상과 같은 합의를 증명하기 위하여 본 계약을 체결하며, 양 당사자는 계약서에 각기 서명 날인하여 1부씩\t\t\t\t\t\t\t\t\t\r\n                                이를 보관 한다.\t\t\r\n                                </div>\t\t\t\t\t\t\t\r\n                                                                    \r\n                                <div className = \"paragraph\" id = \"processOfSign\">      \r\n                                    <table>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>센터매니저</td>\r\n                                                <td></td>\r\n                                                <td></td>\r\n                                                <td>상기내용을 잘 주지시켰음</td>\r\n                                                <td></td>\r\n                                                <td></td>\r\n                                                <td>서명</td>\r\n                                            </tr> \r\n                                            <tr>\r\n                                                <td>이용자</td>\r\n                                                <td></td>\r\n                                                <td></td>\r\n                                                <td>상기내용을 완전히 숙지하였음</td>\r\n                                                <td></td>\r\n                                                <td></td>\r\n                                                <td>서명</td>\r\n                                            </tr>                             \r\n                                \t\t\t\t\t\t\t\t\t\t\t\t\t\r\n                                        </tbody>        \r\n                                    </table>            \r\n                                </div>                                    \r\n                                                                    \r\n                                                                    \r\n                                <div className = \"paragraph\">                                    \r\n                                임대인 : ㈜에스원테크 &emsp;&emsp;서명(인)<br/>             \t\t\t\t\t\t\t\t\t\r\n                                &emsp;&emsp;&emsp;&nbsp;&nbsp; 최현수<br/>\t\t\t\t\t\t\t\t\t\r\n                                법인등록번호 110111-4806381<br/>           \t\t\t\t\t\t\t\t\t\r\n                                사업등록번호 105-87-68698<br/>              \t\t\t\t\t\t\t\t\t\r\n                                주소 : 서울시 강남구 봉은사로63길 11, 3,4층<br/>  \t\t\t\t\t\t\t\t\t\r\n                                연락처 : 070-4355-2312<br/>                 \t\t\t\t\t\t\t\t\t\r\n                                </div>                                   \r\n                                <br/>\r\n                                <div className = \"paragraph\">                                   \r\n                                임차인 : {companyName} &emsp;&emsp;서명(인)<br/>\t\t\t\t\t\t\t\t\t\r\n                                &emsp;&emsp;&emsp;&nbsp;&nbsp; {ceoName}\r\n                                <br/>                        \r\n                                법인등록번호 :\t\t\t\t\t\t\t\t<br/>\r\n                                사업자등록번호 : \t{bLicenseNum}\t\t\t\t\t\t\t\t<br/>\t\r\n                                주소 : {companyAddr}\t\t\t\t\t\t\t\t\t<br/>\r\n                                <br/>                                                    \r\n                                연락처 : {ceoTel} <br/>\r\n                                </div>\r\n                        </div>\r\n                        <div style = {{textAlign : 'center'}}>                       \r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} onClick={onPrintHandler} >출력</Button>                                    \r\n                        </div>                        \r\n                    </Fragment>\r\n             \r\n\r\n\r\n     );\r\n}\r\nexport default LeaseAgreement;\r\n","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Dashboard.js",[],["330","331"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Orders.js",[],["332","333"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\listItems.js",["334"],"import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const mainListItems = (\r\n  // console.log(sessionStorage),\r\n  <div>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n      <PeopleIcon />\r\n      </ListItemIcon>\r\n      <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <ShoppingCartIcon />\r\n      </ListItemIcon>\r\n      <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n      <DashboardIcon />\r\n      </ListItemIcon>\r\n      <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <BarChartIcon />\r\n      </ListItemIcon>\r\n      <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n      <DashboardIcon />\r\n      </ListItemIcon>\r\n      <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n    </ListItem>\r\n   \r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <LayersIcon />\r\n        </ListItemIcon>\r\n        <Link to =\"/\"><ListItemText primary=\"로그인/로그아웃\" /></Link>\r\n      </ListItem>\r\n   \r\n      \r\n  </div>\r\n);\r\n\r\nexport const secondaryListItems = (\r\n   <div>\r\n  \r\n   </div>\r\n);","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Title.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\PostCard.js",[],["335","336"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100100.js",["337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { post } from 'axios';\r\n\r\n\r\nimport DaumPostcode from 'react-daum-postcode';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport DatePicker, { registerLocale } from 'react-datepicker';\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale('ko', ko);\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n}));\r\n\r\nfunction S010100100(props) {\r\n\r\n    let name = props.name;\r\n  \r\n    // 회원정보\r\n    const [memberNm, setMemberNm] = useState('');\r\n    const [empName, setEmpName] = useState('');\r\n    const [fstResidentRegiNum, setFstResidentRegiNum] = useState('');\r\n    const [sndResidentRegiNum, setSndResidentRegiNum] = useState('');\r\n    const [empTp, setEmpTp] = useState();\r\n    const [empTps, setEmpTps] = useState([{}]);\r\n    const [finalSchoolName, setFinalSchoolName] = useState('');\r\n    const [firstEmpHp, setFirstEmpHp] = useState('');\r\n    const [secondEmpHp, setSecondEmpHp] = useState('');\r\n    const [thirdEmpHp, setThirdEmpHp] = useState('');\r\n    const [empEmailId, setEmpEmailId] = useState('');\r\n    const [domainAddress, setDomainAddress] = useState('');\r\n    const [zipcode, setZipcode] = useState('');\r\n    const [empAddress, setEmpAddress] = useState('');\r\n    const [empDetailAddress, setEmpDetailAddress] = useState('');\r\n\r\n    const [isPostOpen, setIsPostOpen] = useState(false);\r\n\r\n    // 첨부파일업로드\r\n    const [famRelCertificate, setFamRelCertificate] = useState(null);\r\n    const [famRelCertificateName, setFamRelCertificateName] = useState('');\r\n\r\n    const [graduationCertificate, setGraduationCertificate] = useState(null);\r\n    const [graduationCertificateName, setGraduationCertificateName] = useState('');\r\n\r\n    const [copyOfBankbook, setCopyOfBankbook] = useState(null);\r\n    const [copyOfBankbookName, setCopyOfBankbookName] = useState('');\r\n\r\n    const [detailFamRelCert,setDetailFamRelCert] = useState('');\r\n    const [detailGraduationCert,setDetailGraduationCert] = useState('');\r\n    const [detailCopyBankbook,setDetailCopyBankbook] = useState('');\r\n\r\n    const [empNum, setEmpNum] = useState('');\r\n    const [empLevel, setEmpLevel] = useState('');\r\n    const [deptNm, setDeptNm] = useState('');\r\n    const [pwd, setPwd] = useState('');\r\n    const [wages, setWages] = useState('');\r\n    const [joinDate, setJoinDate] = useState(new Date(''));\r\n    const [retireDate, setRetireDate] = useState(new Date(''));\r\n    const [birthDate, setBirthDate] = useState('');\r\n    const [empComment, setEmpComment] = useState('');\r\n  \r\n    // 중복확인\r\n    const [regNumCheckBtn, setRegNumCheckBtn] = useState('');\r\n    const [emailCheckBtn, setEmailCheckBtn] = useState('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleOpen = () => {\r\n        setIsPostOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setIsPostOpen(false);\r\n    };\r\n\r\n\r\n    const postCodeStyle = {\r\n        display: \"block\",\r\n        // position: \"absolute\",\r\n        top: \"50%\",\r\n        width: \"400px\",\r\n        height: \"500px\",\r\n        padding: \"10px\",\r\n    };\r\n\r\n    const handleComplete = (data) => {\r\n        let fullAddress = data.address;\r\n        let extraAddress = \"\";\r\n\r\n        if (data.addressType === \"R\") {\r\n            if (data.bname !== \"\") {\r\n                extraAddress += data.bname;\r\n            }\r\n            if (data.buildingName !== \"\") {\r\n                extraAddress +=\r\n                    extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\r\n            }\r\n            fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\r\n        }\r\n\r\n\r\n        setZipcode(data.zonecode);\r\n        setEmpAddress(fullAddress);\r\n\r\n    };\r\n\r\n    // 직원 구분\r\n    useEffect(() => {\r\n        axios.post('/api/s010100090/classification')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                    setEmpTps(arr);\r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    const retireProcessing = (formData,retire) =>{\r\n        let today = new Date();   \r\n\r\n        let year = today.getFullYear(); // 년도\r\n        let month = today.getMonth() + 1;  // 월\r\n        let date = today.getDate();  // 날짜\r\n\r\n        let todayForProcess = year+'-'+month+'-'+date;\r\n        // console.log('todayForProcess',todayForProcess);\r\n\r\n        if(retire == todayForProcess){\r\n            formData.append('retireFlag',\"Y\");\r\n        }\r\n    }\r\n\r\n    // 저장 함수\r\n    const addEmp = () => {\r\n        const url = '/api/s010100100/insertEmp';\r\n        const formData = new FormData();\r\n        let memId = props.memId;\r\n\r\n\r\n        let retire = retireDate.getFullYear()+'-'+ (retireDate.getMonth()+1)+'-'+retireDate.getDate();\r\n        let join = joinDate.getFullYear()+'-'+ (joinDate.getMonth()+1)+'-'+joinDate.getDate();\r\n\r\n        // console.log('retire',retire);\r\n        \r\n        formData.append('memId', memId);\r\n        formData.append('memberNm', memberNm);\r\n        formData.append('empName', empName);\r\n        formData.append('fstResidentRegiNum', fstResidentRegiNum);\r\n        formData.append('sndResidentRegiNum', sndResidentRegiNum);\r\n        formData.append('empTp', empTp);\r\n        formData.append('finalSchoolName', finalSchoolName);\r\n        formData.append('firstEmpHp', firstEmpHp);\r\n        formData.append('secondEmpHp', secondEmpHp);\r\n        formData.append('thirdEmpHp', thirdEmpHp);\r\n        formData.append('empEmailId', empEmailId);\r\n        formData.append('domainAddress', domainAddress);\r\n\r\n        formData.append('zipcode', zipcode);\r\n        formData.append('empAddress', empAddress);\r\n        formData.append('empDetailAddress', empDetailAddress);\r\n\r\n        formData.append('famRelCertificate', famRelCertificate);\r\n        formData.append('famRelCertificateName', famRelCertificateName);\r\n        formData.append('graduationCertificate', graduationCertificate);\r\n        formData.append('graduationCertificateName', graduationCertificateName);\r\n        formData.append('copyOfBankbook', copyOfBankbook);\r\n        formData.append('copyOfBankbookName', copyOfBankbookName);\r\n\r\n        formData.append('empNum', empNum);\r\n        formData.append('empLevel', empLevel);\r\n        formData.append('joinDate', join);\r\n        formData.append('deptNm', deptNm);\r\n        formData.append('pwd', pwd);\r\n        formData.append('wages', wages);\r\n        formData.append('retireDate', retire);\r\n        formData.append('empComment', empComment);\r\n         // formData.append('birthDate',birthDate);\r\n\r\n        const config = {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        }\r\n        return post(url, formData, config);\r\n    }\r\n\r\n\r\n    // 저장\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        // 회원명 NUll체크\r\n        if (memberNm == null || memberNm == '') {\r\n            return alert(\"회원명을 선택하세요.\");\r\n        }\r\n\r\n        // 성명 NUll체크\r\n        if (empName == null || empName == '' ) {\r\n            return alert(\"이름을 입력하세요.\");\r\n        }\r\n\r\n        // 주민번호 NUll체크\r\n        if (fstResidentRegiNum == null || fstResidentRegiNum == '' || sndResidentRegiNum == null || sndResidentRegiNum == '') {\r\n            return alert(\"주민번호를 입력하세요.\");\r\n        }\r\n\r\n        // 연락처 NUll체크\r\n        if (firstEmpHp == null || firstEmpHp == ''||secondEmpHp == null || secondEmpHp == ''|| thirdEmpHp == null || thirdEmpHp == '') {\r\n            return alert(\"연락처를 입력하세요.\");\r\n        }\r\n\r\n        // E-mail NUll체크\r\n        if (empEmailId == null || empEmailId == '' || domainAddress == null || domainAddress == '') {\r\n            return alert(\"E-mail을 입력하세요.\");\r\n        }\r\n\r\n        // Password NUll체크\r\n        if (pwd == null || pwd == '') {\r\n            return alert(\"Password를 입력하세요.\");\r\n        }\r\n\r\n        // // 중복확인\r\n        if (regNumCheckBtn == '') {\r\n            return alert('주민번호번호 중복확인 하세요.');\r\n        } \r\n        if (emailCheckBtn == '') {\r\n            return alert('이메일 중복확인 하세요.');\r\n        }\r\n           \r\n        if((firstEmpHp.length != 3)||(secondEmpHp.length != 4)||(thirdEmpHp.length != 4)){\r\n            return alert('연락처 형식을 확인하세요');\r\n        }\r\n                addEmp().then((response) => {\r\n                    if(response.data.success){\r\n                        alert('정상적으로 등록 되었습니다.');\r\n                        props.setStoreOpen(false);\r\n                        props.empList();\r\n                    }else{\r\n                        alert(response.data.message);\r\n                        alert('등록에 실패하였습니다.');\r\n                    }\r\n                })\r\n    }\r\n\r\n\r\n    // 수정\r\n    const modifyEmp = (event) => {\r\n\r\n        const url = '/api/s010100100/modifyEmp';\r\n        const formData = new FormData();\r\n\r\n        let empId = props.empIdM;\r\n        // console.log('memId', memId);\r\n        let retire = retireDate.getFullYear()+'-'+ (retireDate.getMonth()+1)+'-'+retireDate.getDate();\r\n        let join = joinDate.getFullYear()+'-'+ (joinDate.getMonth()+1)+'-'+joinDate.getDate();\r\n        \r\n        formData.append('empId', empId);\r\n        formData.append('memberNm', memberNm);\r\n        formData.append('empName', empName);\r\n        formData.append('fstResidentRegiNum', fstResidentRegiNum);\r\n        formData.append('sndResidentRegiNum', sndResidentRegiNum);\r\n        formData.append('empTp', empTp);\r\n        formData.append('finalSchoolName', finalSchoolName);\r\n        formData.append('firstEmpHp', firstEmpHp);\r\n        formData.append('secondEmpHp', secondEmpHp);\r\n        formData.append('thirdEmpHp', thirdEmpHp);\r\n        formData.append('empEmailId', empEmailId);\r\n        formData.append('domainAddress', domainAddress);\r\n\r\n        formData.append('zipcode', zipcode);\r\n        formData.append('empAddress', empAddress);\r\n        formData.append('empDetailAddress', empDetailAddress);\r\n\r\n        formData.append('famRelCertificate', famRelCertificate);\r\n        formData.append('famRelCertificateName', famRelCertificateName);\r\n        formData.append('graduationCertificate', graduationCertificate);\r\n        formData.append('graduationCertificateName', graduationCertificateName);\r\n        formData.append('copyOfBankbook', copyOfBankbook);\r\n        formData.append('copyOfBankbookName', copyOfBankbookName);\r\n\r\n        formData.append('empNum', empNum);\r\n        formData.append('empLevel', empLevel);\r\n        formData.append('joinDate', join);\r\n        formData.append('deptNm', deptNm);\r\n        formData.append('pwd', pwd);\r\n        formData.append('wages', wages);\r\n        formData.append('retireDate', retire);\r\n        formData.append('empComment', empComment);\r\n        // formData.append('birthDate',birthDate);\r\n\r\n        const config = {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        }\r\n        return post(url, formData, config);\r\n\r\n    }\r\n\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = () => {\r\n\r\n        if((firstEmpHp.length != 3)||(secondEmpHp.length != 4)||(thirdEmpHp.length != 4)){\r\n            alert('연락처 형식을 확인하세요');\r\n        }else{\r\n            modifyEmp().then((response) => {\r\n                if(response.data.success){\r\n                    alert('정상적으로 수정 되었습니다.');\r\n                    props.setStoreOpen(false);\r\n                    props.empList();\r\n                }else{\r\n                    alert(response.data.message);\r\n                    alert('수정에 실패하였습니다.');\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const cancelConfirm = () => alert('수정을 취소하였습니다.');\r\n\r\n    const onModifyHandler = useConfirm(\r\n        \"수정하시겠습니까?\",\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n    let dataForm = props.dataForm;\r\n    let memId = props.memId;\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/s010100040/selectMemberTp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    \r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"회원상태 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n    \r\n    // 직원 등록\r\n    useEffect(() => {\r\n\r\n        if (dataForm == 'I') {\r\n            setMemberNm(name);\r\n        }\r\n\r\n    }, [])\r\n\r\n    // 직원 상세보기-(s010100090 수정버튼)\r\n    useEffect(() => {\r\n\r\n        if (dataForm == 'U') {\r\n            let empId = props.empIdM;\r\n\r\n            let body = {\r\n                empId\r\n            }\r\n          \r\n            console.log('empIdMd',props.empIdM);\r\n\r\n            axios.post('/api/s010100100/empDetail', body)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                    \r\n                        setMemberNm(response.data.rows[0].MEMBER_NM);\r\n                        setEmpName(response.data.rows[0].NAME);\r\n\r\n                        if((response.data.rows[0].REG_NUMBER1) && (response.data.rows[0].REG_NUMBER2) != null){\r\n                          setFstResidentRegiNum((response.data.rows[0].REG_NUMBER1));\r\n                          setSndResidentRegiNum((response.data.rows[0].REG_NUMBER2));\r\n                        }\r\n\r\n                        setEmpTp(response.data.rows[0].EMP_TP);\r\n                     \r\n                        setFinalSchoolName(response.data.rows[0].FINAL_SCHOOL_NAME);\r\n                        setFirstEmpHp(((response.data.rows[0].EMP_HP).split(\"-\"))[0]);\r\n                        setSecondEmpHp(((response.data.rows[0].EMP_HP).split(\"-\"))[1]);\r\n                        setThirdEmpHp(((response.data.rows[0].EMP_HP).split(\"-\"))[2]);\r\n                        setEmpEmailId(((response.data.rows[0].EMP_EMAIL).split(\"@\"))[0]);\r\n                        setDomainAddress(((response.data.rows[0].EMP_EMAIL).split(\"@\"))[1]);\r\n\r\n                        setZipcode(response.data.rows[0].ZIP_CODE);\r\n                        setEmpAddress(response.data.rows[0].ADDRESS);\r\n                        setEmpDetailAddress(response.data.rows[0].DETAIL_ADDRESS);\r\n                        \r\n                        setEmpNum(response.data.rows[0].EMP_NUMBER);\r\n                        setEmpLevel(response.data.rows[0].EMP_LEVEL);\r\n\r\n                        const modalJoinDate = response.data.rows[0].JOIN_DATE;\r\n                        \r\n                        if((modalJoinDate != null)&&(modalJoinDate != \"\")&&(modalJoinDate != undefined)){\r\n                            setJoinDate(new Date(modalJoinDate));\r\n                        }else{\r\n                            setJoinDate(new Date(''))\r\n                        }\r\n                        \r\n                        setDeptNm(response.data.rows[0].DEPT_NM);\r\n                        setPwd(response.data.rows[0].PWD);\r\n                        setWages(response.data.rows[0].WAGES);\r\n\r\n                        const modalRetireDate = response.data.rows[0].RETIRE_DATE;\r\n                       \r\n                        if((modalRetireDate != null)&&(modalRetireDate != \"\")&&(modalRetireDate != undefined)){\r\n                            setRetireDate(new Date(modalRetireDate));\r\n                        }else{\r\n                            setRetireDate(new Date(''))\r\n                        }\r\n\r\n                        setBirthDate(response.data.rows[0].BIRTH_DATE);\r\n                        setEmpComment(response.data.rows[0].EMP_COMMENT);\r\n\r\n                        setDetailFamRelCert(response.data.rows[0].IMAGE_FAMRELCERTIFICATE);\r\n                        setDetailGraduationCert(response.data.rows[0].IMAGE_GRADCERTIFICATE);\r\n                        setDetailCopyBankbook(response.data.rows[0].IMAGE_BANKBOOK);\r\n\r\n                      \r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert(\"직원 상세 데이터를 불러오는데 실패하였습니다.\");\r\n                    }\r\n                })\r\n\r\n        }\r\n\r\n    }, [])\r\n\r\n    const getRegexData = (regex,data) => {\r\n        return data.replace(regex, \"\");\r\n    }\r\n\r\n    const onMemberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpNameHandler = (event) => {\r\n        setEmpName(event.currentTarget.value);\r\n    }\r\n\r\n    const onFstResidentRegiNumHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g,event.currentTarget.value);\r\n        setFstResidentRegiNum(regexData);      \r\n    }\r\n    \r\n\r\n    const onSndResidentRegiNumHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g,event.currentTarget.value);\r\n        setSndResidentRegiNum(regexData);\r\n        \r\n    }\r\n\r\n    const onEmpTpHandler = (event) => {\r\n        setEmpTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onFinalSchoolNameHandler = (event) => {\r\n        setFinalSchoolName(event.currentTarget.value);\r\n    }\r\n\r\n    const onFirstEmpHpHandler = (event) => {\r\n        setFirstEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const onSecondEmpHpHandler = (event) => {\r\n        setSecondEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const onThirdEmpHpHandler = (event) => {\r\n        setThirdEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpEmailIdHandler = (event) => {\r\n        const regexData = getRegexData(/[^-A-Za-z0-9_]/g,event.currentTarget.value);\r\n        setEmpEmailId(regexData);\r\n    }\r\n\r\n    const onDomainAddressHandler = (event) => {\r\n        const regexData = getRegexData(/[^a-zA-Z0-9.]+$/,event.currentTarget.value);\r\n        setDomainAddress(regexData);\r\n    }\r\n\r\n    const onZipcodeHandler = (event) => {\r\n        setZipcode(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpAddressHandler = (event) => {\r\n        setEmpAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpDetailAddressHandler = (event) => {\r\n        setEmpDetailAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onFamRelCertifiacteChange = (event) => {\r\n        // file: event.currentTarget.idCardFiles[0];\r\n        setFamRelCertificate(event.currentTarget.files[0]);\r\n        setFamRelCertificateName(event.currentTarget.value);\r\n    }\r\n\r\n    const onGraduationCertificateChange = (event) => {\r\n        // file: event.currentTarget.idCardFiles[0];\r\n        setGraduationCertificate(event.currentTarget.files[0]);\r\n        setGraduationCertificateName(event.currentTarget.value);\r\n    }\r\n\r\n    const onCopyOfBankbookChange = (event) => {\r\n        // file: event.currentTarget.idCardFiles[0];\r\n        setCopyOfBankbook(event.currentTarget.files[0]);\r\n        setCopyOfBankbookName(event.currentTarget.value);\r\n    }\r\n    \r\n    const onIdDownloadHandler = (event) => {\r\n        event.preventDefault();\r\n        //  console.log('dataMemId', dataMemId);\r\n\r\n        // axios.get(`/api/s01010050/download/tb_s10_member010_by_id?id=${dataMemId}&type=single`)\r\n        //     .then(response => {\r\n        //         if (response) {\r\n        //             alert('res');\r\n        //             console.log(response);\r\n\r\n        //         } else {\r\n        //             alert(\"다운로드에 실패하였습니다.\");\r\n        //         }\r\n        //     })\r\n    }\r\n\r\n    const onEmpNumHandler = (event) => {\r\n        setEmpNum(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpLevelHandler = (event) => {\r\n        setEmpLevel(event.currentTarget.value);\r\n    }\r\n\r\n    const onDeptNmHandler = (event) => {\r\n        setDeptNm(event.currentTarget.value);\r\n    }\r\n\r\n    const onPwdHandler = (event) => {\r\n        setPwd(event.currentTarget.value);\r\n    }\r\n\r\n    const onWagesHandler = (event) => {\r\n        setWages(event.currentTarget.value);\r\n    }\r\n\r\n    const onBirthDateHandler = (event) => {\r\n        setBirthDate(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpCommentHandler = (event) => {\r\n        setEmpComment(event.currentTarget.value);\r\n    }\r\n\r\n    // 중복확인\r\n    const onRegNumCheckHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const body = {\r\n        \r\n            fstResidentRegiNum,\r\n            sndResidentRegiNum\r\n        }\r\n        if((fstResidentRegiNum.length != 6)||(sndResidentRegiNum.length != 7)||(fstResidentRegiNum.length === 0)||(sndResidentRegiNum.length === 0)){\r\n            alert('주민번호 형식을 확인하세요');\r\n        }else{\r\n        axios.post('/api/s010100100/regNoCheck', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    if (response.data.number[0].RowNum >= 1) {\r\n                        alert('이미 존재하는 주민번호입니다.');\r\n                        setRegNumCheckBtn('');\r\n                        \r\n                    } else if (response.data.number[0].RowNum === 0) {\r\n                        alert('사용할 수 있는 주민번호입니다.')\r\n                        setRegNumCheckBtn('check');\r\n                    }\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('중복체크에 실패 하였습니다.')\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const onEmpEmailChkHandler = (event) => {\r\n        event.preventDefault();\r\n        let memId = props.memId;\r\n\r\n        const body = {\r\n            // 회원정보\r\n            memId,\r\n            empEmailId,\r\n            domainAddress\r\n        }\r\n        if((empEmailId.length === 0)||(domainAddress.length === 0)){\r\n            alert('이메일 형식을 확인하세요');\r\n        }else{\r\n        axios.post('/api/s010100100/emailCheck', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    if (response.data.number[0].RowNum >= 1) {\r\n                        alert('이미 존재하는 이메일입니다.');\r\n                        setEmailCheckBtn('');\r\n                    } else if (response.data.number[0].RowNum === 0) {\r\n                        alert('사용할 수 있는 이메일입니다.');\r\n                        setEmailCheckBtn('check');\r\n                    }\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('중복체크에 실패 하였습니다.')\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <form style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '100%'\r\n        }}\r\n            encType='multipart/form-data'\r\n        >\r\n            <div className=\"memInfoWrapper\">\r\n                <div className=\"memInfoWrap\">\r\n                    {/* 회원정보란 */}\r\n                    <h5 id=\"infoTitle\">회원 정보</h5>\r\n\r\n                    <table id=\"memberTable\">\r\n                        {/* 회원정보란 */}\r\n                        <tbody>\r\n                            <tr>\r\n                                <th rowSpan=\"9\" className=\"memberInfo\">직원정보</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"memberInfo\">회원명<span className=\"star\">(*)</span></th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 12 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onMemberNmHandler} disabled value={memberNm} id=\"memberNm\" name=\"memberNm\"\r\n                                    />\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">성명<span className=\"star\">(*)</span></th>\r\n                                <td colSpan=\"2\">\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onEmpNameHandler} value={empName} id=\"empName\" name=\"empName\" />\r\n\r\n                                </td>\r\n\r\n\r\n                                <th className=\"memberInfo\">주민번호<span className=\"star\">(*)</span></th>\r\n                                <td colSpan=\"4\">\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={fstResidentRegiNum} maxLength =\"6\" id=\"fstResidentRegiNum\" name=\"fstResidentRegiNum\"\r\n                                        onChange={onFstResidentRegiNumHandler} />\r\n                                        &nbsp;\r\n                                        -\r\n                                        &nbsp;\r\n                                        <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={sndResidentRegiNum} maxLength =\"7\" id=\"sndResidentRegiNum\" name=\"sndResidentRegiNum\"\r\n                                        onChange={onSndResidentRegiNumHandler} />\r\n\r\n                                        &nbsp;\r\n\r\n                                        <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"useContractBtn\"\r\n                                            onClick = {onRegNumCheckHandler}\r\n                                    > 중복확인</Button>\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">직원구분</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false}\r\n                                        onChange={onEmpTpHandler} value={empTp} id=\"empTp\" name=\"empTp\"\r\n                                    >\r\n                                        {empTps.map((item,index) => (\r\n                                            <option key={index} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n                                    </Form.Control>\r\n                                </td>\r\n                            </tr> \r\n                            <tr>\r\n                                <th className=\"memberInfo\">최종학교명</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 9 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={finalSchoolName|| ''}\r\n                                        onChange={onFinalSchoolNameHandler} id=\"finalSchoolName\" name=\"finalSchoolName\" />\r\n\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">연락처<span className=\"star\">(*)</span></th>\r\n                                <td colSpan=\"2\">\r\n\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={firstEmpHp} maxLength =\"3\" id=\"firstEmpHp\" name=\"firstEmpHp\"\r\n                                        onChange={onFirstEmpHpHandler} />\r\n\r\n                                    &nbsp;\r\n                                    -\r\n                                    &nbsp;\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={secondEmpHp} maxLength =\"4\" id=\"secondEmpHp\" name=\"secondEmpHp\" name=\"firstEmpHp\"\r\n                                        onChange={onSecondEmpHpHandler} />\r\n                                    &nbsp;\r\n                                    -\r\n                                    &nbsp;\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={thirdEmpHp} maxLength =\"4\" id=\"thirdEmpHp\" name=\"thirdEmpHp\"\r\n                                        onChange={onThirdEmpHpHandler} />\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">E-mail<span className=\"star\">(*)</span></th>\r\n                                <td colSpan=\"7\">\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={empEmailId} id=\"empEmailId\" name=\"empEmailId\"\r\n                                        onChange={onEmpEmailIdHandler} />\r\n\r\n                                    &nbsp;\r\n                                    @\r\n                                    &nbsp;\r\n\r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={domainAddress} id=\"domainAddress\" name=\"domainAddress\"\r\n                                        onChange={onDomainAddressHandler} />  &nbsp;\r\n                                         <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"useContractBtn\"\r\n                                            onClick = {onEmpEmailChkHandler}\r\n                                    > 중복확인</Button>\r\n                                </td>\r\n\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th rowSpan=\"2\" className=\"memberInfo\">대표자 주소</th>\r\n\r\n                                <td colSpan=\"11\">\r\n\r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={zipcode} id=\"zipcode\" name=\"zipcode\"\r\n                                        onChange={onZipcodeHandler} />\r\n\r\n                        &nbsp;\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} className=\"useContractBtn\" onClick={handleOpen}\r\n\r\n                                    >우편</Button>\r\n\r\n                                    <Modal\r\n                                        className={classes.modal}\r\n                                        open={isPostOpen}\r\n                                        onClose={handleClose}\r\n                                        closeAfterTransition\r\n                                        BackdropComponent={Backdrop}\r\n                                        BackdropProps={{\r\n                                            timeout: 500,\r\n                                        }}\r\n                                    >\r\n                                        <Fade in={isPostOpen}>\r\n                                            <div className={classes.paper}>\r\n                                                <DaumPostcode autoClose style={postCodeStyle} onComplete={handleComplete} />\r\n                                            </div>\r\n                                        </Fade>\r\n                                    </Modal>\r\n                        &nbsp;\r\n                            <Form.Control style={{ width: 30 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={empAddress} id=\"empAddress\" name=\"empAddress\"\r\n                                        onChange={onEmpAddressHandler} />\r\n\r\n                                </td>\r\n\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan=\"11\">\r\n\r\n                                    <Form.Control style={{ width: 30 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={empDetailAddress}\r\n                                        id=\"empDetailAddress\"\r\n                                        name=\"empDetailAddress\"\r\n                                        onChange={onEmpDetailAddressHandler}\r\n                                    />\r\n\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"memberInfo\" >첨부파일</th>\r\n                                <td colSpan=\"4\" >\r\n                                <a href='#' onClick={onIdDownloadHandler} >{detailFamRelCert}</a>&nbsp;\r\n                                    <input type='file'\r\n                                        file={famRelCertificate}\r\n                                        name='famRelCertificate'\r\n                                        value={famRelCertificateName}\r\n                                        onChange={onFamRelCertifiacteChange}\r\n                                    />\r\n                                </td>\r\n                                <td colSpan=\"5\" >\r\n                                <a href='#' onClick={onIdDownloadHandler} >{detailGraduationCert}</a>&nbsp;\r\n                                    <input type='file'\r\n                                        file={graduationCertificate}\r\n                                        name='graduationCertificate'\r\n                                        value={graduationCertificateName}\r\n                                        onChange={onGraduationCertificateChange}\r\n                                    />\r\n                                </td>\r\n\r\n                                <td colSpan=\"5\" >\r\n                                <a href='#' onClick={onIdDownloadHandler} >{detailCopyBankbook}</a>&nbsp;\r\n                                    <input type='file'\r\n                                        file={copyOfBankbook}\r\n                                        name='copyOfBankbook'\r\n                                        value={copyOfBankbookName}\r\n                                        onChange={onCopyOfBankbookChange}\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"memberInfo\">직번</th>\r\n                                <td colSpan=\"2\">\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onEmpNumHandler} value={empNum|| ''} id=\"empNum\" name=\"empNum\" />\r\n\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">직급</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onEmpLevelHandler} value={empLevel} id=\"empLevel\" name=\"empLevel\" />\r\n\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">입사일자</th>\r\n                                <td colSpan=\"4\">\r\n\r\n                                <DatePicker\r\n                                        className=\"dateSize\"\r\n                                        locale=\"ko\"\r\n                                        selected={joinDate.setHours(9, 0, 0, 0)}\r\n                                        onChange={date => setJoinDate(date)}\r\n                                        dateFormat=\"yyyy-MM-dd\"\r\n                                       \r\n                                    />\r\n                                \r\n                                </td>\r\n                                <th className=\"memberInfo\">부서</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onDeptNmHandler} value={deptNm|| ''} id=\"deptNm\" name=\"deptNm\" />\r\n\r\n                                </td>\r\n\r\n                            </tr>\r\n \r\n                            <tr>\r\n                                <th className=\"memberInfo\">Password</th>\r\n                                <td colSpan=\"2\">\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onPwdHandler} value={pwd|| ''} id=\"pwd\" name=\"pwd\" />\r\n\r\n                                </td>\r\n\r\n                                <th >급여</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onWagesHandler} value={wages|| ''} id=\"wages\" name=\"wages\" />\r\n\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">퇴사일자</th>\r\n                                <td colSpan=\"4\">\r\n\r\n                                <DatePicker\r\n                                        className=\"dateSize\"\r\n                                        locale=\"ko\"\r\n                                        selected={retireDate.setHours(9, 0, 0, 0)}\r\n                                        onChange={date => setRetireDate(date)}\r\n                                        dateFormat=\"yyyy-MM-dd\"\r\n                                     \r\n                                    />\r\n\r\n                                </td>\r\n                                <th className=\"memberInfo\">생년월일</th>\r\n                                <td>\r\n                             \r\n                                     <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onBirthDateHandler} value={birthDate|| ''} id=\"birthDate\" name=\"birthDate\" /> \r\n\r\n\r\n                            </td>\r\n\r\n                            </tr>  \r\n                            <tr>\r\n                                <th className=\"memberInfo\">특이사항</th>\r\n                                <td colSpan=\"11\">\r\n\r\n                                    <Form.Control as=\"textarea\" rows={3} value={empComment|| ''} id=\"empComment\" name=\"empComment\"\r\n                                        onChange={onEmpCommentHandler} />\r\n\r\n                                </td>\r\n\r\n                            </tr>\r\n\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className=\"btn-center\">\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} className=\"new\"\r\n                            hidden ={props.dataForm !== 'I'}onClick={onSubmitHandler}>저장</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} className=\"new\"\r\n                            hidden ={props.dataForm !== 'U'}onClick={onModifyHandler}>저장</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} className=\"new\"\r\n                        onClick={props.onHandleClickClose}>닫기</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </form>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default S010100100;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100160.js",["372","373","374","375","376"],"import React, { Fragment, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport './css/S010100050.css';\r\nimport S010100010 from './S010100010';\r\n\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport { DatePicker } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport moment from 'moment';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 200,\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n    \r\n}));\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\nfunction S010100160(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const [startDate, setStartDate] = useState(new Date(moment().date('01')));\r\n    const [endDate, setEndDate] = useState(new Date());\r\n\r\n    // 문의구분\r\n    const [contractTp, setContractTp] = useState('');\r\n    // 문의자명\r\n    const [contractSt, setContractSt] = useState('');\r\n    const [contractTps, setContractTps] = useState([{}]);\r\n    const [contractSts,setContractSts] = useState([{}]);\r\n    \r\n    const [contractList,setContractList] = useState([].slice(0,10));\r\n    const [conOpen, setConOpen] = React.useState(false);\r\n    // 페이징\r\n    const [pageNumber,setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(contractList.length/usersPerPage);\r\n     \r\n  \r\n     const changePage = ({selected}) => {\r\n         setPageNumber(selected);\r\n     }\r\n \r\n     const handleDrawerOpen = () => {\r\n         setOpen(true);\r\n     };\r\n \r\n     const handleDrawerClose = () => {\r\n         setOpen(false);\r\n     };\r\n\r\n     const allOfcontractList = () => {\r\n\r\n        const body = {\r\n            startDate,\r\n            endDate,\r\n            contractTp,\r\n            contractSt\r\n        }\r\n\r\n  \r\n\r\n        axios.post('/api/s010100160/search', body).then(response => {\r\n            if (response.data.success) {\r\n                setContractList(response.data.rows);\r\n            } else {\r\n                alert(response.data.message);\r\n                alert('데이터를 불러오는데 실패 하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        axios.post('/api/s010100160/contractTp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    \r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n                        }));\r\n\r\n                    setContractTps(arr);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\" 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        axios.post('/api/s010100160/contractSt')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n                        }));\r\n                        //arr.push({key: 'Y', value: '종료' });\r\n                        \r\n                        setContractSts(arr);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\" 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        allOfcontractList();\r\n    }, [])\r\n\r\n  \r\n    const onContractTpHandler = (event) => {\r\n        setContractTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onContractStHandler = (event) => {\r\n        setContractSt(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailClickOpen = (event) =>{\r\n        num = event.target.innerHTML;\r\n        rNum = parseInt(num);\r\n        //setNameForDetailCModal(rNum);\r\n        setConOpen(true);\r\n     }\r\n\r\n     const onConContractHandler  = useCallback(() => {\r\n        setConOpen(false);\r\n    });\r\n\r\n    const onHandleFormSubmit = () => {\r\n        allOfcontractList();\r\n    }\r\n  \r\n    const s010100050R = contractList.slice(pagesVisited,pagesVisited + usersPerPage).map((contractList, index) => {\r\n        return (\r\n            <TableRow key={index}>\r\n                <TableCell onClick={onDetailClickOpen} className='underLineForDetail' id={contractList.CONTRACT_ID}>{contractList.CONTRACT_ID}</TableCell>\r\n                <TableCell>{contractList.MEMBER_NM}</TableCell>\r\n                <TableCell>{contractList.CONTRACT_DATE}</TableCell>\r\n                <TableCell>{contractList.CONTRACT_TP}</TableCell>\r\n                <TableCell>{contractList.CONTRACT_ROOM}</TableCell>\r\n                <TableCell>{contractList.CONTRACT_TERM}개월 ({contractList.START_DATE} ~ {contractList.END_DATE})</TableCell>\r\n                <TableCell>{contractList.CONTRACT_ST}</TableCell>\r\n                <TableCell>{contractList.PAY_DATE}일</TableCell>\r\n                <TableCell>{contractList.MONTHLY_FEE}</TableCell>\r\n                <TableCell>{contractList.CONTRACT_LOCKER}</TableCell>\r\n            </TableRow>\r\n        )\r\n\r\n    });\r\n    const excelHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(contractList);\r\n        //console.log(tb_s10_ask010);\r\n\r\n        ['회원명', '사업자번호','회원구분','No', '계약기간', '계약기간', '계약상태', '계약구분', '사물함', '호실' ,'계약기간','매월입금일','월회비','계약상태','시작날짜']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][1] = { hidden: true };\r\n        ws['!cols'][2] = { hidden: true };\r\n        ws['!cols'][6] = { hidden: true };\r\n        ws['!cols'][11] = { hidden: true };\r\n        ws['!cols'][14] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"계약현황.xlsx\");\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n        <div className={classes.root}>\r\n            {/* 백그라운드 */}\r\n            <CssBaseline />\r\n            {/* 상단 파란색 툴바 */}\r\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        Dashboard\r\n                    </Typography>\r\n                    <IconButton color=\"inherit\">\r\n                        <Badge badgeContent={4} color=\"secondary\">\r\n                            <NotificationsIcon />\r\n                        </Badge>\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {/* 왼쪽메뉴바 */}\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                }}\r\n                open={open}\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>{mainListItems}</List>\r\n             \r\n            </Drawer>\r\n\r\n\r\n            {/* 메인화면  */}\r\n            <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper style={{ padding: 16 }}>\r\n\r\n                                    <div className=\"gridInline\">\r\n\r\n                                        계약일자\r\n                                        &nbsp;\r\n                                    \r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(date)}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            defaultValue={moment(moment().date('01'),'YYYY-MM-DD')}\r\n                                        /> &nbsp;~&nbsp;\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(date)}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            minDate={startDate}\r\n                                            defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                        />\r\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                        계약구분\r\n                                        &nbsp;\r\n\r\n                                                            <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onContractTpHandler} value={contractTp}>\r\n                                                                {contractTps.map((item,index) => (\r\n                                                                    <option key={index} value={item.key}>{item.value}</option>\r\n                                                                ))}\r\n\r\n                                                            </Form.Control>\r\n                                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                                        계약상태\r\n                                        &nbsp;\r\n\r\n                                                            <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onContractStHandler} value={contractSt}>\r\n                                                                {contractSts.map((item,index) => (\r\n                                                                    <option key={index} value={item.key}>{item.value}</option>\r\n                                                                ))}\r\n\r\n                                                            </Form.Control>\r\n                                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                        <Button variant=\"contained\" style={{ width: 80, display: 'inline' }} color=\"primary\" onClick={onHandleFormSubmit}>\r\n                                            조회\r\n                                        </Button>\r\n                                    </div>\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                            <table className=\"btn\">\r\n                                <thead>\r\n                                    <tr>\r\n                               \r\n                                        <td  id=\"alignRight\"><Button variant=\"contained\" style={{ width: 150 }} color=\"primary\" onClick={excelHandler}>엑셀다운로드</Button></td>\r\n                                    </tr>                                \r\n                                </thead>\r\n                            </table>\r\n\r\n\r\n                            {/*계약 현황 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                <React.Fragment >\r\n                        <Title>계약 현황</Title>\r\n                        <Table size=\"small\">\r\n\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>계약ID</TableCell>\r\n                                    <TableCell>회원명</TableCell>\r\n                                    <TableCell>계약일자</TableCell>\r\n                                    <TableCell>계약구분</TableCell>\r\n                                    <TableCell>호    실</TableCell>\r\n                                    <TableCell>계약기간</TableCell>\r\n                                    <TableCell>계약상태</TableCell>\r\n                                    <TableCell>매월입금일</TableCell>\r\n                                    <TableCell>월회비</TableCell>\r\n                                    <TableCell>사물함</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                               {s010100050R}\r\n                            </TableBody>\r\n                        </Table>\r\n                        <div id=\"reactPage\">\r\n                             <ReactPaginate\r\n                                previousLabel = {\"Previous\"}\r\n                                nextLabel = {\"Next\"}\r\n                                pageCount = {pageCount}\r\n                                onPageChange = {changePage}\r\n                                containerClassName={\"paginationBtns\"}\r\n                                previousLinkClassName={\"previousBtn\"}\r\n                                nextLinkClassName={\"nextBtn\"}\r\n                                disabledClassName={\"paginationDisabled\"}\r\n                                activeClassName={\"paginationActive\"}  /> \r\n                        </div>\r\n                    </React.Fragment>\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Container>\r\n            </main>\r\n        </div>\r\n\r\n        <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={conOpen}\r\n                onClose={onConContractHandler}>\r\n                <S010100010 dataNum={rNum} cDataForm={'I'} onConContractHandler={onConContractHandler}/>\r\n            </Dialog>\r\n\r\n    </Fragment>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default S010100160;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\PrivateRoute.js",["377"],"import React, { useEffect } from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n    useEffect(() => {\r\n        sessionStorage.clear();\r\n    }, []);\r\n\r\n    return (\r\n        \r\n            <Route\r\n                {...rest}\r\n                render={props =>\r\n                    sessionStorage.getItem('member') != null ?\r\n                        (<Component {...props} />\r\n                            ) : (\r\n                            <Redirect to={{\r\n                                pathname: '/',\r\n                                state: { from: props.location },\r\n                            }}\r\n                            />\r\n\r\n                        )\r\n                }\r\n            />\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default PrivateRoute;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100151.js",["378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399"],"import React, { Fragment, useEffect, useState, useCallback } from 'react';\r\nimport './css/S010100130.css';\r\nimport axios from 'axios';\r\n\r\n// import 'react-datepicker/dist/react-datepicker.css';\r\n// import 'react-datepicker/dist/react-datepicker-cssmodules.min.css';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport { DatePicker } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport moment from 'moment';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 200,\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}));\r\n\r\n\r\n\r\nfunction S010100151() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [empRegNo, setEmpRegNo] = useState(\"\")\r\n    const [fstResidentRegiNum, setFstResidentRegiNum] = useState('');\r\n    const [sndResidentRegiNum, setSndResidentRegiNum] = useState('');\r\n\r\n\r\n    const onEmailHandler = (event) => {\r\n        setEmail(event.currentTarget.value)\r\n    }\r\n\r\n    const onFstResidentRegiNumHandler = (event) => {\r\n        setFstResidentRegiNum(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onSndResidentRegiNumHandler = (event) => {\r\n        setSndResidentRegiNum(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onSubmitHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n        if(email.length === 0) {\r\n            alert('이메일을 입력하세요.');\r\n        }else if(fstResidentRegiNum.length === 0 || sndResidentRegiNum.length === 0){\r\n            alert('주민번호를 입력하세요.');\r\n        }else{\r\n            let body = {\r\n                email: email,\r\n                fstResidentRegiNum: fstResidentRegiNum,\r\n                sndResidentRegiNum: sndResidentRegiNum\r\n            }\r\n            console.log(body);\r\n    \r\n            axios.post('/api/s010100151/findPwd', body)\r\n                .then(response => {\r\n                    if (response.data.success == true) {\r\n                        alert('비밀번호가 초기화 되었습니다.');\r\n                    } else if (response.data.success == false) {\r\n                        alert(response.data.message);\r\n                        alert('이메일 또는 주민번호를 확인하세요..');\r\n                    }\r\n                })\r\n        }\r\n     \r\n        \r\n        \r\n    }\r\n\r\n    const onFindHandler = (event) => {\r\n\r\n    }\r\n\r\n    const onEmpRegNoHandler = (event) => {\r\n        setEmpRegNo(event.currentTarget.value)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {/* 백그라운드 */}\r\n            <CssBaseline />\r\n            {/* 상단파란툴바 */}\r\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        Dashboard\r\n          </Typography>\r\n                    <IconButton color=\"inherit\">\r\n                        <Badge badgeContent={4} color=\"secondary\">\r\n                            <NotificationsIcon />\r\n                        </Badge>\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {/* 왼쪽 메뉴바 */}\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                }}\r\n                open={open}\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>{mainListItems}</List>\r\n            </Drawer>\r\n\r\n            <main className={classes.content}>\r\n                <div className={classes.appBarSpacer} />\r\n                <Container maxWidth=\"lg\" className={classes.container}>\r\n                    <Grid container spacing={3}>\r\n                        <Container component=\"main\" maxWidth=\"xs\">\r\n                            <CssBaseline />\r\n                            <div className={classes.paper}>\r\n\r\n                                <Typography component=\"h1\" variant=\"h5\">\r\n                                    비밀번호 찾기\r\n                                </Typography>\r\n\r\n                                <Form onSubmit={onSubmitHandler} >\r\n                                   \r\n                                        <Form.Group>\r\n                                            <Form.Label>Email address</Form.Label>\r\n                                            <Form.Control type=\"email\" placeholder=\"이메일을 입력하세요\" \r\n                                                value={email}\r\n                                                onChange={onEmailHandler} \r\n                                                id=\"email\"\r\n                                                name=\"email\"\r\n                                                />\r\n                                            <Form.Text className=\"text-muted\">\r\n                                                We'll never share your email with anyone else.\r\n                                        </Form.Text>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group>\r\n                                            <Form.Label>주민번호</Form.Label>\r\n                                            <Form.Control type=\"password\" placeholder=\"주민번호를 앞자리를 입력하세요\" \r\n                                                value={fstResidentRegiNum}\r\n                                                onChange={onFstResidentRegiNumHandler} \r\n                                                name=\"empRegNo\"\r\n                                                \r\n                                                id=\"empRegNo\"\r\n                                               />\r\n                                        </Form.Group>\r\n                                        <Form.Group >\r\n                                            <Form.Control type=\"password\" placeholder=\"주민번호를 뒷자리를 입력하세요\" value={sndResidentRegiNum}\r\n                                                onChange={onSndResidentRegiNumHandler}\r\n                                                name=\"empRegNo\"\r\n                                                id=\"empRegNo\"\r\n                                               />\r\n                                        </Form.Group>\r\n                                   \r\n                                    <Button type=\"submit\"\r\n                                            fullWidth\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.submit}\r\n                                        > 찾기 </Button>\r\n                                </Form>\r\n                            </div>\r\n\r\n                        </Container>\r\n\r\n                    </Grid>\r\n\r\n                </Container>\r\n            </main>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100151;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\test.js",[],{"ruleId":"400","replacedBy":"401"},{"ruleId":"402","replacedBy":"403"},{"ruleId":"404","severity":1,"message":"405","line":1,"column":16,"nodeType":"406","messageId":"407","endLine":1,"endColumn":25},{"ruleId":"404","severity":1,"message":"408","line":6,"column":10,"nodeType":"406","messageId":"407","endLine":6,"endColumn":14},{"ruleId":"404","severity":1,"message":"409","line":2,"column":8,"nodeType":"406","messageId":"407","endLine":2,"endColumn":12},{"ruleId":"404","severity":1,"message":"410","line":17,"column":5,"nodeType":"406","messageId":"407","endLine":17,"endColumn":15},{"ruleId":"400","replacedBy":"411"},{"ruleId":"402","replacedBy":"412"},{"ruleId":"404","severity":1,"message":"413","line":6,"column":18,"nodeType":"406","messageId":"407","endLine":6,"endColumn":27},{"ruleId":"414","severity":1,"message":"415","line":11,"column":1,"nodeType":"416","endLine":33,"endColumn":2},{"ruleId":"404","severity":1,"message":"413","line":1,"column":26,"nodeType":"406","messageId":"407","endLine":1,"endColumn":35},{"ruleId":"404","severity":1,"message":"417","line":3,"column":8,"nodeType":"406","messageId":"407","endLine":3,"endColumn":13},{"ruleId":"404","severity":1,"message":"418","line":6,"column":8,"nodeType":"406","messageId":"407","endLine":6,"endColumn":18},{"ruleId":"404","severity":1,"message":"419","line":11,"column":5,"nodeType":"406","messageId":"407","endLine":11,"endColumn":14},{"ruleId":"404","severity":1,"message":"420","line":12,"column":5,"nodeType":"406","messageId":"407","endLine":12,"endColumn":12},{"ruleId":"404","severity":1,"message":"421","line":13,"column":5,"nodeType":"406","messageId":"407","endLine":13,"endColumn":10},{"ruleId":"404","severity":1,"message":"410","line":15,"column":5,"nodeType":"406","messageId":"407","endLine":15,"endColumn":15},{"ruleId":"404","severity":1,"message":"422","line":25,"column":20,"nodeType":"406","messageId":"407","endLine":25,"endColumn":31},{"ruleId":"404","severity":1,"message":"423","line":26,"column":16,"nodeType":"406","messageId":"407","endLine":26,"endColumn":23},{"ruleId":"404","severity":1,"message":"424","line":27,"column":21,"nodeType":"406","messageId":"407","endLine":27,"endColumn":33},{"ruleId":"404","severity":1,"message":"425","line":28,"column":20,"nodeType":"406","messageId":"407","endLine":28,"endColumn":31},{"ruleId":"404","severity":1,"message":"426","line":29,"column":21,"nodeType":"406","messageId":"407","endLine":29,"endColumn":33},{"ruleId":"404","severity":1,"message":"427","line":30,"column":18,"nodeType":"406","messageId":"407","endLine":30,"endColumn":27},{"ruleId":"404","severity":1,"message":"405","line":1,"column":16,"nodeType":"406","messageId":"407","endLine":1,"endColumn":25},{"ruleId":"404","severity":1,"message":"405","line":1,"column":16,"nodeType":"406","messageId":"407","endLine":1,"endColumn":25},{"ruleId":"400","replacedBy":"428"},{"ruleId":"402","replacedBy":"429"},{"ruleId":"404","severity":1,"message":"430","line":13,"column":8,"nodeType":"406","messageId":"407","endLine":13,"endColumn":20},{"ruleId":"404","severity":1,"message":"431","line":74,"column":12,"nodeType":"406","messageId":"407","endLine":74,"endColumn":25},{"ruleId":"404","severity":1,"message":"432","line":75,"column":12,"nodeType":"406","messageId":"407","endLine":75,"endColumn":23},{"ruleId":"433","severity":1,"message":"434","line":199,"column":8,"nodeType":"435","endLine":199,"endColumn":10,"suggestions":"436"},{"ruleId":"404","severity":1,"message":"437","line":200,"column":9,"nodeType":"406","messageId":"407","endLine":200,"endColumn":21},{"ruleId":"433","severity":1,"message":"438","line":317,"column":8,"nodeType":"435","endLine":317,"endColumn":10,"suggestions":"439"},{"ruleId":"404","severity":1,"message":"440","line":371,"column":9,"nodeType":"406","messageId":"407","endLine":371,"endColumn":17},{"ruleId":"441","severity":1,"message":"442","line":394,"column":21,"nodeType":"443","messageId":"444","endLine":413,"endColumn":22},{"ruleId":"404","severity":1,"message":"445","line":478,"column":11,"nodeType":"406","messageId":"407","endLine":478,"endColumn":27},{"ruleId":"404","severity":1,"message":"446","line":563,"column":11,"nodeType":"406","messageId":"407","endLine":563,"endColumn":18},{"ruleId":"447","severity":1,"message":"448","line":565,"column":44,"nodeType":"449","messageId":"450","endLine":565,"endColumn":46},{"ruleId":"447","severity":1,"message":"448","line":570,"column":46,"nodeType":"449","messageId":"450","endLine":570,"endColumn":48},{"ruleId":"447","severity":1,"message":"448","line":570,"column":90,"nodeType":"449","messageId":"450","endLine":570,"endColumn":92},{"ruleId":"447","severity":1,"message":"448","line":570,"column":132,"nodeType":"449","messageId":"450","endLine":570,"endColumn":134},{"ruleId":"447","severity":1,"message":"448","line":574,"column":46,"nodeType":"449","messageId":"450","endLine":574,"endColumn":48},{"ruleId":"447","severity":1,"message":"448","line":574,"column":94,"nodeType":"449","messageId":"450","endLine":574,"endColumn":96},{"ruleId":"447","severity":1,"message":"448","line":585,"column":44,"nodeType":"449","messageId":"450","endLine":585,"endColumn":46},{"ruleId":"447","severity":1,"message":"448","line":590,"column":46,"nodeType":"449","messageId":"450","endLine":590,"endColumn":48},{"ruleId":"447","severity":1,"message":"448","line":590,"column":90,"nodeType":"449","messageId":"450","endLine":590,"endColumn":92},{"ruleId":"447","severity":1,"message":"448","line":590,"column":132,"nodeType":"449","messageId":"450","endLine":590,"endColumn":134},{"ruleId":"447","severity":1,"message":"448","line":594,"column":46,"nodeType":"449","messageId":"450","endLine":594,"endColumn":48},{"ruleId":"447","severity":1,"message":"448","line":594,"column":94,"nodeType":"449","messageId":"450","endLine":594,"endColumn":96},{"ruleId":"447","severity":1,"message":"448","line":599,"column":46,"nodeType":"449","messageId":"450","endLine":599,"endColumn":48},{"ruleId":"447","severity":1,"message":"448","line":604,"column":52,"nodeType":"449","messageId":"450","endLine":604,"endColumn":54},{"ruleId":"447","severity":1,"message":"448","line":609,"column":50,"nodeType":"449","messageId":"450","endLine":609,"endColumn":52},{"ruleId":"447","severity":1,"message":"448","line":614,"column":54,"nodeType":"449","messageId":"450","endLine":614,"endColumn":56},{"ruleId":"447","severity":1,"message":"448","line":619,"column":44,"nodeType":"449","messageId":"450","endLine":619,"endColumn":46},{"ruleId":"447","severity":1,"message":"448","line":624,"column":27,"nodeType":"449","messageId":"450","endLine":624,"endColumn":29},{"ruleId":"447","severity":1,"message":"448","line":628,"column":27,"nodeType":"449","messageId":"450","endLine":628,"endColumn":29},{"ruleId":"447","severity":1,"message":"448","line":632,"column":26,"nodeType":"449","messageId":"450","endLine":632,"endColumn":28},{"ruleId":"447","severity":1,"message":"448","line":661,"column":44,"nodeType":"449","messageId":"450","endLine":661,"endColumn":46},{"ruleId":"447","severity":1,"message":"448","line":666,"column":46,"nodeType":"449","messageId":"450","endLine":666,"endColumn":48},{"ruleId":"447","severity":1,"message":"448","line":666,"column":90,"nodeType":"449","messageId":"450","endLine":666,"endColumn":92},{"ruleId":"447","severity":1,"message":"448","line":666,"column":132,"nodeType":"449","messageId":"450","endLine":666,"endColumn":134},{"ruleId":"447","severity":1,"message":"448","line":671,"column":27,"nodeType":"449","messageId":"450","endLine":671,"endColumn":29},{"ruleId":"447","severity":1,"message":"448","line":694,"column":46,"nodeType":"449","messageId":"450","endLine":694,"endColumn":48},{"ruleId":"447","severity":1,"message":"448","line":699,"column":52,"nodeType":"449","messageId":"450","endLine":699,"endColumn":54},{"ruleId":"447","severity":1,"message":"448","line":704,"column":50,"nodeType":"449","messageId":"450","endLine":704,"endColumn":52},{"ruleId":"447","severity":1,"message":"448","line":709,"column":54,"nodeType":"449","messageId":"450","endLine":709,"endColumn":56},{"ruleId":"447","severity":1,"message":"448","line":714,"column":44,"nodeType":"449","messageId":"450","endLine":714,"endColumn":46},{"ruleId":"447","severity":1,"message":"448","line":762,"column":26,"nodeType":"449","messageId":"450","endLine":762,"endColumn":28},{"ruleId":"451","severity":1,"message":"452","line":817,"column":45,"nodeType":"449","messageId":"453","endLine":817,"endColumn":74},{"ruleId":"447","severity":1,"message":"448","line":838,"column":30,"nodeType":"449","messageId":"450","endLine":838,"endColumn":32},{"ruleId":"447","severity":1,"message":"448","line":854,"column":37,"nodeType":"449","messageId":"450","endLine":854,"endColumn":39},{"ruleId":"447","severity":1,"message":"454","line":1004,"column":31,"nodeType":"449","messageId":"450","endLine":1004,"endColumn":33},{"ruleId":"447","severity":1,"message":"454","line":1004,"column":84,"nodeType":"449","messageId":"450","endLine":1004,"endColumn":86},{"ruleId":"447","severity":1,"message":"454","line":1004,"column":136,"nodeType":"449","messageId":"450","endLine":1004,"endColumn":138},{"ruleId":"447","severity":1,"message":"454","line":1040,"column":31,"nodeType":"449","messageId":"450","endLine":1040,"endColumn":33},{"ruleId":"447","severity":1,"message":"454","line":1040,"column":58,"nodeType":"449","messageId":"450","endLine":1040,"endColumn":60},{"ruleId":"447","severity":1,"message":"454","line":1040,"column":84,"nodeType":"449","messageId":"450","endLine":1040,"endColumn":86},{"ruleId":"404","severity":1,"message":"455","line":1117,"column":21,"nodeType":"406","messageId":"407","endLine":1117,"endColumn":32},{"ruleId":"404","severity":1,"message":"456","line":1118,"column":21,"nodeType":"406","messageId":"407","endLine":1118,"endColumn":32},{"ruleId":"457","severity":1,"message":"458","line":1263,"column":145,"nodeType":"459","endLine":1263,"endColumn":162},{"ruleId":"447","severity":1,"message":"448","line":1272,"column":156,"nodeType":"449","messageId":"450","endLine":1272,"endColumn":158},{"ruleId":"457","severity":1,"message":"458","line":1738,"column":115,"nodeType":"459","endLine":1738,"endColumn":130},{"ruleId":"457","severity":1,"message":"458","line":1748,"column":121,"nodeType":"459","endLine":1748,"endColumn":136},{"ruleId":"404","severity":1,"message":"460","line":24,"column":25,"nodeType":"406","messageId":"407","endLine":24,"endColumn":43},{"ruleId":"404","severity":1,"message":"461","line":134,"column":5,"nodeType":"406","messageId":"407","endLine":134,"endColumn":14},{"ruleId":"404","severity":1,"message":"462","line":154,"column":12,"nodeType":"406","messageId":"407","endLine":154,"endColumn":23},{"ruleId":"404","severity":1,"message":"463","line":161,"column":12,"nodeType":"406","messageId":"407","endLine":161,"endColumn":17},{"ruleId":"404","severity":1,"message":"464","line":162,"column":12,"nodeType":"406","messageId":"407","endLine":162,"endColumn":17},{"ruleId":"433","severity":1,"message":"465","line":213,"column":8,"nodeType":"435","endLine":213,"endColumn":10,"suggestions":"466"},{"ruleId":"404","severity":1,"message":"467","line":252,"column":11,"nodeType":"406","messageId":"407","endLine":252,"endColumn":29},{"ruleId":"433","severity":1,"message":"468","line":256,"column":32,"nodeType":"406","endLine":256,"endColumn":43},{"ruleId":"404","severity":1,"message":"469","line":306,"column":51,"nodeType":"406","messageId":"407","endLine":306,"endColumn":56},{"ruleId":"447","severity":1,"message":"454","line":372,"column":56,"nodeType":"449","messageId":"450","endLine":372,"endColumn":58},{"ruleId":"404","severity":1,"message":"460","line":24,"column":25,"nodeType":"406","messageId":"407","endLine":24,"endColumn":43},{"ruleId":"433","severity":1,"message":"470","line":251,"column":8,"nodeType":"435","endLine":251,"endColumn":10,"suggestions":"471"},{"ruleId":"433","severity":1,"message":"468","line":261,"column":32,"nodeType":"406","endLine":261,"endColumn":43},{"ruleId":"433","severity":1,"message":"468","line":297,"column":38,"nodeType":"406","endLine":297,"endColumn":49},{"ruleId":"457","severity":1,"message":"458","line":570,"column":174,"nodeType":"459","endLine":570,"endColumn":201},{"ruleId":"404","severity":1,"message":"460","line":22,"column":25,"nodeType":"406","messageId":"407","endLine":22,"endColumn":43},{"ruleId":"404","severity":1,"message":"472","line":31,"column":8,"nodeType":"406","messageId":"407","endLine":31,"endColumn":21},{"ruleId":"433","severity":1,"message":"473","line":175,"column":8,"nodeType":"435","endLine":175,"endColumn":10,"suggestions":"474"},{"ruleId":"433","severity":1,"message":"468","line":215,"column":35,"nodeType":"406","endLine":215,"endColumn":46},{"ruleId":"404","severity":1,"message":"460","line":26,"column":25,"nodeType":"406","messageId":"407","endLine":26,"endColumn":43},{"ruleId":"404","severity":1,"message":"475","line":164,"column":12,"nodeType":"406","messageId":"407","endLine":164,"endColumn":26},{"ruleId":"433","severity":1,"message":"476","line":207,"column":8,"nodeType":"435","endLine":207,"endColumn":10,"suggestions":"477"},{"ruleId":"433","severity":1,"message":"468","line":237,"column":32,"nodeType":"406","endLine":237,"endColumn":43},{"ruleId":"433","severity":1,"message":"468","line":251,"column":38,"nodeType":"406","endLine":251,"endColumn":49},{"ruleId":"404","severity":1,"message":"469","line":323,"column":13,"nodeType":"406","messageId":"407","endLine":323,"endColumn":18},{"ruleId":"404","severity":1,"message":"478","line":24,"column":8,"nodeType":"406","messageId":"407","endLine":24,"endColumn":18},{"ruleId":"404","severity":1,"message":"479","line":27,"column":8,"nodeType":"406","messageId":"407","endLine":27,"endColumn":20},{"ruleId":"404","severity":1,"message":"480","line":135,"column":12,"nodeType":"406","messageId":"407","endLine":135,"endColumn":31},{"ruleId":"404","severity":1,"message":"481","line":181,"column":25,"nodeType":"406","messageId":"407","endLine":181,"endColumn":39},{"ruleId":"404","severity":1,"message":"482","line":182,"column":26,"nodeType":"406","messageId":"407","endLine":182,"endColumn":41},{"ruleId":"404","severity":1,"message":"483","line":183,"column":11,"nodeType":"406","messageId":"407","endLine":183,"endColumn":26},{"ruleId":"433","severity":1,"message":"484","line":296,"column":8,"nodeType":"435","endLine":296,"endColumn":10,"suggestions":"485"},{"ruleId":"433","severity":1,"message":"468","line":432,"column":34,"nodeType":"406","endLine":432,"endColumn":45},{"ruleId":"433","severity":1,"message":"468","line":438,"column":34,"nodeType":"406","endLine":438,"endColumn":45},{"ruleId":"486","severity":1,"message":"487","line":736,"column":37,"nodeType":"488","endLine":736,"endColumn":80},{"ruleId":"486","severity":1,"message":"487","line":748,"column":37,"nodeType":"488","endLine":748,"endColumn":80},{"ruleId":"404","severity":1,"message":"489","line":2,"column":17,"nodeType":"406","messageId":"407","endLine":2,"endColumn":25},{"ruleId":"404","severity":1,"message":"490","line":4,"column":10,"nodeType":"406","messageId":"407","endLine":4,"endColumn":20},{"ruleId":"404","severity":1,"message":"491","line":9,"column":8,"nodeType":"406","messageId":"407","endLine":9,"endColumn":11},{"ruleId":"404","severity":1,"message":"460","line":22,"column":25,"nodeType":"406","messageId":"407","endLine":22,"endColumn":43},{"ruleId":"404","severity":1,"message":"492","line":23,"column":8,"nodeType":"406","messageId":"407","endLine":23,"endColumn":14},{"ruleId":"404","severity":1,"message":"493","line":26,"column":8,"nodeType":"406","messageId":"407","endLine":26,"endColumn":24},{"ruleId":"404","severity":1,"message":"494","line":27,"column":8,"nodeType":"406","messageId":"407","endLine":27,"endColumn":16},{"ruleId":"404","severity":1,"message":"495","line":29,"column":8,"nodeType":"406","messageId":"407","endLine":29,"endColumn":24},{"ruleId":"404","severity":1,"message":"496","line":30,"column":8,"nodeType":"406","messageId":"407","endLine":30,"endColumn":12},{"ruleId":"404","severity":1,"message":"497","line":32,"column":8,"nodeType":"406","messageId":"407","endLine":32,"endColumn":18},{"ruleId":"404","severity":1,"message":"498","line":33,"column":10,"nodeType":"406","messageId":"407","endLine":33,"endColumn":19},{"ruleId":"499","severity":1,"message":"500","line":126,"column":3,"nodeType":"501","messageId":"450","endLine":126,"endColumn":8},{"ruleId":"447","severity":1,"message":"448","line":197,"column":36,"nodeType":"449","messageId":"450","endLine":197,"endColumn":38},{"ruleId":"447","severity":1,"message":"448","line":202,"column":40,"nodeType":"449","messageId":"450","endLine":202,"endColumn":42},{"ruleId":"447","severity":1,"message":"448","line":228,"column":39,"nodeType":"449","messageId":"450","endLine":228,"endColumn":41},{"ruleId":"447","severity":1,"message":"448","line":236,"column":44,"nodeType":"449","messageId":"450","endLine":236,"endColumn":46},{"ruleId":"502","severity":1,"message":"503","line":294,"column":15,"nodeType":"488","endLine":294,"endColumn":46},{"ruleId":"433","severity":1,"message":"504","line":51,"column":8,"nodeType":"435","endLine":51,"endColumn":10,"suggestions":"505"},{"ruleId":"433","severity":1,"message":"506","line":66,"column":8,"nodeType":"435","endLine":66,"endColumn":10,"suggestions":"507"},{"ruleId":"441","severity":1,"message":"442","line":94,"column":21,"nodeType":"443","messageId":"444","endLine":98,"endColumn":22},{"ruleId":"486","severity":1,"message":"508","line":15,"column":25,"nodeType":"488","endLine":15,"endColumn":82},{"ruleId":"404","severity":1,"message":"478","line":15,"column":8,"nodeType":"406","messageId":"407","endLine":15,"endColumn":18},{"ruleId":"404","severity":1,"message":"509","line":26,"column":7,"nodeType":"406","messageId":"407","endLine":26,"endColumn":16},{"ruleId":"404","severity":1,"message":"481","line":131,"column":25,"nodeType":"406","messageId":"407","endLine":131,"endColumn":39},{"ruleId":"404","severity":1,"message":"482","line":132,"column":26,"nodeType":"406","messageId":"407","endLine":132,"endColumn":41},{"ruleId":"404","severity":1,"message":"483","line":133,"column":11,"nodeType":"406","messageId":"407","endLine":133,"endColumn":26},{"ruleId":"404","severity":1,"message":"510","line":136,"column":12,"nodeType":"406","messageId":"407","endLine":136,"endColumn":23},{"ruleId":"404","severity":1,"message":"511","line":137,"column":12,"nodeType":"406","messageId":"407","endLine":137,"endColumn":26},{"ruleId":"404","severity":1,"message":"512","line":137,"column":28,"nodeType":"406","messageId":"407","endLine":137,"endColumn":45},{"ruleId":"513","severity":1,"message":"514","line":181,"column":50,"nodeType":"515","messageId":"516","endLine":181,"endColumn":52},{"ruleId":"433","severity":1,"message":"517","line":209,"column":8,"nodeType":"435","endLine":209,"endColumn":10,"suggestions":"518"},{"ruleId":"404","severity":1,"message":"519","line":43,"column":23,"nodeType":"406","messageId":"407","endLine":43,"endColumn":41},{"ruleId":"433","severity":1,"message":"520","line":98,"column":12,"nodeType":"435","endLine":98,"endColumn":14,"suggestions":"521"},{"ruleId":"400","replacedBy":"522"},{"ruleId":"402","replacedBy":"523"},{"ruleId":"400","replacedBy":"524"},{"ruleId":"402","replacedBy":"525"},{"ruleId":"404","severity":1,"message":"526","line":5,"column":8,"nodeType":"406","messageId":"407","endLine":5,"endColumn":21},{"ruleId":"400","replacedBy":"527"},{"ruleId":"402","replacedBy":"528"},{"ruleId":"404","severity":1,"message":"529","line":143,"column":11,"nodeType":"406","messageId":"407","endLine":143,"endColumn":27},{"ruleId":"447","severity":1,"message":"448","line":153,"column":19,"nodeType":"449","messageId":"450","endLine":153,"endColumn":21},{"ruleId":"447","severity":1,"message":"448","line":218,"column":42,"nodeType":"449","messageId":"450","endLine":218,"endColumn":44},{"ruleId":"447","severity":1,"message":"448","line":223,"column":40,"nodeType":"449","messageId":"450","endLine":223,"endColumn":42},{"ruleId":"447","severity":1,"message":"448","line":228,"column":62,"nodeType":"449","messageId":"450","endLine":228,"endColumn":64},{"ruleId":"447","severity":1,"message":"448","line":228,"column":120,"nodeType":"449","messageId":"450","endLine":228,"endColumn":122},{"ruleId":"447","severity":1,"message":"448","line":233,"column":46,"nodeType":"449","messageId":"450","endLine":233,"endColumn":48},{"ruleId":"447","severity":1,"message":"448","line":233,"column":88,"nodeType":"449","messageId":"450","endLine":233,"endColumn":90},{"ruleId":"447","severity":1,"message":"448","line":233,"column":129,"nodeType":"449","messageId":"450","endLine":233,"endColumn":131},{"ruleId":"447","severity":1,"message":"448","line":238,"column":46,"nodeType":"449","messageId":"450","endLine":238,"endColumn":48},{"ruleId":"447","severity":1,"message":"448","line":238,"column":94,"nodeType":"449","messageId":"450","endLine":238,"endColumn":96},{"ruleId":"447","severity":1,"message":"448","line":243,"column":32,"nodeType":"449","messageId":"450","endLine":243,"endColumn":34},{"ruleId":"447","severity":1,"message":"448","line":248,"column":28,"nodeType":"449","messageId":"450","endLine":248,"endColumn":30},{"ruleId":"447","severity":1,"message":"448","line":251,"column":27,"nodeType":"449","messageId":"450","endLine":251,"endColumn":29},{"ruleId":"447","severity":1,"message":"454","line":255,"column":31,"nodeType":"449","messageId":"450","endLine":255,"endColumn":33},{"ruleId":"447","severity":1,"message":"454","line":255,"column":58,"nodeType":"449","messageId":"450","endLine":255,"endColumn":60},{"ruleId":"447","severity":1,"message":"454","line":255,"column":84,"nodeType":"449","messageId":"450","endLine":255,"endColumn":86},{"ruleId":"447","severity":1,"message":"454","line":347,"column":31,"nodeType":"449","messageId":"450","endLine":347,"endColumn":33},{"ruleId":"447","severity":1,"message":"454","line":347,"column":58,"nodeType":"449","messageId":"450","endLine":347,"endColumn":60},{"ruleId":"447","severity":1,"message":"454","line":347,"column":84,"nodeType":"449","messageId":"450","endLine":347,"endColumn":86},{"ruleId":"404","severity":1,"message":"463","line":372,"column":9,"nodeType":"406","messageId":"407","endLine":372,"endColumn":14},{"ruleId":"447","severity":1,"message":"448","line":391,"column":22,"nodeType":"449","messageId":"450","endLine":391,"endColumn":24},{"ruleId":"433","severity":1,"message":"530","line":395,"column":8,"nodeType":"435","endLine":395,"endColumn":10,"suggestions":"531"},{"ruleId":"447","severity":1,"message":"448","line":400,"column":22,"nodeType":"449","messageId":"450","endLine":400,"endColumn":24},{"ruleId":"447","severity":1,"message":"454","line":439,"column":68,"nodeType":"449","messageId":"450","endLine":439,"endColumn":70},{"ruleId":"447","severity":1,"message":"454","line":439,"column":91,"nodeType":"449","messageId":"450","endLine":439,"endColumn":93},{"ruleId":"447","severity":1,"message":"454","line":451,"column":72,"nodeType":"449","messageId":"450","endLine":451,"endColumn":74},{"ruleId":"447","severity":1,"message":"454","line":451,"column":97,"nodeType":"449","messageId":"450","endLine":451,"endColumn":99},{"ruleId":"433","severity":1,"message":"532","line":473,"column":8,"nodeType":"435","endLine":473,"endColumn":10,"suggestions":"533"},{"ruleId":"447","severity":1,"message":"454","line":612,"column":39,"nodeType":"449","messageId":"450","endLine":612,"endColumn":41},{"ruleId":"447","severity":1,"message":"454","line":612,"column":73,"nodeType":"449","messageId":"450","endLine":612,"endColumn":75},{"ruleId":"457","severity":1,"message":"458","line":759,"column":124,"nodeType":"459","endLine":759,"endColumn":141},{"ruleId":"486","severity":1,"message":"487","line":844,"column":33,"nodeType":"488","endLine":844,"endColumn":76},{"ruleId":"486","severity":1,"message":"487","line":853,"column":33,"nodeType":"488","endLine":853,"endColumn":76},{"ruleId":"486","severity":1,"message":"487","line":863,"column":33,"nodeType":"488","endLine":863,"endColumn":76},{"ruleId":"404","severity":1,"message":"460","line":24,"column":25,"nodeType":"406","messageId":"407","endLine":24,"endColumn":43},{"ruleId":"404","severity":1,"message":"472","line":33,"column":8,"nodeType":"406","messageId":"407","endLine":33,"endColumn":21},{"ruleId":"404","severity":1,"message":"534","line":34,"column":8,"nodeType":"406","messageId":"407","endLine":34,"endColumn":19},{"ruleId":"433","severity":1,"message":"535","line":248,"column":8,"nodeType":"435","endLine":248,"endColumn":10,"suggestions":"536"},{"ruleId":"433","severity":1,"message":"468","line":266,"column":36,"nodeType":"406","endLine":266,"endColumn":47},{"ruleId":"404","severity":1,"message":"490","line":3,"column":10,"nodeType":"406","messageId":"407","endLine":3,"endColumn":20},{"ruleId":"404","severity":1,"message":"489","line":1,"column":17,"nodeType":"406","messageId":"407","endLine":1,"endColumn":25},{"ruleId":"404","severity":1,"message":"413","line":1,"column":27,"nodeType":"406","messageId":"407","endLine":1,"endColumn":36},{"ruleId":"404","severity":1,"message":"537","line":1,"column":48,"nodeType":"406","messageId":"407","endLine":1,"endColumn":59},{"ruleId":"404","severity":1,"message":"538","line":21,"column":8,"nodeType":"406","messageId":"407","endLine":21,"endColumn":13},{"ruleId":"404","severity":1,"message":"460","line":25,"column":25,"nodeType":"406","messageId":"407","endLine":25,"endColumn":43},{"ruleId":"404","severity":1,"message":"539","line":27,"column":8,"nodeType":"406","messageId":"407","endLine":27,"endColumn":17},{"ruleId":"404","severity":1,"message":"540","line":28,"column":8,"nodeType":"406","messageId":"407","endLine":28,"endColumn":13},{"ruleId":"404","severity":1,"message":"541","line":29,"column":8,"nodeType":"406","messageId":"407","endLine":29,"endColumn":17},{"ruleId":"404","severity":1,"message":"542","line":30,"column":8,"nodeType":"406","messageId":"407","endLine":30,"endColumn":17},{"ruleId":"404","severity":1,"message":"543","line":31,"column":8,"nodeType":"406","messageId":"407","endLine":31,"endColumn":17},{"ruleId":"404","severity":1,"message":"544","line":32,"column":8,"nodeType":"406","messageId":"407","endLine":32,"endColumn":16},{"ruleId":"404","severity":1,"message":"545","line":33,"column":8,"nodeType":"406","messageId":"407","endLine":33,"endColumn":13},{"ruleId":"404","severity":1,"message":"546","line":34,"column":8,"nodeType":"406","messageId":"407","endLine":34,"endColumn":14},{"ruleId":"404","severity":1,"message":"418","line":36,"column":10,"nodeType":"406","messageId":"407","endLine":36,"endColumn":20},{"ruleId":"404","severity":1,"message":"547","line":38,"column":8,"nodeType":"406","messageId":"407","endLine":38,"endColumn":14},{"ruleId":"404","severity":1,"message":"548","line":42,"column":8,"nodeType":"406","messageId":"407","endLine":42,"endColumn":21},{"ruleId":"404","severity":1,"message":"549","line":44,"column":8,"nodeType":"406","messageId":"407","endLine":44,"endColumn":12},{"ruleId":"404","severity":1,"message":"550","line":154,"column":12,"nodeType":"406","messageId":"407","endLine":154,"endColumn":20},{"ruleId":"447","severity":1,"message":"448","line":190,"column":47,"nodeType":"449","messageId":"450","endLine":190,"endColumn":49},{"ruleId":"447","severity":1,"message":"448","line":192,"column":54,"nodeType":"449","messageId":"450","endLine":192,"endColumn":56},{"ruleId":"404","severity":1,"message":"551","line":203,"column":11,"nodeType":"406","messageId":"407","endLine":203,"endColumn":24},{"ruleId":"404","severity":1,"message":"552","line":207,"column":11,"nodeType":"406","messageId":"407","endLine":207,"endColumn":28},"no-native-reassign",["553"],"no-negated-in-lhs",["554"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Main' is defined but never used.","'registNums' is assigned a value but never used.",["553"],["554"],"'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Axios' is defined but never used.","'DatePicker' is defined but never used.","'RoomTypes' is assigned a value but never used.","'Methods' is assigned a value but never used.","'Paths' is assigned a value but never used.","'setUserName' is assigned a value but never used.","'setBnum' is assigned a value but never used.","'setOwnerName' is assigned a value but never used.","'setUserSort' is assigned a value but never used.","'setEndStatus' is assigned a value but never used.","'setStatus' is assigned a value but never used.",["553"],["554"],"'PrivateRoute' is defined but never used.","'contractStart' is assigned a value but never used.","'contractEnd' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'modalMemberId' and 'props.newDataForm'. Either include them or remove the dependency array.","ArrayExpression",["555"],"'endBtnDelete' is defined but never used.","React Hook useEffect has missing dependencies: 'props.cDataForm' and 'rNum'. Either include them or remove the dependency array.",["556"],"'payDates' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'onPayDateHandler' is assigned a value but never used.","'nullChk' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf","Expected '!==' and instead saw '!='.","'setPaymentY' is assigned a value but never used.","'setPaymentN' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'secondaryListItems' is defined but never used.","'empIdMarr' is assigned a value but never used.","'closeStatus' is assigned a value but never used.","'memId' is assigned a value but never used.","'empId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'empList'. Either include it or remove the dependency array.",["557"],"'closeStatusHandler' is assigned a value but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'chkSt' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'memberList'. Either include it or remove the dependency array.",["558"],"'DialogActions' is defined but never used.","React Hook useEffect has missing dependencies: 'endDate' and 'startDate'. Either include them or remove the dependency array.",["559"],"'checkForDelete' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'searchAsk'. Either include it or remove the dependency array.",["560"],"'Pagination' is defined but never used.","'fileDownload' is defined but never used.","'nameForDetailCModal' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.","'setPostsPerPage' is assigned a value but never used.","'indexOfLastPost' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'detailMemberList'. Either include it or remove the dependency array.",["561"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Fragment' is defined but never used.","'useCookies' is defined but never used.","'Box' is defined but never used.","'Avatar' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'Form' is defined but never used.","'S010100151' is defined but never used.","'Copyright' is defined but never used.","no-dupe-keys","Duplicate key 'paper'.","ObjectExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'props.dataForm' and 'rNum'. Either include them or remove the dependency array.",["562"],"React Hook useEffect has missing dependencies: 'getAccessPathLov', 'getAskMethodLov', and 'getContractTpLov'. Either include them or remove the dependency array.",["563"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useStyles' is assigned a value but never used.","'sequenceChk' is assigned a value but never used.","'checkStatusChk' is assigned a value but never used.","'setCheckStatusChk' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'paymentStList'. Either include it or remove the dependency array.",["564"],"'modalCContractDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.dataNum'. Either include it or remove the dependency array.",["565"],["553"],["554"],["553"],["554"],"'ListSubheader' is defined but never used.",["553"],["554"],"'retireProcessing' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataForm' and 'name'. Either include them or remove the dependency array.",["566"],"React Hook useEffect has missing dependencies: 'dataForm' and 'props.empIdM'. Either include them or remove the dependency array.",["567"],"'DialogTitle' is defined but never used.","React Hook useEffect has a missing dependency: 'allOfcontractList'. Either include it or remove the dependency array.",["568"],"'useCallback' is defined but never used.","'Paper' is defined but never used.","'TextField' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'Title' is defined but never used.","'Dialog' is defined but never used.","'moment' is defined but never used.","'ReactPaginate' is defined but never used.","'xlsx' is defined but never used.","'empRegNo' is assigned a value but never used.","'onFindHandler' is assigned a value but never used.","'onEmpRegNoHandler' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"587","fix":"588"},{"desc":"589","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},"Update the dependencies array to be: [modalMemberId, props.newDataForm]",{"range":"597","text":"598"},"Update the dependencies array to be: [props.cDataForm, rNum]",{"range":"599","text":"600"},"Update the dependencies array to be: [empList]",{"range":"601","text":"602"},"Update the dependencies array to be: [memberList]",{"range":"603","text":"604"},"Update the dependencies array to be: [endDate, startDate]",{"range":"605","text":"606"},"Update the dependencies array to be: [searchAsk]",{"range":"607","text":"608"},"Update the dependencies array to be: [detailMemberList]",{"range":"609","text":"610"},"Update the dependencies array to be: [props.dataForm, rNum]",{"range":"611","text":"612"},"Update the dependencies array to be: [getAccessPathLov, getAskMethodLov, getContractTpLov]",{"range":"613","text":"614"},"Update the dependencies array to be: [paymentStList]",{"range":"615","text":"616"},"Update the dependencies array to be: [props.dataNum]",{"range":"617","text":"618"},"Update the dependencies array to be: [dataForm, name]",{"range":"619","text":"620"},"Update the dependencies array to be: [dataForm, props.empIdM]",{"range":"621","text":"622"},"Update the dependencies array to be: [allOfcontractList]",{"range":"623","text":"624"},[7851,7853],"[modalMemberId, props.newDataForm]",[14385,14387],"[props.cDataForm, rNum]",[6602,6604],"[empList]",[7667,7669],"[memberList]",[5607,5609],"[endDate, startDate]",[6366,6368],"[searchAsk]",[10336,10338],"[detailMemberList]",[1862,1864],"[props.dataForm, rNum]",[2464,2466],"[getAccessPathLov, getAskMethodLov, getContractTpLov]",[6848,6850],"[paymentStList]",[4055,4057],"[props.dataNum]",[13355,13357],"[dataForm, name]",[16948,16950],"[dataForm, props.empIdM]",[7460,7462],"[allOfcontractList]"]