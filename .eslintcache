[{"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js":"1","C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js":"2","C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js":"3","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js":"4","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js":"5","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js":"6","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js":"7","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js":"8","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js":"9","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js":"10","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js":"11","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js":"12","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\index.js":"13","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\App.js":"14","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\reportWebVitals.js":"15","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Routes\\Routes.js":"16","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100010.js":"17","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100090.js":"18","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100040.js":"19","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100060.js":"20","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100130.js":"21","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100050.js":"22","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100150.js":"23","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100140.js":"24","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Pagination.js":"25","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100070.js":"26","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\LeaseAgreement.js":"27","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\listItems.js":"28","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\PostCard.js":"29","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100100.js":"30","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100160.js":"31","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100151.js":"32","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\taste.js":"33","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Title.js":"34","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\ScreenLayout.js":"35"},{"size":555,"mtime":1609727657789,"results":"36","hashOfConfig":"37"},{"size":240,"mtime":1609727648266,"results":"38","hashOfConfig":"37"},{"size":362,"mtime":499162500000,"results":"39","hashOfConfig":"37"},{"size":11524,"mtime":1609829204925,"results":"40","hashOfConfig":"37"},{"size":1055,"mtime":1609833591029,"results":"41","hashOfConfig":"37"},{"size":8135,"mtime":1609830177180,"results":"42","hashOfConfig":"37"},{"size":2082,"mtime":1609828498424,"results":"43","hashOfConfig":"37"},{"size":994,"mtime":1609727352401,"results":"44","hashOfConfig":"37"},{"size":1306,"mtime":1609834092417,"results":"45","hashOfConfig":"37"},{"size":4553,"mtime":1609836098390,"results":"46","hashOfConfig":"37"},{"size":4356,"mtime":1609833363720,"results":"47","hashOfConfig":"37"},{"size":5135,"mtime":1609835439756,"results":"48","hashOfConfig":"37"},{"size":508,"mtime":1616130102573,"results":"49","hashOfConfig":"50"},{"size":285,"mtime":1616130100602,"results":"51","hashOfConfig":"50"},{"size":362,"mtime":499162500000,"results":"52","hashOfConfig":"50"},{"size":2625,"mtime":1616141019693,"results":"53","hashOfConfig":"50"},{"size":85935,"mtime":1616254886740,"results":"54","hashOfConfig":"50"},{"size":29667,"mtime":1616175488721,"results":"55","hashOfConfig":"50"},{"size":27289,"mtime":1616174574659,"results":"56","hashOfConfig":"50"},{"size":22985,"mtime":1616175422536,"results":"57","hashOfConfig":"50"},{"size":27232,"mtime":1616175493278,"results":"58","hashOfConfig":"50"},{"size":34955,"mtime":1616175472750,"results":"59","hashOfConfig":"50"},{"size":12841,"mtime":1616166204850,"results":"60","hashOfConfig":"50"},{"size":13374,"mtime":1616175495807,"results":"61","hashOfConfig":"50"},{"size":775,"mtime":1613554840662,"results":"62","hashOfConfig":"50"},{"size":23231,"mtime":1616254890751,"results":"63","hashOfConfig":"50"},{"size":26459,"mtime":1616254883574,"results":"64","hashOfConfig":"50"},{"size":2379,"mtime":1615551799255,"results":"65","hashOfConfig":"50"},{"size":771,"mtime":1613825634853,"results":"66","hashOfConfig":"50"},{"size":47611,"mtime":1616254900514,"results":"67","hashOfConfig":"50"},{"size":23090,"mtime":1616141289419,"results":"68","hashOfConfig":"50"},{"size":11288,"mtime":1616175417964,"results":"69","hashOfConfig":"50"},{"size":2142,"mtime":1615424762882,"results":"70","hashOfConfig":"50"},{"size":356,"mtime":1615566765754,"results":"71","hashOfConfig":"50"},{"size":9980,"mtime":1616143807360,"results":"72","hashOfConfig":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"2g9vyx",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"75"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"75"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"75"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"75"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"75"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"75"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"1i31dyy",{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"108"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":82,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"108"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"108"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"108"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"108"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"108"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"108"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"108"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"108"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"108"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"108"},"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js",[],["170","171"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js",["172","173"],"import React,{ Component, Fragment,useEffect,useState } from 'react';\r\nimport './Counseling.css';\r\nimport Main from'../Main/Main.js';\r\nimport axios from \"axios\";\r\nimport CounselStatus from './CounselStatus';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n//모달창 라이브러리 끝-->\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\nvar rNum = '';\r\nvar Rnum = 0;\r\n\r\n\r\nvar Methods = []\r\n\r\nfunction Counseling (props) {\r\n\r\n    const[ConsultRegists, setConsultRegists] = useState([])\r\n\r\n    useEffect(()=>{\r\n        \r\n        axios.post('/api/register/registers')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    console.log(response.data.rows)\r\n                    setConsultRegists(response.data.rows)\r\n                }else{ \r\n                    alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n\r\n    },[])\r\n    \r\n    const[method, setMethod]=useState([])\r\n    \r\n    useEffect(()=>{\r\n        axios.post('/api/register/insertMethod')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log('insertMethod',response.data);\r\n                let arr = [{value: '전체', text: '전체' }]\r\n\r\n                response.data.rows.map((data) => \r\n                    arr.push({\r\n                    value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                }));\r\n                \r\n                Methods=arr;\r\n\r\n                console.log('insertMethodArr',arr);\r\n            }else{\r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n            }\r\n        })\r\n\r\n        \r\n        \r\n    },[])\r\n\r\n    //<!--모달창 속성 및 이벤트 \r\n    const [open, setOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    const [CRegists,setCRegists] = useState({});\r\n\r\n\r\n\r\n    //상담등록 모달\r\n    const onhandleClickOpen = () => {\r\n        setStoreOpen(true); \r\n     \r\n     };  \r\n\r\n                //상담등록 저장버튼이벤트\r\n                // const onhandleStoreClose = () => {\r\n                //     setOpen(false);\r\n                // }\r\n            \r\n     const onhandleClose = (event) => {\r\n          \r\n        axios.post('/api/register/registers')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log(response.data.rows)\r\n                setConsultRegists(response.data.rows)\r\n            }else{ \r\n                alert(\"상담등록 페이지 가져오기를 실패하였습니다.\")\r\n            }\r\n\r\n        })\r\n\r\n        setStoreOpen(false);\r\n       };\r\n    //상담등록 모달 끝\r\n\r\n    //상세보기 모달\r\n    const handleClickOpen = (e) => {\r\n       setOpen(true); \r\n       rNum = e.target.innerHTML\r\n       Rnum= parseInt(rNum);\r\n       //console.log(Rnum)\r\n\r\n       axios.get(`/api/register/register_by_id?id=${Rnum}&type=single`) \r\n       .then(response => {\r\n           if(response.data.success){\r\n               console.log(response.data)\r\n               setCRegists(response.data.rows[0])\r\n               //console.log(response.data.consultRegistInfo.num)\r\n           }else{\r\n               alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n           }\r\n\r\n       })\r\n    };  \r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n      //상세보기 모달 끝 \r\n    //모달창 속성 및 이벤트 끝-->\r\n\r\n\r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n\r\n        // if(method.valueOf('전체') ||!startDate||!endDate||!searchName){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n         const body = {\r\n            startDate,\r\n            searchName,\r\n            method,\r\n            endDate\r\n        }\r\n        \r\n        //console.log(body);\r\n        \r\n        axios.post(\"/api/register/search\",body)\r\n        .then(response => {\r\n            if(response?.data?.success){\r\n                console.log('search',response.data.rows);\r\n                setConsultRegists(response.data.rows);\r\n            }else{\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    \r\n\r\n\r\n    const[searchName, setSearchName] = useState(\"\")\r\n\r\n    const MethodChangeHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const nameSearchHandler=(event)=>{\r\n        setSearchName(event.currentTarget.value);\r\n    }\r\n\r\n    //console.log('ConsultRegists',ConsultRegists);\r\n\r\n    const resultTable = ConsultRegists.map((ConsultRegists,index)=>{\r\n\r\n        return<tr>\r\n                <td name =\"cname\" variant=\"outlined\" color=\"primary\" onClick={handleClickOpen} id={ConsultRegists.num}><u>{ConsultRegists.num}\r\n                </u></td>\r\n                {/* 모달창 시작 */}\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{CRegists.cname+\"님의 상담내용 입니다.\"}</DialogTitle>\r\n                    <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {CRegists.content}\r\n                    </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                        확인\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* 모달창 끝*/}\r\n\r\n                <td>{ConsultRegists.roomtype}</td>\r\n                <td>{ConsultRegists.counseldate}</td>\r\n                <td>{ConsultRegists.method}</td>\r\n                <td>{ConsultRegists.cname}</td>\r\n                <td>{ConsultRegists.phone}</td>\r\n                <td>{ConsultRegists.path}</td>\r\n                \r\n            </tr>\r\n    })\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                \r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>상담현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                        문의일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        문의구분 \r\n                        <select onChange ={MethodChangeHandler} value ={method}>   \r\n                        \r\n                            {Methods.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                    \r\n                        </select>\r\n                        &nbsp; \r\n\r\n                        문의자명\r\n                         <input type=\"text\" value = {searchName} id=\"searchlName\" name=\"searchName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onhandleClickOpen} >상담등록</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    {/* 모달창 시작 --> 504에러 */}\r\n                        <Dialog\r\n                            open={storeOpen}\r\n                            onClose={onhandleClose}\r\n                            aria-labelledby=\"alert-dialog-title\"\r\n                            aria-describedby=\"alert-dialog-description\"\r\n                        >\r\n                            <DialogTitle id=\"alert-dialog-title\"><h1>상담등록</h1></DialogTitle>\r\n                            <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                                 <CounselStatus/>\r\n                            </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                            {/* <Button onClick={onhandleStoreClose} color=\"primary\" autoFocus>\r\n                                저장\r\n                            </Button> */}\r\n                            <Button onClick={onhandleClose} color=\"primary\">\r\n                                닫기\r\n                            </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                     {/* // 모달창 끝        */}\r\n\r\n                    \r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>No</th>\r\n                            <th>문의 구분</th>\r\n                            <th>문의일자</th>\r\n                            <th>문의방법</th>\r\n                            <th>문의자명</th>\r\n                            <th>연락처</th>\r\n                            <th>접근경로</th>\r\n                        </tr>\r\n\r\n                        \r\n                            {resultTable}\r\n                       \r\n\r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Counseling;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js",["174","175"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\nimport { addDays } from 'date-fns';\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nimport \"./CounselStatus.css\";\r\nregisterLocale(\"ko\", ko);\r\n\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction CounselStatus(props) {\r\n\r\n    //Lov(List of Value)를 데이터 베이스에서 가져오기 \r\n        //select\r\n        const[RoomType,setRoomType] = useState(1)\r\n        const[Method, setMethod] = useState(1)\r\n        const[Path, setPath] = useState(1)\r\n\r\n        //문의구분\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/roomType')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('roomType',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    RoomTypes = arr;\r\n\r\n                    //console.log('roomTypeArr',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n            \r\n            \r\n        },[])\r\n\r\n        //문의방법\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/methodA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('method',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Methods = arr;\r\n\r\n                    //console.log('method',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n\r\n        //접근경로\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/pathA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('Paths',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Paths = arr;\r\n\r\n                    //console.log('Paths',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n    //Lov끝    \r\n\r\n\r\n    \r\n    //datepicker속성 및 이벤트 시작\r\n    const [StartDate, setStartDate] = useState(new Date());\r\n    //datepicker속성 및 이벤트 끝\r\n    console.log(StartDate.getMonth()+1);\r\n    console.log(StartDate);\r\n    \r\n    const[CounselName, setCounselName] = useState(\"\")\r\n    const[UserPhone, setUserPhone] = useState(\"\")\r\n    const[Content, setContent] = useState(\"\")\r\n\r\n\r\n    const onNameHandler=(event)=>{\r\n        setCounselName(event.currentTarget.value);\r\n    }\r\n\r\n    const MethodHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const PathHandler=(event)=>{\r\n        setPath(event.currentTarget.value);\r\n    }\r\n\r\n    const onPhoneHandler=(event)=>{\r\n        setUserPhone(event.currentTarget.value);\r\n    }\r\n\r\n    const onContentHandler=(event)=>{\r\n        setContent(event.currentTarget.value);\r\n    }\r\n\r\n    const RoomTypeChangeHandler=(event)=>{\r\n        setRoomType(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n        //console.log(RoomType)\r\n    \r\n        // if(RoomType.valueOf('전체') ||!CounselName||Method.valueOf('전체')||Path.valueOf('전체')||!UserPhone||!Content){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n        \r\n        \r\n        //서버에 채운 값들을 request로 보낸다.\r\n        const body = {\r\n            roomtype: RoomType,\r\n            counseldate: StartDate,\r\n            cname: CounselName,\r\n            method: Method,\r\n            path: Path,\r\n            phone: UserPhone,\r\n            content: Content\r\n            \r\n        }\r\n        \r\n        \r\n        Axios.post(\"/api/register\",body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 등록되었습니다.')\r\n               // props.history.push('/counseling')\r\n            }else{\r\n                alert('등록에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          {/* <Main/>\r\n          <h1>상담등록</h1> */}\r\n          <table>\r\n            <tr>\r\n                <th>문의구분</th>\r\n                    <td>\r\n                        <select onChange ={RoomTypeChangeHandler} value ={RoomType}>   \r\n                        \r\n                            {RoomTypes.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                        \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의일자</th>\r\n                    <td>   \r\n                    <DatePicker\r\n                        locale=\"ko\"\r\n                        selected={StartDate}\r\n                        onChange={date => setStartDate(date)}\r\n                        minDate={new Date()}\r\n                        maxDate={addDays(new Date(), 0)}  \r\n                        dateFormat=\"yyyy.MM.dd (eee)\"\r\n                    />\r\n\r\n                    </td>\r\n                <th>문의자명</th>\r\n                    <td>\r\n                    <input type=\"text\" value = {CounselName}id=\"counselName\" name=\"counselName\" size = \"7\"\r\n                    onChange={onNameHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n            <tr>\r\n                <th>문의방법</th>\r\n                    <td>\r\n                        <select value={Method} onChange={MethodHandler} >\r\n                        {Methods.map(item=>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                        ))}\r\n                        </select>\r\n                    </td>\r\n                <th>접근경로</th>\r\n                    <td>\r\n                        <select value={Path} onChange={PathHandler} >\r\n                            {Paths.map(item =>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                            ))}\r\n                            \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의자연락처</th>\r\n                    <td>\r\n                    <input type = \"text\" value = {UserPhone}id = \"userPhone\" name = \"userPhone\" size = \"7\"\r\n                    onChange={onPhoneHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n\r\n            <tr>\r\n                <th>상담내용</th>\r\n                    <td colSpan=\"5\">\r\n                        <textarea rows =\"5\" cols = \"100\" value = {Content}id=\"content\" name = \"content\"\r\n                        onChange={onContentHandler}></textarea>\r\n                    </td>\r\n            </tr>\r\n          </table>\r\n          <div id = \"popbtn\"> \r\n            <button type = \"submit\">저장</button>\r\n            {/* <button>닫기</button> */}\r\n          </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n\r\nexport default CounselStatus;",["176","177"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js",["178"],"// import { Component, Fragment } from 'react';\r\n// import {useDispatch} from 'react-redux';\r\n//import {loginUser} from '../_actions/user_action';\r\nimport axios from 'axios';\r\nimport React,{Fragment} from 'react';\r\nimport {useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js'\r\n\r\n\r\nfunction LoginPage( props){\r\n  // const dispatch = useDispatch();\r\n\r\n  const [E_mal,setE_mal] = useState(\"\")\r\n  const [Password, setPassword] = useState(\"\")\r\n\r\n  const onEmailHandler = (event) => {\r\n    setE_mal(event.currentTarget.value)\r\n  }\r\n\r\n  const onPasswordHandler = (event) => {\r\n    setPassword(event.currentTarget.value)\r\n  }\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    let body = {\r\n        Email: E_mal,\r\n        PASSWORD: Password\r\n    }\r\n\r\n   axios.post('/api/users/login',body)\r\n        .then(response => {\r\n            if (response.data.loginResult) {\r\n                alert('로그인 되었습니다.')\r\n                //props.history.push('/counseling')\r\n                console.log(response.data.loginResult)\r\n            } else {\r\n                alert('아이디와 비밀번호를 확인하세요')\r\n            }\r\n        })\r\n      }\r\n\r\n    return (\r\n      <Fragment>\r\n          <Main/>\r\n          <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%',height:'50vh'}}>\r\n            <form style = {{display:'flex', flexDirection:'column'}}\r\n             onSubmit={onSubmitHandler}\r\n            >\r\n              \r\n                <label style={{fontFamily:'Jua',width:'180px'}}>Email</label>\r\n                <input style={{width:\"300px\"}} type = \"email\" value={E_mal} onChange={onEmailHandler} />\r\n                <label style={{fontFamily:'Jua'}}>Password</label>\r\n                <input style={{width:\"300px\"}} type = \"password\" value={Password} onChange={onPasswordHandler}/>\r\n                <br/>\r\n                <button type=\"submit\">Login</button>\r\n            \r\n            \r\n            </form>\r\n          </div>\r\n         \r\n          </Fragment>\r\n    )\r\n}\r\n\r\nexport default LoginPage","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js",["179"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Member from './Components/Member/Member';\r\nimport Counseling from './Components/Counseling/Counseling';\r\nimport CounselStatus from './Components/Counseling/CounselStatus';\r\nimport LoginPage from './Components/LoginPage/LoginPage';\r\nimport PaymentStatus from './Components/PaymentStatus/PaymentStatus';\r\nimport Swon from './Components/Staff/Swon';\r\nimport Main from './Components/Main/Main';\r\n\r\nexport default () => (\r\n  <Router>\r\n          {/* 메인 */}\r\n          <Route exact path = \"/\" component = {Main}></Route>\r\n\r\n\r\n          {/* 회원현황 */}\r\n          <Route exact path = \"/member\" component = {Member}></Route> \r\n          {/* 납부현황 */}\r\n          <Route path = \"/paymentStatus\" component = {PaymentStatus}></Route>\r\n          {/* 상담현황 */}\r\n          <Route exact path = \"/counseling\" component = {Counseling}></Route>\r\n          {/* 직원관리 */}\r\n          <Route exact path = \"/swon\" component = {Swon}></Route>\r\n          {/* 로그인/로그아웃*/}\r\n          <Route exact path = \"/login\" component = {LoginPage}></Route>\r\n\r\n\r\n\r\n          {/* 상담등록 */}\r\n          <Route exact path = \"/counselStatus\" component = {CounselStatus}></Route>\r\n  </Router>\r\n)\r\n\r\n","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js",["180","181","182","183","184","185","186","187","188","189","190","191","192"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\n\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction Member(props) {\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n      \r\n    }\r\n    const[userName,setUserName] = useState(\"\")\r\n    const[bnum,setBnum] = useState(\"\")\r\n    const[ownerName,setOwnerName] = useState(\"\")\r\n    const[userSort,setUserSort] = useState([])\r\n    const[endStatus,setEndStatus] = useState(\"\")\r\n    const[status,setStatus] = useState(\"\")\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          <Main/>\r\n          <h1>회원현황</h1>\r\n          <table >\r\n            <tr>\r\n                <th>회원명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {userName} id = \"userName\" name = \"userName\" size = \"7\"\r\n                        />\r\n                    </td>  \r\n                    {/* onChange={onPhoneHandler} */}\r\n                <th>사업자번호</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {bnum} id = \"bnum\" name = \"bnum\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>대표자명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {ownerName} id = \"ownerName\" name = \"ownerName\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>종류</th>\r\n                    <td>\r\n                        <select value ={endStatus}>  {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>상태</th>\r\n                    <td>\r\n                        <select value ={status}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                    <div > \r\n                        <button type = \"submit\">조회</button>\r\n                \r\n                    </div>\r\n                    </td>\r\n\r\n                \r\n            </tr>\r\n               \r\n            \r\n          </table>\r\n          <table>\r\n            <tr>\r\n                <td>\r\n                    <button>신규회원</button>\r\n                    <button>SNS</button>\r\n                    <button>메일전송</button>\r\n                    <button>엑셀다운로드</button>\r\n                </td>\r\n            </tr>\r\n          </table>\r\n          \r\n          <table>\r\n                <tr>\r\n                    <th>No</th>\r\n                    <th>문의 구분</th>\r\n                    <th>문의일자</th>\r\n                    <th>문의방법</th>\r\n                    <th>문의자명</th>\r\n                    <th>연락처</th>\r\n                    <th>접근경로</th>\r\n                </tr>\r\n          </table>\r\n\r\n      </form>\r\n\r\n      \r\n    );\r\n  }\r\n\r\n\r\nexport default Member;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js",["193"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction PaymentStatus (props) {\r\n\r\n    \r\n    const[userName, setUserName] = useState(\"\")\r\n    const[paymentStatus, setPaymentStatus]=useState([])\r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const nameSearchHandler=(event)=>{\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler=(event)=>{\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n    \r\n    const onPaymenthandler=()=>{\r\n        \r\n    }\r\n\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>고객납부현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                    납부예정일   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                        회원명\r\n                         <input type=\"text\" value = {userName} id=\"userName\" name=\"userName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp; \r\n\r\n                        납부여부\r\n                        <select onChange ={paymentStatusHandler} value ={paymentStatus}>   \r\n{/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                        </select>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onPaymenthandler}> 납부</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>No</th>\r\n                            <th>회원명</th>\r\n                            <th>납부예정일</th>\r\n                            <th>납부여부</th>\r\n                            <th>납부일자</th>\r\n                            <th>계약기간</th>\r\n                            <th>대표자</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default PaymentStatus;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js",["194"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction Swon (props) {\r\n\r\n    \r\n    const[staffName, setStaffName] = useState(\"\")\r\n    const[staffClass, setStaffClass] = useState([])\r\n    const[closeStatus, setCloseStatus] = useState([])\r\n    \r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const staffNameHandler=(event)=>{\r\n        setStaffName(event.currentTarget.value);\r\n    }\r\n\r\n    const staffClassHandler=(event)=>{\r\n        setStaffClass(event.currentTarget.value);\r\n    }\r\n    \r\n    const closeStatusHandler=(event)=>{\r\n        setCloseStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onRegistHandler = (event)=>{\r\n\r\n    }\r\n    const onModifyHandler = (event)=>{\r\n        \r\n    }\r\n    const onApprovalHandler = (event)=>{\r\n        \r\n    }\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>직원현황</h1>\r\n                    <div id = \"search\">\r\n\r\n                     성명\r\n                    <input type=\"text\" value = {staffName} id=\"staffName\" name=\"staffName\" size = \"5\"\r\n                    onChange={staffNameHandler}/>\r\n                    &nbsp; \r\n\r\n\r\n                    입사일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        직원구분\r\n                        <select onChange ={staffClassHandler} value ={staffClass}>  \r\n                    {/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                     \r\n                        </select>\r\n                        종료\r\n                        <select onChange ={closeStatusHandler} value ={closeStatus}>   \r\n                        </select>\r\n                        \r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onRegistHandler}> 등록</button> </td>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onModifyHandler}> 수정</button> </td>    \r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onApprovalHandler}> 승인</button> </td>                        \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>직번</th>\r\n                            <th>성명</th>\r\n                            <th>주민번호</th>\r\n                            <th>부서</th>\r\n                            <th>연락처</th>\r\n                            <th>E-mail</th>\r\n                            <th>직원구분</th>\r\n                            <th>승인여부</th>\r\n                            <th>직급</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Swon;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\index.js",[],["195","196"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\App.js",["197","198","199","200"],"import { Fragment } from 'react';\nimport Routes from './Routes/Routes';\nimport {\n  BrowserView,\n  MobileView,\n  isBrowser,\n  isMobile\n} from 'react-device-detect';\n\nfunction App(props) {\n\n    return (\n      <Fragment>\n        <Routes/>\n      </Fragment>\n    );\n\n}\n\nexport default App;\n","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Routes\\Routes.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100010.js",["201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100090.js",["283","284","285","286","287","288","289","290","291","292","293"],"import React, { Fragment, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport S010100100 from './S010100100';\r\nimport './css/S010100090.css';\r\n\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { DatePicker } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport moment from 'moment';\r\n\r\nimport xlsx from 'xlsx';\r\n// //<!--켈린더 라이브러리시작\r\n// import DatePicker, { registerLocale } from \"react-datepicker\";\r\n// import ko from 'date-fns/locale/ko';\r\n// registerLocale(\"ko\", ko);\r\n// //켈린더 라이브러리 끝-->\r\n\r\nimport ReactPaginate from 'react-paginate';\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}));\r\n\r\nlet empNm = '';\r\nlet chkSt = '';\r\nlet memberId;\r\nlet empIdM;\r\n\r\nfunction S010100090(props) {\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n\r\n    const [empInfo, setEmpInfo] = useState([].slice(0, 20));\r\n\r\n    const [staffName, setStaffName] = useState('');\r\n    const [memberNm, setMemberNm] = useState('');\r\n    const [staffClass, setStaffClass] = useState('');\r\n    const [staffClasses, setStaffClasses] = useState([{}])\r\n    const [closeStatus, setCloseStatus] = useState('');\r\n    const [startDate, setStartDate] = useState(new Date(moment().date('01')));\r\n    const [endDate, setEndDate] = useState(new Date());\r\n\r\n    const [empChecked, setEmpChecked] = useState([]);\r\n\r\n    const [empName, setEmpName] = useState('');\r\n    const [memId, setMemId] = useState(0);\r\n    const [empId,setEmpId] = useState();\r\n    const [dataForm, setdataForm] = useState('');\r\n    const [retireChecked, setRetireChecked] = useState([]);\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(empInfo.length / usersPerPage);\r\n\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    // 직원 구분\r\n    useEffect(() => {\r\n        axios.post('/api/s010100090/classification')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                    setStaffClasses(arr);\r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        empList();\r\n    }, [])\r\n\r\n    const empList = () => {\r\n\r\n        let body = {\r\n            staffName,\r\n            memberNm,\r\n            staffClass,\r\n            retireChecked,\r\n            startDate,\r\n            endDate\r\n        }\r\n\r\n        axios.post('/api/s010100090/empList', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    setEmpInfo(response.data.rows);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"직원 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    const staffNameHandler = (event) => {\r\n        setStaffName(event.currentTarget.value);\r\n    }\r\n    const memberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const staffClassHandler = (event) => {\r\n        setStaffClass(event.currentTarget.value);\r\n    }\r\n\r\n    const closeStatusHandler = (event) => {\r\n        setCloseStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onHandleClickClose = useCallback(() => {\r\n        setStoreOpen(false);\r\n        empList();\r\n    });\r\n\r\n    const onEmpSearchHandler = () => {\r\n        empList();\r\n    }\r\n\r\n    \r\n\r\n    const retireHandleToggle = (value) => {\r\n\r\n        // 승인empId 현재 index값\r\n        const currentIndex = retireChecked.indexOf(value);\r\n        // 등록시 회사명\r\n\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n      \r\n        const newChecked = [...retireChecked];\r\n        // // console.log('newChecked',newChecked);\r\n        // // console.log(retireChecked);\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setRetireChecked(newChecked);\r\n     \r\n\r\n    }\r\n\r\n    const handleToggle = (value) => {\r\n\r\n        // 승인empId 현재 index값\r\n        const currentIndex = empChecked.indexOf(value);\r\n    \r\n\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        \r\n        const newChecked = [...empChecked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setEmpChecked(newChecked);\r\n        // console.log(empChecked);\r\n        newChecked.length > 0 ? chkSt = 'check' : chkSt = '';\r\n\r\n    }\r\n\r\n\r\n\r\n    // 등록\r\n    const onRegistHandler = () => {\r\n        if (empChecked.length === 0) {\r\n            alert('선택하세요');\r\n        } else if (empChecked.length > 1) {\r\n            alert('하나만 체크하세요');\r\n        } else {\r\n            const checkedList = empChecked[0].split(',');\r\n            // console.log(checkedList[0]);\r\n            memberId = checkedList[0];\r\n            setEmpName(checkedList[2]);\r\n            setMemId(checkedList[0]);\r\n            setdataForm('I');\r\n            // console.log('empNm',empNm);\r\n            setStoreOpen(true);\r\n        }\r\n    }\r\n    \r\n    // 수정\r\n    const onModifyHandler = (event) => {\r\n        if (empChecked.length === 0) {\r\n            alert('선택하세요');\r\n        } else if (empChecked.length > 1) {\r\n            alert('하나만 체크하세요');\r\n        } else {\r\n            const checkedList = empChecked[0].split(',');\r\n            empIdM = checkedList[1];\r\n            // console.log('empIdM',empIdM);\r\n            setdataForm('U');\r\n            setEmpId(empIdM);\r\n            setStoreOpen(true);\r\n    \r\n        }\r\n    }\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = (event) => {\r\n        let checkedMemberId;\r\n\r\n        // // console.log('checkedMemberId',checkedMemberId);\r\n        // // console.log('empChecked',empChecked);\r\n\r\n        for(let i = 0; empChecked.length > i; i++){\r\n            \r\n            // // console.log('empChecked[i].split',empChecked[i].split(','));\r\n            checkedMemberId = empChecked[i].split(',');    \r\n    }\r\n    \r\n    if (checkedMemberId == undefined ||checkedMemberId == null) {\r\n        alert('승인할 회원을 선택하세요');\r\n    // }else if(JSON.parse(sessionStorage.getItem(\"member\"))[1] != checkedMemberId[0]){\r\n    //     alert('자회사의 직원승인만 가능합니다.');\r\n    }else{\r\n            let arr = [];\r\n\r\n            for(let i = 0; empChecked.length > i; i++){\r\n                const checkedList = empChecked[i].split(',');\r\n                // console.log('checkedList[1]',checkedList[1]);\r\n                // console.log('checkedList[0]',checkedList[0]);\r\n                // console.log('checkedList',checkedList);\r\n               \r\n                arr.push(checkedList[1]);\r\n\r\n        }\r\n        \r\n            let body = {\r\n                arr\r\n            }\r\n            \r\n            axios.post('/api/s010100090/approval', body)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        alert('승인처리 되었습니다.');\r\n                        empList();\r\n                        setEmpChecked('');\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert('승인처리에 실패하였습니다.');\r\n                        setEmpChecked('');\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    const cancelConfirm = () => alert('승인 취소하였습니다.');\r\n\r\n    const onApprovalHandler = useConfirm(\r\n        \"승인하시겠습니까?\",\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n\r\n    const logoutConfirm = () => {\r\n\r\n        axios.post('/api/s010100150/userLogout')\r\n        .then(response => {\r\n            if (response.data.logoutResult == true) {\r\n            alert('로그아웃 하였습니다.');\r\n            sessionStorage.removeItem('member');\r\n            sessionStorage.clear();\r\n            props.history.push('/');\r\n            }else if(response.data.loginResult == false){\r\n            alert(response.data.message);\r\n            alert('아이디 또는 비밀번호를 확인하세요.');\r\n            }\r\n        })\r\n    \r\n        };\r\n    \r\n        const logounCancelConfirm = () => alert('취소하였습니다.');\r\n    \r\n        const onLogoutHandler = useConfirm(\r\n            \"로그아웃 하시겠습니까?\",\r\n            logoutConfirm,\r\n            logounCancelConfirm\r\n        );\r\n\r\n    const excelHandler = () => {\r\n\r\n        const ws = xlsx.utils.json_to_sheet(empInfo);\r\n       \r\n\r\n        ['회원명', 'member_id', '직번', '성명', '생년월일', '부서', 'emp_id','연락처','직업구분','승인여부','E-mail','password','입사일자','퇴사일자']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][1] = { hidden: true };\r\n        ws['!cols'][6] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"상담현황.xlsx\");\r\n\r\n    }\r\n\r\n \r\n\r\n\r\n    const displayEmpMembers = empInfo.slice(pagesVisited, pagesVisited + usersPerPage).map((empInfo, index) => {\r\n        return (\r\n            <TableRow key={index}>\r\n                <TableCell>\r\n                    <input type=\"checkbox\" checked={empChecked.indexOf(empInfo.MEMBER_ID + ',' + empInfo.EMP_ID + ',' + empInfo.MEMBER_NM)===-1? false :true} onChange={()=> handleToggle(empInfo.MEMBER_ID + ',' + empInfo.EMP_ID + ',' + empInfo.MEMBER_NM)} id={empInfo.MEMBER_ID + ',' + empInfo.EMP_ID} className={empInfo.MEMBER_NM} />\r\n                </TableCell>\r\n                <TableCell>{empInfo.MEMBER_NM}</TableCell>\r\n                <TableCell>{empInfo.EMP_NUMBER}</TableCell>\r\n                <TableCell>{empInfo.NAME}</TableCell>\r\n                <TableCell>{empInfo.BIRTH_DATE}</TableCell>\r\n                <TableCell>{empInfo.DEPT_NM}</TableCell>\r\n                <TableCell>{empInfo.EMP_HP}</TableCell>\r\n                <TableCell>{empInfo.CEO_FLAG}</TableCell>\r\n                <TableCell>{empInfo.EMP_TP}</TableCell>\r\n                <TableCell>{empInfo.APPROVAL_FLAG}</TableCell>\r\n                <TableCell>{empInfo.EMP_EMAIL}</TableCell>\r\n                <TableCell>{empInfo.PWD}</TableCell>\r\n                <TableCell>{empInfo.JOIN_DATE === '00-00-00'||null ? '' :empInfo.JOIN_DATE }</TableCell>\r\n                <TableCell>{empInfo.RETIRE_DATE === '00-00-00'||null ? '' :empInfo.RETIRE_DATE}</TableCell>\r\n            </TableRow>\r\n        );\r\n    }); \r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단파란툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        SwonTech 고객관리시스템\r\n                        </Typography>\r\n                        \r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/* 왼쪽 메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>\r\n                        <div>\r\n                            <div hidden ={sessionStorage.getItem('member') == null}>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <PeopleIcon />\r\n                            </ListItemIcon>\r\n                            <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                                <ShoppingCartIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <DashboardIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                                <BarChartIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <DashboardIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                <LayersIcon />\r\n                                </ListItemIcon>\r\n                                <span onClick ={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n                            </ListItem>\r\n                            </div>\r\n                            <div hidden ={sessionStorage.getItem('member') != null}>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                <LayersIcon />\r\n                                </ListItemIcon>\r\n                                <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                            </ListItem>\r\n                            </div>\r\n                        </div></List>\r\n                  \r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <form onSubmit={onSubmitHandler}>\r\n                                        입사일자   &nbsp;\r\n                                    {/* date클릭할 때 고정 */}\r\n\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(date)}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            defaultValue={moment(moment().date('01'), 'YYYY-MM-DD')}\r\n                                        />&nbsp; ~ &nbsp;\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(date)}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            minDate={startDate}\r\n                                            defaultValue={moment(moment(), 'YYYY-MM-DD')}\r\n                                        />\r\n\r\n                                    &nbsp;&nbsp;회원명&nbsp;&nbsp;\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                            value={memberNm} id=\"memberNm\" name=\"memberNm\"\r\n                                            onChange={memberNmHandler} />\r\n\r\n                                    &nbsp;\r\n                                    성명&nbsp;&nbsp;\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                            value={staffName} id=\"staffName\" name=\"staffName\"\r\n                                            onChange={staffNameHandler} />\r\n\r\n                                        &nbsp;&nbsp;\r\n\r\n                                        직원구분&nbsp;&nbsp;\r\n                                        <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                            multiple={false} onChange={staffClassHandler} value={staffClass}>\r\n                                            {staffClasses.map((item,index) => (\r\n                                                <option key={index} value={item.key}>{item.value}</option>\r\n                                            ))}\r\n\r\n                                        </Form.Control>\r\n                                        &nbsp;&nbsp;\r\n                                        퇴사여부&nbsp;&nbsp;\r\n                                        <input type=\"checkbox\" checked = {retireChecked.indexOf(\"Y\") ===-1 ? false:true} onChange={() => retireHandleToggle(\"Y\")} />\r\n\r\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                        <Button variant=\"contained\" style={{ width: 80 }} color=\"primary\" href=\"#contained-buttons\"\r\n                                            onClick={onEmpSearchHandler}>\r\n                                            조회\r\n                                        </Button>\r\n\r\n\r\n                                    </form>\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                            <table className=\"btn\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td id=\"alignLeft\">\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" href=\"#contained-buttons\"\r\n                                                onClick={onRegistHandler}> 등록 </Button>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" href=\"#contained-buttons\"\r\n                                                onClick={onModifyHandler}> 수정 </Button>\r\n                                            <span hidden ={JSON.parse(sessionStorage.getItem(\"member\"))[0] === 'N'}>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" href=\"#contained-buttons\"\r\n                                                onClick={onApprovalHandler}> 승인 </Button>\r\n                                            </span>\r\n                                        </td>\r\n                                        <td id=\"alignRight\">\r\n                                            <Button variant=\"contained\" style={{ width: 140 }} color=\"primary\" href=\"#contained-buttons\" onClick={excelHandler}> 엑셀다운로드 </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </thead>\r\n                            </table>\r\n\r\n\r\n                            {/* 결과 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                        <Title>직원 현황</Title>\r\n                                        <Table size=\"small\">\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell>선택</TableCell>\r\n                                                    <TableCell>회원명</TableCell>\r\n                                                    <TableCell>직번</TableCell>\r\n                                                    <TableCell>성명</TableCell>\r\n                                                    <TableCell>생년월일</TableCell>\r\n                                                    <TableCell>부서</TableCell>\r\n                                                    <TableCell>연락처</TableCell>\r\n                                                    <TableCell>대표자여부</TableCell>\r\n                                                    <TableCell>직원구분</TableCell>\r\n                                                    <TableCell>승인여부</TableCell>\r\n                                                    <TableCell>E-mail</TableCell>\r\n                                                    <TableCell>password</TableCell>\r\n                                                    <TableCell>입사일자</TableCell>\r\n                                                    <TableCell>퇴사일자</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n\r\n                                            <TableBody>\r\n                                                {displayEmpMembers}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                        <div id=\"reactPage\">\r\n                                            <ReactPaginate\r\n                                                previousLabel={\"Previous\"}\r\n                                                nextLabel={\"Next\"}\r\n                                                pageCount={pageCount}\r\n                                                onPageChange={changePage}\r\n                                                containerClassName={\"paginationBtns\"}\r\n                                                previousLinkClassName={\"previousBtn\"}\r\n                                                nextLinkClassName={\"nextBtn\"}\r\n                                                disabledClassName={\"paginationDisabled\"}\r\n                                                activeClassName={\"paginationActive\"}\r\n                                            />\r\n                                        </div>\r\n                                    </React.Fragment>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n            <Dialog\r\n                    maxWidth={\"lg\"}\r\n                    open={storeOpen}>\r\n                    <S010100100 \r\n                    name={empName} \r\n                    memId={memberId}\r\n                    empIdM={empIdM} \r\n                    dataForm={dataForm}\r\n                    empList={empList} \r\n                    onHandleClickClose={onHandleClickClose} \r\n                    setStoreOpen={setStoreOpen}\r\n                    setEmpChecked={setEmpChecked}\r\n                    />\r\n            </Dialog>\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100090;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100040.js",["294","295","296","297","298","299","300"],"import React, { Fragment, useState, useEffect, useCallback } from 'react';\r\nimport axios from \"axios\";\r\nimport './css/S010100040.css';\r\nimport S010100010 from './S010100010';\r\nimport S010100050 from './S010100050';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { DatePicker } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport moment from 'moment';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}));\r\n\r\n\r\nlet memberId = '';\r\n\r\nfunction S010100040(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [modalOpen, setModalOpen] = React.useState(false);\r\n\r\n    const [memberNm, setMemberNm] = useState('')\r\n    const [regNo, setRegNo] = useState('')\r\n    const [memberTp, setMemberTp] = useState('')\r\n    const [contractStatus, setContractStatus] = useState('')\r\n    const [memberSt, setMemberSt] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [tbMember, setTbMember] = useState([].slice(0, 20))\r\n\r\n    const [memberStatus, setMemberStatus] = useState([{}]);\r\n    const [memberType, setMemberType] = useState([{}]);\r\n\r\n    const [startDate, setStartDate] = useState(moment().date('01'));\r\n    const [endDate, setEndDate] = useState(moment());\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    const [memberIdModal, setMemberIdModal] = useState(0);\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(tbMember.length / usersPerPage);\r\n\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/s010100040/selectMemberTp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n\r\n                        }));\r\n\r\n                    setMemberType(arr);\r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"회원상태 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/s010100040/selectMemberSt')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n\r\n                        }));\r\n\r\n                    setMemberStatus(arr);\r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"회원상태 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    // 조회\r\n    const memberList = () => {\r\n        const body = {\r\n            startDate,\r\n            endDate,\r\n            memberNm,\r\n            regNo,\r\n            name,\r\n            memberTp,\r\n            contractStatus,\r\n            memberSt\r\n        }\r\n\r\n        console.log('startDate',startDate);\r\n        console.log('endDate',endDate);\r\n\r\n        axios.post('/api/s010100040/searchMember', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    setTbMember(response.data.rows);\r\n                    // // console.log('response.data.success',response.data.rows);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"데이터 목록을 가져오는 것을 실패하였습니다.\")\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        memberList();\r\n    }, [])\r\n\r\n    const onSearchSubmitHandler = (event) => {\r\n        memberList();\r\n    }\r\n\r\n    const onHandleClickOpen = () => {\r\n        setStoreOpen(true);\r\n    };\r\n\r\n    const onHandleClickClose = useCallback(() => {\r\n        setStoreOpen(false);\r\n        memberList();\r\n    });\r\n\r\n    const memberStHandler = (event) => {\r\n        setMemberSt(event.currentTarget.value);\r\n    }\r\n\r\n    const nameHandler = (event) => {\r\n        setName(event.currentTarget.value);\r\n    }\r\n\r\n    const memberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const regNoHandler = (event) => {\r\n        setRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const memberTpHandler = (event) => {\r\n        setMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n    const contractStatusHandler = (event) => {\r\n        setContractStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onHandleDetailClickOpen = (event) => {\r\n        memberId = event.target.id;\r\n        setMemberIdModal(memberId);\r\n        setModalOpen(true);\r\n    }\r\n\r\n    const onHandleDetailClickClose = useCallback(() => {\r\n        memberList();\r\n        setModalOpen(false);\r\n    });\r\n\r\n    const onSNSHandler = (event) => {\r\n\r\n    }\r\n\r\n    const onEmailHandler = (event) => {\r\n\r\n    }\r\n\r\n    const excelHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(tbMember);\r\n\r\n        ['NO', '사업자번호', '회원명', '회원구분', '상태', '대표자 성명', '대표자 연락처', '대표자 E-mail', '종료여부']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][0] = { hidden: true };\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"회원현황.xlsx\");\r\n    }\r\n\r\n    const displayMemSt = tbMember.slice(pagesVisited, pagesVisited + usersPerPage).map((tbMember, index) => {\r\n        return (\r\n            <TableRow key={index}>\r\n                <TableCell id={tbMember.MEMBER_ID} >{tbMember.MEMBER_ID}</TableCell>\r\n                <TableCell>{tbMember.MEMBER_NM}</TableCell>\r\n                <TableCell>{tbMember.REG_NO}</TableCell>\r\n                <TableCell onClick={onHandleDetailClickOpen} className='underLineForDetail' id={tbMember.MEMBER_ID}>{tbMember.NAME}</TableCell>\r\n                <TableCell>{tbMember.EMP_HP}</TableCell>\r\n                <TableCell>{tbMember.EMP_EMAIL}</TableCell>\r\n                <TableCell>{tbMember.MEMBER_TP}</TableCell>\r\n                <TableCell>{tbMember.MEMBER_ST}</TableCell>\r\n                <TableCell>{tbMember.END_FLAG}</TableCell>\r\n            </TableRow>\r\n        )\r\n    });\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n    \r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n    \r\n        return confirmAction;\r\n      };\r\n    \r\n      const approvalConfirm = () => {\r\n    \r\n        axios.post('/api/s010100150/userLogout')\r\n        .then(response => {\r\n          if (response.data.logoutResult == true) {\r\n            alert('로그아웃 하였습니다.');\r\n            sessionStorage.removeItem('member');\r\n            sessionStorage.clear();\r\n            props.history.push('/');\r\n          }else if(response.data.loginResult == false){\r\n            alert(response.data.message);\r\n            alert('아이디 또는 비밀번호를 확인하세요.');\r\n          }\r\n        })\r\n    \r\n      };\r\n    \r\n      const cancelConfirm = () => alert('취소하였습니다.');\r\n    \r\n      const onLogoutHandler = useConfirm(\r\n          \"로그아웃 하시겠습니까?\",\r\n          approvalConfirm,\r\n          cancelConfirm\r\n      );\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단파란툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        SwonTech 고객관리시스템\r\n                        </Typography>\r\n                      \r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/* 왼쪽 메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                        <List>\r\n                            <div>\r\n                                <div hidden ={sessionStorage.getItem('member') === null}>\r\n                                    <ListItem button>\r\n                                    <ListItemIcon>\r\n                                    <PeopleIcon />\r\n                                    </ListItemIcon>\r\n                                    <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n                                    </ListItem>\r\n                                    <ListItem button>\r\n                                    <ListItemIcon>\r\n                                        <ShoppingCartIcon />\r\n                                    </ListItemIcon>\r\n                                    <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n                                    </ListItem>\r\n                                    <ListItem button>\r\n                                    <ListItemIcon>\r\n                                    <DashboardIcon />\r\n                                    </ListItemIcon>\r\n                                    <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n                                    </ListItem>\r\n                                    <ListItem button>\r\n                                    <ListItemIcon>\r\n                                        <BarChartIcon />\r\n                                    </ListItemIcon>\r\n                                    <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n                                    </ListItem>\r\n                                    <ListItem button>\r\n                                    <ListItemIcon>\r\n                                    <DashboardIcon />\r\n                                    </ListItemIcon>\r\n                                    <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n                                    </ListItem>\r\n                                    <ListItem button>\r\n                                        <ListItemIcon>\r\n                                        <LayersIcon />\r\n                                        </ListItemIcon>\r\n                                        <span onClick={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n                                    </ListItem>\r\n                                </div>\r\n                                <div hidden ={sessionStorage.getItem('member') != null}>\r\n                                    <ListItem button>\r\n                                        <ListItemIcon>\r\n                                        <LayersIcon />\r\n                                        </ListItemIcon>\r\n                                        <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                                    </ListItem>\r\n                                </div>\r\n                        </div>\r\n                    </List>\r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper style={{ padding: 16 }}>\r\n                                    <form onSubmit={onSearchSubmitHandler}>\r\n                                        <div className = \"searchMenu\">\r\n                                            계약일자 \r\n                                            &nbsp;\r\n                                            <DatePicker\r\n                                            locale='ko'\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(moment(date))}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            defaultValue={startDate}\r\n                                        /> &nbsp;~&nbsp;\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(moment(date))}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            // minDate={startDate}\r\n                                            defaultValue={endDate}\r\n                                        />\r\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                        회원명&nbsp;\r\n                                            <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                                value={memberNm} id=\"memberNm\" name=\"memberNm\" onChange={memberNmHandler} />\r\n\r\n                   &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                    사업자번호 &nbsp;\r\n                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                                value={regNo} id=\"regNo\" name=\"regNo\"\r\n                                                onChange={regNoHandler} />\r\n\r\n                   &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                    대표자명 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                                value={name} id=\"name\" name=\"name\"\r\n                                                onChange={nameHandler} />\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    회원구분 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                                multiple={false} onChange={memberTpHandler} value={memberTp}>\r\n                                                {memberType.map((item,index) => (\r\n                                                    <option key={index} value={item.key}>{item.value}</option>\r\n                                                ))}\r\n\r\n                                            </Form.Control>\r\n\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                                            </div>\r\n                                        <div className = \"searchMenu\">\r\n                                    \r\n                    상태 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                                multiple={false} onChange={memberStHandler} value={memberSt}>\r\n                                                {memberStatus.map((item,index) => (\r\n                                                    <option key={index} value={item.key}>{item.value}</option>\r\n                                                ))}\r\n\r\n                                            </Form.Control>\r\n\r\n\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                    <Button variant=\"contained\" style={{ width: 80 }} color=\"primary\" onClick={onSearchSubmitHandler}>\r\n                                                조회\r\n                                    </Button>\r\n                                        </div>\r\n                                    </form>\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                            <table className=\"btn\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td colSpan=\"5\" id=\"alignLeft\">\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" onClick={onHandleClickOpen} >\r\n                                                신규회원\r\n                                            </Button>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" onClick={onSNSHandler} >\r\n                                                SNS\r\n                                            </Button>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" onClick={onEmailHandler} >\r\n                                                메일전송\r\n                                            </Button>\r\n                                        </td>\r\n\r\n\r\n                                        <td colSpan=\"5\" id=\"alignRight\">\r\n                                            <Button variant=\"contained\" style={{ width: 140 }} color=\"primary\" onClick={excelHandler}>\r\n                                                엑셀다운로드\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </thead>\r\n                            </table>\r\n\r\n                            {/* 결과 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                        <Title>회원 현황</Title>\r\n                                        <Table size=\"small\">\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell rowSpan=\"2\">No</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">회원명</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">사업자번호</TableCell>\r\n                                                    <TableCell colSpan=\"3\">대표자</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">회원구분</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">상태</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">종료여부</TableCell>\r\n                                                </TableRow>\r\n                                                <TableRow>\r\n                                                    <TableCell>성명</TableCell>\r\n                                                    <TableCell>연락처</TableCell>\r\n                                                    <TableCell>E-mail</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {displayMemSt}\r\n                                            </TableBody>\r\n                                        </Table>\r\n\r\n                                    </React.Fragment>\r\n\r\n                                    <div id=\"reactPage\">\r\n                                        <ReactPaginate\r\n                                            previousLabel={\"Previous\"}\r\n                                            nextLabel={\"Next\"}\r\n                                            pageCount={pageCount}\r\n                                            onPageChange={changePage}\r\n                                            containerClassName={\"paginationBtns\"}\r\n                                            previousLinkClassName={\"previousBtn\"}\r\n                                            nextLinkClassName={\"nextBtn\"}\r\n                                            disabledClassName={\"paginationDisabled\"}\r\n                                            activeClassName={\"paginationActive\"}\r\n                                        />\r\n                                    </div>\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n            {/* 이름클릭 상세보기 */}\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={modalOpen}\r\n                onClose={onHandleDetailClickClose}>\r\n                <S010100050 \r\n                    dataMemId={memberIdModal} \r\n                    dataForm={\"U\"} \r\n                    memberList={memberList}\r\n                    onHandleDetailClickClose={onHandleDetailClickClose} \r\n                    setModalOpen={setModalOpen} \r\n                    setModalOpen={setModalOpen}/>\r\n            </Dialog>\r\n\r\n            {/* 신규등록 */}\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={storeOpen}\r\n                onClose={onHandleClickClose}>\r\n                <S010100010 \r\n                    onHandleClickClose={onHandleClickClose} \r\n                    setStoreOpen={setStoreOpen} \r\n                    memberList={memberList}/>\r\n            </Dialog>\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100040;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100060.js",["301","302","303","304"],"import React, { Fragment, useEffect, useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport S010100070 from './S010100070';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { DatePicker } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport moment from 'moment';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}));\r\n\r\n\r\nlet paymentState = [{ key: '', value: '전체' },\r\n{ key: 'Y', value: 'Y' },\r\n{ key: 'N', value: 'N' }]\r\n\r\nfunction S010100060(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const [userName, setUserName] = useState('');\r\n    const [paymentStatus, setPaymentStatus] = useState('');\r\n    const [payChecked, setPayChecked] = useState([]);\r\n\r\n    const [startDate, setStartDate] = useState(new Date(moment().date('01')));\r\n    const [endDate, setEndDate] = useState(new Date());\r\n\r\n    const [payStatusList, setPayStatusList] = useState([].slice(0,20));\r\n    const [storeOpen, setStoreOpen] = useState(false);\r\n    const [dataAllContract, setDataAllContract] = useState('');\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const paymentList = () => {\r\n\r\n        let body = {\r\n            startDate: startDate,\r\n            endDate: endDate\r\n        }\r\n\r\n    \r\n        axios.post('/api/s010100060/list', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    // // console.log('list60', response.data.rows);\r\n                    setPayStatusList(response.data.rows);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('데이터 조회를 실패하였습니다.')\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n    useEffect(() => {\r\n        paymentList();\r\n    }, [])\r\n\r\n    const paymentSearchHandler = () => {\r\n        paymentList();\r\n    }\r\n\r\n\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    const nameSearchHandler = (event) => {\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler = (event) => {\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onPayHandleClickClose = useCallback(() => {\r\n        setStoreOpen(false);\r\n        paymentSearchHandler();\r\n    });\r\n\r\n\r\n    const handleToggle = (value) => {\r\n        // console.log('event', e.target.id);\r\n        const currentIndex = payChecked.indexOf(value);\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        const newChecked = [...payChecked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n\r\n        setPayChecked(newChecked);\r\n\r\n         // console.log('currentIndex', currentIndex);\r\n         // console.log('checked', checked);\r\n\r\n    }\r\n\r\n    const onPaymenthandler = () => {\r\n        if (payChecked.length === 0) {\r\n            alert('선택하세요');\r\n        } else if (payChecked.length > 1) {\r\n            alert('하나만 체크하세요');\r\n        } else {\r\n            setDataAllContract(payChecked);\r\n            // console.log(checked);\r\n            setStoreOpen(true);\r\n            // setPayChecked('');\r\n        }\r\n    }\r\n\r\n    const excelHandler = () => {\r\n\r\n        const ws = xlsx.utils.json_to_sheet(payStatusList);\r\n\r\n        ['회원명', '납부예정일', '납부여부', '납부일자', '계약기간', '계약기간', '대표자 성명', '대표자 연락처', '대표자 E-mail', '계약ID']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][9] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n        xlsx.writeFile(wb, '고객납부현황.xlsx');\r\n\r\n    }\r\n   \r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n\r\n    const displayPayStList = payStatusList.slice(pagesVisited, pagesVisited + usersPerPage).map((payStatusList, index) => {\r\n        return (\r\n            <TableRow key={payStatusList.CONTRACT_ID}>\r\n                <TableCell><input type='checkbox' checked = {payChecked.indexOf(payStatusList.CONTRACT_ID) === -1 ? false:true} onChange={()=>handleToggle(payStatusList.CONTRACT_ID)} id={payStatusList.CONTRACT_ID} /></TableCell>\r\n                <TableCell>{payStatusList.CONTRACT_ID}</TableCell>\r\n                <TableCell>{payStatusList.MEMBER_NM}</TableCell>\r\n                <TableCell>{payStatusList.PAY_PLAN_DATE}</TableCell>\r\n                <TableCell>{payStatusList.PAYED_FLAG}</TableCell>\r\n                <TableCell>{payStatusList.PAYED_DATE=== '00-00-00'||null ? '' :payStatusList.PAYED_DATE}</TableCell>\r\n                <TableCell>{payStatusList.START_DATE} ~ {payStatusList.END_DATE}</TableCell>\r\n                <TableCell>{payStatusList.NAME}</TableCell>\r\n                <TableCell>{payStatusList.EMP_HP}</TableCell>\r\n                <TableCell>{payStatusList.EMP_EMAIL}</TableCell>\r\n            </TableRow>\r\n        )\r\n    });\r\n\r\n\r\n    const pageCount = Math.ceil(payStatusList.length / usersPerPage);\r\n    \r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n    \r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n    \r\n        return confirmAction;\r\n      };\r\n    \r\n      const approvalConfirm = () => {\r\n    \r\n        axios.post('/api/s010100150/userLogout')\r\n        .then(response => {\r\n          if (response.data.logoutResult == true) {\r\n            alert('로그아웃 하였습니다.');\r\n            sessionStorage.removeItem('member');\r\n            sessionStorage.clear();\r\n            props.history.push('/');\r\n            // console.log (sessionStorage.getItem('member'));\r\n          }else if(response.data.loginResult == false){\r\n            alert(response.data.message);\r\n            alert('아이디 또는 비밀번호를 확인하세요.');\r\n          }\r\n        })\r\n    \r\n      };\r\n    \r\n      const cancelConfirm = () => alert('취소하였습니다.');\r\n    \r\n      const onLogoutHandler = useConfirm(\r\n          \"로그아웃 하시겠습니까?\",\r\n          approvalConfirm,\r\n          cancelConfirm\r\n      );\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단파란툴바 */}\r\n                <AppBar position='absolute' className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge='start'\r\n                            color='inherit'\r\n                            aria-label='open drawer'\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component='h1' variant='h6' color='inherit' noWrap className={classes.title}>\r\n                        SwonTech 고객관리시스템\r\n                        </Typography>\r\n                        \r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/* 왼쪽 메뉴바 */}\r\n                <Drawer\r\n                    variant='permanent'\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>\r\n                        <div>\r\n                            <div hidden ={sessionStorage.getItem('member') == null}>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <PeopleIcon />\r\n                            </ListItemIcon>\r\n                            <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                                <ShoppingCartIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <DashboardIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                                <BarChartIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <DashboardIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                <LayersIcon />\r\n                                </ListItemIcon>\r\n                                <span onClick={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n                            </ListItem>\r\n                            </div>\r\n                        <div hidden ={sessionStorage.getItem('member') != null}>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                <LayersIcon />\r\n                                </ListItemIcon>\r\n                                <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                            </ListItem>\r\n                            </div>\r\n                        </div>\r\n                    </List>\r\n                   \r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth='lg' className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <form\r\n                                        onSubmit={onSubmitHandler}\r\n                                    >\r\n                                        납부예정일&nbsp;\r\n                   \r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(date)}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            defaultValue={moment(moment().date('01'),'YYYY-MM-DD')}\r\n                                        /> &nbsp;~&nbsp;\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(date)}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            minDate={startDate}\r\n                                            defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                        />\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    회원명&nbsp;\r\n\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size='sm' type='text'\r\n                                            value={userName}\r\n                                            id='userName'\r\n                                            name='userName'\r\n                                            onChange={nameSearchHandler} />\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    납부여부&nbsp;\r\n                    \r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size='sm' as='select'\r\n                                            multiple={false} onChange={paymentStatusHandler} value={paymentStatus}>\r\n                                            {paymentState.map(item => (\r\n                                                <option key={item.key} value={item.key}>{item.value}</option>\r\n                                            ))}\r\n\r\n                                        </Form.Control>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <Button variant='contained' style={{ width: 80 }} color='primary' onClick={paymentSearchHandler}>\r\n                                            조회\r\n                    </Button>\r\n\r\n                                    </form>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                            <table className='btn'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td id=\"alignLeft\">\r\n                                            <Button variant='contained' style={{ width: 80 }} color='primary' onClick = {onPaymenthandler}> 납부 </Button>\r\n                                        </td>\r\n                                        <td id=\"alignRight\">\r\n                                            <Button variant='contained' style={{ width: 140 }} color='primary' onClick = {excelHandler} >엑셀다운로드 </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </thead>\r\n                            </table>\r\n\r\n                            {/* 결과 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                        <Title>납부 현황</Title>\r\n                                        <Table size='small'>\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell rowSpan='2'>선택</TableCell>\r\n                                                    <TableCell rowSpan='2'>No</TableCell>\r\n                                                    <TableCell rowSpan='2'>회원명</TableCell>\r\n                                                    <TableCell rowSpan='2'>납부예정일</TableCell>\r\n                                                    <TableCell rowSpan='2'>납부여부</TableCell>\r\n                                                    <TableCell rowSpan='2'>납부일자</TableCell>\r\n                                                    <TableCell rowSpan='2'>계약기간</TableCell>\r\n                                                    <TableCell colSpan='3'>대표자</TableCell>\r\n                                                </TableRow>\r\n                                                <TableRow>\r\n                                                    <TableCell>성명</TableCell>\r\n                                                    <TableCell>연락처</TableCell>\r\n                                                    <TableCell>E-mail</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {displayPayStList}\r\n                                            </TableBody>\r\n                                        </Table>\r\n\r\n                                    </React.Fragment>\r\n                                    <div id='reactPage'>\r\n                                        <ReactPaginate\r\n                                            previousLabel={'Previous'}\r\n                                            nextLabel={'Next'}\r\n                                            pageCount={pageCount}\r\n                                            onPageChange={changePage}\r\n                                            containerClassName={'paginationBtns'}\r\n                                            previousLinkClassName={'previousBtn'}\r\n                                            nextLinkClassName={'nextBtn'}\r\n                                            disabledClassName={'paginationDisabled'}\r\n                                            activeClassName={'paginationActive'}\r\n                                        />\r\n                                    </div>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n\r\n            <Dialog\r\n                maxWidth={'lg'}\r\n                open={storeOpen}\r\n                onClose={onPayHandleClickClose}>\r\n                <S010100070 \r\n                    dataContracId={dataAllContract} \r\n                    onPayHandleClickClose={onPayHandleClickClose} \r\n                    setStoreOpen={setStoreOpen}\r\n                    setPayChecked={setPayChecked}\r\n                    paymentList = {paymentList}\r\n                />\r\n            </Dialog>\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100060;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100130.js",["305","306","307","308","309","310","311"],"import React, { Fragment, useEffect, useState, useCallback } from 'react';\r\nimport './css/S010100130.css';\r\nimport axios from 'axios';\r\nimport S010100140 from './S010100140';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { DatePicker } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport moment from 'moment';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 200,\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n    \r\n}));\r\n\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\nlet chkSt = '';\r\n\r\nfunction S010100130(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const [mOpen, setMOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    \r\n    const [data] = useState('I');\r\n\r\n    const [numForDetail, setNumForDetail] = useState('');\r\n    const [tb_s10_ask010, setTb_s10_ask010] = useState([].slice(0,20));\r\n    const [ask_tps, setAsk_tps] = useState([{}])\r\n    const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endAsk_date, setEndAsk_date] = useState(new Date());\r\n\r\n    // 문의구분\r\n    const [ask_tp, setAsk_tp] = useState('');\r\n    // 문의자명\r\n    const [ask_name, setAsk_name] = useState('');\r\n    // 삭제\r\n    const [checkForDelete, setCheckForDelete] = useState(true);\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    // 페이징\r\n    const [pageNumber,setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(tb_s10_ask010.length/usersPerPage);\r\n    \r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const searchAsk = () => {\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n        // // console.log('startAsk_date',startAsk_date);\r\n        // // console.log('endAsk_date',endAsk_date);\r\n\r\n        axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                // // console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        searchAsk();\r\n    }, []);\r\n\r\n    // 문의 구분\r\n    useEffect(() => {\r\n        axios.post('/api/s010100130/ask_tp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //// console.log('Lov-ask_tp',response.data);\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                    setAsk_tps(arr);\r\n\r\n                } else {\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n    \r\n    // 상담등록 모달\r\n    const onHandleClickOpen = () => {\r\n        //// console.log('상담열기');\r\n        setStoreOpen(true);\r\n\r\n    };\r\n    \r\n\r\n    const onHandleClickClose = useCallback(() => {\r\n        setStoreOpen(false);\r\n        searchAsk();\r\n    });\r\n\r\n    // 상세보기 모달\r\n    const onDetailHandleClickOpen = (event) => {\r\n        //// console.log('target',event.target.id);\r\n        num = event.target.id;\r\n        rNum = parseInt(num);\r\n        setNumForDetail(rNum);\r\n        setMOpen(true);\r\n    };\r\n\r\n    const onDetailHandleClickClose = useCallback(() => {\r\n        setMOpen(false);\r\n        searchAsk();\r\n\r\n    });\r\n    \r\n\r\n    const handleToggle = (value) => {\r\n\r\n        const currentIndex = checked.indexOf(value);\r\n        // 전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n        \r\n            newChecked.push(value)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setChecked(newChecked);\r\n\r\n        newChecked.length > 0 ? chkSt = 'check' : chkSt = ''; \r\n        // // console.log('chkSt',chkSt);\r\n        // // console.log('newChecked.length',newChecked.length);\r\n\r\n    }\r\n\r\n    const onAsk_tpHandler = (event) => {\r\n        setAsk_tp(event.currentTarget.value);\r\n    }\r\n\r\n    const onAsk_nameHandler = (event) => {\r\n        setAsk_name(event.currentTarget.value);\r\n    }\r\n\r\n  \r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = () => {\r\n\r\n        if (checked.length === 0) {\r\n            alert('삭제할 사용자를 선택하세요');\r\n        }  else {\r\n            let askIdArray = checked;\r\n       \r\n            axios.post('/api/s010100130/delete', askIdArray)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                            alert('삭제 하였습니다.');\r\n                            searchAsk();\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert(\"삭제에 실패하였습니다.\")\r\n                    }\r\n                })\r\n            chkSt = '';        \r\n        \r\n            setChecked([]);\r\n            setCheckForDelete(true);\r\n        }\r\n\r\n    }\r\n\r\n    const cancelConfirm = () => alert('삭제를 취소하였습니다.');\r\n\r\n    const onHandleDelete = useConfirm(\r\n        \"삭제하시겠습니까?\",\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n\r\n    // 조회 \r\n    const onHandleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n    \r\n        axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                // // console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    const logoutConfirm = () => {\r\n\r\n    axios.post('/api/s010100150/userLogout')\r\n    .then(response => {\r\n        if (response.data.logoutResult == true) {\r\n        alert('로그아웃 하였습니다.');\r\n        sessionStorage.removeItem('member');\r\n        sessionStorage.clear();\r\n        props.history.push('/');\r\n        // console.log(sessionStorage.getItem('member'));\r\n        }else if(response.data.loginResult == false){\r\n        alert(response.data.message);\r\n        alert('아이디 또는 비밀번호를 확인하세요.');\r\n        }\r\n    })\r\n\r\n    };\r\n\r\n    const logounCancelConfirm = () => alert('취소하였습니다.');\r\n\r\n    const onLogoutHandler = useConfirm(\r\n        \"로그아웃 하시겠습니까?\",\r\n        logoutConfirm,\r\n        logounCancelConfirm\r\n    );\r\n\r\n    const excelHandler = () => {\r\n        // const body = {\r\n        //     startAsk_date,\r\n        //     ask_name,\r\n        //     ask_tp,\r\n        //     endAsk_date\r\n        // }\r\n\r\n        // axios.post('/api/s010100130/xlsx', body).then(response => {\r\n        //     if (response.data.success) {\r\n        //         setAskXlsx(response.data.rows);\r\n        //         console.log(response.data.rows);\r\n        //     } else {\r\n        //         alert('검색에 실패하였습니다.')\r\n        //     }\r\n       \r\n\r\n\r\n        const ws = xlsx.utils.json_to_sheet(tb_s10_ask010);\r\n        // console.log(tb_s10_ask010);\r\n\r\n        ['NO', '문의구분', '문의일자', '문의방법', '접근경로', '문의자명', '연락처']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][0] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"상담현황.xlsx\");\r\n    // })\r\n    }\r\n\r\n    \r\n    \r\n    const displayUsers = tb_s10_ask010.slice(pagesVisited,pagesVisited + usersPerPage).map((tb_s10_ask010, index) => {\r\n        return (\r\n            <TableRow key={tb_s10_ask010.ASK_ID}>\r\n                    <TableCell >\r\n                <input  key={tb_s10_ask010.ASK_ID+1} checked ={checked.indexOf(tb_s10_ask010.ASK_ID) === -1 ? false : true}type=\"checkbox\" onChange={()=>handleToggle(tb_s10_ask010.ASK_ID)} id={tb_s10_ask010.ASK_ID} />\r\n                </TableCell>\r\n                <TableCell onClick={onDetailHandleClickOpen} id={tb_s10_ask010.ASK_ID} className='underLineForDetail'>{tb_s10_ask010.ASK_ID}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_TP}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_DATE}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_METHOD}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_NAME}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_INFO}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_PATH}</TableCell>\r\n            </TableRow>\r\n           \r\n        );\r\n    });\r\n\r\n\r\n    \r\n   \r\n    return (\r\n        <Fragment>\r\n\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단 파란색 툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        SwonTech 고객관리시스템\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {/* 왼쪽메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider/>\r\n                    <List>\r\n                    <div>\r\n                        <div hidden ={sessionStorage.getItem('member') == null}>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                        <PeopleIcon />\r\n                        </ListItemIcon>\r\n                        <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                            <ShoppingCartIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                        <DashboardIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                            <BarChartIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                        <DashboardIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                            <ListItemIcon>\r\n                            <LayersIcon />\r\n                            </ListItemIcon>\r\n                            <span onClick ={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n                        </ListItem>\r\n                        </div>\r\n                    <div hidden ={sessionStorage.getItem('member') != null}>\r\n                        <ListItem button>\r\n                            <ListItemIcon>\r\n                            <LayersIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                        </ListItem>\r\n                        </div>\r\n                    </div>\r\n\r\n             </List>\r\n        </Drawer>\r\n           \r\n                {/* 메인화면  */}\r\n                <main className={classes.content}>\r\n                    <form onSubmit={onHandleFormSubmit}>\r\n                        <div className={classes.appBarSpacer} />\r\n                        <Container maxWidth=\"lg\" className={classes.container}>\r\n                            <Grid container spacing={3}>\r\n                                {/* Chart */}\r\n                                <Grid item xs={12}>\r\n                                    <Paper style={{ padding: 16 }}>\r\n\r\n                                        <div className=\"gridInline\">\r\n\r\n                                            문의일자\r\n                                            &nbsp;\r\n                                        \r\n                                            <DatePicker\r\n                                                locale=\"ko\"\r\n                                                selected={startAsk_date}\r\n                                                onChange={date => setStartAsk_date(date)}\r\n                                                selectsStart\r\n                                                startDate={startAsk_date}\r\n                                                // endDate={endAsk_date.setHours(9, 0, 0, 0)}\r\n                                                endDate={endAsk_date}\r\n                                                dateFormat=\"yyyy.MM.dd\"\r\n                                                defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                            />\r\n                                          &nbsp;\r\n                                        ~ &nbsp;\r\n                                        <DatePicker\r\n                                                locale=\"ko\"\r\n                                                selected={endAsk_date}\r\n                                                onChange={date => setEndAsk_date(date)}\r\n                                                selectsEnd\r\n                                                startDate={startAsk_date}\r\n                                                endDate={endAsk_date}\r\n                                                minDate={startAsk_date}\r\n                                                defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                            />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                            문의구분\r\n                                            &nbsp;\r\n\r\n                                                                <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onAsk_tpHandler} value={ask_tp}>\r\n                                                                    {ask_tps.map((item,index) => (\r\n                                                                        <option key={index} value={item.key}>{item.value}</option>\r\n                                                                    ))}\r\n\r\n                                                                </Form.Control>\r\n                                                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                                            문의자명\r\n                                            &nbsp;\r\n                                            <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\" type=\"text\" value={ask_name} id=\"ask_name\" name=\"ask_name\" onChange={onAsk_nameHandler} />\r\n                                            &nbsp;\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                                            <Button variant=\"contained\" style={{ width: 80, display: 'inline' }} color=\"primary\" onClick={onHandleFormSubmit}>\r\n                                                조회\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Paper>\r\n                                </Grid>\r\n\r\n                                <table className=\"btn\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <td colSpan=\"5\"id = \"alignLeft\" >\r\n                                                \r\n                                                    <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} onClick={onHandleClickOpen} >\r\n                                                        상담등록\r\n                                                    </Button>\r\n                                                    <Button variant=\"contained\" color=\"primary\"  style={{ width: 100 }} onClick={onHandleDelete}\r\n                                                        value=\"삭제하기\" >\r\n                                                        삭제하기\r\n                                                    </Button>\r\n                                                \r\n                                            </td>\r\n                                            \r\n                                            <td  id=\"alignRight\"><Button variant=\"contained\" style={{ width: 150 }} color=\"primary\" onClick={excelHandler}>엑셀다운로드</Button></td>\r\n                                        </tr>                                \r\n                                    </thead>\r\n                                </table>\r\n\r\n\r\n                                {/*상담현황 테이블 */}\r\n                                <Grid item xs={12}>\r\n                                    <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                            <Title>상담 현황</Title>\r\n                                            <Table size=\"small\">\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                <TableCell>선택</TableCell>\r\n                                                <TableCell>No</TableCell>\r\n                                                <TableCell>문의구분</TableCell>\r\n                                                <TableCell>문의일자</TableCell>\r\n                                                <TableCell>문의방법</TableCell>\r\n                                                <TableCell>문의자명</TableCell>\r\n                                                <TableCell>연락처</TableCell>\r\n                                                <TableCell>접근경로</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                { displayUsers}\r\n                                            </TableBody>\r\n                                            </Table>\r\n                                            <div id = \"reactPage\">\r\n                                                <ReactPaginate\r\n                                                    previousLabel = {\"Previous\"}\r\n                                                    nextLabel = {\"Next\"}\r\n                                                    pageCount = {pageCount}\r\n                                                    onPageChange = {changePage}\r\n                                                    containerClassName={\"paginationBtns\"}\r\n                                                    previousLinkClassName={\"previousBtn\"}\r\n                                                    nextLinkClassName={\"nextBtn\"}\r\n                                                    disabledClassName={\"paginationDisabled\"}\r\n                                                    activeClassName={\"paginationActive\"}   \r\n                                                />\r\n                                            </div>\r\n                                        </React.Fragment>\r\n                                    </Paper>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Container>\r\n                    </form>\r\n                </main>\r\n            </div>\r\n           \r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={mOpen}>\r\n                <S010100140 \r\n                    dataForm={\"U\"} \r\n                    num={numForDetail} \r\n                    searchAsk ={searchAsk} \r\n                    onDetailHandleClickClose={onDetailHandleClickClose} \r\n                    setMOpen={setMOpen}/>\r\n            </Dialog>\r\n                      \r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={storeOpen}>\r\n                <S010100140 \r\n                    dataForm={data} \r\n                    num={numForDetail} \r\n                    searchAsk ={searchAsk} \r\n                    onHandleClickClose={onHandleClickClose} \r\n                    setStoreOpen={setStoreOpen} />\r\n            </Dialog>\r\n           \r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100130;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100050.js",["312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { post } from 'axios';\r\nimport './css/S010100050.css';\r\nimport S010100010 from './S010100010';\r\nimport Base64Downloader from 'react-base64-downloader';\r\nimport DaumPostcode from 'react-daum-postcode';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n}));\r\n\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\nlet memberTpDetail = [];\r\n\r\nfunction S010100050(props) {\r\n\r\n    const [isPostOpen, setIsPostOpen] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const handleOpen = () => {\r\n        setIsPostOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setIsPostOpen(false);\r\n    };\r\n\r\n    const [detailAllInfo, setDetailAllInfo] = useState([]);\r\n\r\n    const [nameForDetailCModal, setNameForDetailCModal] = useState('');\r\n\r\n    // 회원정보\r\n    const [detailMemberNm, setDetailMemberNm] = useState('');\r\n\r\n    const [detailFstRegNo, setDetailFstRegNo] = useState('');\r\n    const [detailSndRegNo, setDetailSndRegNo] = useState('');\r\n    const [detailThdRegNo, setDetailThdRegNo] = useState('');\r\n\r\n    const [detailMemberTp, setDetailMemberTp] = useState('')\r\n    const [detailName, setDetailName] = useState('');\r\n\r\n    const [detailFstEmpHp, setDetailFstEmpHp] = useState('');\r\n    const [detailSndEmpHp, setDetailSndEmpHp] = useState('');\r\n    const [detailThdEmpHp, setDetailThdEmpHp] = useState('');\r\n\r\n    const [detailEmpEmail, setDetailEmpEmail] = useState('');\r\n    const [detailDomain, setDetailDomain] = useState('');\r\n    const [detailAddress, setDetailAddress] = useState('');\r\n    const [detailZipcode, setDetailZipcode] = useState('');\r\n    const [detailDetailAddress, setDetailDetailAddress] = useState('');\r\n\r\n    //const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endDateTest, setEndDateTest] = useState('');\r\n\r\n    const dataMemId = props.dataMemId;\r\n\r\n\r\n    const [conOpen, setConOpen] = React.useState(false);\r\n    const [newOpen, setNewOpen] = React.useState(false);\r\n    const [detailMemberId, setDetailMemberId] = useState('');\r\n    const [mEndFlag, setMEndFlag] = useState('');\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage =20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(detailAllInfo / usersPerPage);\r\n\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage, setPostsPerPage] = useState(3);\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n\r\n    // 첨부파일업로드\r\n    const [detailIdCardFile, setDetailIdCardFile] = useState(null);\r\n    const [detailIdCardFileName, setDetailIdCardFileName] = useState('');\r\n\r\n\r\n    const [detailBusiCardFile, setDetailBusiCardFile] = useState(null);\r\n    const [detailBusiCardFileName, setDetailBusiCardFileName] = useState('');\r\n\r\n\r\n    const [idCardImg,setIdCardImg] = useState('');\r\n    const [busiLicfImg,setBusiLicfImg] = useState('');\r\n    const [realIdCardFileName,setRealIdCardFileName] = useState('');\r\n    const [realRegistCardFileName,setRealRegistCardFileName] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/s010100050/memberTpDetail')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '선택', value: '선택' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n                        }));\r\n\r\n                    memberTpDetail = arr;\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\" 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    const detailMemberList = () => {\r\n        let body = {\r\n            dataMemId: dataMemId\r\n        }\r\n\r\n        axios.post('/api/s010100050/detailMember_by_id', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n\r\n                    const memberId = response.data.rows[0].MEMBER_ID;\r\n                    const modalMemberNm = response.data.rows[0].MEMBER_NM;\r\n                    const modalRegNo = response.data.rows[0].REG_NO;\r\n                    const modalMemberTp = response.data.rows[0].MEMBER_TP;\r\n                    const modalName = response.data.rows[0].NAME;\r\n                    const modalEmpHp = response.data.rows[0].EMP_HP;\r\n                    const modalEmpEmail = response.data.rows[0].EMP_EMAIL;\r\n                    const modalZip = response.data.rows[0].ZIP_CODE;\r\n                    const modalAddr = response.data.rows[0].ADDRESS;\r\n                    const modalDetailAddr = response.data.rows[0].DETAIL_ADDRESS;\r\n                    //const modalAddress = zip + ' ' + addr + ' ' + detailAddr;\r\n                    const modalEndDate = response.data.rows[0].END_DATE;\r\n                    const modalEndFlag = response.data.rows[0].END_FLAG;\r\n                    const modalRetireDate = response.data.rows[0].RETIRE_DATE;\r\n\r\n                    const modalRegNos = modalRegNo.split('-');\r\n                    const modalEmpHps = modalEmpHp.split('-');\r\n                    const modalEmpEmails = modalEmpEmail.split('@');\r\n\r\n                    \r\n                    setDetailAllInfo(response.data.rows);\r\n                    setDetailMemberId(memberId);\r\n            \r\n                    if(modalRetireDate === '00-00-00'){\r\n                        setEndDateTest('');\r\n                    }else{\r\n                        setEndDateTest(response.data.rows[0].RETIRE_DATE);\r\n                    }\r\n                    \r\n                 \r\n\r\n                    setDetailMemberNm(modalMemberNm);\r\n\r\n                    setDetailFstRegNo(modalRegNos[0]);\r\n                    setDetailSndRegNo(modalRegNos[1]);\r\n                    setDetailThdRegNo(modalRegNos[2]);\r\n\r\n                    setDetailMemberTp(modalMemberTp);\r\n                    setDetailName(modalName);\r\n\r\n                    setDetailFstEmpHp(modalEmpHps[0]);\r\n                    setDetailSndEmpHp(modalEmpHps[1]);\r\n                    setDetailThdEmpHp(modalEmpHps[2]);\r\n\r\n                    setDetailEmpEmail(modalEmpEmails[0]);\r\n                    setDetailDomain(modalEmpEmails[1]);\r\n                    setMEndFlag(modalEndFlag);\r\n                    //setStartAsk_date(new Date(modalEndDate));\r\n\r\n                    setDetailZipcode(modalZip);\r\n                    setDetailAddress(modalAddr);\r\n                    setDetailDetailAddress(modalDetailAddr);\r\n                  \r\n                    \r\n                    const idCardImg = new Buffer.from(response.data.rows[0].ID_CARD_IMAGE).toString();\r\n                    const busiLicfImg = new Buffer.from(response.data.rows[0].BUSI_LICS_IMAGE).toString(); \r\n\r\n                    setIdCardImg(idCardImg);\r\n                    setRealIdCardFileName(response.data.rows[0].ID_CARD_IMAGE_NAME);\r\n                   \r\n                    setBusiLicfImg(busiLicfImg);\r\n                    setRealRegistCardFileName(response.data.rows[0].BUSI_LICS_IMAGE_NAME);\r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('상세정보 데이터를 불러오는데 실패하였습니다.');\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        detailMemberList();\r\n    }, [])\r\n\r\n\r\n\r\n    const detailIdCardHandleFileChange = (event) => {\r\n        setDetailIdCardFile(event.currentTarget.files[0]);\r\n        setDetailIdCardFileName(event.currentTarget.value);\r\n        \r\n        let imageType = event.currentTarget.files[0].type;\r\n        \r\n        if((imageType != 'image/png')&&(imageType != 'image/jpg')&&(imageType != 'image/jpeg')){\r\n            alert('.jpg, .jpeg, .png 확장자만 업로드 가능합니다.');\r\n            setDetailIdCardFile('');\r\n            setDetailIdCardFileName('');\r\n        }\r\n    }   \r\n\r\n    const detailBusiCardHandleFileChange = (event) => {\r\n        setDetailBusiCardFile(event.currentTarget.files[0]);\r\n        setDetailBusiCardFileName(event.currentTarget.value);\r\n\r\n        let imageType = event.currentTarget.files[0].type;\r\n        \r\n        if((imageType != 'image/png')&&(imageType != 'image/jpg')&&(imageType != 'image/jpeg')){\r\n            alert('.jpg, .jpeg, .png 확장자만 업로드 가능합니다.');\r\n            setDetailBusiCardFile('');\r\n            setDetailBusiCardFileName('');\r\n        }\r\n    }\r\n\r\n    const [detailIdCardImg,setDetailIdCardImg] = useState('');\r\n    const [detailBusiLicfImg,setDetailBusiLicfImg] = useState('');\r\n    // setState을 파라미터로\r\n    const encodeIdFileBase64 = (idCardfile) => {\r\n        let reader = new FileReader();\r\n        if(idCardfile){\r\n            reader.readAsDataURL(idCardfile);\r\n            reader.onload = () => {\r\n                let Base64 = reader.result;\r\n                // console.log(Base64);\r\n                setDetailIdCardImg(Base64);\r\n               \r\n            };\r\n            \r\n            reader.onerror = function (error){\r\n                console.log('error : ',error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const encodeBusiFileBase64 = (idCardfile) => {\r\n        let reader = new FileReader();\r\n        if(idCardfile){\r\n            reader.readAsDataURL(idCardfile);\r\n            reader.onload = () => {\r\n                let Base64 = reader.result;\r\n                // console.log(Base64);\r\n                setDetailBusiLicfImg(Base64);\r\n               \r\n            };\r\n            \r\n            reader.onerror = function (error){\r\n                console.log('error : ',error);\r\n            }\r\n        }\r\n    };\r\n\r\n    encodeIdFileBase64(detailIdCardFile);\r\n    encodeBusiFileBase64(detailBusiCardFile);\r\n\r\n    // 회원정보수정 함수\r\n    const tempAddMember = () => {\r\n        \r\n        let dataMemId = props.dataMemId;\r\n\r\n        let realDetailIdCardFileName;\r\n        let realDetailBusiCardFileName;\r\n\r\n        if(detailIdCardFileName){\r\n            realDetailIdCardFileName = detailIdCardFileName.split('\\\\')[2].split('.')[0];    \r\n        }\r\n        \r\n        if(detailBusiCardFileName){\r\n            realDetailBusiCardFileName = detailBusiCardFileName.split('\\\\')[2].split('.')[0];\r\n        }\r\n        \r\n        let body ={\r\n            dataMemId: dataMemId,\r\n            detailIdCardImg,\r\n            detailBusiLicfImg,\r\n            realDetailIdCardFileName,\r\n            realDetailBusiCardFileName,\r\n            detailMemberNm: detailMemberNm,\r\n            detailFstRegNo: detailFstRegNo,\r\n            detailSndRegNo: detailSndRegNo,\r\n            detailThdRegNo: detailThdRegNo,\r\n            detailMemberTp: detailMemberTp,\r\n            detailName: detailName,\r\n            detailFstEmpHp: detailFstEmpHp,\r\n            detailSndEmpHp: detailSndEmpHp,\r\n            detailThdEmpHp: detailThdEmpHp,\r\n            detailDomain: detailDomain,\r\n            detailEmpEmail: detailEmpEmail,\r\n            detailZipcode: detailZipcode,\r\n            detailAddress: detailAddress,\r\n            detailDetailAddress: detailDetailAddress\r\n        }\r\n\r\n        axios.post('/api/s010100050/modifyMember',body)\r\n        .then(response => {\r\n            if (response.data.success) {\r\n                alert('정상적으로 수정 되었습니다.');\r\n                props.setModalOpen(false);\r\n                props.memberList();\r\n            } else {\r\n                alert(response.data.message);\r\n                alert('수정에 실패하였습니다.');\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    // 회원정보 수정\r\n    const onModifyHandler = () => {\r\n        tempAddMember();\r\n    }\r\n\r\n    const onDetailMemberNmHandler = (event) => {\r\n        setDetailMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailFstRegNoHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setDetailFstRegNo(regexData);\r\n    }\r\n\r\n    const onDetailSndRegNoHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setDetailSndRegNo(regexData);\r\n    }\r\n    const onDetailThdRegNoHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setDetailThdRegNo(regexData);\r\n    }\r\n\r\n    const onDetailMemberTpHandler = (event) => {\r\n        setDetailMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailNameHandler = (event) => {\r\n        setDetailName(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailFstEmpHpHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setDetailFstEmpHp(regexData);\r\n    }\r\n\r\n    const onDetailSndEmpHpHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setDetailSndEmpHp(regexData);\r\n    }\r\n\r\n    const onDetailThdEmpHpHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setDetailThdEmpHp(regexData);\r\n    }\r\n\r\n    const onDetailEmpEmailHandler = (event) => {\r\n        const regexData = getRegexData(/[^-A-Za-z0-9_]/g, event.currentTarget.value);\r\n        setDetailEmpEmail(regexData);\r\n    }\r\n\r\n    const onDetailDomainHandler = (event) => {\r\n        const regexData = getRegexData(/[^-A-Za-z0-9_]/g, event.currentTarget.value);\r\n        setDetailDomain(regexData);\r\n    }\r\n\r\n    const onDetailZipcodeHandler = (event) => {\r\n        setDetailZipcode(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailAddressHandler = (event) => {\r\n        setDetailAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailDetailAddressHandler = (event) => {\r\n        setDetailDetailAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onSubmitDetailHandler = (event) => {\r\n\r\n    }\r\n\r\n    const onAllContractEndHandler = () => {\r\n        console.log('dataMemId',dataMemId);\r\n        let body = {\r\n            dataMemId: dataMemId\r\n        }\r\n        \r\n        axios.post('/api/s010100050/allContractEnd', body)\r\n        .then(response => {\r\n            if (response.data.success) {\r\n                \r\n                alert('종료처리 되었습니다.');\r\n                detailMemberList();\r\n                \r\n            } else {\r\n                alert(response.data.message);\r\n                alert('종료처리를 실패 하였습니다.');\r\n            }\r\n        })\r\n    }\r\n\r\n    const onDetailClickOpen = (event) => {\r\n        num = event.target.innerHTML;\r\n        rNum = parseInt(num);\r\n        setNameForDetailCModal(rNum);\r\n        setConOpen(true);\r\n    }\r\n\r\n    const onConContractHandler = useCallback(() => {\r\n        setConOpen(false);\r\n        detailMemberList();\r\n    });\r\n\r\n    // 신규계약 닫기\r\n    const onNewContractHandler = useCallback(() => {\r\n        setNewOpen(false);\r\n        detailMemberList();\r\n    });\r\n\r\n    const onNewOpenContractHandler = (event) => {\r\n        setNewOpen(true);\r\n    }\r\n\r\n    const getRegexData = (regex, data) => {\r\n        return data.replace(regex, \"\");\r\n    }\r\n\r\n\r\n    const displayUsers = detailAllInfo.slice(pagesVisited, pagesVisited + usersPerPage).map((detailAllInfo, index) => {\r\n        return (\r\n            <TableRow key={index}>\r\n                <TableCell onClick={onDetailClickOpen} className='underLineForDetail' id={detailAllInfo.CONTRACT_ID}>{detailAllInfo.CONTRACT_ID}</TableCell>\r\n                <TableCell>{detailAllInfo.CONTRACT_DATE}</TableCell>\r\n                <TableCell>{detailAllInfo.CONTRACT_TP}</TableCell>\r\n                <TableCell>{detailAllInfo.CONTRACT_ROOM}</TableCell>\r\n                <TableCell>{detailAllInfo.CONTRACT_TERM}개월 ({detailAllInfo.START_DATE} ~ {detailAllInfo.END_DATE})</TableCell>\r\n                <TableCell>{detailAllInfo.CONTRACT_ST}</TableCell>\r\n                <TableCell>{detailAllInfo.PAY_DATE}일</TableCell>\r\n                <TableCell>{detailAllInfo.MONTHLY_FEE}</TableCell>\r\n                <TableCell>{detailAllInfo.CONTRACT_LOCKER}</TableCell>\r\n                <TableCell>{detailAllInfo.END_FLAG}</TableCell>\r\n            </TableRow>\r\n        )\r\n\r\n    });\r\n\r\n\r\n    const postCodeStyle = {\r\n        display: \"block\",\r\n        top: \"50%\",\r\n        width: \"400px\",\r\n        height: \"500px\",\r\n        padding: \"10px\",\r\n    };\r\n\r\n    const handleComplete = (data) => {\r\n        let fullAddress = data.address;\r\n        let extraAddress = \"\";\r\n\r\n        if (data.addressType === \"R\") {\r\n            if (data.bname !== \"\") {\r\n                extraAddress += data.bname;\r\n            }\r\n            if (data.buildingName !== \"\") {\r\n                extraAddress +=\r\n                    extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\r\n            }\r\n            fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\r\n        }\r\n        setDetailZipcode(data.zonecode);\r\n        setDetailAddress(fullAddress);\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <form style={{\r\n            display: 'flex',\r\n            flexDirection: 'column14',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '100%'\r\n        }}\r\n            encType='multipart/form-data'\r\n            onSubmit={onSubmitDetailHandler}\r\n        >\r\n            <div className=\"memberInfoWrapper\">\r\n                <div className=\"memberInfoWrap\">\r\n                    {/* 회원정보란 */}\r\n                    <h5 id=\"infoTitle\">회원 정보</h5>\r\n\r\n                    <table id=\"memberDetailTable\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th colSpan=\"2\">회원명</th>\r\n\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 12 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailMemberNm} id=\"detailMemberNm\" name=\"detailMemberNm\"\r\n                                        onChange={onDetailMemberNmHandler} />\r\n\r\n                                </td>\r\n                                <th>사업자번호</th>\r\n                                <td colSpan=\"2\">\r\n\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailFstRegNo} id=\"detailRegNo\" name=\"detailRegNo\"\r\n                                        onChange={onDetailFstRegNoHandler} maxLength=\"3\"/>\r\n                                &nbsp; - &nbsp;\r\n\r\n                                <Form.Control style={{ width: 3 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailSndRegNo} id=\"detailRegNo\" name=\"detailRegNo\"\r\n                                        onChange={onDetailSndRegNoHandler} maxLength=\"2\"/>\r\n                                &nbsp; - &nbsp;\r\n\r\n                                <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailThdRegNo} id=\"detailRegNo\" name=\"detailRegNo\"\r\n                                        onChange={onDetailThdRegNoHandler} maxLength=\"5\"/>\r\n\r\n                                </td>\r\n                                <th>회원구분</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onDetailMemberTpHandler} value={detailMemberTp || ''}>\r\n                                        {memberTpDetail.map((item, index) => (\r\n                                            <option key={index} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n                                <th>퇴실일자</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 8 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={endDateTest} disabled />\r\n\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th rowSpan=\"2\">대표자</th>\r\n\r\n                                <th>성명</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailName} id=\"detailName\" name=\"detailName\"\r\n                                        onChange={onDetailNameHandler} />\r\n                                </td>\r\n                                <th>연락처</th>\r\n                                <td colSpan=\"2\">\r\n\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailFstEmpHp} id=\"detailEmpHp\" name=\"detailEmpHp\"\r\n                                        onChange={onDetailFstEmpHpHandler} maxLength=\"3\"/>\r\n\r\n                                     &nbsp; - &nbsp;\r\n                                     <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailSndEmpHp} id=\"detailEmpHp\" name=\"detailEmpHp\"\r\n                                        onChange={onDetailSndEmpHpHandler} maxLength=\"4\"/>\r\n\r\n\r\n                                     &nbsp; - &nbsp;\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailThdEmpHp} id=\"detailEmpHp\" name=\"detailEmpHp\"\r\n                                        onChange={onDetailThdEmpHpHandler} maxLength=\"4\"/>\r\n\r\n                                </td>\r\n                                <th>E-mail</th>\r\n\r\n                                <td colSpan=\"3\">\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailEmpEmail} id=\"detailEmpEmail\" name=\"detailEmpEmail\"\r\n                                        onChange={onDetailEmpEmailHandler} />\r\n\r\n\r\n                            &nbsp; @ &nbsp;\r\n                            <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailDomain} id=\"detailEmpEmail\" name=\"detailEmpEmail\"\r\n                                        onChange={onDetailDomainHandler} />\r\n\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>주소</th>\r\n                                <td colSpan=\"8\">\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailZipcode} id=\"detailAddress\" name=\"detailAddress\"\r\n                                        onChange={onDetailZipcodeHandler} />\r\n\r\n\r\n                            &nbsp;\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} onClick={handleOpen}>우편</Button>&nbsp;\r\n\r\n                            <Modal\r\n                                        className={classes.modal}\r\n                                        open={isPostOpen}\r\n                                        onClose={handleClose}\r\n                                        closeAfterTransition\r\n                                        BackdropComponent={Backdrop}\r\n                                     \r\n                                    >\r\n                                        <Fade in={isPostOpen}>\r\n                                            <div className={classes.paper}>\r\n                                                <DaumPostcode  style={postCodeStyle} onComplete={handleComplete} />\r\n                                            </div>\r\n                                        </Fade>\r\n                                    </Modal>\r\n\r\n                                    <Form.Control style={{ width: 30 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailAddress} id=\"detailAddress\" name=\"detailAddress\"\r\n                                        onChange={onDetailAddressHandler} />\r\n\r\n\r\n\r\n                                    <Form.Control style={{ width: 45 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailDetailAddress} id=\"detailAddress\" name=\"detailAddress\"\r\n                                        onChange={onDetailDetailAddressHandler} />\r\n\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                {/* onClick={onIdDownloadHandler} */}\r\n                                <th rowSpan=\"2\" colSpan=\"2\">첨부파일</th>\r\n                                <td colSpan=\"8\">\r\n                                <label htmlFor=\"file\">대표자신분증:</label>&nbsp;\r\n                                    <Base64Downloader\r\n                                        base64={idCardImg}\r\n                                        downloadName={realIdCardFileName}\r\n                                        Tag=\"a\"\r\n                                        extraAttributes={{ href: '#' }}\r\n                                        className=\"my-class-name\"\r\n                                        style={{ color: 'orange' }}\r\n                                    >\r\n                                      {realIdCardFileName}\r\n                                    </Base64Downloader>\r\n                                    &nbsp;\r\n                                   \r\n                                <input type='file'\r\n                                        file={detailIdCardFile}\r\n                                        name='detailIdCardFile'\r\n                                        value={detailIdCardFileName}\r\n                                        onChange={detailIdCardHandleFileChange}\r\n                                    />\r\n                                <div className = 'fileStar'> * jpg,jpeg,png 파일만 가능합니다.</div>\r\n                                </td>\r\n\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan=\"8\">\r\n                                <label htmlFor=\"file\">사업자등록증:</label>&nbsp;\r\n                                <Base64Downloader\r\n                                        base64={busiLicfImg}\r\n                                        downloadName={realRegistCardFileName}\r\n                                        Tag=\"a\"\r\n                                        extraAttributes={{ href: '#' }}\r\n                                        className=\"my-class-name\"\r\n                                        style={{ color: 'orange' }}\r\n                                    >\r\n                                       {realRegistCardFileName}\r\n                                    </Base64Downloader>\r\n                                    &nbsp;\r\n                                   \r\n                                <input type='file'\r\n                                        file={detailBusiCardFile}\r\n                                        name='detailBusiCardFile'\r\n                                        value={detailBusiCardFileName}\r\n                                        onChange={detailBusiCardHandleFileChange}\r\n                                />\r\n                                <div className = 'fileStar'> * jpg,jpeg,png 파일만 가능합니다.</div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <React.Fragment >\r\n                        <Title>상담 현황</Title>\r\n                        <Table size=\"small\">\r\n\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>계약ID</TableCell>\r\n                                    <TableCell>계약일자</TableCell>\r\n                                    <TableCell>계약상품</TableCell>\r\n                                    <TableCell>호    실</TableCell>\r\n                                    <TableCell>계약기간</TableCell>\r\n                                    <TableCell>계약상태</TableCell>\r\n                                    <TableCell>매월입금일</TableCell>\r\n                                    <TableCell>월회비</TableCell>\r\n                                    <TableCell>사물함</TableCell>\r\n                                    <TableCell>종료여부</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {displayUsers}\r\n                            </TableBody>\r\n                        </Table>\r\n\r\n                    </React.Fragment>\r\n                    {/* </Paper> */}\r\n                    {/* </Grid> */}\r\n                    <div className=\"pageCenter\">\r\n                        <div id=\"reactPage\">\r\n                            <ReactPaginate\r\n                                previousLabel={\"Previous\"}\r\n                                nextLabel={\"Next\"}\r\n                                pageCount={pageCount}\r\n                                onPageChange={changePage}\r\n                                containerClassName={\"paginationBtns\"}\r\n                                previousLinkClassName={\"previousBtn\"}\r\n                                nextLinkClassName={\"nextBtn\"}\r\n                                disabledClassName={\"paginationDisabled\"}\r\n                                activeClassName={\"paginationActive\"}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div id=\"btnAlign\">\r\n\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} id=\"btn-centerN\" onClick={onNewOpenContractHandler} >\r\n                            신규계약\r\n                        </Button>\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} id=\"btn-centerN\" onClick={onModifyHandler} >\r\n                            수정하기\r\n                        </Button>\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} id=\"btn-centerN\" onClick={onAllContractEndHandler} >\r\n                            종료\r\n                        </Button>\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} id=\"btn-centerN\" onClick={props.onHandleDetailClickClose} >\r\n                            닫기\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/*계약ID클릭*/}\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={conOpen}\r\n                onClose={onConContractHandler}>\r\n                <S010100010 dataNum={rNum} cDataForm={'I'} detailMemberList={detailMemberList} onConContractHandler={onConContractHandler} setConOpen={setConOpen} />\r\n            </Dialog>\r\n\r\n            {/*신규계약 멤버ID클릭*/}\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={newOpen}\r\n                onClose={onNewContractHandler}>\r\n                <S010100010 dataMem={detailMemberId} newDataForm={'N'} detailMemberList={detailMemberList} onNewContractHandler={onNewContractHandler} setNewOpen={setNewOpen} />\r\n            </Dialog>\r\n\r\n        </form>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default S010100050;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100150.js",["328","329","330","331","332","333","334"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport logos from './css/logos.png';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24,\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n\r\n}));\r\n\r\n\r\n\r\nfunction S010100150(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = React.useState(true);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const onEmailHandler = (event) => {\r\n    setEmail(event.currentTarget.value)\r\n  };\r\n\r\n  const onPasswordHandler = (event) => {\r\n    setPassword(event.currentTarget.value)\r\n  };\r\n\r\n  const useConfirm = (message = null, onConfirm, onCancel) => {\r\n    if (!onConfirm || typeof onConfirm !== \"function\") {\r\n        return;\r\n    }\r\n    if (onCancel && typeof onCancel !== \"function\") {\r\n        return;\r\n    }\r\n\r\n    const confirmAction = () => {\r\n        if (window.confirm(message)) {\r\n            onConfirm();\r\n        } else {\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    return confirmAction;\r\n  };\r\n\r\n  const approvalConfirm = () => {\r\n\r\n    axios.post('/api/s010100150/userLogout')\r\n    .then(response => {\r\n      if (response.data.logoutResult == true) {\r\n        alert('로그아웃 하였습니다.');\r\n        sessionStorage.removeItem('member');\r\n        sessionStorage.clear();\r\n        props.history.push('/');\r\n        // console.log(sessionStorage.getItem('member'));\r\n      }else if(response.data.loginResult == false){\r\n        alert(response.data.message);\r\n        alert('아이디 또는 비밀번호를 확인하세요.');\r\n      }\r\n    })\r\n\r\n  };\r\n\r\n  const cancelConfirm = () => alert('취소하였습니다.');\r\n\r\n  const onLogoutHandler = useConfirm(\r\n      \"로그아웃 하시겠습니까?\",\r\n      approvalConfirm,\r\n      cancelConfirm\r\n  );\r\n\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    let body = {\r\n      email: email,\r\n      password: password\r\n    }\r\n\r\n    axios.post('/api/s010100150/userLogin', body)\r\n      .then(response => {\r\n        if (response.data.loginResult == true) {\r\n          alert('로그인 되었습니다.');\r\n          let arr = [response.data.cf,response.data.mI];\r\n          \r\n          sessionStorage.setItem('member',JSON.stringify(arr));\r\n          props.history.push('/member');       \r\n        }else if(response.data.pwdResult == false){\r\n          alert('비밀번호를 확인하세요');\r\n        }else if(response.data.loginResult == false){\r\n          // alert(response.data.message);\r\n          alert('가입되어 있지 않은 사용자 입니다.');\r\n        }\r\n      })\r\n  }\r\n\r\n  return (\r\n\r\n    <div className={classes.root}>\r\n      {/* 백그라운드 */}\r\n      <CssBaseline />\r\n      {/* 상단파란툴바 */}\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n          SwonTech 고객관리시스템\r\n          </Typography>\r\n         \r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* 왼쪽 메뉴바 */}\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          <div>\r\n            <div id = \"hey\" hidden ={sessionStorage.getItem('member') === null}>\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n              <PeopleIcon />\r\n              </ListItemIcon>\r\n              <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n            </ListItem>\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n                <ShoppingCartIcon />\r\n              </ListItemIcon>\r\n              <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n            </ListItem>\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n              <DashboardIcon />\r\n              </ListItemIcon>\r\n              <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n            </ListItem>\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n                <BarChartIcon />\r\n              </ListItemIcon>\r\n              <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n            </ListItem>\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n              <DashboardIcon />\r\n              </ListItemIcon>\r\n              <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n            </ListItem>\r\n            <ListItem button>\r\n                <ListItemIcon>\r\n                  <LayersIcon />\r\n                </ListItemIcon>\r\n                <span onClick={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n              </ListItem>\r\n            </div>\r\n\r\n            <div hidden = {sessionStorage.getItem('member') != null}>\r\n              <ListItem button>\r\n                <ListItemIcon>\r\n                  <LayersIcon />\r\n                </ListItemIcon>\r\n                <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n              </ListItem>\r\n            </div>\r\n\r\n          </div>\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n              <CssBaseline />\r\n              <div className={classes.paper}>\r\n              <img  src={logos} width=\"true\"></img>\r\n\r\n                <div hidden ={sessionStorage.getItem('member') != null}>\r\n                  <Typography component=\"h1\" variant=\"h5\">\r\n                    로그인\r\n                  </Typography>\r\n                </div>\r\n                <div hidden ={sessionStorage.getItem('member') === null} style={{marginTop:'5px'}}>\r\n                  <Typography component=\"h1\" variant=\"h5\">\r\n                    로그아웃\r\n                  </Typography>\r\n                </div>\r\n                <form onSubmit={onSubmitHandler} >\r\n                  <div hidden ={sessionStorage.getItem('member') != null}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      margin=\"normal\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"이메일을 입력하세요\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      autoFocus\r\n                      value={email}\r\n                      onChange={onEmailHandler}\r\n                    />\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      margin=\"normal\"\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"비밀번호를 입력하세요\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                      value={password}\r\n                      onChange={onPasswordHandler}\r\n                    />\r\n                  </div>\r\n                  <div hidden ={sessionStorage.getItem('member') != null}> \r\n                    <Button type=\"submit\"\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.submit}\r\n                    > 로그인 </Button>\r\n                  </div>\r\n                  \r\n                  <div hidden ={sessionStorage.getItem('member') === null}>\r\n                    <Button onClick = {onLogoutHandler}\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.submit}\r\n                    > 로그아웃 </Button>\r\n                  </div>\r\n                  <Grid container>\r\n                    <Grid item>\r\n                      <Link href=\"/findemailPwd\" variant=\"body2\">\r\n                      <span hidden ={sessionStorage.getItem('member') != null}>\r\n                        비밀번호초기화\r\n                      </span>\r\n                      </Link>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n\r\n         \r\n                </form>\r\n              </div>\r\n\r\n            </Container>\r\n\r\n          </Grid>\r\n         \r\n        </Container>\r\n      </main>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default S010100150;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100140.js",["335","336","337"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './css/S010100140.css';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko'\r\n\r\nregisterLocale(\"ko\", ko);\r\n\r\n\r\n\r\n\r\nfunction S010100140(props) {\r\n\r\n    const rNum = props.num;\r\n    // 상세보기\r\n    useEffect(() => {\r\n      \r\n        if (props.dataForm === 'U') {\r\n\r\n            axios.get(`/api/s010100140/tb_s10_ask010_by_id?id=${rNum}&type=single`)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        // // console.log(response.data)\r\n                        const askTp = (response.data.rows[0].ASK_TP);\r\n                        const askDate = (response.data.rows[0].ASK_DATE);\r\n                        const askMethod = (response.data.rows[0].ASK_METHOD);\r\n                        const askName = (response.data.rows[0].ASK_NAME);\r\n                        const askPath = (response.data.rows[0].ASK_PATH);\r\n                        const askInfo = (response.data.rows[0].ASK_INFO);\r\n                        const askContent = (response.data.rows[0].ASK_CONTENT);\r\n    \r\n                        setModalAskTp(askTp);\r\n                        setModalAskName(askName);\r\n                        setModalAskMethod(askMethod);\r\n                        setModalAskPath(askPath);\r\n                        setModalAskInfo(askInfo);\r\n                        setModalAskContent(askContent);\r\n                        setStartDate(new Date(askDate));\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                    }\r\n                })\r\n        }\r\n\r\n    }, [])\r\n\r\n    //select-option\r\n    const [modalAskTp, setModalAskTp] = useState('')\r\n    const [modalAskMethod, setModalAskMethod] = useState('')\r\n    const [modalAskPath, setModalAskPath] = useState('')\r\n\r\n    const [modalContractTpLov, setModalContractTpLov] = useState([{ key: '', value: '선택' }])\r\n    const [modalAskMethodLov, setModalAskMethodLov] = useState([{ key: '', value: '선택' }])\r\n    const [modalAccessPathLov, setModalAccessPathLov] = useState([{ key: '', value: '선택' }])\r\n\r\n    useEffect(() => {\r\n        getContractTpLov();\r\n        getAskMethodLov();\r\n        getAccessPathLov();\r\n    }, []);\r\n\r\n    const getContractTpLov = () => {\r\n        getLovByCdTp('CONTRACT_TP', 'ASK');\r\n    };\r\n    const getAskMethodLov = () => {\r\n        getLovByCdTp('ASK_METHOD', '');\r\n    };\r\n    const getAccessPathLov = () => {\r\n        getLovByCdTp('ACCESS_PATH', 'ASK');\r\n    };\r\n\r\n    /**\r\n     * desc : LOV에 필요한 항목을 받아 DB조회 후 조회값을 반환하는 로직\r\n     * */\r\n\r\n    async function getLovByCdTp(cdTp, attribute2) {\r\n        let arr = [{ key: '', value: '선택' }];\r\n        return await axios.post('/api/s010100140/selectTest', { firstVal: cdTp, secondVal: attribute2 })\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                   // console.log('modalAskTp',response.data.rows);\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n                        }));\r\n                    \r\n                    switch (cdTp) {\r\n                        case 'CONTRACT_TP': setModalContractTpLov(arr); break;\r\n                        case 'ASK_METHOD': setModalAskMethodLov(arr); break;\r\n                        case 'ACCESS_PATH': setModalAccessPathLov(arr); break;\r\n                    }\r\n                    if (cdTp === 'CONTRACT_TP')\r\n                        setModalAccessPathLov(arr);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\")\r\n                }\r\n            }).catch(() => {\r\n               \r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n            })\r\n     \r\n    }\r\n\r\n    const [startDate, setStartDate] = useState(new Date());\r\n  \r\n    const [modalAskName, setModalAskName] = useState(\"\")\r\n    const [modalAskInfo, setModalAskInfo] = useState(\"\")\r\n    const [modalAskContent, setModalAskContent] = useState(\"\")\r\n\r\n\r\n    const onAskTpHandler = (event) => {\r\n        setModalAskTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskMethodHandler = (event) => {\r\n        setModalAskMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskPathHandler = (event) => {\r\n        setModalAskPath(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskNameHandler = (event) => {\r\n        setModalAskName(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskInfoHandler = (event) => {\r\n        setModalAskInfo(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskContentHandler = (event) => {\r\n        setModalAskContent(event.currentTarget.value);\r\n    }\r\n    \r\n\r\n\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = () => {\r\n\r\n        const body = {\r\n            modalAskId: rNum,\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: startDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n\r\n        axios.post('/api/s010100140/modify', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('정상적으로 수정되었습니다.');\r\n                    props.setMOpen(false);\r\n                    props.searchAsk();\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('수정에 실패하였습니다.')\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    const cancelConfirm = () => alert('수정을 취소하였습니다.');\r\n\r\n    const onModifyHandler = useConfirm(\r\n        modalAskName+'님의 정보를 수정하시겠습니까?',\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n\r\n\r\n    // 상담 등록 저장 버튼 클릭시\r\n    const onHandleSubmit = (event) => {\r\n        event.preventDefault();\r\n        //   //문의구분 NUll체크\r\n        if (!modalAskTp || modalAskTp === '선택') {\r\n            return alert(\"문의구분을 선택하세요.\");\r\n        }\r\n\r\n        //문의방법 NUll체크\r\n        if (!modalAskMethod) {\r\n           \r\n            return alert(\"문의방법을 선택하세요.\");\r\n        }\r\n\r\n        //접근경로 NUll체크\r\n        if (!modalAskPath) {\r\n            return alert(\"접근경로를 선택하세요.\");\r\n        }\r\n\r\n        const body = {\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: startDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n\r\n        axios.post('/api/s010100140/insert', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('정상적으로 등록되었습니다.');\r\n                    props.setStoreOpen(false);\r\n                    props.searchAsk();\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('등록에 실패하였습니다.')\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={onHandleSubmit} >\r\n        \r\n            <div className=\"askInfoWrapper\">\r\n                <div className=\"memberInfoWrap\">\r\n                    {/* 회원정보란 */}\r\n                    <h5 id=\"infoTitle\">상담 등록</h5>\r\n\r\n                    <table id=\"memberDetailTable\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>문의구분</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onAskTpHandler} value={modalAskTp}>\r\n                                        {modalContractTpLov.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                <th>문의일자</th>\r\n                                <td>\r\n                                \r\n                                    <DatePicker\r\n                                        className=\"dateSize\"\r\n                                        locale=\"ko\"\r\n                                        selected={startDate.setHours(9, 0, 0, 0)}\r\n                                        onChange={date => setStartDate(date)}\r\n                                        dateFormat=\"yyyy-MM-dd (eee)\"\r\n                                    />\r\n\r\n                                </td>\r\n\r\n                                <th>문의자명</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        value={modalAskName}\r\n                                        id=\"modalAskName\"\r\n                                        name=\"modalAskName\"\r\n                                        onChange={onAskNameHandler} />\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>문의방법</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} value={modalAskMethod} onChange={onAskMethodHandler}>\r\n                                        {modalAskMethodLov.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                <th>접근경로</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} value={modalAskPath} onChange={onAskPathHandler}>\r\n                                        {modalAccessPathLov.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                <th>문의자연락처</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={modalAskInfo} id=\"modalAskInfo\" name=\"modalAskInfo\" onChange={onAskInfoHandler} />\r\n                                </td>\r\n                            </tr>\r\n\r\n\r\n                            <tr>\r\n                                <th>상담내용</th>\r\n\r\n                                <td colSpan=\"5\">\r\n                                    <Form.Control as=\"textarea\" rows={3} value={modalAskContent} id=\"modalAskContent\" name=\"modalAskContent\"\r\n                                        onChange={onAskContentHandler} />\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div id=\"btnAlign\">\r\n                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"popBtn\" onClick={onModifyHandler} hidden={props.dataForm !== 'U'} >수정하기</Button>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"popBtn\" type=\"submit\" hidden={props.dataForm === 'U'} >등록하기</Button>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"popBtn\" hidden={props.dataForm !== 'U'} onClick={props.onDetailHandleClickClose}>닫기</Button>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"popBtn\" hidden={props.dataForm === 'U'} onClick={props.onHandleClickClose}>닫기</Button>\r\n            </div>\r\n        </form>\r\n\r\n    );\r\n}\r\nexport default S010100140;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Pagination.js",["338"],"import React from 'react';\r\n\r\nconst Pagination = ({postsPerPage,totalPosts,paginate}) =>{\r\n    const pageNumbers = [];\r\n\r\n    for(let i = 1;i <= Math.ceil(totalPosts/postsPerPage);i++){\r\n        pageNumbers.push(i);\r\n\r\n    }\r\n    return(\r\n        <nav id = \"pageCenter\">\r\n            <ul className = \"pagination\" style = {{ margin:0, padding:0}} >\r\n                {pageNumbers.map(number =>(\r\n                    <li key = {number} className = \"pageItem\" style = {{float:\"left\",  margin:0, padding:0}}>\r\n                        <a onClick={()=>paginate(number)} className = \"pageLink\">\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Pagination;",["339","340"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100070.js",["341","342","343","344","345","346","347","348","349","350","351"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\LeaseAgreement.js",["352","353"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\listItems.js",[],["354","355"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\PostCard.js",[],["356","357"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100100.js",["358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100160.js",["404","405","406","407"],"import React, { Fragment, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport './css/S010100050.css';\r\nimport S010100010 from './S010100010';\r\n\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { DatePicker } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport moment from 'moment';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 200,\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n    \r\n}));\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\nfunction S010100160(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const [startDate, setStartDate] = useState(new Date(moment().date('01')));\r\n    const [endDate, setEndDate] = useState(new Date());\r\n\r\n    // 문의구분\r\n    const [contractTp, setContractTp] = useState('');\r\n    // 문의자명\r\n    const [contractSt, setContractSt] = useState('');\r\n    const [contractTps, setContractTps] = useState([{}]);\r\n    const [contractSts,setContractSts] = useState([{}]);\r\n    \r\n    const [contractList,setContractList] = useState([].slice(0,10));\r\n    const [conOpen, setConOpen] = React.useState(false);\r\n    // 페이징\r\n    const [pageNumber,setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(contractList.length/usersPerPage);\r\n     \r\n  \r\n     const changePage = ({selected}) => {\r\n         setPageNumber(selected);\r\n     }\r\n \r\n     const handleDrawerOpen = () => {\r\n         setOpen(true);\r\n     };\r\n \r\n     const handleDrawerClose = () => {\r\n         setOpen(false);\r\n     };\r\n\r\n     const allOfcontractList = () => {\r\n\r\n        const body = {\r\n            startDate,\r\n            endDate,\r\n            contractTp,\r\n            contractSt\r\n        }\r\n\r\n  \r\n\r\n        axios.post('/api/s010100160/search', body).then(response => {\r\n            if (response.data.success) {\r\n                setContractList(response.data.rows);\r\n            } else {\r\n                alert(response.data.message);\r\n                alert('데이터를 불러오는데 실패 하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        axios.post('/api/s010100160/contractTp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    \r\n                    let arr = [{ key: '', value: '전체' }]\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n                        }));\r\n\r\n                    setContractTps(arr);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\" 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        axios.post('/api/s010100160/contractSt')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n                        }));\r\n                        //arr.push({key: 'Y', value: '종료' });\r\n                        \r\n                        setContractSts(arr);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\" 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        allOfcontractList();\r\n    }, [])\r\n\r\n  \r\n    const onContractTpHandler = (event) => {\r\n        setContractTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onContractStHandler = (event) => {\r\n        setContractSt(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailClickOpen = (event) =>{\r\n        num = event.target.innerHTML;\r\n        rNum = parseInt(num);\r\n        //setNameForDetailCModal(rNum);\r\n        setConOpen(true);\r\n     }\r\n\r\n     const onConContractHandler  = useCallback(() => {\r\n        setConOpen(false);\r\n    });\r\n\r\n    const onHandleFormSubmit = () => {\r\n        allOfcontractList();\r\n    }\r\n  \r\n    const s010100050R = contractList.slice(pagesVisited,pagesVisited + usersPerPage).map((contractList, index) => {\r\n        return (\r\n            <TableRow key={index}>\r\n                <TableCell onClick={onDetailClickOpen} className='underLineForDetail' id={contractList.CONTRACT_ID}>{contractList.CONTRACT_ID}</TableCell>\r\n                <TableCell>{contractList.MEMBER_NM}</TableCell>\r\n                <TableCell>{contractList.CONTRACT_DATE}</TableCell>\r\n                <TableCell>{contractList.CONTRACT_TP}</TableCell>\r\n                <TableCell>{contractList.CONTRACT_ROOM}</TableCell>\r\n                <TableCell>{contractList.CONTRACT_TERM}개월 ({contractList.START_DATE} ~ {contractList.END_DATE})</TableCell>\r\n                <TableCell>{contractList.CONTRACT_ST}</TableCell>\r\n                <TableCell>{contractList.PAY_DATE}일</TableCell>\r\n                <TableCell>{contractList.MONTHLY_FEE}</TableCell>\r\n                <TableCell>{contractList.CONTRACT_LOCKER}</TableCell>\r\n            </TableRow>\r\n        )\r\n\r\n    });\r\n\r\n    const excelHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(contractList);\r\n        //// console.log(tb_s10_ask010);\r\n\r\n        ['회원명', '사업자번호','회원구분','No', '계약기간', '계약기간', '계약상태', '계약구분', '사물함', '호실' ,'계약기간','매월입금일','월회비','계약상태','시작날짜']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][1] = { hidden: true };\r\n        ws['!cols'][2] = { hidden: true };\r\n        ws['!cols'][6] = { hidden: true };\r\n        ws['!cols'][11] = { hidden: true };\r\n        ws['!cols'][14] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"계약현황.xlsx\");\r\n\r\n    }\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n    \r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n    \r\n        return confirmAction;\r\n      };\r\n    \r\n      const approvalConfirm = () => {\r\n    \r\n        axios.post('/api/s010100150/userLogout')\r\n        .then(response => {\r\n          if (response.data.logoutResult == true) {\r\n            alert('로그아웃 하였습니다.');\r\n            sessionStorage.removeItem('member');\r\n            sessionStorage.clear();\r\n            props.history.push('/');\r\n            // console.log(sessionStorage.getItem('member'));\r\n          }else if(response.data.loginResult == false){\r\n            alert(response.data.message);\r\n            alert('아이디 또는 비밀번호를 확인하세요.');\r\n          }\r\n        })\r\n    \r\n      };\r\n    \r\n      const cancelConfirm = () => alert('취소하였습니다.');\r\n    \r\n      const onLogoutHandler = useConfirm(\r\n          \"로그아웃 하시겠습니까?\",\r\n          approvalConfirm,\r\n          cancelConfirm\r\n      );\r\n      \r\n    return (\r\n        <Fragment>\r\n\r\n        <div className={classes.root}>\r\n            {/* 백그라운드 */}\r\n            <CssBaseline />\r\n            {/* 상단 파란색 툴바 */}\r\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        SwonTech 고객관리시스템\r\n                    </Typography>\r\n                    \r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {/* 왼쪽메뉴바 */}\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                }}\r\n                open={open}\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    <div>\r\n                        <div hidden ={sessionStorage.getItem('member') == null}>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <PeopleIcon />\r\n                            </ListItemIcon>\r\n                            <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                                <ShoppingCartIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <DashboardIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                                <BarChartIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <DashboardIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                <LayersIcon />\r\n                                </ListItemIcon>\r\n                                <span onClick ={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n                            </ListItem>\r\n                            </div>\r\n                        <div hidden ={sessionStorage.getItem('member') != null}>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                <LayersIcon />\r\n                                </ListItemIcon>\r\n                                <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                            </ListItem>\r\n                            </div>\r\n                        </div>\r\n                </List>\r\n            </Drawer>\r\n\r\n            {/* 메인화면  */}\r\n            <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper style={{ padding: 16 }}>\r\n\r\n                                    <div className=\"gridInline\">\r\n\r\n                                        계약일자\r\n                                        &nbsp;\r\n                                    \r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(date)}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            defaultValue={moment(moment().date('01'),'YYYY-MM-DD')}\r\n                                        /> &nbsp;~&nbsp;\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(date)}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            minDate={startDate}\r\n                                            defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                        />\r\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                        계약구분\r\n                                        &nbsp;\r\n\r\n                                                            <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onContractTpHandler} value={contractTp}>\r\n                                                                {contractTps.map((item,index) => (\r\n                                                                    <option key={index} value={item.key}>{item.value}</option>\r\n                                                                ))}\r\n\r\n                                                            </Form.Control>\r\n                                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                                        계약상태\r\n                                        &nbsp;\r\n\r\n                                                            <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onContractStHandler} value={contractSt}>\r\n                                                                {contractSts.map((item,index) => (\r\n                                                                    <option key={index} value={item.key}>{item.value}</option>\r\n                                                                ))}\r\n\r\n                                                            </Form.Control>\r\n                                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                        <Button variant=\"contained\" style={{ width: 80, display: 'inline' }} color=\"primary\" onClick={onHandleFormSubmit}>\r\n                                            조회\r\n                                        </Button>\r\n                                    </div>\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                            <table className=\"btn\">\r\n                                <thead>\r\n                                    <tr>\r\n                               \r\n                                        <td  id=\"alignRight\"><Button variant=\"contained\" style={{ width: 150 }} color=\"primary\" onClick={excelHandler}>엑셀다운로드</Button></td>\r\n                                    </tr>                                \r\n                                </thead>\r\n                            </table>\r\n\r\n\r\n                            {/*계약 현황 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                <React.Fragment >\r\n                        <Title>계약 현황</Title>\r\n                        <Table size=\"small\">\r\n\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>계약ID</TableCell>\r\n                                    <TableCell>회원명</TableCell>\r\n                                    <TableCell>계약일자</TableCell>\r\n                                    <TableCell>계약구분</TableCell>\r\n                                    <TableCell>호    실</TableCell>\r\n                                    <TableCell>계약기간</TableCell>\r\n                                    <TableCell>계약상태</TableCell>\r\n                                    <TableCell>매월입금일</TableCell>\r\n                                    <TableCell>월회비</TableCell>\r\n                                    <TableCell>사물함</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                               {s010100050R}\r\n                            </TableBody>\r\n                        </Table>\r\n                        <div id=\"reactPage\">\r\n                             <ReactPaginate\r\n                                previousLabel = {\"Previous\"}\r\n                                nextLabel = {\"Next\"}\r\n                                pageCount = {pageCount}\r\n                                onPageChange = {changePage}\r\n                                containerClassName={\"paginationBtns\"}\r\n                                previousLinkClassName={\"previousBtn\"}\r\n                                nextLinkClassName={\"nextBtn\"}\r\n                                disabledClassName={\"paginationDisabled\"}\r\n                                activeClassName={\"paginationActive\"}  /> \r\n                        </div>\r\n                    </React.Fragment>\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Container>\r\n            </main>\r\n        </div>\r\n\r\n        <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={conOpen}\r\n                onClose={onConContractHandler}>\r\n                <S010100010 dataNum={rNum} cDataForm={'I'} onConContractHandler={onConContractHandler}/>\r\n            </Dialog>\r\n\r\n    </Fragment>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default S010100160;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100151.js",["408","409","410","411"],"import React, {useState} from 'react';\r\nimport './css/S010100130.css';\r\nimport axios from 'axios';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\nimport \"antd/dist/antd.css\";\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 200,\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}));\r\n\r\n\r\n\r\nfunction S010100151(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [empRegNo, setEmpRegNo] = useState(\"\")\r\n    const [fstResidentRegiNum, setFstResidentRegiNum] = useState('');\r\n    const [sndResidentRegiNum, setSndResidentRegiNum] = useState('');\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const onEmailHandler = (event) => {\r\n        setEmail(event.currentTarget.value)\r\n    }\r\n\r\n    const onFstResidentRegiNumHandler = (event) => {\r\n        setFstResidentRegiNum(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onSndResidentRegiNumHandler = (event) => {\r\n        setSndResidentRegiNum(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onSubmitHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n        if(email.length === 0) {\r\n            alert('이메일을 입력하세요.');\r\n        }else if(fstResidentRegiNum.length === 0 || sndResidentRegiNum.length === 0){\r\n            alert('주민번호를 입력하세요.');\r\n        }else{\r\n            let body = {\r\n                email: email,\r\n                fstResidentRegiNum: fstResidentRegiNum,\r\n                sndResidentRegiNum: sndResidentRegiNum\r\n            }\r\n           // console.log(body);\r\n    \r\n            axios.post('/api/s010100151/findPwd', body)\r\n                .then(response => {\r\n                    if (response.data.success == true) {\r\n                        alert('비밀번호가 초기화 되었습니다.');\r\n                        props.history.push('/');\r\n                    } else if (response.data.success == false) {\r\n                        alert(response.data.message);\r\n                        alert('이메일 또는 주민번호를 확인하세요..');\r\n                    }\r\n                })\r\n        }\r\n     \r\n        \r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {/* 백그라운드 */}\r\n            <CssBaseline />\r\n            {/* 상단파란툴바 */}\r\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                    SwonTech 고객관리시스템\r\n                    </Typography>\r\n                    \r\n                </Toolbar>\r\n            </AppBar>\r\n            {/* 왼쪽 메뉴바 */}\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                }}\r\n                open={open}\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    <div>\r\n                        <div>\r\n                        <ListItem button>\r\n                            <ListItemIcon>\r\n                            <LayersIcon />\r\n                            </ListItemIcon>\r\n                            <span hidden ={sessionStorage.getItem('member') != null}>\r\n                            <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                            </span>\r\n                        </ListItem>\r\n                        </div>\r\n                        </div>\r\n                    </List>\r\n            </Drawer>\r\n\r\n            <main className={classes.content}>\r\n                <div className={classes.appBarSpacer} />\r\n                <Container maxWidth=\"lg\" className={classes.container}>\r\n                    <Grid container spacing={3}>\r\n                        <Container component=\"main\" maxWidth=\"xs\">\r\n                            <CssBaseline />\r\n                            <div className={classes.paper}>\r\n\r\n                                <Typography component=\"h1\" variant=\"h5\">\r\n                                    비밀번호 초기화\r\n                                </Typography>\r\n\r\n                                <Form onSubmit={onSubmitHandler} >\r\n                                   \r\n                                        <Form.Group>\r\n                                            <Form.Label>Email address</Form.Label>\r\n                                            <Form.Control type=\"email\" placeholder=\"이메일을 입력하세요\" \r\n                                                value={email}\r\n                                                onChange={onEmailHandler} \r\n                                                id=\"email\"\r\n                                                name=\"email\"\r\n                                                />\r\n                                            <Form.Text className=\"text-muted\">\r\n                                                We'll never share your email with anyone else.\r\n                                        </Form.Text>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group>\r\n                                            <Form.Label>주민번호</Form.Label>\r\n                                            <Form.Control type=\"password\" placeholder=\"주민번호를 앞자리를 입력하세요\" \r\n                                                value={fstResidentRegiNum}\r\n                                                onChange={onFstResidentRegiNumHandler} \r\n                                                name=\"empRegNo\"\r\n                                                \r\n                                                id=\"empRegNo\"\r\n                                               />\r\n                                        </Form.Group>\r\n                                        <Form.Group >\r\n                                            <Form.Control type=\"password\" placeholder=\"주민번호를 뒷자리를 입력하세요\" value={sndResidentRegiNum}\r\n                                                onChange={onSndResidentRegiNumHandler}\r\n                                                name=\"empRegNo\"\r\n                                                id=\"empRegNo\"\r\n                                               />\r\n                                        </Form.Group>\r\n                                   \r\n                                    <Button type=\"submit\"\r\n                                            fullWidth\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.submit}\r\n                                        > 초기화 </Button>\r\n                                </Form>\r\n                            </div>\r\n\r\n                        </Container>\r\n\r\n                    </Grid>\r\n\r\n                </Container>\r\n            </main>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100151;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\taste.js",["412"],"import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction taste () {\r\nreturn(\r\n  <div>\r\n    <div hidden ={sessionStorage.getItem('member') == null}>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n      <PeopleIcon />\r\n      </ListItemIcon>\r\n      <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <ShoppingCartIcon />\r\n      </ListItemIcon>\r\n      <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n      <DashboardIcon />\r\n      </ListItemIcon>\r\n      <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <BarChartIcon />\r\n      </ListItemIcon>\r\n      <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n      <DashboardIcon />\r\n      </ListItemIcon>\r\n      <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n        <ListItemIcon>\r\n          <LayersIcon />\r\n        </ListItemIcon>\r\n        <Link to =\"/\"><ListItemText primary=\"로그아웃\" /></Link>\r\n      </ListItem>\r\n    </div>\r\n   <div hidden ={sessionStorage.getItem('member') != null}>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <LayersIcon />\r\n        </ListItemIcon>\r\n        <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n      </ListItem>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default taste;",["413","414"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Title.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\ScreenLayout.js",["415","416","417","418","419","420"],"import React, { Fragment, useEffect, useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport S010100150 from './S010100150';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\n\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport \"antd/dist/antd.css\";\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 200,\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}));\r\n\r\n\r\nfunction ScreenLayout(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = useState(true);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const logoutConfirm = () => {\r\n\r\n        axios.post('/api/s010100150/userLogout')\r\n        .then(response => {\r\n            if (response.data.logoutResult == true) {\r\n\r\n            alert('로그아웃 하였습니다.');\r\n            \r\n            sessionStorage.removeItem('member');\r\n            sessionStorage.clear();\r\n            \r\n            props.history.push('./');\r\n            console.log(props.history);\r\n          \r\n            }else if(response.data.loginResult == false){\r\n           \r\n                alert(response.data.message);\r\n           \r\n                alert('아이디 또는 비밀번호를 확인하세요.');\r\n            }\r\n        })\r\n    \r\n        };\r\n    \r\n        const logounCancelConfirm = () => alert('취소하였습니다.');\r\n    \r\n        const onLogoutHandler = useConfirm(\r\n            \"로그아웃 하시겠습니까?\",\r\n            logoutConfirm,\r\n            logounCancelConfirm\r\n        );\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단 파란색 툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        SwonTech 고객관리시스템\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {/* 왼쪽메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider/>\r\n                    <List>\r\n                    <div>\r\n                        <div hidden ={sessionStorage.getItem('member') == null}>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                        <PeopleIcon />\r\n                        </ListItemIcon>\r\n                        <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                            <ShoppingCartIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                        <DashboardIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                            <BarChartIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                        <DashboardIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                            <ListItemIcon>\r\n                            <LayersIcon />\r\n                            </ListItemIcon>\r\n                            <span onClick ={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n                        </ListItem>\r\n                        </div>\r\n                    <div hidden ={sessionStorage.getItem('member') != null}>\r\n                        <ListItem button>\r\n                            <ListItemIcon>\r\n                            <LayersIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                        </ListItem>\r\n                        </div>\r\n                    </div>\r\n\r\n             </List>\r\n        </Drawer>\r\n             \r\n\r\n                {/* 메인화면  */}\r\n                <main className={classes.content}>\r\n                    <form>\r\n                        <div className={classes.appBarSpacer} />\r\n                        \r\n\r\n                    </form>\r\n                </main>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default  ScreenLayout;",{"ruleId":"421","replacedBy":"422"},{"ruleId":"423","replacedBy":"424"},{"ruleId":"425","severity":1,"message":"426","line":1,"column":16,"nodeType":"427","messageId":"428","endLine":1,"endColumn":25},{"ruleId":"425","severity":1,"message":"429","line":6,"column":10,"nodeType":"427","messageId":"428","endLine":6,"endColumn":14},{"ruleId":"425","severity":1,"message":"430","line":2,"column":8,"nodeType":"427","messageId":"428","endLine":2,"endColumn":12},{"ruleId":"425","severity":1,"message":"431","line":17,"column":5,"nodeType":"427","messageId":"428","endLine":17,"endColumn":15},{"ruleId":"421","replacedBy":"432"},{"ruleId":"423","replacedBy":"433"},{"ruleId":"425","severity":1,"message":"434","line":6,"column":18,"nodeType":"427","messageId":"428","endLine":6,"endColumn":27},{"ruleId":"435","severity":1,"message":"436","line":11,"column":1,"nodeType":"437","endLine":33,"endColumn":2},{"ruleId":"425","severity":1,"message":"434","line":1,"column":26,"nodeType":"427","messageId":"428","endLine":1,"endColumn":35},{"ruleId":"425","severity":1,"message":"438","line":3,"column":8,"nodeType":"427","messageId":"428","endLine":3,"endColumn":13},{"ruleId":"425","severity":1,"message":"439","line":6,"column":8,"nodeType":"427","messageId":"428","endLine":6,"endColumn":18},{"ruleId":"425","severity":1,"message":"440","line":11,"column":5,"nodeType":"427","messageId":"428","endLine":11,"endColumn":14},{"ruleId":"425","severity":1,"message":"441","line":12,"column":5,"nodeType":"427","messageId":"428","endLine":12,"endColumn":12},{"ruleId":"425","severity":1,"message":"442","line":13,"column":5,"nodeType":"427","messageId":"428","endLine":13,"endColumn":10},{"ruleId":"425","severity":1,"message":"431","line":15,"column":5,"nodeType":"427","messageId":"428","endLine":15,"endColumn":15},{"ruleId":"425","severity":1,"message":"443","line":25,"column":20,"nodeType":"427","messageId":"428","endLine":25,"endColumn":31},{"ruleId":"425","severity":1,"message":"444","line":26,"column":16,"nodeType":"427","messageId":"428","endLine":26,"endColumn":23},{"ruleId":"425","severity":1,"message":"445","line":27,"column":21,"nodeType":"427","messageId":"428","endLine":27,"endColumn":33},{"ruleId":"425","severity":1,"message":"446","line":28,"column":20,"nodeType":"427","messageId":"428","endLine":28,"endColumn":31},{"ruleId":"425","severity":1,"message":"447","line":29,"column":21,"nodeType":"427","messageId":"428","endLine":29,"endColumn":33},{"ruleId":"425","severity":1,"message":"448","line":30,"column":18,"nodeType":"427","messageId":"428","endLine":30,"endColumn":27},{"ruleId":"425","severity":1,"message":"426","line":1,"column":16,"nodeType":"427","messageId":"428","endLine":1,"endColumn":25},{"ruleId":"425","severity":1,"message":"426","line":1,"column":16,"nodeType":"427","messageId":"428","endLine":1,"endColumn":25},{"ruleId":"421","replacedBy":"449"},{"ruleId":"423","replacedBy":"450"},{"ruleId":"425","severity":1,"message":"451","line":4,"column":3,"nodeType":"427","messageId":"428","endLine":4,"endColumn":14},{"ruleId":"425","severity":1,"message":"452","line":5,"column":3,"nodeType":"427","messageId":"428","endLine":5,"endColumn":13},{"ruleId":"425","severity":1,"message":"453","line":6,"column":3,"nodeType":"427","messageId":"428","endLine":6,"endColumn":12},{"ruleId":"425","severity":1,"message":"454","line":7,"column":3,"nodeType":"427","messageId":"428","endLine":7,"endColumn":11},{"ruleId":"425","severity":1,"message":"455","line":3,"column":10,"nodeType":"427","messageId":"428","endLine":3,"endColumn":14},{"ruleId":"425","severity":1,"message":"456","line":14,"column":8,"nodeType":"427","messageId":"428","endLine":14,"endColumn":25},{"ruleId":"425","severity":1,"message":"457","line":25,"column":10,"nodeType":"427","messageId":"428","endLine":25,"endColumn":14},{"ruleId":"425","severity":1,"message":"458","line":79,"column":12,"nodeType":"427","messageId":"428","endLine":79,"endColumn":25},{"ruleId":"425","severity":1,"message":"459","line":80,"column":12,"nodeType":"427","messageId":"428","endLine":80,"endColumn":23},{"ruleId":"460","severity":1,"message":"461","line":203,"column":8,"nodeType":"462","endLine":203,"endColumn":10,"suggestions":"463"},{"ruleId":"460","severity":1,"message":"464","line":330,"column":8,"nodeType":"462","endLine":330,"endColumn":10,"suggestions":"465"},{"ruleId":"425","severity":1,"message":"466","line":384,"column":9,"nodeType":"427","messageId":"428","endLine":384,"endColumn":17},{"ruleId":"467","severity":1,"message":"468","line":412,"column":21,"nodeType":"469","messageId":"470","endLine":431,"endColumn":22},{"ruleId":"471","severity":1,"message":"472","line":463,"column":58,"nodeType":"473","messageId":"474","endLine":463,"endColumn":60},{"ruleId":"425","severity":1,"message":"475","line":500,"column":11,"nodeType":"427","messageId":"428","endLine":500,"endColumn":27},{"ruleId":"425","severity":1,"message":"476","line":528,"column":11,"nodeType":"427","messageId":"428","endLine":528,"endColumn":27},{"ruleId":"471","severity":1,"message":"477","line":531,"column":23,"nodeType":"473","messageId":"474","endLine":531,"endColumn":25},{"ruleId":"471","severity":1,"message":"477","line":531,"column":51,"nodeType":"473","messageId":"474","endLine":531,"endColumn":53},{"ruleId":"471","severity":1,"message":"477","line":531,"column":79,"nodeType":"473","messageId":"474","endLine":531,"endColumn":81},{"ruleId":"471","severity":1,"message":"477","line":541,"column":23,"nodeType":"473","messageId":"474","endLine":541,"endColumn":25},{"ruleId":"471","severity":1,"message":"477","line":541,"column":51,"nodeType":"473","messageId":"474","endLine":541,"endColumn":53},{"ruleId":"471","severity":1,"message":"477","line":541,"column":79,"nodeType":"473","messageId":"474","endLine":541,"endColumn":81},{"ruleId":"471","severity":1,"message":"477","line":555,"column":23,"nodeType":"473","messageId":"474","endLine":555,"endColumn":25},{"ruleId":"471","severity":1,"message":"477","line":555,"column":51,"nodeType":"473","messageId":"474","endLine":555,"endColumn":53},{"ruleId":"471","severity":1,"message":"477","line":555,"column":79,"nodeType":"473","messageId":"474","endLine":555,"endColumn":81},{"ruleId":"471","severity":1,"message":"472","line":687,"column":44,"nodeType":"473","messageId":"474","endLine":687,"endColumn":46},{"ruleId":"471","severity":1,"message":"472","line":692,"column":46,"nodeType":"473","messageId":"474","endLine":692,"endColumn":48},{"ruleId":"471","severity":1,"message":"472","line":692,"column":90,"nodeType":"473","messageId":"474","endLine":692,"endColumn":92},{"ruleId":"471","severity":1,"message":"472","line":692,"column":132,"nodeType":"473","messageId":"474","endLine":692,"endColumn":134},{"ruleId":"471","severity":1,"message":"472","line":696,"column":46,"nodeType":"473","messageId":"474","endLine":696,"endColumn":48},{"ruleId":"471","severity":1,"message":"472","line":696,"column":94,"nodeType":"473","messageId":"474","endLine":696,"endColumn":96},{"ruleId":"471","severity":1,"message":"472","line":701,"column":46,"nodeType":"473","messageId":"474","endLine":701,"endColumn":48},{"ruleId":"471","severity":1,"message":"472","line":706,"column":52,"nodeType":"473","messageId":"474","endLine":706,"endColumn":54},{"ruleId":"471","severity":1,"message":"472","line":711,"column":50,"nodeType":"473","messageId":"474","endLine":711,"endColumn":52},{"ruleId":"471","severity":1,"message":"472","line":711,"column":72,"nodeType":"473","messageId":"474","endLine":711,"endColumn":74},{"ruleId":"471","severity":1,"message":"472","line":716,"column":54,"nodeType":"473","messageId":"474","endLine":716,"endColumn":56},{"ruleId":"471","severity":1,"message":"472","line":721,"column":44,"nodeType":"473","messageId":"474","endLine":721,"endColumn":46},{"ruleId":"471","severity":1,"message":"472","line":726,"column":49,"nodeType":"473","messageId":"474","endLine":726,"endColumn":51},{"ruleId":"471","severity":1,"message":"472","line":731,"column":27,"nodeType":"473","messageId":"474","endLine":731,"endColumn":29},{"ruleId":"471","severity":1,"message":"472","line":735,"column":27,"nodeType":"473","messageId":"474","endLine":735,"endColumn":29},{"ruleId":"471","severity":1,"message":"472","line":739,"column":26,"nodeType":"473","messageId":"474","endLine":739,"endColumn":28},{"ruleId":"471","severity":1,"message":"472","line":755,"column":44,"nodeType":"473","messageId":"474","endLine":755,"endColumn":46},{"ruleId":"471","severity":1,"message":"472","line":760,"column":46,"nodeType":"473","messageId":"474","endLine":760,"endColumn":48},{"ruleId":"471","severity":1,"message":"472","line":760,"column":90,"nodeType":"473","messageId":"474","endLine":760,"endColumn":92},{"ruleId":"471","severity":1,"message":"472","line":760,"column":132,"nodeType":"473","messageId":"474","endLine":760,"endColumn":134},{"ruleId":"471","severity":1,"message":"472","line":765,"column":27,"nodeType":"473","messageId":"474","endLine":765,"endColumn":29},{"ruleId":"471","severity":1,"message":"472","line":777,"column":47,"nodeType":"473","messageId":"474","endLine":777,"endColumn":49},{"ruleId":"471","severity":1,"message":"472","line":782,"column":52,"nodeType":"473","messageId":"474","endLine":782,"endColumn":54},{"ruleId":"471","severity":1,"message":"472","line":787,"column":50,"nodeType":"473","messageId":"474","endLine":787,"endColumn":52},{"ruleId":"471","severity":1,"message":"472","line":787,"column":72,"nodeType":"473","messageId":"474","endLine":787,"endColumn":74},{"ruleId":"471","severity":1,"message":"472","line":792,"column":54,"nodeType":"473","messageId":"474","endLine":792,"endColumn":56},{"ruleId":"471","severity":1,"message":"472","line":797,"column":44,"nodeType":"473","messageId":"474","endLine":797,"endColumn":46},{"ruleId":"471","severity":1,"message":"472","line":802,"column":50,"nodeType":"473","messageId":"474","endLine":802,"endColumn":52},{"ruleId":"478","severity":1,"message":"479","line":918,"column":45,"nodeType":"473","messageId":"480","endLine":918,"endColumn":74},{"ruleId":"471","severity":1,"message":"472","line":938,"column":44,"nodeType":"473","messageId":"474","endLine":938,"endColumn":46},{"ruleId":"471","severity":1,"message":"472","line":938,"column":60,"nodeType":"473","messageId":"474","endLine":938,"endColumn":62},{"ruleId":"471","severity":1,"message":"472","line":938,"column":108,"nodeType":"473","messageId":"474","endLine":938,"endColumn":110},{"ruleId":"471","severity":1,"message":"472","line":938,"column":127,"nodeType":"473","messageId":"474","endLine":938,"endColumn":129},{"ruleId":"471","severity":1,"message":"472","line":955,"column":34,"nodeType":"473","messageId":"474","endLine":955,"endColumn":36},{"ruleId":"471","severity":1,"message":"472","line":971,"column":41,"nodeType":"473","messageId":"474","endLine":971,"endColumn":43},{"ruleId":"471","severity":1,"message":"472","line":989,"column":26,"nodeType":"473","messageId":"474","endLine":989,"endColumn":28},{"ruleId":"471","severity":1,"message":"472","line":991,"column":33,"nodeType":"473","messageId":"474","endLine":991,"endColumn":35},{"ruleId":"471","severity":1,"message":"472","line":1010,"column":48,"nodeType":"473","messageId":"474","endLine":1010,"endColumn":50},{"ruleId":"471","severity":1,"message":"472","line":1015,"column":50,"nodeType":"473","messageId":"474","endLine":1015,"endColumn":52},{"ruleId":"471","severity":1,"message":"472","line":1015,"column":94,"nodeType":"473","messageId":"474","endLine":1015,"endColumn":96},{"ruleId":"471","severity":1,"message":"472","line":1015,"column":136,"nodeType":"473","messageId":"474","endLine":1015,"endColumn":138},{"ruleId":"471","severity":1,"message":"472","line":1020,"column":50,"nodeType":"473","messageId":"474","endLine":1020,"endColumn":52},{"ruleId":"471","severity":1,"message":"472","line":1025,"column":56,"nodeType":"473","messageId":"474","endLine":1025,"endColumn":58},{"ruleId":"471","severity":1,"message":"472","line":1030,"column":54,"nodeType":"473","messageId":"474","endLine":1030,"endColumn":56},{"ruleId":"471","severity":1,"message":"472","line":1030,"column":76,"nodeType":"473","messageId":"474","endLine":1030,"endColumn":78},{"ruleId":"471","severity":1,"message":"472","line":1035,"column":58,"nodeType":"473","messageId":"474","endLine":1035,"endColumn":60},{"ruleId":"471","severity":1,"message":"472","line":1040,"column":48,"nodeType":"473","messageId":"474","endLine":1040,"endColumn":50},{"ruleId":"471","severity":1,"message":"472","line":1045,"column":53,"nodeType":"473","messageId":"474","endLine":1045,"endColumn":55},{"ruleId":"471","severity":1,"message":"477","line":1219,"column":32,"nodeType":"473","messageId":"474","endLine":1219,"endColumn":34},{"ruleId":"471","severity":1,"message":"477","line":1219,"column":88,"nodeType":"473","messageId":"474","endLine":1219,"endColumn":90},{"ruleId":"471","severity":1,"message":"477","line":1219,"column":144,"nodeType":"473","messageId":"474","endLine":1219,"endColumn":146},{"ruleId":"471","severity":1,"message":"477","line":1254,"column":32,"nodeType":"473","messageId":"474","endLine":1254,"endColumn":34},{"ruleId":"471","severity":1,"message":"477","line":1254,"column":61,"nodeType":"473","messageId":"474","endLine":1254,"endColumn":63},{"ruleId":"471","severity":1,"message":"477","line":1254,"column":89,"nodeType":"473","messageId":"474","endLine":1254,"endColumn":91},{"ruleId":"425","severity":1,"message":"481","line":1332,"column":22,"nodeType":"427","messageId":"428","endLine":1332,"endColumn":33},{"ruleId":"425","severity":1,"message":"482","line":1333,"column":22,"nodeType":"427","messageId":"428","endLine":1333,"endColumn":33},{"ruleId":"483","severity":1,"message":"484","line":1464,"column":143,"nodeType":"485","endLine":1464,"endColumn":160},{"ruleId":"471","severity":1,"message":"472","line":1473,"column":156,"nodeType":"473","messageId":"474","endLine":1473,"endColumn":158},{"ruleId":"471","severity":1,"message":"472","line":1899,"column":161,"nodeType":"473","messageId":"474","endLine":1899,"endColumn":163},{"ruleId":"471","severity":1,"message":"472","line":1907,"column":160,"nodeType":"473","messageId":"474","endLine":1907,"endColumn":162},{"ruleId":"483","severity":1,"message":"484","line":1935,"column":115,"nodeType":"485","endLine":1935,"endColumn":130},{"ruleId":"425","severity":1,"message":"486","line":138,"column":5,"nodeType":"427","messageId":"428","endLine":138,"endColumn":10},{"ruleId":"425","severity":1,"message":"487","line":155,"column":12,"nodeType":"427","messageId":"428","endLine":155,"endColumn":23},{"ruleId":"425","severity":1,"message":"488","line":162,"column":12,"nodeType":"427","messageId":"428","endLine":162,"endColumn":17},{"ruleId":"425","severity":1,"message":"489","line":163,"column":12,"nodeType":"427","messageId":"428","endLine":163,"endColumn":17},{"ruleId":"460","severity":1,"message":"490","line":205,"column":8,"nodeType":"462","endLine":205,"endColumn":10,"suggestions":"491"},{"ruleId":"425","severity":1,"message":"492","line":246,"column":11,"nodeType":"427","messageId":"428","endLine":246,"endColumn":29},{"ruleId":"460","severity":1,"message":"493","line":250,"column":32,"nodeType":"427","endLine":250,"endColumn":43},{"ruleId":"425","severity":1,"message":"494","line":299,"column":51,"nodeType":"427","messageId":"428","endLine":299,"endColumn":56},{"ruleId":"471","severity":1,"message":"472","line":371,"column":25,"nodeType":"473","messageId":"474","endLine":371,"endColumn":27},{"ruleId":"471","severity":1,"message":"472","line":421,"column":44,"nodeType":"473","messageId":"474","endLine":421,"endColumn":46},{"ruleId":"471","severity":1,"message":"472","line":426,"column":48,"nodeType":"473","messageId":"474","endLine":426,"endColumn":50},{"ruleId":"460","severity":1,"message":"495","line":254,"column":8,"nodeType":"462","endLine":254,"endColumn":10,"suggestions":"496"},{"ruleId":"460","severity":1,"message":"493","line":264,"column":32,"nodeType":"427","endLine":264,"endColumn":43},{"ruleId":"425","severity":1,"message":"497","line":289,"column":11,"nodeType":"427","messageId":"428","endLine":289,"endColumn":32},{"ruleId":"460","severity":1,"message":"493","line":299,"column":38,"nodeType":"427","endLine":299,"endColumn":49},{"ruleId":"471","severity":1,"message":"472","line":371,"column":42,"nodeType":"473","messageId":"474","endLine":371,"endColumn":44},{"ruleId":"471","severity":1,"message":"472","line":376,"column":46,"nodeType":"473","messageId":"474","endLine":376,"endColumn":48},{"ruleId":"483","severity":1,"message":"484","line":654,"column":21,"nodeType":"485","endLine":654,"endColumn":48},{"ruleId":"460","severity":1,"message":"498","line":183,"column":8,"nodeType":"462","endLine":183,"endColumn":10,"suggestions":"499"},{"ruleId":"460","severity":1,"message":"493","line":202,"column":35,"nodeType":"427","endLine":202,"endColumn":46},{"ruleId":"471","severity":1,"message":"472","line":314,"column":42,"nodeType":"473","messageId":"474","endLine":314,"endColumn":44},{"ruleId":"471","severity":1,"message":"472","line":320,"column":46,"nodeType":"473","messageId":"474","endLine":320,"endColumn":48},{"ruleId":"425","severity":1,"message":"500","line":168,"column":12,"nodeType":"427","messageId":"428","endLine":168,"endColumn":26},{"ruleId":"460","severity":1,"message":"501","line":211,"column":8,"nodeType":"462","endLine":211,"endColumn":10,"suggestions":"502"},{"ruleId":"460","severity":1,"message":"493","line":242,"column":32,"nodeType":"427","endLine":242,"endColumn":43},{"ruleId":"460","severity":1,"message":"493","line":256,"column":38,"nodeType":"427","endLine":256,"endColumn":49},{"ruleId":"425","severity":1,"message":"494","line":329,"column":13,"nodeType":"427","messageId":"428","endLine":329,"endColumn":18},{"ruleId":"471","severity":1,"message":"472","line":373,"column":40,"nodeType":"473","messageId":"474","endLine":373,"endColumn":42},{"ruleId":"471","severity":1,"message":"472","line":379,"column":44,"nodeType":"473","messageId":"474","endLine":379,"endColumn":46},{"ruleId":"425","severity":1,"message":"455","line":3,"column":10,"nodeType":"427","messageId":"428","endLine":3,"endColumn":14},{"ruleId":"425","severity":1,"message":"503","line":133,"column":12,"nodeType":"427","messageId":"428","endLine":133,"endColumn":31},{"ruleId":"425","severity":1,"message":"504","line":164,"column":12,"nodeType":"427","messageId":"428","endLine":164,"endColumn":20},{"ruleId":"425","severity":1,"message":"505","line":175,"column":25,"nodeType":"427","messageId":"428","endLine":175,"endColumn":39},{"ruleId":"425","severity":1,"message":"506","line":176,"column":26,"nodeType":"427","messageId":"428","endLine":176,"endColumn":41},{"ruleId":"425","severity":1,"message":"507","line":177,"column":11,"nodeType":"427","messageId":"428","endLine":177,"endColumn":26},{"ruleId":"425","severity":1,"message":"508","line":235,"column":27,"nodeType":"427","messageId":"428","endLine":235,"endColumn":39},{"ruleId":"460","severity":1,"message":"509","line":296,"column":8,"nodeType":"462","endLine":296,"endColumn":10,"suggestions":"510"},{"ruleId":"471","severity":1,"message":"477","line":306,"column":23,"nodeType":"473","messageId":"474","endLine":306,"endColumn":25},{"ruleId":"471","severity":1,"message":"477","line":306,"column":51,"nodeType":"473","messageId":"474","endLine":306,"endColumn":53},{"ruleId":"471","severity":1,"message":"477","line":306,"column":79,"nodeType":"473","messageId":"474","endLine":306,"endColumn":81},{"ruleId":"471","severity":1,"message":"477","line":319,"column":23,"nodeType":"473","messageId":"474","endLine":319,"endColumn":25},{"ruleId":"471","severity":1,"message":"477","line":319,"column":51,"nodeType":"473","messageId":"474","endLine":319,"endColumn":53},{"ruleId":"471","severity":1,"message":"477","line":319,"column":79,"nodeType":"473","messageId":"474","endLine":319,"endColumn":81},{"ruleId":"460","severity":1,"message":"493","line":518,"column":34,"nodeType":"427","endLine":518,"endColumn":45},{"ruleId":"460","severity":1,"message":"493","line":524,"column":34,"nodeType":"427","endLine":524,"endColumn":45},{"ruleId":"511","severity":1,"message":"512","line":111,"column":3,"nodeType":"513","messageId":"474","endLine":111,"endColumn":8},{"ruleId":"471","severity":1,"message":"472","line":180,"column":38,"nodeType":"473","messageId":"474","endLine":180,"endColumn":40},{"ruleId":"471","severity":1,"message":"472","line":186,"column":42,"nodeType":"473","messageId":"474","endLine":186,"endColumn":44},{"ruleId":"471","severity":1,"message":"472","line":212,"column":39,"nodeType":"473","messageId":"474","endLine":212,"endColumn":41},{"ruleId":"471","severity":1,"message":"472","line":218,"column":42,"nodeType":"473","messageId":"474","endLine":218,"endColumn":44},{"ruleId":"471","severity":1,"message":"472","line":220,"column":44,"nodeType":"473","messageId":"474","endLine":220,"endColumn":46},{"ruleId":"514","severity":1,"message":"515","line":324,"column":15,"nodeType":"516","endLine":324,"endColumn":46},{"ruleId":"460","severity":1,"message":"517","line":51,"column":8,"nodeType":"462","endLine":51,"endColumn":10,"suggestions":"518"},{"ruleId":"460","severity":1,"message":"519","line":66,"column":8,"nodeType":"462","endLine":66,"endColumn":10,"suggestions":"520"},{"ruleId":"467","severity":1,"message":"468","line":94,"column":21,"nodeType":"469","messageId":"470","endLine":98,"endColumn":22},{"ruleId":"521","severity":1,"message":"522","line":15,"column":25,"nodeType":"516","endLine":15,"endColumn":82},{"ruleId":"421","replacedBy":"523"},{"ruleId":"423","replacedBy":"524"},{"ruleId":"425","severity":1,"message":"525","line":130,"column":12,"nodeType":"427","messageId":"428","endLine":130,"endColumn":24},{"ruleId":"425","severity":1,"message":"526","line":130,"column":26,"nodeType":"427","messageId":"428","endLine":130,"endColumn":41},{"ruleId":"425","severity":1,"message":"505","line":133,"column":25,"nodeType":"427","messageId":"428","endLine":133,"endColumn":39},{"ruleId":"425","severity":1,"message":"506","line":134,"column":26,"nodeType":"427","messageId":"428","endLine":134,"endColumn":41},{"ruleId":"425","severity":1,"message":"507","line":135,"column":11,"nodeType":"427","messageId":"428","endLine":135,"endColumn":26},{"ruleId":"425","severity":1,"message":"527","line":139,"column":12,"nodeType":"427","messageId":"428","endLine":139,"endColumn":26},{"ruleId":"425","severity":1,"message":"528","line":139,"column":28,"nodeType":"427","messageId":"428","endLine":139,"endColumn":45},{"ruleId":"425","severity":1,"message":"529","line":148,"column":11,"nodeType":"427","messageId":"428","endLine":148,"endColumn":18},{"ruleId":"530","severity":1,"message":"531","line":187,"column":50,"nodeType":"532","messageId":"533","endLine":187,"endColumn":52},{"ruleId":"460","severity":1,"message":"534","line":217,"column":8,"nodeType":"462","endLine":217,"endColumn":10,"suggestions":"535"},{"ruleId":"471","severity":1,"message":"472","line":412,"column":28,"nodeType":"473","messageId":"474","endLine":412,"endColumn":30},{"ruleId":"425","severity":1,"message":"536","line":43,"column":23,"nodeType":"427","messageId":"428","endLine":43,"endColumn":41},{"ruleId":"460","severity":1,"message":"537","line":98,"column":12,"nodeType":"462","endLine":98,"endColumn":14,"suggestions":"538"},{"ruleId":"421","replacedBy":"539"},{"ruleId":"423","replacedBy":"540"},{"ruleId":"421","replacedBy":"541"},{"ruleId":"423","replacedBy":"542"},{"ruleId":"425","severity":1,"message":"455","line":3,"column":10,"nodeType":"427","messageId":"428","endLine":3,"endColumn":14},{"ruleId":"471","severity":1,"message":"477","line":168,"column":23,"nodeType":"473","messageId":"474","endLine":168,"endColumn":25},{"ruleId":"471","severity":1,"message":"477","line":168,"column":51,"nodeType":"473","messageId":"474","endLine":168,"endColumn":53},{"ruleId":"471","severity":1,"message":"477","line":168,"column":79,"nodeType":"473","messageId":"474","endLine":168,"endColumn":81},{"ruleId":"471","severity":1,"message":"477","line":183,"column":23,"nodeType":"473","messageId":"474","endLine":183,"endColumn":25},{"ruleId":"471","severity":1,"message":"477","line":183,"column":51,"nodeType":"473","messageId":"474","endLine":183,"endColumn":53},{"ruleId":"471","severity":1,"message":"477","line":183,"column":79,"nodeType":"473","messageId":"474","endLine":183,"endColumn":81},{"ruleId":"471","severity":1,"message":"477","line":198,"column":23,"nodeType":"473","messageId":"474","endLine":198,"endColumn":25},{"ruleId":"471","severity":1,"message":"477","line":198,"column":51,"nodeType":"473","messageId":"474","endLine":198,"endColumn":53},{"ruleId":"471","severity":1,"message":"477","line":198,"column":79,"nodeType":"473","messageId":"474","endLine":198,"endColumn":81},{"ruleId":"471","severity":1,"message":"472","line":359,"column":42,"nodeType":"473","messageId":"474","endLine":359,"endColumn":44},{"ruleId":"471","severity":1,"message":"472","line":364,"column":40,"nodeType":"473","messageId":"474","endLine":364,"endColumn":42},{"ruleId":"471","severity":1,"message":"472","line":369,"column":62,"nodeType":"473","messageId":"474","endLine":369,"endColumn":64},{"ruleId":"471","severity":1,"message":"472","line":369,"column":120,"nodeType":"473","messageId":"474","endLine":369,"endColumn":122},{"ruleId":"471","severity":1,"message":"472","line":374,"column":46,"nodeType":"473","messageId":"474","endLine":374,"endColumn":48},{"ruleId":"471","severity":1,"message":"472","line":374,"column":88,"nodeType":"473","messageId":"474","endLine":374,"endColumn":90},{"ruleId":"471","severity":1,"message":"472","line":374,"column":129,"nodeType":"473","messageId":"474","endLine":374,"endColumn":131},{"ruleId":"471","severity":1,"message":"472","line":379,"column":46,"nodeType":"473","messageId":"474","endLine":379,"endColumn":48},{"ruleId":"471","severity":1,"message":"472","line":379,"column":94,"nodeType":"473","messageId":"474","endLine":379,"endColumn":96},{"ruleId":"471","severity":1,"message":"472","line":384,"column":32,"nodeType":"473","messageId":"474","endLine":384,"endColumn":34},{"ruleId":"471","severity":1,"message":"472","line":388,"column":28,"nodeType":"473","messageId":"474","endLine":388,"endColumn":30},{"ruleId":"471","severity":1,"message":"472","line":391,"column":27,"nodeType":"473","messageId":"474","endLine":391,"endColumn":29},{"ruleId":"471","severity":1,"message":"477","line":395,"column":31,"nodeType":"473","messageId":"474","endLine":395,"endColumn":33},{"ruleId":"471","severity":1,"message":"477","line":395,"column":58,"nodeType":"473","messageId":"474","endLine":395,"endColumn":60},{"ruleId":"471","severity":1,"message":"477","line":395,"column":84,"nodeType":"473","messageId":"474","endLine":395,"endColumn":86},{"ruleId":"471","severity":1,"message":"472","line":420,"column":23,"nodeType":"473","messageId":"474","endLine":420,"endColumn":25},{"ruleId":"471","severity":1,"message":"472","line":420,"column":43,"nodeType":"473","messageId":"474","endLine":420,"endColumn":45},{"ruleId":"471","severity":1,"message":"472","line":424,"column":21,"nodeType":"473","messageId":"474","endLine":424,"endColumn":23},{"ruleId":"471","severity":1,"message":"472","line":424,"column":39,"nodeType":"473","messageId":"474","endLine":424,"endColumn":41},{"ruleId":"511","severity":1,"message":"543","line":484,"column":13,"nodeType":"513","messageId":"474","endLine":484,"endColumn":23},{"ruleId":"511","severity":1,"message":"544","line":485,"column":13,"nodeType":"513","messageId":"474","endLine":485,"endColumn":27},{"ruleId":"511","severity":1,"message":"545","line":486,"column":13,"nodeType":"513","messageId":"474","endLine":486,"endColumn":25},{"ruleId":"511","severity":1,"message":"546","line":488,"column":13,"nodeType":"513","messageId":"474","endLine":488,"endColumn":35},{"ruleId":"511","severity":1,"message":"547","line":489,"column":13,"nodeType":"513","messageId":"474","endLine":489,"endColumn":35},{"ruleId":"511","severity":1,"message":"548","line":490,"column":13,"nodeType":"513","messageId":"474","endLine":490,"endColumn":35},{"ruleId":"471","severity":1,"message":"477","line":533,"column":31,"nodeType":"473","messageId":"474","endLine":533,"endColumn":33},{"ruleId":"471","severity":1,"message":"477","line":533,"column":58,"nodeType":"473","messageId":"474","endLine":533,"endColumn":60},{"ruleId":"471","severity":1,"message":"477","line":533,"column":84,"nodeType":"473","messageId":"474","endLine":533,"endColumn":86},{"ruleId":"425","severity":1,"message":"488","line":549,"column":9,"nodeType":"427","messageId":"428","endLine":549,"endColumn":14},{"ruleId":"471","severity":1,"message":"472","line":568,"column":22,"nodeType":"473","messageId":"474","endLine":568,"endColumn":24},{"ruleId":"460","severity":1,"message":"549","line":572,"column":8,"nodeType":"462","endLine":572,"endColumn":10,"suggestions":"550"},{"ruleId":"471","severity":1,"message":"472","line":577,"column":22,"nodeType":"473","messageId":"474","endLine":577,"endColumn":24},{"ruleId":"460","severity":1,"message":"551","line":674,"column":8,"nodeType":"462","endLine":674,"endColumn":10,"suggestions":"552"},{"ruleId":"471","severity":1,"message":"477","line":784,"column":39,"nodeType":"473","messageId":"474","endLine":784,"endColumn":41},{"ruleId":"471","severity":1,"message":"477","line":784,"column":73,"nodeType":"473","messageId":"474","endLine":784,"endColumn":75},{"ruleId":"483","severity":1,"message":"484","line":931,"column":124,"nodeType":"485","endLine":931,"endColumn":141},{"ruleId":"460","severity":1,"message":"553","line":253,"column":8,"nodeType":"462","endLine":253,"endColumn":10,"suggestions":"554"},{"ruleId":"460","severity":1,"message":"493","line":271,"column":36,"nodeType":"427","endLine":271,"endColumn":47},{"ruleId":"471","severity":1,"message":"472","line":348,"column":42,"nodeType":"473","messageId":"474","endLine":348,"endColumn":44},{"ruleId":"471","severity":1,"message":"472","line":354,"column":46,"nodeType":"473","messageId":"474","endLine":354,"endColumn":48},{"ruleId":"425","severity":1,"message":"555","line":131,"column":12,"nodeType":"427","messageId":"428","endLine":131,"endColumn":20},{"ruleId":"425","severity":1,"message":"556","line":131,"column":22,"nodeType":"427","messageId":"428","endLine":131,"endColumn":33},{"ruleId":"471","severity":1,"message":"472","line":173,"column":47,"nodeType":"473","messageId":"474","endLine":173,"endColumn":49},{"ruleId":"471","severity":1,"message":"472","line":176,"column":54,"nodeType":"473","messageId":"474","endLine":176,"endColumn":56},{"ruleId":"425","severity":1,"message":"557","line":5,"column":8,"nodeType":"427","messageId":"428","endLine":5,"endColumn":21},{"ruleId":"421","replacedBy":"558"},{"ruleId":"423","replacedBy":"559"},{"ruleId":"425","severity":1,"message":"560","line":1,"column":17,"nodeType":"427","messageId":"428","endLine":1,"endColumn":25},{"ruleId":"425","severity":1,"message":"434","line":1,"column":27,"nodeType":"427","messageId":"428","endLine":1,"endColumn":36},{"ruleId":"425","severity":1,"message":"561","line":1,"column":48,"nodeType":"427","messageId":"428","endLine":1,"endColumn":59},{"ruleId":"425","severity":1,"message":"562","line":3,"column":8,"nodeType":"427","messageId":"428","endLine":3,"endColumn":18},{"ruleId":"471","severity":1,"message":"472","line":161,"column":44,"nodeType":"473","messageId":"474","endLine":161,"endColumn":46},{"ruleId":"471","severity":1,"message":"472","line":171,"column":48,"nodeType":"473","messageId":"474","endLine":171,"endColumn":50},"no-native-reassign",["563"],"no-negated-in-lhs",["564"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Main' is defined but never used.","'registNums' is assigned a value but never used.",["563"],["564"],"'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Axios' is defined but never used.","'DatePicker' is defined but never used.","'RoomTypes' is assigned a value but never used.","'Methods' is assigned a value but never used.","'Paths' is assigned a value but never used.","'setUserName' is assigned a value but never used.","'setBnum' is assigned a value but never used.","'setOwnerName' is assigned a value but never used.","'setUserSort' is assigned a value but never used.","'setEndStatus' is assigned a value but never used.","'setStatus' is assigned a value but never used.",["563"],["564"],"'BrowserView' is defined but never used.","'MobileView' is defined but never used.","'isBrowser' is defined but never used.","'isMobile' is defined but never used.","'post' is defined but never used.","'DialogContentText' is defined but never used.","'blue' is defined but never used.","'contractStart' is assigned a value but never used.","'contractEnd' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'modalMemberId' and 'props.newDataForm'. Either include them or remove the dependency array.","ArrayExpression",["565"],"React Hook useEffect has missing dependencies: 'props.cDataForm' and 'rNum'. Either include them or remove the dependency array.",["566"],"'payDates' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'onPayDateHandler' is assigned a value but never used.","'fileExtensionChk' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf","'setPaymentY' is assigned a value but never used.","'setPaymentN' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'empNm' is assigned a value but never used.","'closeStatus' is assigned a value but never used.","'memId' is assigned a value but never used.","'empId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'empList'. Either include it or remove the dependency array.",["567"],"'closeStatusHandler' is assigned a value but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'chkSt' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'memberList'. Either include it or remove the dependency array.",["568"],"'contractStatusHandler' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'paymentList'. Either include it or remove the dependency array.",["569"],"'checkForDelete' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'searchAsk'. Either include it or remove the dependency array.",["570"],"'nameForDetailCModal' is assigned a value but never used.","'mEndFlag' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.","'setPostsPerPage' is assigned a value but never used.","'indexOfLastPost' is assigned a value but never used.","'modalEndDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'detailMemberList'. Either include it or remove the dependency array.",["571"],"no-dupe-keys","Duplicate key 'paper'.","ObjectExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'props.dataForm' and 'rNum'. Either include them or remove the dependency array.",["572"],"React Hook useEffect has missing dependencies: 'getAccessPathLov', 'getAskMethodLov', and 'getContractTpLov'. Either include them or remove the dependency array.",["573"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["563"],["564"],"'payPlanMoney' is assigned a value but never used.","'setPayPlanMoney' is assigned a value but never used.","'checkStatusChk' is assigned a value but never used.","'setCheckStatusChk' is assigned a value but never used.","'classes' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'paymentStList'. Either include it or remove the dependency array.",["574"],"'modalCContractDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.dataNum'. Either include it or remove the dependency array.",["575"],["563"],["564"],["563"],["564"],"Duplicate key 'famRelFile'.","Duplicate key 'graduationFile'.","Duplicate key 'bankbookFile'.","Duplicate key 'realFamRelCertFileName'.","Duplicate key 'realGraduationFileName'.","Duplicate key 'realCopyOfBankFileName'.","React Hook useEffect has missing dependencies: 'dataForm' and 'name'. Either include them or remove the dependency array.",["576"],"React Hook useEffect has missing dependencies: 'dataForm' and 'props.empIdM'. Either include them or remove the dependency array.",["577"],"React Hook useEffect has a missing dependency: 'allOfcontractList'. Either include it or remove the dependency array.",["578"],"'empRegNo' is assigned a value but never used.","'setEmpRegNo' is assigned a value but never used.","'ListSubheader' is defined but never used.",["563"],["564"],"'Fragment' is defined but never used.","'useCallback' is defined but never used.","'S010100150' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"587","fix":"588"},{"desc":"589","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},{"desc":"601","fix":"602"},{"desc":"603","fix":"604"},{"desc":"605","fix":"606"},"Update the dependencies array to be: [modalMemberId, props.newDataForm]",{"range":"607","text":"608"},"Update the dependencies array to be: [props.cDataForm, rNum]",{"range":"609","text":"610"},"Update the dependencies array to be: [empList]",{"range":"611","text":"612"},"Update the dependencies array to be: [memberList]",{"range":"613","text":"614"},"Update the dependencies array to be: [paymentList]",{"range":"615","text":"616"},"Update the dependencies array to be: [searchAsk]",{"range":"617","text":"618"},"Update the dependencies array to be: [detailMemberList]",{"range":"619","text":"620"},"Update the dependencies array to be: [props.dataForm, rNum]",{"range":"621","text":"622"},"Update the dependencies array to be: [getAccessPathLov, getAskMethodLov, getContractTpLov]",{"range":"623","text":"624"},"Update the dependencies array to be: [paymentStList]",{"range":"625","text":"626"},"Update the dependencies array to be: [props.dataNum]",{"range":"627","text":"628"},"Update the dependencies array to be: [dataForm, name]",{"range":"629","text":"630"},"Update the dependencies array to be: [dataForm, props.empIdM]",{"range":"631","text":"632"},"Update the dependencies array to be: [allOfcontractList]",{"range":"633","text":"634"},[7973,7975],"[modalMemberId, props.newDataForm]",[15058,15060],"[props.cDataForm, rNum]",[6642,6644],"[empList]",[7863,7865],"[memberList]",[5721,5723],"[paymentList]",[6534,6536],"[searchAsk]",[10387,10389],"[detailMemberList]",[1833,1835],"[props.dataForm, rNum]",[2435,2437],"[getAccessPathLov, getAskMethodLov, getContractTpLov]",[7064,7066],"[paymentStList]",[4056,4058],"[props.dataNum]",[17723,17725],"[dataForm, name]",[22681,22683],"[dataForm, props.empIdM]",[7660,7662],"[allOfcontractList]"]