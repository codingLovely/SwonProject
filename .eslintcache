[{"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js":"1","C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js":"2","C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js":"3","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js":"4","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js":"5","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js":"6","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js":"7","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js":"8","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js":"9","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js":"10","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js":"11","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js":"12","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\index.js":"13","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\reportWebVitals.js":"14","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\App.js":"15","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\s010100140.js":"16","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100140.js":"17","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100010.js":"18","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100040.js":"19","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100130.js":"20","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100050.js":"21","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100150.js":"22","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100060.js":"23","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100090.js":"24","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\Routes\\Routes.js":"25","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\Navbar.js":"26","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\utils\\Pagination.js":"27"},{"size":555,"mtime":1609727657789,"results":"28","hashOfConfig":"29"},{"size":240,"mtime":1609727648266,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"29"},{"size":11524,"mtime":1609829204925,"results":"32","hashOfConfig":"29"},{"size":1055,"mtime":1609833591029,"results":"33","hashOfConfig":"29"},{"size":8135,"mtime":1609830177180,"results":"34","hashOfConfig":"29"},{"size":2082,"mtime":1609828498424,"results":"35","hashOfConfig":"29"},{"size":994,"mtime":1609727352401,"results":"36","hashOfConfig":"29"},{"size":1306,"mtime":1609834092417,"results":"37","hashOfConfig":"29"},{"size":4553,"mtime":1609836098390,"results":"38","hashOfConfig":"29"},{"size":4356,"mtime":1609833363720,"results":"39","hashOfConfig":"29"},{"size":5135,"mtime":1609835439756,"results":"40","hashOfConfig":"29"},{"size":513,"mtime":1611243681610,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":499162500000,"results":"43","hashOfConfig":"42"},{"size":193,"mtime":1611024908052,"results":"44","hashOfConfig":"42"},{"size":8149,"mtime":1609899616826,"results":"45","hashOfConfig":"42"},{"size":13032,"mtime":1611292113073,"results":"46","hashOfConfig":"42"},{"size":32681,"mtime":1611323910956,"results":"47","hashOfConfig":"42"},{"size":13018,"mtime":1611157724717,"results":"48","hashOfConfig":"42"},{"size":14709,"mtime":1611312234832,"results":"49","hashOfConfig":"42"},{"size":10404,"mtime":1611129350370,"results":"50","hashOfConfig":"42"},{"size":1860,"mtime":1611029762477,"results":"51","hashOfConfig":"42"},{"size":4751,"mtime":1611027843132,"results":"52","hashOfConfig":"42"},{"size":5560,"mtime":1611029744956,"results":"53","hashOfConfig":"42"},{"size":1582,"mtime":1611243681631,"results":"54","hashOfConfig":"42"},{"size":1142,"mtime":1611024681714,"results":"55","hashOfConfig":"42"},{"size":757,"mtime":1611307651025,"results":"56","hashOfConfig":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"2g9vyx",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"59"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"59"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"59"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"59"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"59"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"19d91v3",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":10,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"92"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"92"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"92"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"92"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"92"},"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js",[],["126","127"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js",["128","129"],"import React,{ Component, Fragment,useEffect,useState } from 'react';\r\nimport './Counseling.css';\r\nimport Main from'../Main/Main.js';\r\nimport axios from \"axios\";\r\nimport CounselStatus from './CounselStatus';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n//모달창 라이브러리 끝-->\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\nvar rNum = '';\r\nvar Rnum = 0;\r\n\r\n\r\nvar Methods = []\r\n\r\nfunction Counseling (props) {\r\n\r\n    const[ConsultRegists, setConsultRegists] = useState([])\r\n\r\n    useEffect(()=>{\r\n        \r\n        axios.post('/api/register/registers')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    console.log(response.data.rows)\r\n                    setConsultRegists(response.data.rows)\r\n                }else{ \r\n                    alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n\r\n    },[])\r\n    \r\n    const[method, setMethod]=useState([])\r\n    \r\n    useEffect(()=>{\r\n        axios.post('/api/register/insertMethod')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log('insertMethod',response.data);\r\n                let arr = [{value: '전체', text: '전체' }]\r\n\r\n                response.data.rows.map((data) => \r\n                    arr.push({\r\n                    value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                }));\r\n                \r\n                Methods=arr;\r\n\r\n                console.log('insertMethodArr',arr);\r\n            }else{\r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n            }\r\n        })\r\n\r\n        \r\n        \r\n    },[])\r\n\r\n    //<!--모달창 속성 및 이벤트 \r\n    const [open, setOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    const [CRegists,setCRegists] = useState({});\r\n\r\n\r\n\r\n    //상담등록 모달\r\n    const onhandleClickOpen = () => {\r\n        setStoreOpen(true); \r\n     \r\n     };  \r\n\r\n                //상담등록 저장버튼이벤트\r\n                // const onhandleStoreClose = () => {\r\n                //     setOpen(false);\r\n                // }\r\n            \r\n     const onhandleClose = (event) => {\r\n          \r\n        axios.post('/api/register/registers')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log(response.data.rows)\r\n                setConsultRegists(response.data.rows)\r\n            }else{ \r\n                alert(\"상담등록 페이지 가져오기를 실패하였습니다.\")\r\n            }\r\n\r\n        })\r\n\r\n        setStoreOpen(false);\r\n       };\r\n    //상담등록 모달 끝\r\n\r\n    //상세보기 모달\r\n    const handleClickOpen = (e) => {\r\n       setOpen(true); \r\n       rNum = e.target.innerHTML\r\n       Rnum= parseInt(rNum);\r\n       //console.log(Rnum)\r\n\r\n       axios.get(`/api/register/register_by_id?id=${Rnum}&type=single`) \r\n       .then(response => {\r\n           if(response.data.success){\r\n               console.log(response.data)\r\n               setCRegists(response.data.rows[0])\r\n               //console.log(response.data.consultRegistInfo.num)\r\n           }else{\r\n               alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n           }\r\n\r\n       })\r\n    };  \r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n      //상세보기 모달 끝 \r\n    //모달창 속성 및 이벤트 끝-->\r\n\r\n\r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n\r\n        // if(method.valueOf('전체') ||!startDate||!endDate||!searchName){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n         const body = {\r\n            startDate,\r\n            searchName,\r\n            method,\r\n            endDate\r\n        }\r\n        \r\n        //console.log(body);\r\n        \r\n        axios.post(\"/api/register/search\",body)\r\n        .then(response => {\r\n            if(response?.data?.success){\r\n                console.log('search',response.data.rows);\r\n                setConsultRegists(response.data.rows);\r\n            }else{\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    \r\n\r\n\r\n    const[searchName, setSearchName] = useState(\"\")\r\n\r\n    const MethodChangeHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const nameSearchHandler=(event)=>{\r\n        setSearchName(event.currentTarget.value);\r\n    }\r\n\r\n    //console.log('ConsultRegists',ConsultRegists);\r\n\r\n    const resultTable = ConsultRegists.map((ConsultRegists,index)=>{\r\n\r\n        return<tr>\r\n                <td name =\"cname\" variant=\"outlined\" color=\"primary\" onClick={handleClickOpen} id={ConsultRegists.num}><u>{ConsultRegists.num}\r\n                </u></td>\r\n                {/* 모달창 시작 */}\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{CRegists.cname+\"님의 상담내용 입니다.\"}</DialogTitle>\r\n                    <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {CRegists.content}\r\n                    </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                        확인\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* 모달창 끝*/}\r\n\r\n                <td>{ConsultRegists.roomtype}</td>\r\n                <td>{ConsultRegists.counseldate}</td>\r\n                <td>{ConsultRegists.method}</td>\r\n                <td>{ConsultRegists.cname}</td>\r\n                <td>{ConsultRegists.phone}</td>\r\n                <td>{ConsultRegists.path}</td>\r\n                \r\n            </tr>\r\n    })\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                \r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>상담현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                        문의일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        문의구분 \r\n                        <select onChange ={MethodChangeHandler} value ={method}>   \r\n                        \r\n                            {Methods.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                    \r\n                        </select>\r\n                        &nbsp; \r\n\r\n                        문의자명\r\n                         <input type=\"text\" value = {searchName} id=\"searchlName\" name=\"searchName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onhandleClickOpen} >상담등록</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    {/* 모달창 시작 --> 504에러 */}\r\n                        <Dialog\r\n                            open={storeOpen}\r\n                            onClose={onhandleClose}\r\n                            aria-labelledby=\"alert-dialog-title\"\r\n                            aria-describedby=\"alert-dialog-description\"\r\n                        >\r\n                            <DialogTitle id=\"alert-dialog-title\"><h1>상담등록</h1></DialogTitle>\r\n                            <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                                 <CounselStatus/>\r\n                            </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                            {/* <Button onClick={onhandleStoreClose} color=\"primary\" autoFocus>\r\n                                저장\r\n                            </Button> */}\r\n                            <Button onClick={onhandleClose} color=\"primary\">\r\n                                닫기\r\n                            </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                     {/* // 모달창 끝        */}\r\n\r\n                    \r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>No</th>\r\n                            <th>문의 구분</th>\r\n                            <th>문의일자</th>\r\n                            <th>문의방법</th>\r\n                            <th>문의자명</th>\r\n                            <th>연락처</th>\r\n                            <th>접근경로</th>\r\n                        </tr>\r\n\r\n                        \r\n                            {resultTable}\r\n                       \r\n\r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Counseling;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js",["130","131"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\nimport { addDays } from 'date-fns';\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nimport \"./CounselStatus.css\";\r\nregisterLocale(\"ko\", ko);\r\n\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction CounselStatus(props) {\r\n\r\n    //Lov(List of Value)를 데이터 베이스에서 가져오기 \r\n        //select\r\n        const[RoomType,setRoomType] = useState(1)\r\n        const[Method, setMethod] = useState(1)\r\n        const[Path, setPath] = useState(1)\r\n\r\n        //문의구분\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/roomType')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('roomType',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    RoomTypes = arr;\r\n\r\n                    //console.log('roomTypeArr',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n            \r\n            \r\n        },[])\r\n\r\n        //문의방법\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/methodA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('method',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Methods = arr;\r\n\r\n                    //console.log('method',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n\r\n        //접근경로\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/pathA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('Paths',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Paths = arr;\r\n\r\n                    //console.log('Paths',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n    //Lov끝    \r\n\r\n\r\n    \r\n    //datepicker속성 및 이벤트 시작\r\n    const [StartDate, setStartDate] = useState(new Date());\r\n    //datepicker속성 및 이벤트 끝\r\n    console.log(StartDate.getMonth()+1);\r\n    console.log(StartDate);\r\n    \r\n    const[CounselName, setCounselName] = useState(\"\")\r\n    const[UserPhone, setUserPhone] = useState(\"\")\r\n    const[Content, setContent] = useState(\"\")\r\n\r\n\r\n    const onNameHandler=(event)=>{\r\n        setCounselName(event.currentTarget.value);\r\n    }\r\n\r\n    const MethodHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const PathHandler=(event)=>{\r\n        setPath(event.currentTarget.value);\r\n    }\r\n\r\n    const onPhoneHandler=(event)=>{\r\n        setUserPhone(event.currentTarget.value);\r\n    }\r\n\r\n    const onContentHandler=(event)=>{\r\n        setContent(event.currentTarget.value);\r\n    }\r\n\r\n    const RoomTypeChangeHandler=(event)=>{\r\n        setRoomType(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n        //console.log(RoomType)\r\n    \r\n        // if(RoomType.valueOf('전체') ||!CounselName||Method.valueOf('전체')||Path.valueOf('전체')||!UserPhone||!Content){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n        \r\n        \r\n        //서버에 채운 값들을 request로 보낸다.\r\n        const body = {\r\n            roomtype: RoomType,\r\n            counseldate: StartDate,\r\n            cname: CounselName,\r\n            method: Method,\r\n            path: Path,\r\n            phone: UserPhone,\r\n            content: Content\r\n            \r\n        }\r\n        \r\n        \r\n        Axios.post(\"/api/register\",body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 등록되었습니다.')\r\n               // props.history.push('/counseling')\r\n            }else{\r\n                alert('등록에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          {/* <Main/>\r\n          <h1>상담등록</h1> */}\r\n          <table>\r\n            <tr>\r\n                <th>문의구분</th>\r\n                    <td>\r\n                        <select onChange ={RoomTypeChangeHandler} value ={RoomType}>   \r\n                        \r\n                            {RoomTypes.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                        \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의일자</th>\r\n                    <td>   \r\n                    <DatePicker\r\n                        locale=\"ko\"\r\n                        selected={StartDate}\r\n                        onChange={date => setStartDate(date)}\r\n                        minDate={new Date()}\r\n                        maxDate={addDays(new Date(), 0)}  \r\n                        dateFormat=\"yyyy.MM.dd (eee)\"\r\n                    />\r\n\r\n                    </td>\r\n                <th>문의자명</th>\r\n                    <td>\r\n                    <input type=\"text\" value = {CounselName}id=\"counselName\" name=\"counselName\" size = \"7\"\r\n                    onChange={onNameHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n            <tr>\r\n                <th>문의방법</th>\r\n                    <td>\r\n                        <select value={Method} onChange={MethodHandler} >\r\n                        {Methods.map(item=>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                        ))}\r\n                        </select>\r\n                    </td>\r\n                <th>접근경로</th>\r\n                    <td>\r\n                        <select value={Path} onChange={PathHandler} >\r\n                            {Paths.map(item =>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                            ))}\r\n                            \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의자연락처</th>\r\n                    <td>\r\n                    <input type = \"text\" value = {UserPhone}id = \"userPhone\" name = \"userPhone\" size = \"7\"\r\n                    onChange={onPhoneHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n\r\n            <tr>\r\n                <th>상담내용</th>\r\n                    <td colSpan=\"5\">\r\n                        <textarea rows =\"5\" cols = \"100\" value = {Content}id=\"content\" name = \"content\"\r\n                        onChange={onContentHandler}></textarea>\r\n                    </td>\r\n            </tr>\r\n          </table>\r\n          <div id = \"popbtn\"> \r\n            <button type = \"submit\">저장</button>\r\n            {/* <button>닫기</button> */}\r\n          </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n\r\nexport default CounselStatus;",["132","133"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js",["134"],"// import { Component, Fragment } from 'react';\r\n// import {useDispatch} from 'react-redux';\r\n//import {loginUser} from '../_actions/user_action';\r\nimport axios from 'axios';\r\nimport React,{Fragment} from 'react';\r\nimport {useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js'\r\n\r\n\r\nfunction LoginPage( props){\r\n  // const dispatch = useDispatch();\r\n\r\n  const [E_mal,setE_mal] = useState(\"\")\r\n  const [Password, setPassword] = useState(\"\")\r\n\r\n  const onEmailHandler = (event) => {\r\n    setE_mal(event.currentTarget.value)\r\n  }\r\n\r\n  const onPasswordHandler = (event) => {\r\n    setPassword(event.currentTarget.value)\r\n  }\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    let body = {\r\n        Email: E_mal,\r\n        PASSWORD: Password\r\n    }\r\n\r\n   axios.post('/api/users/login',body)\r\n        .then(response => {\r\n            if (response.data.loginResult) {\r\n                alert('로그인 되었습니다.')\r\n                //props.history.push('/counseling')\r\n                console.log(response.data.loginResult)\r\n            } else {\r\n                alert('아이디와 비밀번호를 확인하세요')\r\n            }\r\n        })\r\n      }\r\n\r\n    return (\r\n      <Fragment>\r\n          <Main/>\r\n          <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%',height:'50vh'}}>\r\n            <form style = {{display:'flex', flexDirection:'column'}}\r\n             onSubmit={onSubmitHandler}\r\n            >\r\n              \r\n                <label style={{fontFamily:'Jua',width:'180px'}}>Email</label>\r\n                <input style={{width:\"300px\"}} type = \"email\" value={E_mal} onChange={onEmailHandler} />\r\n                <label style={{fontFamily:'Jua'}}>Password</label>\r\n                <input style={{width:\"300px\"}} type = \"password\" value={Password} onChange={onPasswordHandler}/>\r\n                <br/>\r\n                <button type=\"submit\">Login</button>\r\n            \r\n            \r\n            </form>\r\n          </div>\r\n         \r\n          </Fragment>\r\n    )\r\n}\r\n\r\nexport default LoginPage","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js",["135"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Member from './Components/Member/Member';\r\nimport Counseling from './Components/Counseling/Counseling';\r\nimport CounselStatus from './Components/Counseling/CounselStatus';\r\nimport LoginPage from './Components/LoginPage/LoginPage';\r\nimport PaymentStatus from './Components/PaymentStatus/PaymentStatus';\r\nimport Swon from './Components/Staff/Swon';\r\nimport Main from './Components/Main/Main';\r\n\r\nexport default () => (\r\n  <Router>\r\n          {/* 메인 */}\r\n          <Route exact path = \"/\" component = {Main}></Route>\r\n\r\n\r\n          {/* 회원현황 */}\r\n          <Route exact path = \"/member\" component = {Member}></Route> \r\n          {/* 납부현황 */}\r\n          <Route path = \"/paymentStatus\" component = {PaymentStatus}></Route>\r\n          {/* 상담현황 */}\r\n          <Route exact path = \"/counseling\" component = {Counseling}></Route>\r\n          {/* 직원관리 */}\r\n          <Route exact path = \"/swon\" component = {Swon}></Route>\r\n          {/* 로그인/로그아웃*/}\r\n          <Route exact path = \"/login\" component = {LoginPage}></Route>\r\n\r\n\r\n\r\n          {/* 상담등록 */}\r\n          <Route exact path = \"/counselStatus\" component = {CounselStatus}></Route>\r\n  </Router>\r\n)\r\n\r\n","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js",["136","137","138","139","140","141","142","143","144","145","146","147","148"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\n\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction Member(props) {\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n      \r\n    }\r\n    const[userName,setUserName] = useState(\"\")\r\n    const[bnum,setBnum] = useState(\"\")\r\n    const[ownerName,setOwnerName] = useState(\"\")\r\n    const[userSort,setUserSort] = useState([])\r\n    const[endStatus,setEndStatus] = useState(\"\")\r\n    const[status,setStatus] = useState(\"\")\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          <Main/>\r\n          <h1>회원현황</h1>\r\n          <table >\r\n            <tr>\r\n                <th>회원명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {userName} id = \"userName\" name = \"userName\" size = \"7\"\r\n                        />\r\n                    </td>  \r\n                    {/* onChange={onPhoneHandler} */}\r\n                <th>사업자번호</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {bnum} id = \"bnum\" name = \"bnum\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>대표자명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {ownerName} id = \"ownerName\" name = \"ownerName\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>종류</th>\r\n                    <td>\r\n                        <select value ={endStatus}>  {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>상태</th>\r\n                    <td>\r\n                        <select value ={status}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                    <div > \r\n                        <button type = \"submit\">조회</button>\r\n                \r\n                    </div>\r\n                    </td>\r\n\r\n                \r\n            </tr>\r\n               \r\n            \r\n          </table>\r\n          <table>\r\n            <tr>\r\n                <td>\r\n                    <button>신규회원</button>\r\n                    <button>SNS</button>\r\n                    <button>메일전송</button>\r\n                    <button>엑셀다운로드</button>\r\n                </td>\r\n            </tr>\r\n          </table>\r\n          \r\n          <table>\r\n                <tr>\r\n                    <th>No</th>\r\n                    <th>문의 구분</th>\r\n                    <th>문의일자</th>\r\n                    <th>문의방법</th>\r\n                    <th>문의자명</th>\r\n                    <th>연락처</th>\r\n                    <th>접근경로</th>\r\n                </tr>\r\n          </table>\r\n\r\n      </form>\r\n\r\n      \r\n    );\r\n  }\r\n\r\n\r\nexport default Member;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js",["149"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction PaymentStatus (props) {\r\n\r\n    \r\n    const[userName, setUserName] = useState(\"\")\r\n    const[paymentStatus, setPaymentStatus]=useState([])\r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const nameSearchHandler=(event)=>{\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler=(event)=>{\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n    \r\n    const onPaymenthandler=()=>{\r\n        \r\n    }\r\n\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>고객납부현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                    납부예정일   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                        회원명\r\n                         <input type=\"text\" value = {userName} id=\"userName\" name=\"userName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp; \r\n\r\n                        납부여부\r\n                        <select onChange ={paymentStatusHandler} value ={paymentStatus}>   \r\n{/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                        </select>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onPaymenthandler}> 납부</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>No</th>\r\n                            <th>회원명</th>\r\n                            <th>납부예정일</th>\r\n                            <th>납부여부</th>\r\n                            <th>납부일자</th>\r\n                            <th>계약기간</th>\r\n                            <th>대표자</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default PaymentStatus;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js",["150"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction Swon (props) {\r\n\r\n    \r\n    const[staffName, setStaffName] = useState(\"\")\r\n    const[staffClass, setStaffClass] = useState([])\r\n    const[closeStatus, setCloseStatus] = useState([])\r\n    \r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const staffNameHandler=(event)=>{\r\n        setStaffName(event.currentTarget.value);\r\n    }\r\n\r\n    const staffClassHandler=(event)=>{\r\n        setStaffClass(event.currentTarget.value);\r\n    }\r\n    \r\n    const closeStatusHandler=(event)=>{\r\n        setCloseStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onRegistHandler = (event)=>{\r\n\r\n    }\r\n    const onModifyHandler = (event)=>{\r\n        \r\n    }\r\n    const onApprovalHandler = (event)=>{\r\n        \r\n    }\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>직원현황</h1>\r\n                    <div id = \"search\">\r\n\r\n                     성명\r\n                    <input type=\"text\" value = {staffName} id=\"staffName\" name=\"staffName\" size = \"5\"\r\n                    onChange={staffNameHandler}/>\r\n                    &nbsp; \r\n\r\n\r\n                    입사일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        직원구분\r\n                        <select onChange ={staffClassHandler} value ={staffClass}>  \r\n                    {/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                     \r\n                        </select>\r\n                        종료\r\n                        <select onChange ={closeStatusHandler} value ={closeStatus}>   \r\n                        </select>\r\n                        \r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onRegistHandler}> 등록</button> </td>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onModifyHandler}> 수정</button> </td>    \r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onApprovalHandler}> 승인</button> </td>                        \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>직번</th>\r\n                            <th>성명</th>\r\n                            <th>주민번호</th>\r\n                            <th>부서</th>\r\n                            <th>연락처</th>\r\n                            <th>E-mail</th>\r\n                            <th>직원구분</th>\r\n                            <th>승인여부</th>\r\n                            <th>직급</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Swon;","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\index.js",[],["151","152"],"C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\App.js",[],"C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\s010100140.js",["153","154","155","156","157","158","159","160","161","162","163","164"],"C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100140.js",["165","166","167","168","169","170","171","172","173","174"],"//<<상담등록 페이지>>\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport { addDays } from 'date-fns';\r\nimport './css/S010100140.css';\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko'\r\nregisterLocale(\"ko\", ko);\r\n//datepicker끝\r\n\r\n\r\n\r\n\r\n\r\nfunction S010100140(props) {\r\n    \r\n     //console.log(props.dataForm);\r\n     //console.log(props.num);\r\n\r\n\r\n            const rNum = props.num;\r\n            //console.log('rNum',rNum);\r\n            //const modal = props.modal;\r\n\r\n            useEffect(()=>{\r\n            //if(isNaN(rNum)){ return alert('숫자를 클릭하세요') }\r\n\r\n                    if (props.dataForm === 'U'){\r\n\r\n                    axios.get(`/api/s010100140/tb_s10_ask010_by_id?id=${rNum}&type=single`)\r\n                    .then(response => {\r\n                            if(response.data.success){\r\n                                //console.log(response.data)\r\n                                const askTp = (response.data.rows[0].ASK_TP);\r\n                                const askDate = (response.data.rows[0].ASK_DATE);\r\n                                const askMethod = (response.data.rows[0].ASK_METHOD);\r\n                                const askName = (response.data.rows[0].ASK_NAME);\r\n                                const askPath = (response.data.rows[0].ASK_PATH);\r\n                                const askInfo = (response.data.rows[0].ASK_INFO);\r\n                                const askContent = (response.data.rows[0].ASK_CONTENT);\r\n\r\n                                setModalAskDate(askDate);\r\n                                //console.log('askDate', askDate);\r\n                                setModalAskTp(askTp);\r\n                                setModalAskName(askName);\r\n                                setModalAskMethod(askMethod);\r\n                                setModalAskPath(askPath);\r\n                                setModalAskInfo(askInfo);\r\n                                setModalAskContent(askContent);\r\n                            }else{\r\n                                alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                            }\r\n                        })\r\n                    }\r\n                   \r\n            },[])\r\n\r\n\r\n\r\n\r\n\r\n    //<Lov(List of Value)를 데이터 베이스에서 가져오기\r\n\r\n    //select-option\r\n        const[modalAskTp, setModalAskTp]= useState('')\r\n        const[modalAskMethod, setModalAskMethod] = useState('')\r\n        const[modalAskPath, setModalAskPath] = useState('')\r\n\r\n\r\n        const[modalContractTpLov, setModalContractTpLov]= useState([{key: '', value: 'waiting...'}])\r\n        const[modalAskMethodLov, setModalAskMethodLov] = useState( [{key: '', value: 'waiting...'}])\r\n        const[modalAccessPathLov, setModalAccessPathLov] = useState( [{key: '', value: 'waiting...'}])\r\n\r\n        useEffect(()=>{\r\n            getContractTpLov();\r\n            getAskMethodLov();\r\n            getAccessPathLov();\r\n\r\n    },[]);\r\n\r\n    const getContractTpLov = () => {\r\n        getLovByCdTp('CONTRACT_TP','ASK');\r\n    };\r\n    const getAskMethodLov = () => {\r\n        getLovByCdTp('ASK_METHOD','');\r\n    };\r\n    const getAccessPathLov = () => {\r\n        getLovByCdTp('ACCESS_PATH','ASK');\r\n    };\r\n    /**\r\n     * desc : LOV에 필요한 항목을 받아 DB조회 후 조회값을 반환하는 로직\r\n     * */\r\n    async function getLovByCdTp(cdTp, attribute2) {\r\n        let arr = [{ key: '선택', value: '선택' }];\r\n        return await axios.post('/api/s010100140/selectTest',{firstVal:cdTp,secondVal:attribute2})\r\n        .then(response => {\r\n            if(response.data.success){\r\n                //console.log('modalAskTp',response.data.rows);\r\n                response.data.rows.map((data) =>\r\n                    arr.push({\r\n                    value: data.CD_V_MEANING,\r\n                    key: data.CD_V\r\n                }));\r\n                //return arr;\r\n                switch (cdTp){\r\n                    case 'CONTRACT_TP' : setModalContractTpLov(arr); break;\r\n                    case 'ASK_METHOD' : setModalAskMethodLov(arr); break;\r\n                    case 'ACCESS_PATH' : setModalAccessPathLov(arr); break;\r\n                }\r\n                if(cdTp === 'CONTRACT_TP')\r\n                setModalAccessPathLov(arr);\r\n            }else{\r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\")\r\n            }\r\n        }).catch(() =>{\r\n              alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n        })\r\n        return arr;\r\n        console.log('arr',arr);\r\n    }\r\n\r\n    //<Lov끝>\r\n\r\n\r\n    //datepicker속성 및 이벤트 시작\r\n    const [modalAskDate, setModalAskDate] = useState(new Date());\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    //datepicker속성 및 이벤트 끝\r\n\r\n\r\n    //input type =\"text\"\r\n    const[modalAskName, setModalAskName] = useState(\"\")\r\n    const[modalAskInfo, setModalAskInfo] = useState(\"\")\r\n    const[modalAskContent, setModalAskContent] = useState(\"\")\r\n\r\n    //select-option 이벤트들\r\n    const onAskTpHandler=(event)=>{\r\n        console.log(event.currentTarget.value);\r\n        setModalAskTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskMethodHandler=(event)=>{\r\n        setModalAskMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskPathHandler=(event)=>{\r\n        setModalAskPath(event.currentTarget.value);\r\n    }\r\n\r\n    //input type = \"text\" 이벤트들\r\n    const onAskNameHandler=(event)=>{\r\n        setModalAskName(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskInfoHandler=(event)=>{\r\n        setModalAskInfo(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskContentHandler=(event)=>{\r\n        setModalAskContent(event.currentTarget.value);\r\n    }\r\n\r\n    const onChangeHandler = (event)=> {\r\n        // DatePicker.value\r\n    }\r\n\r\n    const onModifyHandler = ()=>{\r\n\r\n        const body = {\r\n            modalAskId : rNum,\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: modalAskDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n\r\n        axios.post('/api/s010100140/modify',body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 수정되었습니다.')\r\n            }else{\r\n                alert('수정에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    //상담등록저장버튼클릭시\r\n    const onHandleSubmit=(event)=> {\r\n\r\n        event.preventDefault();\r\n        //   //문의구분 NUll체크\r\n        //   if(modalAskTp == null ||modalAskTp == ''||modalAskTp == '전체'){\r\n        //     return alert(\"문의구분을 선택하세요.\");\r\n        // }\r\n\r\n        if(modalAskTp == null ||modalAskTp == ''){\r\n            return alert(\"문의구분을 선택하세요.\");\r\n        }\r\n\r\n         //문의방법 NUll체크\r\n         if(modalAskMethod == null || modalAskMethod == ''){\r\n            // alert('111');\r\n            // alert((modalAskMethod == null)+ ',' + (modalAskMethod == '' ));\r\n            return alert(\"문의방법을 선택하세요.\");\r\n        }\r\n        \r\n         //접근경로 NUll체크\r\n         if(modalAskPath == null || modalAskPath == ''){\r\n            return alert(\"접근경로를 선택하세요.\");\r\n        }\r\n        \r\n        //서버에 채운 값들을 request로 보낸다.\r\n        const body = {\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: modalAskDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n             console.log('setModalAskDate',setModalAskDate);\r\n\r\n\r\n        axios.post(\"/api/s010100140\",body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 등록되었습니다.')\r\n            }else{\r\n                alert('등록에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n    // console.log(startDate);\r\n\r\n    return (\r\n            <form onSubmit={onHandleSubmit} id = \"formWrapper\">\r\n            {/* <h1>상담등록</h1> */}\r\n            <div id =\"wrapper\">\r\n                <table class =\"buttonTable\">\r\n                    <tbody>\r\n                    <tr>\r\n                        <th>문의구분</th>\r\n                            <td>\r\n                                <select multiple={false} onChange ={onAskTpHandler} value ={modalAskTp} >\r\n\r\n                                    {modalContractTpLov.map(item => (\r\n                                        <option key ={item.key} value ={item.key}>{item.value}</option>\r\n                                    ))}\r\n                                    \r\n                                </select>\r\n\r\n                            </td>\r\n\r\n                        <th>문의일자</th>\r\n                            <td>\r\n                                <DatePicker\r\n                                    locale=\"ko\"\r\n                                    selected={new Date()}\r\n                                    value={modalAskDate}\r\n                                    onChange={date => setModalAskDate(date)}\r\n                                    minDate={new Date()}\r\n                                    maxDate={addDays(new Date(), 0)}\r\n                                    dateFormat=\"yy/MM/dd (eee)\"\r\n\r\n                                />\r\n                                {/* <DatePicker*/}\r\n                                {/*     locale=\"ko\"*/}\r\n                                {/*     selected={startDate.setHours(9, 0, 0, 0)}*/}\r\n                                {/*     value={startDate}*/}\r\n                                {/*     onChange={date => setStartDate(date)}*/}\r\n                                {/*     dateFormat=\"yy/MM/dd (eee)\"*/}\r\n                                {/*     onClick={onChangeHandler}*/}\r\n                                {/* />*/}\r\n                            </td>\r\n\r\n                        <th>문의자명</th>\r\n                            <td>\r\n                                <input type=\"text\" \r\n                                    value = {modalAskName} \r\n                                    id=\"modalAskName\" \r\n                                    name=\"modalAskName\" \r\n                                    size = \"7\"\r\n                                    onChange={onAskNameHandler}\r\n                                />\r\n                            </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th>문의방법</th>\r\n                            <td>\r\n                                <select multiple={false} value={modalAskMethod} onChange={onAskMethodHandler}  >\r\n                                    {modalAskMethodLov.map(item=>(\r\n                                            <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                                    ))}\r\n\r\n                                </select>\r\n                            </td>\r\n\r\n                        <th>접근경로</th>\r\n                            <td>\r\n                                <select multiple={false} value={modalAskPath} onChange={onAskPathHandler}  >\r\n                                    {modalAccessPathLov.map(item =>(\r\n                                        <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                                    ))}\r\n\r\n                                </select>\r\n                            </td>\r\n\r\n                        <th>문의자연락처</th>\r\n                            <td>\r\n                                <input type = \"text\" value = {modalAskInfo}id = \"modalAskInfo\" name = \"modalAskInfo\" size = \"7\"\r\n                                onChange={onAskInfoHandler} />\r\n                            </td>\r\n                    </tr>\r\n\r\n\r\n                    <tr>\r\n                        <th>상담내용</th>\r\n                            <td colSpan=\"5\">\r\n                                <textarea rows =\"5\" cols = \"100\" value = {modalAskContent} id=\"modalAskContent\" name = \"modalAskContent\"\r\n                                onChange={onAskContentHandler} ></textarea>\r\n                            </td>\r\n                    </tr>\r\n                    </tbody>                        \r\n                </table>\r\n\r\n            </div>\r\n                <input type =\"button\" className = \"popBtn\" value=\"수정하기\" onClick = {onModifyHandler}hidden = {props.dataForm !== 'U'}/>\r\n                {/* <button>닫기</button> */}\r\n                <input className = \"popBtn\" type = \"submit\" hidden = {props.dataForm === 'U'}/>\r\n\r\n            </form>\r\n        \r\n    );\r\n  }\r\nexport default S010100140;","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100010.js",["175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194"],"C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100040.js",["195"],"import React,{ Fragment,useState,useEffect } from 'react';\r\nimport Navbar from'./Navbar';\r\nimport S010100010 from './S010100010';\r\nimport S010100050 from './S010100050';\r\nimport './css/S010100040.css';\r\nimport axios from \"axios\";\r\n\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n//모달창 라이브러리 끝-->\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->ghy\r\n\r\n\r\nlet valueArr = [[]];\r\nlet queryArr = [['MEMBER_TP','']];\r\nlet endStatus = [{key:'전체',value:'전체'},\r\n                 {key:'Y',value:'Y'},\r\n                 {key:'N',value:'N'}]\r\nlet contractsStatus = [{key:'전체',value:'전체'},\r\n                       {key:'C',value:'확정'},\r\n                       {key:'T',value:'가계약'}]\r\n\r\n\r\nvar num = '';\r\nvar rNum = 0;\r\nfunction S010100040 (props) {\r\n   \r\n    const[memberNm, setMemberNm] = useState('')\r\n    const[regNo, setRegNo] = useState('')\r\n    const[memberTp, setMemberTp] = useState('')\r\n    const[contractStatus, setContractStatus] = useState('')\r\n    const[memberSt, setMemberSt] = useState('')\r\n    const [name,setName] = useState('')\r\n    const [numForDetailModal,setNumForDetailModal] = useState('')\r\n\r\n      //<!--모달창 속성 및 이벤트 \r\n      const [open, setOpen] = React.useState(false);\r\n      const [storeOpen, setStoreOpen] = React.useState(false);\r\n\r\n\r\n    for(let i = 0; i<queryArr.length; i++){\r\n                \r\n        let firstVal = queryArr[i][0];\r\n        let secondVal = queryArr[i][1];\r\n            axios.post('/api/s010100140/selectTest',{firstVal:firstVal,secondVal:secondVal})\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('ask_tp',response.data.rows);\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: data.CD_V_MEANING,\r\n                        key: data.CD_V\r\n\r\n                    }));       \r\n                \r\n                    valueArr[i] = arr;\r\n                    //console.log(valueArr[2]);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n            \r\n    }  \r\n\r\n     \r\n    const onHandleClickOpen = () => {\r\n        setStoreOpen(true); \r\n    };  \r\n\r\n    const onHandleClickClose = () =>{\r\n        setStoreOpen(false);\r\n        \r\n        axios.post('/api/s010100010')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                //console.log('tb_member',response.data.rows);\r\n                setTbMember(response.data.rows);\r\n            }else{ \r\n                alert(\"데이터 조회를 실패하였습니다.\")\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n\r\n    \r\n    const memberStHandler=(event)=>{\r\n        setMemberSt(event.currentTarget.value);\r\n    }\r\n\r\n    const nameHandler=(event)=>{\r\n        setName(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    //<!--onSubmit\r\n    const onFormSubmitHandler = (event)=>{\r\n        event.preventDefault();\r\n\r\n        const body ={   \r\n                memberNm,\r\n                regNo,\r\n                name,\r\n                memberTp,\r\n                contractStatus\r\n        }\r\n\r\n        axios.post('/api/s010100040/searchMember', body)\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('tb_member',response.data.rows);\r\n                    setTbMember(response.data.rows);\r\n                }else{ \r\n                    alert(\"검색에 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const memberNmHandler=(event)=>{\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const regNoHandler=(event)=>{\r\n        setRegNo(event.currentTarget.value);\r\n    }\r\n    \r\n    const memberTpHandler=(event)=>{\r\n        setMemberTp(event.currentTarget.value);\r\n    }\r\n    \r\n    const contractStatusHandler=(event)=>{\r\n        setContractStatus(event.currentTarget.value);\r\n    }\r\n    \r\n    const onHandleDetailClickOpen = (event)=>{\r\n        num = event.target.innerHTML;\r\n        rNum = parseInt(num);\r\n        setNumForDetailModal(rNum);\r\n        \r\n\r\n        setOpen(true);\r\n    }\r\n\r\n        //console.log(num);\r\n        \r\n    const onHandleDetailClickClose = () => {\r\n           \r\n        // axios.post('/api/s010100130')\r\n        // .then(response => {\r\n        //     if(response.data.success){\r\n        //         //console.log(response.data.rows)\r\n        //         setTb_s10_ask010(response.data.rows)\r\n        //     }else{ \r\n        //         alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n        //     }\r\n\r\n        // })\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    const onModifyHandler = (event)=>{\r\n        \r\n    }\r\n    const onApprovalHandler = (event)=>{\r\n        \r\n    }\r\n\r\n\r\n    \r\n    //TB_S10_ASK010 테이블 조회\r\n    const[tbMember, setTbMember] = useState([])\r\n\r\n    useEffect(()=>{\r\n        \r\n        axios.post('/api/s010100010')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('tb_member',response.data.rows);\r\n                    setTbMember(response.data.rows);\r\n                }else{ \r\n                    alert(\"데이터 조회를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n\r\n    },[])\r\n\r\n\r\n    const s010100040R = tbMember.map((tbMember,index)=>{\r\n        return (\r\n                    <tr>\r\n                            <td key ={tbMember.id} name =\"uname\" variant=\"outlined\" color=\"primary\" id={tbMember.MEMBER_ID}> {index+1}</td>\r\n                            <td key ={tbMember.id} >{tbMember.MEMBER_NM}</td>\r\n                            <td key ={tbMember.id} onClick={onHandleDetailClickOpen} id={tbMember.REG_NO} >{tbMember.REG_NO}</td>\r\n                            <td key ={tbMember.id}>{tbMember.NAME}</td>\r\n                            <td key ={tbMember.id}>{tbMember.EMP_HP}</td>\r\n                            <td key ={tbMember.id}>{tbMember.EMP_EMAIL}</td>\r\n                            <td key ={tbMember.id}>{tbMember.MEMBER_TP}</td>\r\n                            <td key ={tbMember.id}></td>\r\n                            <td key ={tbMember.id}></td>\r\n                    </tr>\r\n                )});\r\n\r\n\r\n  \r\n      return (\r\n\r\n            <Fragment>\r\n                <Navbar/>\r\n                \r\n                    <form style = {{display:'flex', flexDirection:'column', justifyContent:'center',alignItems:'center',width:'100%'}}\r\n                     onSubmit={onFormSubmitHandler}\r\n                    >\r\n\r\n                    <h1>회원현황</h1>\r\n                        <div id = \"search\">\r\n\r\n                        회원명\r\n                        <input type=\"text\" value = {memberNm} id=\"memberNm\" name=\"memberNm\" size = \"5\"\r\n                        onChange={memberNmHandler}/>\r\n                        &nbsp; \r\n\r\n\r\n                        사업자번호   \r\n                        <input type=\"text\" value = {regNo} id=\"regNo\" name=\"regNo\" size = \"5\"\r\n                        onChange={regNoHandler}/>\r\n                        &nbsp; \r\n                        \r\n                        \r\n                        대표자명\r\n                        <input type=\"text\" value = {name} id=\"name\" name=\"name\" size = \"5\"\r\n                        onChange={nameHandler}/>\r\n                        &nbsp; \r\n\r\n                            회원구분\r\n                            <select multiple={false} onChange ={memberTpHandler} value ={memberTp}>  \r\n                                                \r\n                                {valueArr[0].map(item => ( \r\n                                    <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                                ))}\r\n                            </select>\r\n                            종료\r\n                            <select multiple={false} onChange ={contractStatusHandler} value ={contractStatus}>   \r\n                            {endStatus.map(item => ( \r\n                                    <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                                ))}\r\n                            </select>\r\n                            \r\n                            &nbsp;\r\n                            상태 \r\n                            <select multiple={false} onChange ={memberStHandler} value ={memberSt}>  \r\n                                                \r\n                                {contractsStatus.map(item => ( \r\n                                    <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                                ))}\r\n                            </select>\r\n                    \r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            \r\n                            <button type = \"submit\"> 조회</button>\r\n                        </div>\r\n                    <Dialog\r\n                            maxWidth = {\"lg\"}\r\n                            //fullWidth = {true}\r\n                            open={open}\r\n\t\t                    onClose={onHandleDetailClickClose}\r\n                            aria-labelledby=\"alert-dialog-title\"\r\n                            aria-describedby=\"alert-dialog-description\"\r\n                        >\r\n                            <DialogContent>\r\n                            <DialogTitle id=\"alert-dialog-title\"><h1>회원상세정보</h1></DialogTitle>\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                                <S010100050 dataNum ={numForDetailModal} dataForm={\"U\"}/>\r\n                            </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                            {/* <Button onClick={onhandleStoreClose} color=\"primary\" autoFocus>\r\n                                저장\r\n                            </Button> */}\r\n                            <input type = \"button\" onClick={onHandleDetailClickClose} color=\"primary\" value = '닫기'/>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                  \r\n\r\n\r\n                    <table class= \"btn\">\r\n                        <thead>\r\n                            <tr>\r\n                                <td colSpan=\"5\"> <button onClick={onHandleClickOpen}>신규회원</button>\r\n                                <button onClick={onModifyHandler}>SNS</button>\r\n                                <button onClick={onApprovalHandler}>메일전송</button>\r\n\r\n                                </td>\r\n\r\n                           <td id = \"alignRight\"> <button>엑셀다운로드</button> </td>\r\n                            </tr>\r\n                        </thead>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th rowSpan=\"2\">No</th>\r\n                                <th rowSpan=\"2\">회원명</th>\r\n                                <th rowSpan=\"2\">사업자번호</th>\r\n                                <th colSpan=\"3\">대표자</th>\r\n                                <th rowSpan=\"2\">회원구분</th>\r\n                                <th rowSpan=\"2\">상태</th>\r\n                                <th rowSpan=\"2\">종료여부</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>성명</th>\r\n                                <th>연락처</th>\r\n                                <th>E-mail</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {s010100040R}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    </form>\r\n\r\n                    <Dialog\r\n                        maxWidth = {\"lg\"}\r\n                        open={storeOpen}\r\n                        onClose={onHandleClickClose}>\r\n                        <S010100010/> \r\n                        <DialogActions>\r\n                            <Button onClick={onHandleClickClose} color=\"primary\">\r\n                                닫기\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default S010100040;","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100130.js",["196","197"],"//<<상담현황 페이지>>\r\nimport React, {Fragment, useEffect, useState} from 'react';\r\nimport './css/S010100130.css';\r\nimport Navbar from './Navbar';\r\nimport axios from 'axios';\r\nimport S010100140 from './S010100140';\r\nimport Pagination from \"./utils/Pagination\";\r\n\r\n\r\n\r\n\r\n//모달창 따로 분리해서 태그로 쓸 것\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n//모달창 라이브러리 끝-->\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, {registerLocale} from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\n\r\nlet dataForm = '';\r\n\r\nlet ask_tps = []\r\n\r\nfunction S010100130(props) {\r\n    const [data] = useState('I');\r\n    //console.log(data);\r\n    const [numForDetail, setNumForDetail] = useState('')\r\n    //TB_S10_ASK010 테이블 조회\r\n    const [tb_s10_ask010, setTb_s10_ask010] = useState([])\r\n    const [deleteAskOpen, setDeleteAskOpen] = React.useState(false);\r\n\r\n    //페이징\r\n\r\n    const [currentPage,setCurrentPage] = useState(1);\r\n    const [postsPerPage,setPostsPerPage] = useState(3);\r\n\r\n\r\n    useEffect(() => {\r\n          lookUp();\r\n    }, [])\r\n\r\n\r\n    const lookUp = () => {\r\n      axios.get('/api/s010100130')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('TB_S10_ASK010 조회',response.data.rows)\r\n                    //let posts = (response.data.rows);\r\n                    setTb_s10_ask010(response.data.rows);\r\n                    //console.log(posts);\r\n                } else {\r\n                    alert(\"데이터 조회를 실패하였습니다.\")\r\n                }\r\n            })\r\n    };\r\n\r\n    //<Lov(List of Value)를 데이터 베이스에서 가져오기\r\n\r\n    //select-option\r\n    const [ask_tp, setAsk_tp] = useState('')\r\n\r\n    //문의 구분\r\n    useEffect(() => {\r\n        axios.post('/api/s010100130/ask_tp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('Lov-ask_tp',response.data);\r\n                    let arr = [{key: '전체', value: '전체'}]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                    ask_tps = arr;\r\n\r\n                } else {\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n    //lov 끝>\r\n\r\n\r\n    //<!--모달창 속성 및 이벤트 \r\n    const [open, setOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n\r\n    //<상담등록 모달\r\n    const onHandleClickOpen = (event) => {\r\n        //console.log('상담열기');\r\n        setStoreOpen(true);\r\n\r\n    };\r\n\r\n    //상담등록 닫기 할 때 새로고침해서 가져오는 것\r\n    const onHandleClickClose = (event) => {\r\n        setStoreOpen(false);\r\n         lookUp();\r\n    };\r\n    //상담등록 모달 끝>\r\n\r\n\r\n    // //<상세보기 모달\r\n    const onDetailHandleClickOpen = (event) => {\r\n        //console.log('target',event.target.id);\r\n        num = event.target.id;\r\n        rNum = parseInt(num);\r\n        setNumForDetail(rNum);\r\n        setOpen(true);\r\n    };\r\n\r\n    const onDetailHandleClickClose = () => {\r\n        setOpen(false);\r\n        lookUp();\r\n\r\n    };\r\n    //상세보기 모달 끝>\r\n    //모달창 속성 및 이벤트 끝--!>\r\n\r\n\r\n    const [checkForDelete, setCheckForDelete] = useState(true);\r\n\r\n    const onDeleteHandle = () => {\r\n        setCheckForDelete(false);\r\n    }\r\n\r\n    const onBackHandle = () => {\r\n        setCheckForDelete(true);\r\n        setChecked([]);\r\n    }\r\n\r\n     const [checked, setChecked] = useState([]);\r\n\r\n        const handleToggle = (tb_s10_ask010) => {\r\n            console.log('event', tb_s10_ask010);\r\n            //누른것의 index를 구하고\r\n            const currentIndex = checked.indexOf(tb_s10_ask010);\r\n            //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n            const newChecked = checked;\r\n\r\n            if(currentIndex === -1){\r\n                newChecked.push(tb_s10_ask010)\r\n            }else {\r\n                newChecked.splice(currentIndex,1)\r\n            }\r\n            setChecked(newChecked);\r\n            //빽주고\r\n            //state를 넣어준다\r\n            console.log('currentIndex', currentIndex);\r\n            console.log('checked', checked);\r\n\r\n            // handleFilters(filters,tb_s10_ask010);\r\n\r\n        }\r\n    //문의자명 속성\r\n    const [ask_name, setAsk_name] = useState(\"\")\r\n\r\n    //문의구분 select-option이벤트\r\n    const onAsk_tpHandler = (event) => {\r\n        setAsk_tp(event.currentTarget.value);\r\n    }\r\n\r\n    //문의자명 input type = \"text\"이벤트\r\n    const onAsk_nameHandler = (event) => {\r\n        setAsk_name(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onHandleDelete = (event) => {\r\n        setDeleteAskOpen(true);\r\n    }\r\n\r\n    const handleClose=(event)=>{\r\n        setDeleteAskOpen(false);\r\n    }\r\n\r\n    const deleteHandle = (event)=>{\r\n        let askIdArray = checked;\r\n        \r\n         axios.post('/api/s010100130/delete',askIdArray)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    // //console.log('상담닫기',response.data.rows)\r\n                    // setTb_s10_ask010(response.data.rows)\r\n                } else {\r\n                    alert(\"error\")\r\n                }\r\n\r\n            })\r\n\r\n        setDeleteAskOpen(false);\r\n         //재조회\r\n        lookUp();\r\n        setChecked([]);\r\n        onBackHandle();\r\n\r\n\r\n    }\r\n\r\n\r\n    //캘린더 속성\r\n    const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endAsk_date, setEndAsk_date] = useState(new Date());\r\n\r\n\r\n    // 조회 <!--onSubmit\r\n    const onHandleFormSubmit = (event) => {\r\n        console.log('조회', event);\r\n        event.preventDefault();\r\n\r\n        // if(method.valueOf('전체')||!startDate||!endDate||!searchName){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n\r\n        //console.log(\"조회조건\", body);\r\n\r\n        axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                console.log('search', response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n//onSubmit끝-->\r\n\r\n\r\n    const s010100130R = tb_s10_ask010.map((tb_s10_ask010, index) => {\r\n        return (\r\n            <tr class='dataTable'>\r\n                <td id=\"chkLine\" hidden={checkForDelete}>\r\n                    <input type=\"checkbox\"  onChange={()=> handleToggle(tb_s10_ask010.ASK_ID) } id={tb_s10_ask010.ASK_ID}/></td>\r\n                {/*<input type = \"checkbox\" onChange={onCheckboxHandler} id={tb_s10_ask010.ASK_ID}/>*/}\r\n                <td className=\"cname\" name=\"cname\" variant=\"outlined\" color=\"primary\" onClick={onDetailHandleClickOpen} id={tb_s10_ask010.ASK_ID}>\r\n                    {index + 1}</td>\r\n                <td>{tb_s10_ask010.ASK_TP}</td>\r\n                <td >{tb_s10_ask010.ASK_DATE}</td>\r\n                <td>{tb_s10_ask010.ASK_METHOD}</td>\r\n                <td>{tb_s10_ask010.ASK_NAME}</td>\r\n                <td >{tb_s10_ask010.ASK_INFO}</td>\r\n                <td>{tb_s10_ask010.ASK_PATH}</td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    //Get current tb_s10_ask010;\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    const currentPosts = s010100130R.slice(indexOfFirstPost,indexOfLastPost);\r\n\r\n\r\n    //Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n    return (\r\n        <Fragment>\r\n            <Navbar/>\r\n\r\n            <form style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                width: '100%'\r\n            }} onSubmit={onHandleFormSubmit}>\r\n\r\n                <h1>상담현황</h1>\r\n                <div id=\"search\">\r\n                    <div id=\"datePickerArea\">\r\n                        문의일자\r\n                        &nbsp;\r\n                        {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            locale=\"ko\"\r\n                            selected={startAsk_date.setHours(9, 0, 0, 0)}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                            onChange={date => setStartAsk_date(date)}\r\n                            selectsStart\r\n                            startDate={startAsk_date}\r\n                            endDate={endAsk_date}\r\n                            dateFormat=\"yyyy.MM.dd\"\r\n                        />&nbsp;\r\n                        ~ &nbsp;\r\n                        <DatePicker\r\n                            locale=\"ko\"\r\n                            selected={endAsk_date.setHours(9, 0, 0, 0)}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                            onChange={date => setEndAsk_date(date)}\r\n                            selectsEnd\r\n                            startDate={startAsk_date}\r\n                            endDate={endAsk_date}\r\n                            minDate={startAsk_date}\r\n                            dateFormat=\"yyyy.MM.dd\"\r\n                        />\r\n                    </div>\r\n                    {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n\r\n                    <div id=\"searchArea\">\r\n                        문의구분\r\n                        &nbsp;\r\n                        <select multiple={false} onChange={onAsk_tpHandler} value={ask_tp}>\r\n\r\n                            {ask_tps.map(item => (\r\n                                <option key={item.key} value={item.key}>{item.value}</option>\r\n                            ))}\r\n\r\n                        </select>\r\n                        &nbsp;\r\n\r\n                        문의자명\r\n                        &nbsp;\r\n                        <input type=\"text\" value={ask_name} id=\"ask_name\" name=\"ask_name\" size=\"5\"\r\n                               onChange={onAsk_nameHandler}/>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button type=\"submit\" onClick={onHandleFormSubmit}>조회</button>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <table id=\"btn\">\r\n                    <thead>\r\n                    <tr>\r\n                        <td id=\"btd\">\r\n                            <input type=\"button\" className='loginBtn' onClick={onHandleClickOpen} value=\"상담등록\"/>\r\n                            <input type=\"button\" className='deleteBtn' hidden={!checkForDelete} onClick={onDeleteHandle}\r\n                                   value=\"삭제하기\"/>\r\n                            <input type=\"button\" className='backBtn' hidden={checkForDelete} onClick={onBackHandle}\r\n                                   value=\"되돌리기\"/>\r\n                            <input type=\"button\" className='delete' onClick={onHandleDelete} value=\"삭제\"\r\n                                   hidden={checkForDelete}/>\r\n                                   <Dialog\r\n                                        open={deleteAskOpen}\r\n                                        onClose={onHandleDelete}>\r\n                                        <DialogTitle id=\"alert-dialog-title\">{\"체크한 행을 삭제할까요?\"}</DialogTitle>\r\n                                        <DialogActions>\r\n                                          <Button onClick={deleteHandle} color=\"primary\">\r\n                                           네\r\n                                          </Button>\r\n                                          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                                            아니오\r\n                                          </Button>\r\n                                        </DialogActions>\r\n                                      </Dialog>\r\n                        </td>\r\n                        <td id=\"btd2\"><input type=\"button\" value='엑셀다운로드'/></td>\r\n                    </tr>\r\n                    </thead>\r\n                </table>\r\n                {/* 모달창 시작*/}\r\n                <Dialog\r\n                    maxWidth={\"lg\"}\r\n                    open={open}>\r\n                    <S010100140 dataForm={\"U\"} num={numForDetail}/>\r\n                    <DialogActions>\r\n                        <input type=\"button\" onClick={onDetailHandleClickClose} color=\"primary\" value='닫기'/>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* // 모달창 끝 */}\r\n\r\n\r\n                {/* 모달창 시작*/}\r\n                <Dialog\r\n                    maxWidth={\"lg\"}\r\n                    open={storeOpen}\r\n                >\r\n                    <S010100140 dataForm={data} num={numForDetail}/>\r\n                    <DialogActions>\r\n                        <input type=\"button\" onClick={onHandleClickClose} color=\"primary\" value='닫기'/>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* // 모달창 끝 */}\r\n\r\n                <table id=\"list\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th colSpan='2' id='chkWidth' hidden={checkForDelete}>No</th>\r\n                        <th id='chkWidth' hidden={!checkForDelete}>No</th>\r\n                        <th>문의 구분</th>\r\n                        <th>문의일자</th>\r\n                        <th>문의방법</th>\r\n                        <th>문의자명</th>\r\n                        <th>연락처</th>\r\n                        <th>접근경로</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {currentPosts}\r\n                    </tbody>\r\n              </table>\r\n                <Pagination postsPerPage={postsPerPage} totalPosts={s010100130R.length} paginate={paginate}/>\r\n\r\n            </form>\r\n\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100130;","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100050.js",["198","199"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './css/S010100050.css';\r\nimport S010100010 from './S010100010';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\n//모달창 라이브러리 끝-->\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\n\r\nfunction S010100050(props) {\r\n\r\n    const [detailAllInfo,setDetailAllInfo] = useState([])\r\n    const [open, setOpen] = React.useState(false);\r\n    const [numForDetailCModal,setNumForDetailCModal] = useState('')\r\n\r\n    //회원정보\r\n    const [detailMemberNm, setDetailMemberNm] = useState(\"\")\r\n    const [detailRegNo,setDetailRegNo] = useState(\"\")\r\n    const [detailMemberTp, setDetailMemberTp] = useState([])\r\n    const [detailCheckoutDate, setDetailCheckoutDate] = useState(\"\")\r\n    const [detailName, setDetailName] = useState(\"\")\r\n    const [detailEmpHp, setDetailEmpHp] = useState(\"\")\r\n    const [detailEmpEmail, setDetailEmpEmail] = useState(\"\")\r\n    const [detailAddress, setDetailAddress] = useState(\"\")\r\n\r\n    // const [detailContractId, setDetailContractId] = useState(\"\")\r\n    // const [detailContractDate, setDetailContractDate] = useState(\"\")\r\n    // const [detailContractTp, setDetailContractTp] = useState(\"\")\r\n    // const [detailContractTerm, setDetailContractTerm] = useState(\"\")\r\n    // const [detailMemberSt, setDetailMemberSt] = useState(\"\")\r\n    // const [detailPayDate, setDetailPayDate] = useState(\"\")\r\n    // const [detailContractMoney, setDetailContractMoney] = useState(\"\")\r\n    // const [detailContractEndFlag, setDetailContractEndFlag] = useState(\"\")\r\n    \r\n\r\n\r\n    const dataNum = props.dataNum;\r\n    //console.log('dataNum',dataNum);\r\n\r\n\r\n    useEffect(() => {\r\n        axios.post(`/api/s010100050/detailMember_by_id?id=${dataNum}&type=single`)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log('detailMembr',response.data);\r\n        \r\n                const modalMemberNm = response.data.rows[0].MEMBER_NM;\r\n                const modalRegNo = response.data.rows[0].REG_NO;\r\n                const modalMemberTp = response.data.rows[0].MEMBER_TP;\r\n                const modalName = response.data.rows[0].NAME;\r\n                const modalEmpHp = response.data.rows[0].EMP_HP;\r\n                const modalEmpemail = response.data.rows[0].EMP_EMAIL;\r\n                const modalAddress = response.data.rows[0].ADDRESS;\r\n                //console.log(modalAddress);\r\n                setDetailAllInfo(response.data.rows);\r\n\r\n                setDetailMemberNm(modalMemberNm);\r\n                setDetailRegNo(modalRegNo);\r\n                setDetailMemberTp(modalMemberTp);\r\n                setDetailName(modalName);\r\n                setDetailEmpHp(modalEmpHp);\r\n                setDetailEmpEmail(modalEmpemail);\r\n                setDetailAddress(modalAddress);            \r\n            \r\n            }else{\r\n                alert(\"상세정보 데이터를 불러오는데 실패하였습니다.\");\r\n            }\r\n        })\r\n    },[])\r\n\r\n\r\n\r\n    const onDetailMemberNmHandler = (event) => {\r\n        setDetailMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailRegNoHandler = (event) => {\r\n        setDetailRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailMemberTpHandler = (event) => {\r\n        setDetailMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailCheckoutDateHandler = (event) => {\r\n        setDetailCheckoutDate(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailNameHandler = (event) => {\r\n        setDetailName(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailEmpHpHandler = (event) => {\r\n        setDetailEmpHp(event.currentTarget.value);\r\n    }\r\n    \r\n    const onDetailEmpEmailHandler = (event) => {\r\n        setDetailEmpEmail(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailAddressHandler = (event) => {\r\n        setDetailAddress(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onSubmitDetailHandler = (event) => {\r\n        \r\n    }\r\n\r\n   \r\n    const onDetailClickOpen = (event) => {\r\n        num = event.target.innerHTML;\r\n        rNum = parseInt(num);\r\n        setNumForDetailCModal(rNum);\r\n        console.log(rNum);\r\n        setOpen(true);\r\n    }\r\n\r\n    const onDetailClickClose = (event) => {\r\n        setOpen(false);\r\n    }\r\n\r\n\r\n    const s010100050 = detailAllInfo.map((detailAllInfo,index) => {\r\n        return(\r\n            <tr>\r\n                <td onClick={onDetailClickOpen} id={detailAllInfo.CONTRACT_ID}>{detailAllInfo.CONTRACT_ID}</td>\r\n                <td>{detailAllInfo.CONTRACT_DATE}</td>\r\n                <td>{detailAllInfo.CONTRACT_TP}</td>\r\n                <td>{detailAllInfo.CONTRACT_TP}</td>\r\n                <td>{detailAllInfo.CONTRACT_TERM}</td>\r\n                <td>{detailAllInfo.MEMBER_ST}</td>\r\n                <td>{detailAllInfo.PAY_DATE}</td>\r\n                <td>{detailAllInfo.CONTRACT_MONEY}</td>\r\n                <td>{detailAllInfo.CONTRACT_TP}</td>\r\n                <td>{detailAllInfo.END_FLAG}</td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n                <form style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', width: '100%' }}\r\n                    onSubmit={onSubmitDetailHandler}\r\n                >\r\n\r\n                    {/* 회원정보란 */}\r\n                    <h6>회원정보</h6>\r\n\r\n                    <table>\r\n                        <tr>\r\n                            <th>회원명</th>\r\n                            <td><input type=\"text\" value={detailMemberNm} id=\"detailMemberNm\" name=\"detailMemberNm\" size=\"5\"\r\n                                    onChange={onDetailMemberNmHandler} disabled = {props.dataForm === 'U'}/></td>\r\n                            <th>사업자번호</th>\r\n                            <td> <input type=\"text\" value={detailRegNo} id=\"detailRegNo\" name=\"detailRegNo\" size=\"5\"\r\n                                    onChange={onDetailRegNoHandler} disabled = {props.dataForm === 'U'}/></td>\r\n                            <th>회원구분</th>\r\n                            <td> <input type=\"text\" value={detailMemberTp} id=\"detailMemberTp\" name=\"detailMemberTp\" size=\"5\"\r\n                                    onChange={onDetailMemberTpHandler} disabled = {props.dataForm === 'U'}/></td>\r\n                            <th>퇴실일자</th>\r\n                            <td> <input type=\"text\" value={detailCheckoutDate} id=\"detailCheckoutDate\" name=\"detailCheckoutDate\" size=\"5\"\r\n                                    onChange={onDetailCheckoutDateHandler} disabled = {props.dataForm === 'U'}/></td>\r\n\r\n                        </tr>\r\n                      \r\n\r\n\r\n                        <tr>\r\n                            <th rowSpan=\"2\">대표자 </th>\r\n                            \r\n                                <th>성명</th>\r\n                                <td>\r\n                                    <input type=\"text\" value={detailName} id=\"detailName\" name=\"detailName\" size=\"5\"\r\n                                        onChange={onDetailNameHandler} disabled = {props.dataForm === 'U'}/></td>\r\n\r\n                                <th>연락처</th>\r\n                                <td colSpan =\"2\">\r\n                                    <input type=\"text\" value={detailEmpHp} id=\"detailEmpHp\" name=\"detailEmpHp\" size=\"3\"\r\n                                        onChange={onDetailEmpHpHandler} disabled = {props.dataForm === 'U'}/>\r\n                                </td>\r\n                                <th>E-mail</th>\r\n                                <td>\r\n                                    <input type=\"text\" value={detailEmpEmail} id=\"detailEmpEmail\" name=\"detailEmpEmail\" size=\"3\"\r\n                                        onChange={onDetailEmpEmailHandler} disabled = {props.dataForm === 'U'}/>\r\n                                </td>\r\n                            \r\n                        </tr>\r\n                        <th>주소</th>\r\n                            <td colSpan = \"6\" >\r\n                                <input type=\"text\" value={detailAddress} id=\"detailAddress\" name=\"detailAddress\" size=\"5\"\r\n                                    onChange={onDetailAddressHandler} disabled = {props.dataForm === 'U'}/>\r\n                        </td>\r\n                        <tr>\r\n                            <th rowSpan=\"2\">첨부파일</th>\r\n                            <td colSpan=\"7\">대표자신분증</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan=\"7\">사업자등록증</td>\r\n                        </tr>\r\n                   \r\n                    </table>\r\n\r\n                    <h6>계약정보</h6>\r\n                        <table>\r\n                            <tr>\r\n                                <th>계약ID</th>\r\n                                <th>계약일자</th>\r\n                                <th>계약상품</th>\r\n                                <th>호실</th>\r\n                                <th>계약기간</th>\r\n                                <th>계약상태</th>\r\n                                <th>매월입금일</th>\r\n                                <th>월회비</th>\r\n                                <th>사물함</th>\r\n                                <th>종료여부</th>\r\n                            </tr>\r\n                                {s010100050}\r\n                        </table>\r\n                            <Dialog\r\n                            maxWidth = {\"lg\"}\r\n                            //fullWidth = {true}\r\n                            open={open}\r\n                            onClose={onDetailClickClose}>\r\n                                    <S010100010 dataNum ={numForDetailCModal} cDataForm={\"I\"}/>\r\n                                <DialogActions>\r\n                                <input type = \"button\" onClick={onDetailClickClose} color=\"primary\" value = '닫기'/>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n                  \r\n                    <div>\r\n                        <button id=\"btn-center\" type = \"submit\">신규계약</button>\r\n                        {/* <button>닫기</button> */}\r\n                    </div>\r\n                \r\n                </form>\r\n    \r\n    );\r\n\r\n}\r\n\r\nexport default S010100050;","C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100150.js",[],"C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100060.js",[],"C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\S010100090.js",[],"C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\Routes\\Routes.js",[],"C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\Navbar.js",[],"C:\\Users\\team_\\Desktop\\mysqltest - 복사본\\src\\utils\\Pagination.js",["200"],"import React from 'react';\r\n\r\nconst Pagination = ({postsPerPage,totalPosts,paginate}) =>{\r\n    const pageNumbers = [];\r\n\r\n    for(let i = 1;i <= Math.ceil(totalPosts/postsPerPage);i++){\r\n        pageNumbers.push(i);\r\n\r\n    }\r\n    return(\r\n        <nav>\r\n            <ul className = \"pagination\" style = {{ margin:0, padding:0}} >\r\n                {pageNumbers.map(number =>(\r\n                    <li key = {number} className = \"pageItem\" style = {{float:\"left\",  margin:0, padding:0}}>\r\n                        <a onClick={()=>paginate(number)} classname = \"pageLink\">\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Pagination;",{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":1,"column":16,"nodeType":"207","messageId":"208","endLine":1,"endColumn":25},{"ruleId":"205","severity":1,"message":"209","line":6,"column":10,"nodeType":"207","messageId":"208","endLine":6,"endColumn":14},{"ruleId":"205","severity":1,"message":"210","line":2,"column":8,"nodeType":"207","messageId":"208","endLine":2,"endColumn":12},{"ruleId":"205","severity":1,"message":"211","line":17,"column":5,"nodeType":"207","messageId":"208","endLine":17,"endColumn":15},{"ruleId":"201","replacedBy":"212"},{"ruleId":"203","replacedBy":"213"},{"ruleId":"205","severity":1,"message":"214","line":6,"column":18,"nodeType":"207","messageId":"208","endLine":6,"endColumn":27},{"ruleId":"215","severity":1,"message":"216","line":11,"column":1,"nodeType":"217","endLine":33,"endColumn":2},{"ruleId":"205","severity":1,"message":"214","line":1,"column":26,"nodeType":"207","messageId":"208","endLine":1,"endColumn":35},{"ruleId":"205","severity":1,"message":"218","line":3,"column":8,"nodeType":"207","messageId":"208","endLine":3,"endColumn":13},{"ruleId":"205","severity":1,"message":"219","line":6,"column":8,"nodeType":"207","messageId":"208","endLine":6,"endColumn":18},{"ruleId":"205","severity":1,"message":"220","line":11,"column":5,"nodeType":"207","messageId":"208","endLine":11,"endColumn":14},{"ruleId":"205","severity":1,"message":"221","line":12,"column":5,"nodeType":"207","messageId":"208","endLine":12,"endColumn":12},{"ruleId":"205","severity":1,"message":"222","line":13,"column":5,"nodeType":"207","messageId":"208","endLine":13,"endColumn":10},{"ruleId":"205","severity":1,"message":"211","line":15,"column":5,"nodeType":"207","messageId":"208","endLine":15,"endColumn":15},{"ruleId":"205","severity":1,"message":"223","line":25,"column":20,"nodeType":"207","messageId":"208","endLine":25,"endColumn":31},{"ruleId":"205","severity":1,"message":"224","line":26,"column":16,"nodeType":"207","messageId":"208","endLine":26,"endColumn":23},{"ruleId":"205","severity":1,"message":"225","line":27,"column":21,"nodeType":"207","messageId":"208","endLine":27,"endColumn":33},{"ruleId":"205","severity":1,"message":"226","line":28,"column":20,"nodeType":"207","messageId":"208","endLine":28,"endColumn":31},{"ruleId":"205","severity":1,"message":"227","line":29,"column":21,"nodeType":"207","messageId":"208","endLine":29,"endColumn":33},{"ruleId":"205","severity":1,"message":"228","line":30,"column":18,"nodeType":"207","messageId":"208","endLine":30,"endColumn":27},{"ruleId":"205","severity":1,"message":"206","line":1,"column":16,"nodeType":"207","messageId":"208","endLine":1,"endColumn":25},{"ruleId":"205","severity":1,"message":"206","line":1,"column":16,"nodeType":"207","messageId":"208","endLine":1,"endColumn":25},{"ruleId":"201","replacedBy":"229"},{"ruleId":"203","replacedBy":"230"},{"ruleId":"205","severity":1,"message":"210","line":3,"column":8,"nodeType":"207","messageId":"208","endLine":3,"endColumn":12},{"ruleId":"205","severity":1,"message":"211","line":18,"column":5,"nodeType":"207","messageId":"208","endLine":18,"endColumn":15},{"ruleId":"231","severity":2,"message":"232","line":24,"column":39,"nodeType":"207","endLine":24,"endColumn":47},{"ruleId":"231","severity":2,"message":"232","line":25,"column":36,"nodeType":"207","endLine":25,"endColumn":44},{"ruleId":"231","severity":2,"message":"232","line":26,"column":32,"nodeType":"207","endLine":26,"endColumn":40},{"ruleId":"231","severity":2,"message":"233","line":29,"column":9,"nodeType":"207","endLine":29,"endColumn":18},{"ruleId":"231","severity":2,"message":"233","line":55,"column":9,"nodeType":"207","endLine":55,"endColumn":18},{"ruleId":"231","severity":2,"message":"233","line":78,"column":9,"nodeType":"207","endLine":78,"endColumn":18},{"ruleId":"231","severity":2,"message":"232","line":103,"column":39,"nodeType":"207","endLine":103,"endColumn":47},{"ruleId":"231","severity":2,"message":"232","line":108,"column":42,"nodeType":"207","endLine":108,"endColumn":50},{"ruleId":"231","severity":2,"message":"232","line":109,"column":38,"nodeType":"207","endLine":109,"endColumn":46},{"ruleId":"231","severity":2,"message":"232","line":110,"column":34,"nodeType":"207","endLine":110,"endColumn":42},{"ruleId":"234","severity":1,"message":"235","line":58,"column":15,"nodeType":"236","endLine":58,"endColumn":17,"suggestions":"237"},{"ruleId":"234","severity":1,"message":"238","line":81,"column":7,"nodeType":"236","endLine":81,"endColumn":9,"suggestions":"239"},{"ruleId":"240","severity":1,"message":"241","line":107,"column":17,"nodeType":"242","messageId":"243","endLine":111,"endColumn":18},{"ruleId":"244","severity":1,"message":"245","line":120,"column":9,"nodeType":"246","messageId":"247","endLine":121,"endColumn":32},{"ruleId":"205","severity":1,"message":"248","line":129,"column":12,"nodeType":"207","messageId":"208","endLine":129,"endColumn":21},{"ruleId":"205","severity":1,"message":"249","line":129,"column":23,"nodeType":"207","messageId":"208","endLine":129,"endColumn":35},{"ruleId":"205","severity":1,"message":"250","line":165,"column":11,"nodeType":"207","messageId":"208","endLine":165,"endColumn":26},{"ruleId":"251","severity":1,"message":"252","line":203,"column":44,"nodeType":"253","messageId":"254","endLine":203,"endColumn":46},{"ruleId":"251","severity":1,"message":"252","line":208,"column":54,"nodeType":"253","messageId":"254","endLine":208,"endColumn":56},{"ruleId":"251","severity":1,"message":"252","line":215,"column":50,"nodeType":"253","messageId":"254","endLine":215,"endColumn":52},{"ruleId":"205","severity":1,"message":"255","line":1,"column":16,"nodeType":"207","messageId":"208","endLine":1,"endColumn":24},{"ruleId":"205","severity":1,"message":"256","line":57,"column":12,"nodeType":"207","messageId":"208","endLine":57,"endColumn":22},{"ruleId":"205","severity":1,"message":"257","line":57,"column":24,"nodeType":"207","messageId":"208","endLine":57,"endColumn":37},{"ruleId":"205","severity":1,"message":"258","line":84,"column":31,"nodeType":"207","messageId":"208","endLine":84,"endColumn":45},{"ruleId":"205","severity":1,"message":"259","line":89,"column":31,"nodeType":"207","messageId":"208","endLine":89,"endColumn":49},{"ruleId":"234","severity":1,"message":"260","line":120,"column":8,"nodeType":"236","endLine":120,"endColumn":10,"suggestions":"261"},{"ruleId":"251","severity":1,"message":"252","line":304,"column":44,"nodeType":"253","messageId":"254","endLine":304,"endColumn":46},{"ruleId":"251","severity":1,"message":"252","line":309,"column":46,"nodeType":"253","messageId":"254","endLine":309,"endColumn":48},{"ruleId":"251","severity":1,"message":"252","line":309,"column":90,"nodeType":"253","messageId":"254","endLine":309,"endColumn":92},{"ruleId":"251","severity":1,"message":"252","line":309,"column":132,"nodeType":"253","messageId":"254","endLine":309,"endColumn":134},{"ruleId":"251","severity":1,"message":"252","line":314,"column":46,"nodeType":"253","messageId":"254","endLine":314,"endColumn":48},{"ruleId":"251","severity":1,"message":"252","line":314,"column":94,"nodeType":"253","messageId":"254","endLine":314,"endColumn":96},{"ruleId":"251","severity":1,"message":"252","line":319,"column":46,"nodeType":"253","messageId":"254","endLine":319,"endColumn":48},{"ruleId":"251","severity":1,"message":"252","line":324,"column":52,"nodeType":"253","messageId":"254","endLine":324,"endColumn":54},{"ruleId":"251","severity":1,"message":"252","line":329,"column":50,"nodeType":"253","messageId":"254","endLine":329,"endColumn":52},{"ruleId":"251","severity":1,"message":"252","line":334,"column":40,"nodeType":"253","messageId":"254","endLine":334,"endColumn":42},{"ruleId":"251","severity":1,"message":"252","line":339,"column":44,"nodeType":"253","messageId":"254","endLine":339,"endColumn":46},{"ruleId":"251","severity":1,"message":"252","line":344,"column":52,"nodeType":"253","messageId":"254","endLine":344,"endColumn":54},{"ruleId":"251","severity":1,"message":"252","line":349,"column":52,"nodeType":"253","messageId":"254","endLine":349,"endColumn":54},{"ruleId":"251","severity":1,"message":"252","line":353,"column":50,"nodeType":"253","messageId":"254","endLine":353,"endColumn":52},{"ruleId":"205","severity":1,"message":"219","line":19,"column":8,"nodeType":"207","messageId":"208","endLine":19,"endColumn":18},{"ruleId":"205","severity":1,"message":"262","line":31,"column":5,"nodeType":"207","messageId":"208","endLine":31,"endColumn":13},{"ruleId":"205","severity":1,"message":"263","line":46,"column":25,"nodeType":"207","messageId":"208","endLine":46,"endColumn":40},{"ruleId":"205","severity":1,"message":"264","line":9,"column":8,"nodeType":"207","messageId":"208","endLine":9,"endColumn":14},{"ruleId":"234","severity":1,"message":"265","line":74,"column":7,"nodeType":"236","endLine":74,"endColumn":9,"suggestions":"266"},{"ruleId":"267","severity":1,"message":"268","line":15,"column":25,"nodeType":"269","endLine":15,"endColumn":82},"no-native-reassign",["270"],"no-negated-in-lhs",["271"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Main' is defined but never used.","'registNums' is assigned a value but never used.",["270"],["271"],"'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Axios' is defined but never used.","'DatePicker' is defined but never used.","'RoomTypes' is assigned a value but never used.","'Methods' is assigned a value but never used.","'Paths' is assigned a value but never used.","'setUserName' is assigned a value but never used.","'setBnum' is assigned a value but never used.","'setOwnerName' is assigned a value but never used.","'setUserSort' is assigned a value but never used.","'setEndStatus' is assigned a value but never used.","'setStatus' is assigned a value but never used.",["270"],["271"],"react-hooks/rules-of-hooks","React Hook \"useState\" is called in function \"s010100140\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","React Hook \"useEffect\" is called in function \"s010100140\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.dataForm' and 'rNum'. Either include them or remove the dependency array.","ArrayExpression",["272"],"React Hook useEffect has missing dependencies: 'getAccessPathLov', 'getAskMethodLov', and 'getContractTpLov'. Either include them or remove the dependency array.",["273"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'startDate' is assigned a value but never used.","'setStartDate' is assigned a value but never used.","'onChangeHandler' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Fragment' is defined but never used.","'isPostOpen' is assigned a value but never used.","'setIsPostOpen' is assigned a value but never used.","'modalCMemberSt' is assigned a value but never used.","'modalCContractDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.cDataForm' and 'rNum'. Either include them or remove the dependency array.",["274"],"'dataForm' is assigned a value but never used.","'setPostsPerPage' is assigned a value but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'dataNum'. Either include it or remove the dependency array.",["275"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},"Update the dependencies array to be: [props.dataForm, rNum]",{"range":"284","text":"285"},"Update the dependencies array to be: [getAccessPathLov, getAskMethodLov, getContractTpLov]",{"range":"286","text":"287"},"Update the dependencies array to be: [props.cDataForm, rNum]",{"range":"288","text":"289"},"Update the dependencies array to be: [dataNum]",{"range":"290","text":"291"},[2254,2256],"[props.dataForm, rNum]",[2962,2964],"[getAccessPathLov, getAskMethodLov, getContractTpLov]",[5149,5151],"[props.cDataForm, rNum]",[3040,3042],"[dataNum]"]