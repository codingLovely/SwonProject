[{"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js":"1","C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js":"2","C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js":"3","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js":"4","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js":"5","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js":"6","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js":"7","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js":"8","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js":"9","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js":"10","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js":"11","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js":"12","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\index.js":"13","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\App.js":"14","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\reportWebVitals.js":"15","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Routes\\Routes.js":"16","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100010.js":"17","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100090.js":"18","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100040.js":"19","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100060.js":"20","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100130.js":"21","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100050.js":"22","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Navbar.js":"23","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100150.js":"24","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100140.js":"25","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Pagination.js":"26","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100070.js":"27","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Table.js":"28"},{"size":555,"mtime":1609727657789,"results":"29","hashOfConfig":"30"},{"size":240,"mtime":1609727648266,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"32","hashOfConfig":"30"},{"size":11524,"mtime":1609829204925,"results":"33","hashOfConfig":"30"},{"size":1055,"mtime":1609833591029,"results":"34","hashOfConfig":"30"},{"size":8135,"mtime":1609830177180,"results":"35","hashOfConfig":"30"},{"size":2082,"mtime":1609828498424,"results":"36","hashOfConfig":"30"},{"size":994,"mtime":1609727352401,"results":"37","hashOfConfig":"30"},{"size":1306,"mtime":1609834092417,"results":"38","hashOfConfig":"30"},{"size":4553,"mtime":1609836098390,"results":"39","hashOfConfig":"30"},{"size":4356,"mtime":1609833363720,"results":"40","hashOfConfig":"30"},{"size":5135,"mtime":1609835439756,"results":"41","hashOfConfig":"30"},{"size":513,"mtime":1611243681610,"results":"42","hashOfConfig":"43"},{"size":194,"mtime":1611382711135,"results":"44","hashOfConfig":"43"},{"size":362,"mtime":499162500000,"results":"45","hashOfConfig":"43"},{"size":1584,"mtime":1612398310953,"results":"46","hashOfConfig":"43"},{"size":62478,"mtime":1612402540866,"results":"47","hashOfConfig":"43"},{"size":5560,"mtime":1611029744956,"results":"48","hashOfConfig":"43"},{"size":13763,"mtime":1612442301941,"results":"49","hashOfConfig":"43"},{"size":10282,"mtime":1612335254158,"results":"50","hashOfConfig":"43"},{"size":16436,"mtime":1612333492678,"results":"51","hashOfConfig":"43"},{"size":19663,"mtime":1612444262215,"results":"52","hashOfConfig":"43"},{"size":1142,"mtime":1611024681714,"results":"53","hashOfConfig":"43"},{"size":1860,"mtime":1611029762477,"results":"54","hashOfConfig":"43"},{"size":12924,"mtime":1611931762197,"results":"55","hashOfConfig":"43"},{"size":757,"mtime":1612192952217,"results":"56","hashOfConfig":"43"},{"size":15242,"mtime":1612453259889,"results":"57","hashOfConfig":"43"},{"size":1922,"mtime":1611984088776,"results":"58","hashOfConfig":"43"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"2g9vyx",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"61"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"61"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"61"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"61"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"61"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1pgckxh",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"94"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"94"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js",[],["131","132"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js",["133","134"],"import React,{ Component, Fragment,useEffect,useState } from 'react';\r\nimport './Counseling.css';\r\nimport Main from'../Main/Main.js';\r\nimport axios from \"axios\";\r\nimport CounselStatus from './CounselStatus';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n//모달창 라이브러리 끝-->\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\nvar rNum = '';\r\nvar Rnum = 0;\r\n\r\n\r\nvar Methods = []\r\n\r\nfunction Counseling (props) {\r\n\r\n    const[ConsultRegists, setConsultRegists] = useState([])\r\n\r\n    useEffect(()=>{\r\n        \r\n        axios.post('/api/register/registers')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    console.log(response.data.rows)\r\n                    setConsultRegists(response.data.rows)\r\n                }else{ \r\n                    alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n\r\n    },[])\r\n    \r\n    const[method, setMethod]=useState([])\r\n    \r\n    useEffect(()=>{\r\n        axios.post('/api/register/insertMethod')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log('insertMethod',response.data);\r\n                let arr = [{value: '전체', text: '전체' }]\r\n\r\n                response.data.rows.map((data) => \r\n                    arr.push({\r\n                    value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                }));\r\n                \r\n                Methods=arr;\r\n\r\n                console.log('insertMethodArr',arr);\r\n            }else{\r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n            }\r\n        })\r\n\r\n        \r\n        \r\n    },[])\r\n\r\n    //<!--모달창 속성 및 이벤트 \r\n    const [open, setOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    const [CRegists,setCRegists] = useState({});\r\n\r\n\r\n\r\n    //상담등록 모달\r\n    const onhandleClickOpen = () => {\r\n        setStoreOpen(true); \r\n     \r\n     };  \r\n\r\n                //상담등록 저장버튼이벤트\r\n                // const onhandleStoreClose = () => {\r\n                //     setOpen(false);\r\n                // }\r\n            \r\n     const onhandleClose = (event) => {\r\n          \r\n        axios.post('/api/register/registers')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log(response.data.rows)\r\n                setConsultRegists(response.data.rows)\r\n            }else{ \r\n                alert(\"상담등록 페이지 가져오기를 실패하였습니다.\")\r\n            }\r\n\r\n        })\r\n\r\n        setStoreOpen(false);\r\n       };\r\n    //상담등록 모달 끝\r\n\r\n    //상세보기 모달\r\n    const handleClickOpen = (e) => {\r\n       setOpen(true); \r\n       rNum = e.target.innerHTML\r\n       Rnum= parseInt(rNum);\r\n       //console.log(Rnum)\r\n\r\n       axios.get(`/api/register/register_by_id?id=${Rnum}&type=single`) \r\n       .then(response => {\r\n           if(response.data.success){\r\n               console.log(response.data)\r\n               setCRegists(response.data.rows[0])\r\n               //console.log(response.data.consultRegistInfo.num)\r\n           }else{\r\n               alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n           }\r\n\r\n       })\r\n    };  \r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n      //상세보기 모달 끝 \r\n    //모달창 속성 및 이벤트 끝-->\r\n\r\n\r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n\r\n        // if(method.valueOf('전체') ||!startDate||!endDate||!searchName){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n         const body = {\r\n            startDate,\r\n            searchName,\r\n            method,\r\n            endDate\r\n        }\r\n        \r\n        //console.log(body);\r\n        \r\n        axios.post(\"/api/register/search\",body)\r\n        .then(response => {\r\n            if(response?.data?.success){\r\n                console.log('search',response.data.rows);\r\n                setConsultRegists(response.data.rows);\r\n            }else{\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    \r\n\r\n\r\n    const[searchName, setSearchName] = useState(\"\")\r\n\r\n    const MethodChangeHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const nameSearchHandler=(event)=>{\r\n        setSearchName(event.currentTarget.value);\r\n    }\r\n\r\n    //console.log('ConsultRegists',ConsultRegists);\r\n\r\n    const resultTable = ConsultRegists.map((ConsultRegists,index)=>{\r\n\r\n        return<tr>\r\n                <td name =\"cname\" variant=\"outlined\" color=\"primary\" onClick={handleClickOpen} id={ConsultRegists.num}><u>{ConsultRegists.num}\r\n                </u></td>\r\n                {/* 모달창 시작 */}\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{CRegists.cname+\"님의 상담내용 입니다.\"}</DialogTitle>\r\n                    <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {CRegists.content}\r\n                    </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                        확인\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* 모달창 끝*/}\r\n\r\n                <td>{ConsultRegists.roomtype}</td>\r\n                <td>{ConsultRegists.counseldate}</td>\r\n                <td>{ConsultRegists.method}</td>\r\n                <td>{ConsultRegists.cname}</td>\r\n                <td>{ConsultRegists.phone}</td>\r\n                <td>{ConsultRegists.path}</td>\r\n                \r\n            </tr>\r\n    })\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                \r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>상담현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                        문의일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        문의구분 \r\n                        <select onChange ={MethodChangeHandler} value ={method}>   \r\n                        \r\n                            {Methods.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                    \r\n                        </select>\r\n                        &nbsp; \r\n\r\n                        문의자명\r\n                         <input type=\"text\" value = {searchName} id=\"searchlName\" name=\"searchName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onhandleClickOpen} >상담등록</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    {/* 모달창 시작 --> 504에러 */}\r\n                        <Dialog\r\n                            open={storeOpen}\r\n                            onClose={onhandleClose}\r\n                            aria-labelledby=\"alert-dialog-title\"\r\n                            aria-describedby=\"alert-dialog-description\"\r\n                        >\r\n                            <DialogTitle id=\"alert-dialog-title\"><h1>상담등록</h1></DialogTitle>\r\n                            <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                                 <CounselStatus/>\r\n                            </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                            {/* <Button onClick={onhandleStoreClose} color=\"primary\" autoFocus>\r\n                                저장\r\n                            </Button> */}\r\n                            <Button onClick={onhandleClose} color=\"primary\">\r\n                                닫기\r\n                            </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                     {/* // 모달창 끝        */}\r\n\r\n                    \r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>No</th>\r\n                            <th>문의 구분</th>\r\n                            <th>문의일자</th>\r\n                            <th>문의방법</th>\r\n                            <th>문의자명</th>\r\n                            <th>연락처</th>\r\n                            <th>접근경로</th>\r\n                        </tr>\r\n\r\n                        \r\n                            {resultTable}\r\n                       \r\n\r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Counseling;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js",["135","136"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\nimport { addDays } from 'date-fns';\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nimport \"./CounselStatus.css\";\r\nregisterLocale(\"ko\", ko);\r\n\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction CounselStatus(props) {\r\n\r\n    //Lov(List of Value)를 데이터 베이스에서 가져오기 \r\n        //select\r\n        const[RoomType,setRoomType] = useState(1)\r\n        const[Method, setMethod] = useState(1)\r\n        const[Path, setPath] = useState(1)\r\n\r\n        //문의구분\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/roomType')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('roomType',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    RoomTypes = arr;\r\n\r\n                    //console.log('roomTypeArr',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n            \r\n            \r\n        },[])\r\n\r\n        //문의방법\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/methodA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('method',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Methods = arr;\r\n\r\n                    //console.log('method',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n\r\n        //접근경로\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/pathA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('Paths',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Paths = arr;\r\n\r\n                    //console.log('Paths',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n    //Lov끝    \r\n\r\n\r\n    \r\n    //datepicker속성 및 이벤트 시작\r\n    const [StartDate, setStartDate] = useState(new Date());\r\n    //datepicker속성 및 이벤트 끝\r\n    console.log(StartDate.getMonth()+1);\r\n    console.log(StartDate);\r\n    \r\n    const[CounselName, setCounselName] = useState(\"\")\r\n    const[UserPhone, setUserPhone] = useState(\"\")\r\n    const[Content, setContent] = useState(\"\")\r\n\r\n\r\n    const onNameHandler=(event)=>{\r\n        setCounselName(event.currentTarget.value);\r\n    }\r\n\r\n    const MethodHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const PathHandler=(event)=>{\r\n        setPath(event.currentTarget.value);\r\n    }\r\n\r\n    const onPhoneHandler=(event)=>{\r\n        setUserPhone(event.currentTarget.value);\r\n    }\r\n\r\n    const onContentHandler=(event)=>{\r\n        setContent(event.currentTarget.value);\r\n    }\r\n\r\n    const RoomTypeChangeHandler=(event)=>{\r\n        setRoomType(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n        //console.log(RoomType)\r\n    \r\n        // if(RoomType.valueOf('전체') ||!CounselName||Method.valueOf('전체')||Path.valueOf('전체')||!UserPhone||!Content){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n        \r\n        \r\n        //서버에 채운 값들을 request로 보낸다.\r\n        const body = {\r\n            roomtype: RoomType,\r\n            counseldate: StartDate,\r\n            cname: CounselName,\r\n            method: Method,\r\n            path: Path,\r\n            phone: UserPhone,\r\n            content: Content\r\n            \r\n        }\r\n        \r\n        \r\n        Axios.post(\"/api/register\",body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 등록되었습니다.')\r\n               // props.history.push('/counseling')\r\n            }else{\r\n                alert('등록에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          {/* <Main/>\r\n          <h1>상담등록</h1> */}\r\n          <table>\r\n            <tr>\r\n                <th>문의구분</th>\r\n                    <td>\r\n                        <select onChange ={RoomTypeChangeHandler} value ={RoomType}>   \r\n                        \r\n                            {RoomTypes.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                        \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의일자</th>\r\n                    <td>   \r\n                    <DatePicker\r\n                        locale=\"ko\"\r\n                        selected={StartDate}\r\n                        onChange={date => setStartDate(date)}\r\n                        minDate={new Date()}\r\n                        maxDate={addDays(new Date(), 0)}  \r\n                        dateFormat=\"yyyy.MM.dd (eee)\"\r\n                    />\r\n\r\n                    </td>\r\n                <th>문의자명</th>\r\n                    <td>\r\n                    <input type=\"text\" value = {CounselName}id=\"counselName\" name=\"counselName\" size = \"7\"\r\n                    onChange={onNameHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n            <tr>\r\n                <th>문의방법</th>\r\n                    <td>\r\n                        <select value={Method} onChange={MethodHandler} >\r\n                        {Methods.map(item=>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                        ))}\r\n                        </select>\r\n                    </td>\r\n                <th>접근경로</th>\r\n                    <td>\r\n                        <select value={Path} onChange={PathHandler} >\r\n                            {Paths.map(item =>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                            ))}\r\n                            \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의자연락처</th>\r\n                    <td>\r\n                    <input type = \"text\" value = {UserPhone}id = \"userPhone\" name = \"userPhone\" size = \"7\"\r\n                    onChange={onPhoneHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n\r\n            <tr>\r\n                <th>상담내용</th>\r\n                    <td colSpan=\"5\">\r\n                        <textarea rows =\"5\" cols = \"100\" value = {Content}id=\"content\" name = \"content\"\r\n                        onChange={onContentHandler}></textarea>\r\n                    </td>\r\n            </tr>\r\n          </table>\r\n          <div id = \"popbtn\"> \r\n            <button type = \"submit\">저장</button>\r\n            {/* <button>닫기</button> */}\r\n          </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n\r\nexport default CounselStatus;",["137","138"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js",["139"],"// import { Component, Fragment } from 'react';\r\n// import {useDispatch} from 'react-redux';\r\n//import {loginUser} from '../_actions/user_action';\r\nimport axios from 'axios';\r\nimport React,{Fragment} from 'react';\r\nimport {useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js'\r\n\r\n\r\nfunction LoginPage( props){\r\n  // const dispatch = useDispatch();\r\n\r\n  const [E_mal,setE_mal] = useState(\"\")\r\n  const [Password, setPassword] = useState(\"\")\r\n\r\n  const onEmailHandler = (event) => {\r\n    setE_mal(event.currentTarget.value)\r\n  }\r\n\r\n  const onPasswordHandler = (event) => {\r\n    setPassword(event.currentTarget.value)\r\n  }\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    let body = {\r\n        Email: E_mal,\r\n        PASSWORD: Password\r\n    }\r\n\r\n   axios.post('/api/users/login',body)\r\n        .then(response => {\r\n            if (response.data.loginResult) {\r\n                alert('로그인 되었습니다.')\r\n                //props.history.push('/counseling')\r\n                console.log(response.data.loginResult)\r\n            } else {\r\n                alert('아이디와 비밀번호를 확인하세요')\r\n            }\r\n        })\r\n      }\r\n\r\n    return (\r\n      <Fragment>\r\n          <Main/>\r\n          <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%',height:'50vh'}}>\r\n            <form style = {{display:'flex', flexDirection:'column'}}\r\n             onSubmit={onSubmitHandler}\r\n            >\r\n              \r\n                <label style={{fontFamily:'Jua',width:'180px'}}>Email</label>\r\n                <input style={{width:\"300px\"}} type = \"email\" value={E_mal} onChange={onEmailHandler} />\r\n                <label style={{fontFamily:'Jua'}}>Password</label>\r\n                <input style={{width:\"300px\"}} type = \"password\" value={Password} onChange={onPasswordHandler}/>\r\n                <br/>\r\n                <button type=\"submit\">Login</button>\r\n            \r\n            \r\n            </form>\r\n          </div>\r\n         \r\n          </Fragment>\r\n    )\r\n}\r\n\r\nexport default LoginPage","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js",["140"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Member from './Components/Member/Member';\r\nimport Counseling from './Components/Counseling/Counseling';\r\nimport CounselStatus from './Components/Counseling/CounselStatus';\r\nimport LoginPage from './Components/LoginPage/LoginPage';\r\nimport PaymentStatus from './Components/PaymentStatus/PaymentStatus';\r\nimport Swon from './Components/Staff/Swon';\r\nimport Main from './Components/Main/Main';\r\n\r\nexport default () => (\r\n  <Router>\r\n          {/* 메인 */}\r\n          <Route exact path = \"/\" component = {Main}></Route>\r\n\r\n\r\n          {/* 회원현황 */}\r\n          <Route exact path = \"/member\" component = {Member}></Route> \r\n          {/* 납부현황 */}\r\n          <Route path = \"/paymentStatus\" component = {PaymentStatus}></Route>\r\n          {/* 상담현황 */}\r\n          <Route exact path = \"/counseling\" component = {Counseling}></Route>\r\n          {/* 직원관리 */}\r\n          <Route exact path = \"/swon\" component = {Swon}></Route>\r\n          {/* 로그인/로그아웃*/}\r\n          <Route exact path = \"/login\" component = {LoginPage}></Route>\r\n\r\n\r\n\r\n          {/* 상담등록 */}\r\n          <Route exact path = \"/counselStatus\" component = {CounselStatus}></Route>\r\n  </Router>\r\n)\r\n\r\n","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js",["141","142","143","144","145","146","147","148","149","150","151","152","153"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\n\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction Member(props) {\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n      \r\n    }\r\n    const[userName,setUserName] = useState(\"\")\r\n    const[bnum,setBnum] = useState(\"\")\r\n    const[ownerName,setOwnerName] = useState(\"\")\r\n    const[userSort,setUserSort] = useState([])\r\n    const[endStatus,setEndStatus] = useState(\"\")\r\n    const[status,setStatus] = useState(\"\")\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          <Main/>\r\n          <h1>회원현황</h1>\r\n          <table >\r\n            <tr>\r\n                <th>회원명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {userName} id = \"userName\" name = \"userName\" size = \"7\"\r\n                        />\r\n                    </td>  \r\n                    {/* onChange={onPhoneHandler} */}\r\n                <th>사업자번호</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {bnum} id = \"bnum\" name = \"bnum\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>대표자명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {ownerName} id = \"ownerName\" name = \"ownerName\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>종류</th>\r\n                    <td>\r\n                        <select value ={endStatus}>  {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>상태</th>\r\n                    <td>\r\n                        <select value ={status}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                    <div > \r\n                        <button type = \"submit\">조회</button>\r\n                \r\n                    </div>\r\n                    </td>\r\n\r\n                \r\n            </tr>\r\n               \r\n            \r\n          </table>\r\n          <table>\r\n            <tr>\r\n                <td>\r\n                    <button>신규회원</button>\r\n                    <button>SNS</button>\r\n                    <button>메일전송</button>\r\n                    <button>엑셀다운로드</button>\r\n                </td>\r\n            </tr>\r\n          </table>\r\n          \r\n          <table>\r\n                <tr>\r\n                    <th>No</th>\r\n                    <th>문의 구분</th>\r\n                    <th>문의일자</th>\r\n                    <th>문의방법</th>\r\n                    <th>문의자명</th>\r\n                    <th>연락처</th>\r\n                    <th>접근경로</th>\r\n                </tr>\r\n          </table>\r\n\r\n      </form>\r\n\r\n      \r\n    );\r\n  }\r\n\r\n\r\nexport default Member;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js",["154"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction PaymentStatus (props) {\r\n\r\n    \r\n    const[userName, setUserName] = useState(\"\")\r\n    const[paymentStatus, setPaymentStatus]=useState([])\r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const nameSearchHandler=(event)=>{\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler=(event)=>{\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n    \r\n    const onPaymenthandler=()=>{\r\n        \r\n    }\r\n\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>고객납부현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                    납부예정일   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                        회원명\r\n                         <input type=\"text\" value = {userName} id=\"userName\" name=\"userName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp; \r\n\r\n                        납부여부\r\n                        <select onChange ={paymentStatusHandler} value ={paymentStatus}>   \r\n{/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                        </select>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onPaymenthandler}> 납부</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>No</th>\r\n                            <th>회원명</th>\r\n                            <th>납부예정일</th>\r\n                            <th>납부여부</th>\r\n                            <th>납부일자</th>\r\n                            <th>계약기간</th>\r\n                            <th>대표자</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default PaymentStatus;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js",["155"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction Swon (props) {\r\n\r\n    \r\n    const[staffName, setStaffName] = useState(\"\")\r\n    const[staffClass, setStaffClass] = useState([])\r\n    const[closeStatus, setCloseStatus] = useState([])\r\n    \r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const staffNameHandler=(event)=>{\r\n        setStaffName(event.currentTarget.value);\r\n    }\r\n\r\n    const staffClassHandler=(event)=>{\r\n        setStaffClass(event.currentTarget.value);\r\n    }\r\n    \r\n    const closeStatusHandler=(event)=>{\r\n        setCloseStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onRegistHandler = (event)=>{\r\n\r\n    }\r\n    const onModifyHandler = (event)=>{\r\n        \r\n    }\r\n    const onApprovalHandler = (event)=>{\r\n        \r\n    }\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>직원현황</h1>\r\n                    <div id = \"search\">\r\n\r\n                     성명\r\n                    <input type=\"text\" value = {staffName} id=\"staffName\" name=\"staffName\" size = \"5\"\r\n                    onChange={staffNameHandler}/>\r\n                    &nbsp; \r\n\r\n\r\n                    입사일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        직원구분\r\n                        <select onChange ={staffClassHandler} value ={staffClass}>  \r\n                    {/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                     \r\n                        </select>\r\n                        종료\r\n                        <select onChange ={closeStatusHandler} value ={closeStatus}>   \r\n                        </select>\r\n                        \r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onRegistHandler}> 등록</button> </td>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onModifyHandler}> 수정</button> </td>    \r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onApprovalHandler}> 승인</button> </td>                        \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>직번</th>\r\n                            <th>성명</th>\r\n                            <th>주민번호</th>\r\n                            <th>부서</th>\r\n                            <th>연락처</th>\r\n                            <th>E-mail</th>\r\n                            <th>직원구분</th>\r\n                            <th>승인여부</th>\r\n                            <th>직급</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Swon;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\index.js",[],["156","157"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\App.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Routes\\Routes.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100010.js",["158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185"],"import React, { useState, useEffect } from 'react';\r\nimport DaumPostcode from 'react-daum-postcode';\r\nimport axios from 'axios';\r\nimport { post } from 'axios';\r\nimport './css/S010100010.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from 'react-datepicker';\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale('ko', ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\nlet valueArr = [[], [], [], [], []];\r\nlet queryArr = [['MEMBER_TP', ''], ['CONTRACT_TP', 'ASK'], ['PAY_METHOD', '']];\r\nlet payDates = [];\r\n\r\nfunction S010100010(props) {\r\n    //console.log(props.params);\r\n\r\n    //회원정보\r\n    const [memberNm, setMemberNm] = useState('');\r\n    const [firstRegNo, setFisrtRegNo] = useState('');\r\n    const [secondRegNo, setSecondRegNo] = useState('');\r\n    const [thirdRegNo, setThirdRegNo] = useState('');\r\n    const [memberTp, setMemberTp] = useState('');\r\n    const [empIdName, setEmpIdName] = useState('');\r\n    const [firstEmpHp, setFirstEmpHp] = useState('');\r\n    const [secondEmpHp, setSecondEmpHp] = useState('');\r\n    const [thirdEmpHp, setThirdEmpHp] = useState('');\r\n    const [empEmailId, setEmpEmailId] = useState('');\r\n    const [domainAddress, setDomainAddress] = useState('');\r\n    const [zipcode, setZipcode] = useState('');\r\n    const [empAddress, setEmpAddress] = useState('');\r\n    const [empDetailAddress, setEmpDetailAddress] = useState('');\r\n\r\n\r\n    //계약정보\r\n    const [contractTp, setContractTp] = useState('');\r\n    const [contractTpVal, setContractTpVal] = useState([{ key: '', value: '선택' }]);\r\n    const [roomLockerTp, setRoomLockerTp] = useState(0);\r\n    const [contractMoney, setContractMoney] = useState('');\r\n    const [contractTerm, setContractTerm] = useState('0');\r\n    const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endAsk_date, setEndAsk_date] = useState(new Date());\r\n    const [payDate, setPayDate] = useState(1);\r\n    const [comment, setComment] = useState('');\r\n    const [payMethod, setPayMethod] = useState('');\r\n    const [contractPath, setContractPath] = useState('');\r\n    const [contractStart, setContractStart] = useState('');\r\n    const [contractEnd, setContractEnd] = useState('');\r\n    const [userStatus,setUserStatus] = useState('');\r\n\r\n    \r\n    const [regNoCheckBtn,setRegNoCheckBtn] = useState('');\r\n    const [empHpCheckBtn,setEmpHpCheckBtn] = useState('');\r\n    const [dateCheckBtn,setDateCheckBtn] = useState('');\r\n\r\n    //주소api\r\n    const [open, setOpen] = React.useState(false);\r\n    const [isPostOpen, setIsPostOpen] = useState(false);\r\n    //hidden 이용해보기\r\n    \r\n    //첨부파일업로드\r\n    const[idCardFile,setIdCardFile] = useState(null);\r\n    const[idCardFileName,setIdCardFileName] = useState('');\r\n\r\n    const[registCardFile,setRegistCardFile] = useState(null);\r\n    const[registCardFileName,setRegistCardFileName] = useState('');\r\n    const onHandleClickClose = (event) => {\r\n        setOpen(false);\r\n    }\r\n\r\n    const rNum = props.dataNum;\r\n    const modalMemberId = props.dataMem;\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.newDataForm === 'N') {\r\n\r\n            axios.get(`/api/s01010010/insert/tb_s10_contract010_by_id?id=${modalMemberId}&type=single`)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n\r\n                        const modalCMemberNm = response.data.rows[0].MEMBER_NM;\r\n                        const modalCRegNo = response.data.rows[0].REG_NO;\r\n                        const modalCMemberTp = response.data.rows[0].MEMBER_TP;\r\n                        const modalCName = response.data.rows[0].NAME;\r\n                        const modalCEmpHp = response.data.rows[0].EMP_HP;\r\n                        const modalCEmpEmail = response.data.rows[0].EMP_EMAIL;\r\n                        const modalCZipCode = response.data.rows[0].ZIP_CODE;\r\n                        const modalCAddress = response.data.rows[0].ADDRESS;\r\n                        const modalCDetailAddress = response.data.rows[0].DETAIL_ADDRESS;\r\n\r\n                        const modalCRegNos = modalCRegNo.split(\"-\");\r\n                        const modalCEmpHps = modalCEmpHp.split(\"-\");\r\n                        const modalCEmpEmails = modalCEmpEmail.split(\"@\");\r\n\r\n                        setMemberNm(modalCMemberNm);\r\n                        setFisrtRegNo(modalCRegNos[0]);\r\n                        setSecondRegNo(modalCRegNos[1]);\r\n                        setThirdRegNo(modalCRegNos[2]);\r\n                        setMemberTp(modalCMemberTp);\r\n                        setEmpIdName(modalCName);\r\n                        setFirstEmpHp(modalCEmpHps[0]);\r\n                        setSecondEmpHp(modalCEmpHps[1]);\r\n                        setThirdEmpHp(modalCEmpHps[2]);\r\n                        setEmpEmailId(modalCEmpEmails[0]);\r\n                        setDomainAddress(modalCEmpEmails[1]);\r\n                        setZipcode(modalCZipCode);\r\n                        setEmpAddress(modalCAddress);\r\n                        setEmpDetailAddress(modalCDetailAddress);\r\n\r\n                        //setEndFlag(modalEndFLag);\r\n                    } else {\r\n                        alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                    }\r\n                })\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.cDataForm === 'I') {\r\n\r\n            axios.get(`/api/s01010010/tb_s10_contract010_by_id?id=${rNum}&type=single`)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        //alert(response.data.rows[0]);\r\n                        const modalCMemberNm = response.data.rows[0].MEMBER_NM;\r\n                        const modalCRegNo = response.data.rows[0].REG_NO;\r\n                        const modalCMemberTp = response.data.rows[0].MEMBER_TP;\r\n                        const modalCName = response.data.rows[0].NAME;\r\n                        const modalCEmpHp = response.data.rows[0].EMP_HP;\r\n                        const modalCEmpEmail = response.data.rows[0].EMP_EMAIL;\r\n                        const modalCZipCode = response.data.rows[0].ZIP_CODE;\r\n                        const modalCAddress = response.data.rows[0].ADDRESS;\r\n                        const modalCDetailAddress = response.data.rows[0].DETAIL_ADDRESS;\r\n\r\n                        const modalCContractDate = response.data.rows[0].CONTRACT_DATE;\r\n                        const modalCContractTp = response.data.rows[0].CONTRACT_TP;\r\n                        const modalCContractTerm = response.data.rows[0].CONTRACT_TERM;\r\n                        const modalCPayDate = response.data.rows[0].PAY_DATE;\r\n                        const modalCContractMoney = response.data.rows[0].PAYED_PLAN_MONEY;\r\n                        const modalCPayMethod = response.data.rows[0].PAY_METHOD;\r\n\r\n                        const modalCContractPath = response.data.rows[0].CONTRACT_PATH;\r\n                        const modalCContractPathM =response.data.rows[0].CONTRACT_PATH_M;\r\n                        \r\n                        \r\n                        const modalCEndDate = response.data.rows[0].END_DATE;\r\n\r\n                        const modalCContractTpVal = response.data.rows[0].CONTRACT_ROOM;\r\n                        const modalCRoomLockerTp = response.data.rows[0].CONTRACT_LOCKER;\r\n                        const modalCContractTpValM = response.data.rows[0].CONTRACT_ROOM_M;\r\n                        const modalCRoomLockerTpM = response.data.rows[0].CONTRACT_LOCKER_M;\r\n                        const modalCMemberSt = response.data.rows[0].MEMBER_ST;\r\n\r\n                        const modalCComment = response.data.rows[0].COMMENT;\r\n\r\n                        const modalCRegNos = modalCRegNo.split(\"-\");\r\n                        const modalCEmpHps = modalCEmpHp.split(\"-\");\r\n                        const modalCEmpEmails = modalCEmpEmail.split(\"@\");\r\n\r\n                        setUserStatus(modalCMemberSt);\r\n                        setMemberNm(modalCMemberNm);\r\n                        setFisrtRegNo(modalCRegNos[0]);\r\n                        setSecondRegNo(modalCRegNos[1]);\r\n                        setThirdRegNo(modalCRegNos[2]);\r\n                        setMemberTp(modalCMemberTp);\r\n\r\n\r\n                        setContractTpVal(modalCContractTpVal);\r\n\r\n\r\n                        setEmpIdName(modalCName);\r\n                        setFirstEmpHp(modalCEmpHps[0]);\r\n                        setSecondEmpHp(modalCEmpHps[1]);\r\n                        setThirdEmpHp(modalCEmpHps[2]);\r\n                        setEmpEmailId(modalCEmpEmails[0]);\r\n                        setDomainAddress(modalCEmpEmails[1]);\r\n                        setZipcode(modalCZipCode);\r\n                        setEmpAddress(modalCAddress);\r\n\r\n\r\n                        setEmpDetailAddress(modalCDetailAddress);\r\n                        setContractStart(modalCContractDate);\r\n                        setContractEnd(modalCEndDate);\r\n\r\n                        setContractTp(modalCContractTp);\r\n                        setContractTerm(modalCContractTerm);\r\n                        setPayDate(modalCPayDate);\r\n                        setContractMoney(modalCContractMoney);\r\n                        setPayMethod(modalCPayMethod);\r\n                        //setContractPath(modalCContractPath);\r\n                        setRoomLockerTp(modalCRoomLockerTp);\r\n                        setComment(modalCComment);\r\n                        \r\n                        setStartAsk_date(new Date(modalCContractDate));\r\n\r\n\r\n                        setContractTpVal(modalCContractTpVal);\r\n                        setRoomLockerTp(modalCRoomLockerTp);\r\n                        setContractPath(modalCContractPath);\r\n\r\n                        setContractTpVals([{ key: modalCContractTpVal, value: modalCContractTpValM }]);\r\n                        setRoomLockers([{ key: modalCRoomLockerTp, value: modalCRoomLockerTpM }]);\r\n                        \r\n                        setContractPaths([{ key: modalCContractPath, value: modalCContractPathM}]);\r\n                        //setEndFlag(modalEndFLag);\r\n                    } else {\r\n                        alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                    }\r\n                })\r\n        }\r\n\r\n    }, [])\r\n\r\n    const handleComplete = (data) => {\r\n        let fullAddress = data.address;\r\n        let extraAddress = '';\r\n\r\n        if (data.addressType === \"R\") {\r\n            if (data.bname !== '') {\r\n                extraAddress += data.bname;\r\n            }\r\n            if (data.buildingName !== '') {\r\n                extraAddress +=\r\n                    extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName;\r\n            }\r\n            fullAddress += extraAddress !== '' ? ` (${extraAddress})` : '';\r\n        }\r\n\r\n        setZipcode(data.zonecode);\r\n        setEmpAddress(fullAddress);\r\n        alert('입력되었습니다.');\r\n\r\n    }\r\n\r\n    //<Lov시작>\r\n    useEffect(() => {\r\n        for (let i = 0; i < queryArr.length; i++) {\r\n\r\n            let firstVal = queryArr[i][0];\r\n            let secondVal = queryArr[i][1];\r\n            axios.post('/api/s010100140/selectTest', { firstVal: firstVal, secondVal: secondVal })\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        //console.log('ask_tp',response.data.rows);\r\n                        let arr = [{ key: '선택', value: '선택' }]\r\n\r\n                        response.data.rows.map((data) =>\r\n                            arr.push({\r\n                                value: data.CD_V_MEANING,\r\n                                key: data.CD_V\r\n                            }));\r\n\r\n                        valueArr[i] = arr;\r\n                        //console.log(valueArr[2]);\r\n                    } else {\r\n                        alert(\" 데이터를 불러오는데 실패하였습니다.\");\r\n                    }\r\n                })\r\n\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        axios.post('/api/s010100010/accessPath')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let conAccessPath = response.data.rows.CD_V;\r\n                    let arr = [{ key: '선택', value: '선택' }]\r\n                    \r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                        setContractPaths(arr);\r\n\r\n                } else {\r\n                    alert(\"데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n\r\n    let arr = [{ key: '선택', value: '선택' }];\r\n\r\n    for (let i = 1; i <= 31; i++) {\r\n        arr.push({\r\n            value: i,\r\n            key: i\r\n        });\r\n        payDates = arr;\r\n    }\r\n\r\n\r\n    //Lov끝>\r\n\r\n    const [contractTpVals, setContractTpVals] = useState([{ key: '', value: '선택' }]);\r\n    const [roomLockers, setRoomLockers] = useState([{ key: '', value: '선택' }]);\r\n    const [contractpaths,setContractPaths] = useState([{ key: '', value: '선택' }]);\r\n\r\n    const onContractTpHandler = (event) => {\r\n     \r\n            setContractTp(event.currentTarget.value);\r\n            let contractTpBody = event.currentTarget.value;\r\n\r\n\r\n            axios.post('/api/s010100010/contHier', { contractTpBody: contractTpBody })\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        //console.log('ContractTpVal', response.data.rows);\r\n                        let arr = [{ key: '선택', value: '선택' }]\r\n\r\n                        response.data.rows.map((data) =>\r\n                            arr.push({\r\n                                value: data.CD_V_MEANING, key: data.CD_V\r\n                            }));\r\n                        switch (contractTpBody) {\r\n                            case 'R1':\r\n                                setContractTpVals(arr);\r\n                                break;\r\n                            case 'R2':\r\n                                setContractTpVals(arr);\r\n                                break;\r\n                            case 'R3':\r\n                                setContractTpVals(arr);\r\n                                break;\r\n                            case 'FI':\r\n                                setContractTpVals(arr);\r\n                                break;\r\n                            case 'FL':\r\n                                setContractTpVals(arr);\r\n                                break;\r\n                            case 'FR':\r\n                                setContractTpVals(arr);\r\n                                break;\r\n                        }//switch\r\n\r\n                        if (contractTpBody === 'FI' || contractTpBody === 'FL') {\r\n                            axios.post('/api/s010100010/roomLockerHier')\r\n                                .then(response => {\r\n                                    if (response.data.success) {\r\n                                        //console.log('roomLocker', response.data.rows);\r\n                                        let arr = [{ key: '선택', value: '선택' }]\r\n                                        response.data.rows.map((data) =>\r\n                                            arr.push({\r\n                                                value: data.CD_V_MEANING, key: data.CD_V\r\n                                            }));\r\n                                        setRoomLockers(arr);\r\n                                    } else {\r\n                                        alert('사물함정보를 불러오는데 실패하였습니다.');\r\n                                    }\r\n                                })//axios\r\n                        } else {\r\n                            let arr = [{ key: '선택', value: '선택' }];\r\n                            setRoomLockers(arr);\r\n                        }\r\n\r\n\r\n                        let monthlyMoney = {\r\n                            contractTpBody: contractTpBody\r\n                        }\r\n                        axios.post('/api/s010100010/monthlyMoney', monthlyMoney)\r\n                            .then(response => {\r\n                                if (response.data.success) {\r\n                                    //console.log(response.data.rows[0].ATTRIBUTE3);\r\n                                    setContractMoney(response.data.rows[0].ATTRIBUTE3);\r\n\r\n                                } else {\r\n                                    alert('사물함정보를 불러오는데 실패하였습니다.');\r\n                                }\r\n                            })\r\n\r\n                    }//if문\r\n                    else {\r\n                        alert('호실 정보를 불러오는데 실패하였습니다.');\r\n                    }\r\n\r\n                })//axios,then\r\n       \r\n    }\r\n\r\n    const onContractTpValHandler = (event) => {\r\n        setContractTpVal(event.currentTarget.value);\r\n    }\r\n\r\n    const onRoomLockerTpHandler = (event) => {\r\n        setRoomLockerTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onContractMoneyHandler = (event) => {\r\n        setContractMoney(event.currentTarget.value);\r\n    }\r\n\r\n    const onContractTermHandler = (event) => {\r\n        setContractTerm(event.currentTarget.value);\r\n    }\r\n\r\n    const onPayDateHandler = (event) => {\r\n        setPayDate(event.currentTarget.value);\r\n    }\r\n\r\n    const onCommentHandler = (event) => {\r\n        setComment(event.currentTarget.value);\r\n    }\r\n\r\n    const onPayMethodHandler = (event) => {\r\n        setPayMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const onContractPathHandler = (event) => {\r\n        setContractPath(event.currentTarget.value);\r\n    }\r\n    const onNewSubmitHandler = (event) => {\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => setRegNoCheckBtn('');   \r\n      }, []);\r\n      useEffect(() => {\r\n        return () => setEmpHpCheckBtn('');  \r\n      }, []);\r\n      useEffect(() => {\r\n        return () =>  setDateCheckBtn('');\r\n      }, []);\r\n\r\n    //<!--onSubmit\r\n    // const onSubmitHandler = (event) => {\r\n    //     event.preventDefault();\r\n\r\n    //     // //대표자 NUll체크\r\n    //     // if (empIdName == null || empIdName == '') {\r\n    //     //     return alert(\"대표자를 입력하세요.\");\r\n    //     // }\r\n    //     //\r\n    //     // //연락처 NUll체크\r\n    //     // if (firstEmpHp == null || firstEmpHp == '' || secondEmpHp == null || secondEmpHp == '' || thirdEmpHp == null || thirdEmpHp == '') {\r\n    //     //     return alert(\"연락처를 입력하세요.\");\r\n    //     // }\r\n    //     //\r\n    //     // //E-mail NUll체크\r\n    //     // if (empEmailId == null || empEmailId == '' || domainAddress == null || domainAddress == '') {\r\n    //     //     return alert(\"E-mail을 입력하세요.\");\r\n    //     // }\r\n    //     //\r\n    //     // //계약구분 NUll체크\r\n    //     // if (contractTp == null || contractTp == '') {\r\n    //     //     return alert(\"계약구분을 선택하세요.\");\r\n    //     // }\r\n    //     //\r\n    //     // //호실 NUll체크\r\n    //     // if (contractTpVal == null || contractTpVal == '') {\r\n    //     //     return alert(\"호실을 선택하세요.\");\r\n    //     // }\r\n    //     //\r\n    //     // //이용기간 NUll체크\r\n    //     // if (contractTerm == null || contractTerm == '') {\r\n    //     //     return alert(\"이용기간을 입력하세요.\");\r\n    //     // }\r\n    //     //\r\n    //     // //입금일 NUll체크\r\n    //     // if (payDate == null || payDate == '') {\r\n    //     //     return alert(\"입금일을 하세요.\");\r\n    //     // }\r\n    //     //\r\n    //     // //납부방법 NUll체크\r\n    //     // if (payMethod == null || payMethod == '') {\r\n    //     //     return alert(\"납부방법을 선택하세요.\");\r\n    //     // }\r\n    //     //\r\n    //     // //월회비 NUll체크\r\n    //     // if (contractMoney == null || contractMoney == '') {\r\n    //     //     return alert(\"월회비를 입력하세요.\");\r\n    //     // }\r\n    //     //\r\n    //     // //납부액 NUll체크\r\n    //     // if (contractMoney == null || contractMoney == '') {\r\n    //     //     return alert(\"납부액을 입력하세요.\");\r\n    //     // }\r\n    //     // //계약접근경로 NUll체크\r\n    //     // if (contractPath == null || contractPath == '') {\r\n    //     //     return alert(\"계약접근경로를 선택하세요.\");\r\n    //     // }\r\n\r\n    //     //let contractTerms = parseInt(contractTerm);\r\n    //     let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n    //     //let endDate = startAsk_date.getFullYear() + '-' + ((startAsk_date.getMonth() + 1) + contractTerms) + '-' + startAsk_date.getDate(); \r\n        \r\n    //     const body = {\r\n    //         //회원정보\r\n    //         memberNm: memberNm,\r\n    //         firstRegNo: firstRegNo,\r\n    //         secondRegNo: secondRegNo,\r\n    //         thirdRegNo: thirdRegNo,\r\n    //         memberTp: memberTp,\r\n    //         empIdName: empIdName,\r\n    //         firstEmpHp: firstEmpHp,\r\n    //         secondEmpHp: secondEmpHp,\r\n    //         thirdEmpHp: thirdEmpHp,\r\n    //         zipcode: zipcode,\r\n    //         empEmailId: empEmailId,\r\n    //         domainAddress: domainAddress,\r\n    //         empAddress: empAddress,\r\n    //         empDetailAddress: empDetailAddress,\r\n    //         //계약정보\r\n    //         contractTp: contractTp,\r\n    //         contractTpVal: contractTpVal,\r\n    //         roomLockerTp: roomLockerTp,\r\n    //         contractMoney: contractMoney,\r\n    //         contractTerm: contractTerm,\r\n    //         startAsk_date: startDate,\r\n    //         endDate: dateEnd,\r\n    //         payDate: payDate,\r\n    //         payMethod: payMethod,\r\n    //         contractPath: contractPath,\r\n    //         comment: comment\r\n    //     }\r\n     \r\n    //     //console.log('regNoCheckBtn1.',regNoCheckBtn);\r\n    //     if(regNoCheckBtn == ''){\r\n    //         alert('사업자 번호 중복확인 하세요.');\r\n    //         console.log('regNoCheckBtn4.',regNoCheckBtn);\r\n    //     }else if(empHpCheckBtn == ''){\r\n    //         alert('전화번호 중복확인 하세요.');\r\n    //     }else if(dateCheckBtn == ''){\r\n    //         alert('이용날짜 중복확인 하세요.');\r\n    //     }else if(regNoCheckBtn == 'check' && empHpCheckBtn == 'check' && dateCheckBtn == 'check'){\r\n    //         axios.post('/api/s010100010/insertMember010', body)\r\n    //         .then(response => { \r\n    //                 if (response.data.success) {\r\n    //                     alert('정상적으로 등록 되었습니다.')\r\n    //                     setRegNoCheckBtn('');\r\n    //                     setEmpHpCheckBtn('');\r\n    //                     setDateCheckBtn('');   \r\n    //                 }else {\r\n    //                     alert('등록에 실패하였습니다.')\r\n    //                 }\r\n    \r\n    //             })\r\n    //     }\r\n           \r\n    // }\r\n    // //onSubmit끝-->\r\n\r\n\r\n     //임시저장\r\n     const temporaryStorage = (event) => {\r\n      \r\n        event.preventDefault();\r\n      \r\n        let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n        \r\n        const body = {\r\n            //회원정보\r\n            memberNm: memberNm,\r\n            firstRegNo: firstRegNo,\r\n            secondRegNo: secondRegNo,\r\n            thirdRegNo: thirdRegNo,\r\n            memberTp: memberTp,\r\n            empIdName: empIdName,\r\n            firstEmpHp: firstEmpHp,\r\n            secondEmpHp: secondEmpHp,\r\n            thirdEmpHp: thirdEmpHp,\r\n            zipcode: zipcode,\r\n            empEmailId: empEmailId,\r\n            domainAddress: domainAddress,\r\n            empAddress: empAddress,\r\n            empDetailAddress: empDetailAddress,\r\n            //계약정보\r\n            contractTp: contractTp,\r\n            contractTpVal: contractTpVal,\r\n            roomLockerTp: roomLockerTp,\r\n            contractMoney: contractMoney,\r\n            contractTerm: contractTerm,\r\n            startAsk_date: startDate,\r\n            endDate: dateEnd,\r\n            payDate: payDate,\r\n            payMethod: payMethod,\r\n            contractPath: contractPath,\r\n            comment: comment\r\n        }\r\n\r\n        if(regNoCheckBtn == ''){\r\n            alert('사업자 번호 중복확인 하세요.');\r\n        }else if(empHpCheckBtn == ''){\r\n            alert('전화번호 중복확인 하세요.');\r\n        }else if(dateCheckBtn == ''){\r\n            alert('이용날짜 중복확인 하세요.');\r\n        }else if(regNoCheckBtn == 'check' && empHpCheckBtn == 'check' && dateCheckBtn == 'check'){\r\n            axios.post('/api/s010100140/tempStorage', body)\r\n            .then(response => {      \r\n                    if (response.data.success) {\r\n                        alert('임시저장 하였습니다.')\r\n                        setRegNoCheckBtn('');\r\n                        setEmpHpCheckBtn('');\r\n                        setDateCheckBtn(''); \r\n                    }else {\r\n                        alert('임시저장에 실패하였습니다.')  \r\n                    }\r\n            })\r\n        }  \r\n\r\n    }\r\n\r\n\r\n\r\n    const onMemberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const onFirstRegNoHandler = (event) => {\r\n        setFisrtRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const onSecondRegNoHandler = (event) => {\r\n        setSecondRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const onThirdRegNoHandler = (event) => {\r\n        setThirdRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const onMemberTpHandler = (event) => {\r\n        setMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpIdNameHandler = (event) => {\r\n        setEmpIdName(event.currentTarget.value);\r\n    }\r\n\r\n    const onFirstEmpHpHandler = (event) => {\r\n        setFirstEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const onSecondEmpHpHandler = (event) => {\r\n        setSecondEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const onThirdEmpHpHandler = (event) => {\r\n        setThirdEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpEmailIdHandler = (event) => {\r\n        setEmpEmailId(event.currentTarget.value);\r\n    }\r\n\r\n    const onDomainAddressHandler = (event) => {\r\n        setDomainAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onZipcodeHandler = (event) => {\r\n        setZipcode(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onEmpAddressHandler = (event) => {\r\n        setEmpAddress(event.currentTarget.value);\r\n    }\r\n\r\n    //신규계약추가\r\n    const newMemberIdStorage = (event) => {\r\n\r\n         // //계약구분 NUll체크\r\n        // if (contractTp == null || contractTp == '') {\r\n        //     return alert(\"계약구분을 선택하세요.\");\r\n        // }\r\n        //\r\n        // //호실 NUll체크\r\n        // if (contractTpVal == null || contractTpVal == '') {\r\n        //     return alert(\"호실을 선택하세요.\");\r\n        // }\r\n        //\r\n        // //이용기간 NUll체크\r\n        // if (contractTerm == null || contractTerm == '') {\r\n        //     return alert(\"이용기간을 입력하세요.\");\r\n        // }\r\n        //\r\n        // //입금일 NUll체크\r\n        // if (payDate == null || payDate == '') {\r\n        //     return alert(\"입금일을 하세요.\");\r\n        // }\r\n        //\r\n        // //납부방법 NUll체크\r\n        // if (payMethod == null || payMethod == '') {\r\n        //     return alert(\"납부방법을 선택하세요.\");\r\n        // }\r\n        //\r\n        // //월회비 NUll체크\r\n        // if (contractMoney == null || contractMoney == '') {\r\n        //     return alert(\"월회비를 입력하세요.\");\r\n        // }\r\n        //\r\n        // //납부액 NUll체크\r\n        // if (contractMoney == null || contractMoney == '') {\r\n        //     return alert(\"납부액을 입력하세요.\");\r\n        // }\r\n        // //계약접근경로 NUll체크\r\n        // if (contractPath == null || contractPath == '') {\r\n        //     return alert(\"계약접근경로를 선택하세요.\");\r\n        // }\r\n\r\n\r\n        let memberIdForNew = props.dataMem;\r\n\r\n        let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n\r\n        let body = {\r\n\r\n           //회원정보\r\n           memberNm: memberNm,\r\n           firstRegNo: firstRegNo,\r\n           secondRegNo: secondRegNo,\r\n           thirdRegNo: thirdRegNo,\r\n           memberTp: memberTp,\r\n           empIdName: empIdName,\r\n           firstEmpHp: firstEmpHp,\r\n           secondEmpHp: secondEmpHp,\r\n           thirdEmpHp: thirdEmpHp,\r\n           zipcode: zipcode,\r\n           empEmailId: empEmailId,\r\n           domainAddress: domainAddress,\r\n           empAddress: empAddress,\r\n           empDetailAddress: empDetailAddress,\r\n\r\n            //계약정보\r\n            contractTp: contractTp,\r\n            contractTpVal: contractTpVal,\r\n            roomLockerTp: roomLockerTp,\r\n            contractMoney: contractMoney,\r\n            contractTerm: contractTerm,\r\n            startAsk_date: startDate,\r\n            endDate: dateEnd,\r\n            payDate: payDate,\r\n            payMethod: payMethod,\r\n            contractPath: contractPath,\r\n            comment: comment\r\n        }\r\n\r\n        axios.post(`/api/s010100050/detailNewContract_by_id?id=${memberIdForNew}&type=single`, body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('신규계약에 성공 하였습니다');\r\n                } else {\r\n                    alert('신규계약에 실패 하였습니다');\r\n                }\r\n\r\n\r\n            })\r\n\r\n    }\r\n    const newContractIdStorage = (event) => {\r\n\r\n\r\n    }\r\n    const newMemberIdModifyStorage = (event) => {\r\n\r\n        setEmpDetailAddress(event.currentTarget.value);\r\n        \r\n        let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n        let modifyDataNum = props.dataNum;\r\n\r\n        let body = {\r\n            //회원정보\r\n            memberNm: memberNm,\r\n            firstRegNo: firstRegNo,\r\n            secondRegNo: secondRegNo,\r\n            thirdRegNo: thirdRegNo,\r\n            memberTp: memberTp,\r\n            empIdName: empIdName,\r\n            firstEmpHp: firstEmpHp,\r\n            secondEmpHp: secondEmpHp,\r\n            thirdEmpHp: thirdEmpHp,\r\n            zipcode: zipcode,\r\n            empEmailId: empEmailId,\r\n            domainAddress: domainAddress,\r\n            empAddress: empAddress,\r\n            empDetailAddress: empDetailAddress,\r\n            //계약정보\r\n            contractTp: contractTp,\r\n            contractTpVal: contractTpVal,\r\n            roomLockerTp: roomLockerTp,\r\n            contractMoney: contractMoney,\r\n            contractTerm: contractTerm,\r\n            startAsk_date: startDate,\r\n            endDate: dateEnd,\r\n            payDate: payDate,\r\n            payMethod: payMethod,\r\n            contractPath: contractPath,\r\n            comment: comment\r\n        }\r\n\r\n        axios.post(`/api/s010100050/detailModifyContract_by_id?id=${modifyDataNum}&type=single`, body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('이용계약서를 수정하였습니다');\r\n                } else {\r\n                    alert(\"이용계약서 수정을 실패 하였습니다\");\r\n                }\r\n\r\n\r\n            })\r\n    }\r\n\r\n    const onEmpDetailAddressHandler = (event) => {\r\n        setEmpDetailAddress(event.currentTarget.value);\r\n    }\r\n    \r\n\r\n\r\n    const newTemporaryStorage = (event) => {\r\n        alert(modalMemberId);\r\n        event.preventDefault();\r\n        const body = {\r\n            //계약정보\r\n            modalMemberId: modalMemberId,\r\n            contractTp: contractTp,\r\n            contractTpVal: contractTpVal,\r\n            roomLockerTp: roomLockerTp,\r\n            contractMoney: contractMoney,\r\n            contractTerm: contractTerm,\r\n            startAsk_date: startAsk_date,\r\n\r\n            payDate: payDate,\r\n            payMethod: payMethod,\r\n            contractPath: contractPath,\r\n            comment: comment\r\n        }\r\n        // axios.post('/api/s010100140/tempStorage/memberId', body)\r\n        //     .then(response => {\r\n        //         if (response.data.success) {\r\n        //             alert('임시저장 하였습니다.')\r\n        //         } else {\r\n        //             alert('임시저장에 실패하였습니다.')\r\n        //         }\r\n        //     })\r\n    }\r\n\r\n\r\n    const [postCodeDisplay, setPostCodeDisplay] = useState('none');\r\n    \r\n    const postCodeStyle = {\r\n        display: postCodeDisplay,\r\n        position: \"absolute\",\r\n        top: \"26%\",\r\n        right: \"33%\",\r\n        width: \"350px\",\r\n        height: \"600px\"\r\n\r\n    }\r\n\r\n    const handleOpenPost = (event) => {\r\n        setPostCodeDisplay('block');\r\n\r\n        if (postCodeDisplay == 'block') {\r\n            setPostCodeDisplay('none');\r\n        }\r\n    }\r\n\r\n    const onDeleteHandler = (event) => {\r\n\r\n        setUserStatus('');\r\n        //alert(rNum);\r\n        \r\n        axios.post(`/api/s010100010/memberDelete_by_id?id=${rNum}`)\r\n        .then(response => {\r\n            if (response.data.success) {\r\n                alert('삭제 하였습니다.')\r\n            } else {\r\n                alert('삭제에 실패하였습니다.')\r\n            }\r\n        })\r\n    \r\n    }\r\n\r\n    const onRegNoCheckHandler = (event) => {\r\n  \r\n        event.preventDefault();\r\n\r\n        setRegNoCheckBtn('check');\r\n\r\n        console.log('regNoCheckBtn2.',regNoCheckBtn);\r\n\r\n        const body = {\r\n            //회원정보\r\n            firstRegNo: firstRegNo,\r\n            secondRegNo: secondRegNo,\r\n            thirdRegNo: thirdRegNo,\r\n        }\r\n\r\n\r\n        axios.post('/api/s010100140/regNoCheck', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    if (response.data.number[0].RowNum >= 1) {\r\n                        alert('이미 존재하는 사업자번호입니다.');\r\n                    } else if (response.data.number[0].RowNum === 0) {\r\n                        alert('사용할 수 있는 사업자 번호입니다.')\r\n                    }\r\n                } else {\r\n                    alert('중복체크에 실패 하였습니다.')\r\n                }\r\n            })\r\n\r\n            console.log('regNoCheckBtn3.',regNoCheckBtn);\r\n    }\r\n\r\n    const onEmpHpChkHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n\r\n        setEmpHpCheckBtn('check');\r\n\r\n        const body = {\r\n            //회원정보\r\n            firstEmpHp: firstEmpHp,\r\n            secondEmpHp: secondEmpHp,\r\n            thirdEmpHp: thirdEmpHp,\r\n        }\r\n\r\n\r\n        axios.post('/api/s010100140/empHpCheck', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    if (response.data.number[0].RowNum >= 1) {\r\n                        alert('이미 존재하는 전화번호입니다.');\r\n                    } else if (response.data.number[0].RowNum === 0) {\r\n                        alert('사용할 수 있는 전화번호입니다.')\r\n                    }\r\n                } else {\r\n                    alert('중복체크에 실패 하였습니다.')\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    let contractTerms = parseInt(contractTerm);\r\n    //let wasteEndDate = startAsk_date.getFullYear() + '-' + ((startAsk_date.getMonth() + 1) + contractTerms) + '-' + startAsk_date.getDate(); \r\n    //let endDate = startAsk_date.getFullYear() + '-' + ((startAsk_date.getMonth() + 1) + contractTerms) + '-' + startAsk_date.getDate(); \r\n    \r\n    \r\n\r\n    let finalMonth = ((startAsk_date.getMonth()*1 + contractTerm*1 ) % 12 ) + 1 ;\r\n    let finalYear  = ((startAsk_date.getMonth()*1 + contractTerm*1 ) / 12 ) + startAsk_date.getFullYear();\r\n\r\n\r\n    let dateEnd = Math.floor(finalYear) + '.' + finalMonth + '.' + startAsk_date.getDate();\r\n\r\n\r\n    const onDateHandler = (event) => {\r\n        \r\n        event.preventDefault();\r\n        \r\n        setDateCheckBtn('check');\r\n\r\n        let startDate = startAsk_date.getFullYear() + '.' + (startAsk_date.getMonth() + 1) + '.' + startAsk_date.getDate();\r\n\r\n        const body = {\r\n            contractTp: contractTp,\r\n            contractTpVal: contractTpVal,\r\n            roomLockerTp: roomLockerTp,\r\n            startDate: startDate,\r\n            endDate: dateEnd,\r\n        }\r\n\r\n        axios.post('/api/s010100140/dateCheck', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    if (response.data.number[0].STARTENDDATE >= 1) {\r\n                        alert('이미 이용중인 날짜입니다.');\r\n                    } else if (response.data.number[0].STARTENDDATE === 0) {\r\n                        alert('사용가능한 날짜입니다.')\r\n                    }\r\n                } else {\r\n                    alert('중복체크에 실패 하였습니다.')\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n\r\n    const addMember = () => {\r\n        const url = '/api/s010100010/insertMember010';\r\n        const formData = new FormData();\r\n\r\n        let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n\r\n        formData.append('idCardFile',idCardFile);\r\n        formData.append('registCardFile',registCardFile);\r\n        formData.append('idCardFileName',idCardFileName);\r\n        formData.append('registCardFileName',registCardFileName);\r\n\r\n        formData.append('memberNm',memberNm);\r\n        formData.append('firstRegNo',firstRegNo);\r\n        formData.append('secondRegNo',secondRegNo);\r\n        formData.append('thirdRegNo',thirdRegNo);\r\n        formData.append('memberTp',memberTp);\r\n        formData.append('empIdName',empIdName);\r\n        formData.append('firstEmpHp',firstEmpHp);\r\n        formData.append('secondEmpHp',secondEmpHp);\r\n        formData.append('thirdEmpHp',thirdEmpHp);\r\n\r\n        formData.append('zipcode', zipcode);\r\n        formData.append('empEmailId', empEmailId);\r\n        formData.append('domainAddress', domainAddress);\r\n        formData.append('empAddress', empAddress);\r\n        formData.append('empDetailAddress', empDetailAddress);\r\n        //계약정보\r\n        formData.append('contractTp', contractTp);\r\n        formData.append('contractTpVal', contractTpVal);\r\n        formData.append('roomLockerTp', roomLockerTp);\r\n        formData.append('contractMoney', contractMoney);\r\n        formData.append('contractTerm', contractTerm);\r\n        formData.append('startAsk_date', startDate);\r\n        formData.append('endDate', dateEnd);\r\n        formData.append('payDate', payDate);\r\n        formData.append('payMethod', payMethod);\r\n        formData.append('contractPath', contractPath);\r\n        formData.append('comment', comment);\r\n        \r\n        console.log(formData);\r\n\r\n        const config = {\r\n            headers : {\r\n                'content-type':'multipart/form-data'\r\n            }\r\n        }\r\n        return post(url, formData, config);\r\n    }\r\n\r\n\r\n\r\n    //<!--onSubmit\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        // //대표자 NUll체크\r\n        // if (empIdName == null || empIdName == '') {\r\n        //     return alert(\"대표자를 입력하세요.\");\r\n        // }\r\n        //\r\n        // //연락처 NUll체크\r\n        // if (firstEmpHp == null || firstEmpHp == '' || secondEmpHp == null || secondEmpHp == '' || thirdEmpHp == null || thirdEmpHp == '') {\r\n        //     return alert(\"연락처를 입력하세요.\");\r\n        // }\r\n        //\r\n        // //E-mail NUll체크\r\n        // if (empEmailId == null || empEmailId == '' || domainAddress == null || domainAddress == '') {\r\n        //     return alert(\"E-mail을 입력하세요.\");\r\n        // }\r\n        //\r\n        // //계약구분 NUll체크\r\n        // if (contractTp == null || contractTp == '') {\r\n        //     return alert(\"계약구분을 선택하세요.\");\r\n        // }\r\n        //\r\n        // //호실 NUll체크\r\n        // if (contractTpVal == null || contractTpVal == '') {\r\n        //     return alert(\"호실을 선택하세요.\");\r\n        // }\r\n        //\r\n        // //이용기간 NUll체크\r\n        // if (contractTerm == null || contractTerm == '') {\r\n        //     return alert(\"이용기간을 입력하세요.\");\r\n        // }\r\n        //\r\n        // //입금일 NUll체크\r\n        // if (payDate == null || payDate == '') {\r\n        //     return alert(\"입금일을 하세요.\");\r\n        // }\r\n        //\r\n        // //납부방법 NUll체크\r\n        // if (payMethod == null || payMethod == '') {\r\n        //     return alert(\"납부방법을 선택하세요.\");\r\n        // }\r\n        //\r\n        // //월회비 NUll체크\r\n        // if (contractMoney == null || contractMoney == '') {\r\n        //     return alert(\"월회비를 입력하세요.\");\r\n        // }\r\n        //\r\n        // //납부액 NUll체크\r\n        // if (contractMoney == null || contractMoney == '') {\r\n        //     return alert(\"납부액을 입력하세요.\");\r\n        // }\r\n        // //계약접근경로 NUll체크\r\n        // if (contractPath == null || contractPath == '') {\r\n        //     return alert(\"계약접근경로를 선택하세요.\");\r\n        // }\r\n\r\n        //let contractTerms = parseInt(contractTerm);\r\n        let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n        //let endDate = startAsk_date.getFullYear() + '-' + ((startAsk_date.getMonth() + 1) + contractTerms) + '-' + startAsk_date.getDate(); \r\n        \r\n        // const body = {\r\n        //     //회원정보\r\n        //     memberNm: memberNm,\r\n        //     firstRegNo: firstRegNo,\r\n        //     secondRegNo: secondRegNo,\r\n        //     thirdRegNo: thirdRegNo,\r\n        //     memberTp: memberTp,\r\n        //     empIdName: empIdName,\r\n        //     firstEmpHp: firstEmpHp,\r\n        //     secondEmpHp: secondEmpHp,\r\n        //     thirdEmpHp: thirdEmpHp,\r\n        //     zipcode: zipcode,\r\n        //     empEmailId: empEmailId,\r\n        //     domainAddress: domainAddress,\r\n        //     empAddress: empAddress,\r\n        //     empDetailAddress: empDetailAddress,\r\n        //     //계약정보\r\n        //     contractTp: contractTp,\r\n        //     contractTpVal: contractTpVal,\r\n        //     roomLockerTp: roomLockerTp,\r\n        //     contractMoney: contractMoney,\r\n        //     contractTerm: contractTerm,\r\n        //     startAsk_date: startDate,\r\n        //     endDate: dateEnd,\r\n        //     payDate: payDate,\r\n        //     payMethod: payMethod,\r\n        //     contractPath: contractPath,\r\n        //     comment: comment\r\n        // }\r\n        \r\n        //console.log('regNoCheckBtn1.',regNoCheckBtn);\r\n\r\n        // if(regNoCheckBtn == ''){\r\n        //     alert('사업자 번호 중복확인 하세요.');\r\n        //     console.log('regNoCheckBtn4.',regNoCheckBtn);\r\n        // }else if(empHpCheckBtn == ''){\r\n        //     alert('전화번호 중복확인 하세요.');\r\n        // }else if(dateCheckBtn == ''){\r\n        //     alert('이용날짜 중복확인 하세요.');\r\n        // }else if(regNoCheckBtn == 'check' && empHpCheckBtn == 'check' && dateCheckBtn == 'check'){\r\n        //     axios.post('/api/s010100010/insertMember010', body)\r\n        //     .then(response => { \r\n        //             if (response.data.success) {\r\n        //                 alert('정상적으로 등록 되었습니다.')\r\n        //                 setRegNoCheckBtn('');\r\n        //                 setEmpHpCheckBtn('');\r\n        //                 setDateCheckBtn('');   \r\n        //             }else {\r\n        //                 alert('등록에 실패하였습니다.')\r\n        //             }\r\n    \r\n        //         })\r\n        if(regNoCheckBtn == ''){\r\n            alert('사업자 번호 중복확인 하세요.');\r\n            console.log('regNoCheckBtn4.',regNoCheckBtn);\r\n        }else if(empHpCheckBtn == ''){\r\n            alert('전화번호 중복확인 하세요.');\r\n        }else if(dateCheckBtn == ''){\r\n            alert('이용날짜 중복확인 하세요.');\r\n        }else if(regNoCheckBtn == 'check' && empHpCheckBtn == 'check' && dateCheckBtn == 'check'){\r\n           addMember().then((response) => {\r\n               console.log(response.data);\r\n           })\r\n        }\r\n\r\n       //window.location.reload();\r\n           \r\n    }\r\n    //onSubmit끝-->\r\n\r\n    const idCardHandleFileChange = (event) => {\r\n        // file: event.currentTarget.idCardFiles[0];\r\n        setIdCardFile(event.currentTarget.files[0]);\r\n        setIdCardFileName(event.currentTarget.value);\r\n    }\r\n\r\n    const  registCardHandleFileChange = (event) => {\r\n        // file: event.currentTarget.registCardFiles[0];\r\n        setRegistCardFile(event.currentTarget.files[0]);\r\n        setRegistCardFileName(event.currentTarget.value);\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n\r\n        <form style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '100%'\r\n        }}\r\n        //onSubmit={onSubmitHandler}\r\n        // encType='multipart/form-data'\r\n        >\r\n            <h1 id=\"useContractTitle\">이용계약서</h1>\r\n            <table class=\"useContractTable\">\r\n                {/* 회원정보란 */}\r\n                <tbody>\r\n                    <tr>\r\n                        <th rowSpan=\"6\" className=\"memberInfo\">회원정보</th>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"memberInfo\">회원명</th>\r\n                        <td>\r\n                            <input type=\"text\" value={memberNm} id=\"memberNm\" name=\"memberNm\" size=\"10\"\r\n                                onChange={onMemberNmHandler} /></td>\r\n\r\n                        <th className=\"memberInfo\">사업자 번호</th>\r\n                        <td colSpan=\"2\">\r\n\r\n                            <input type=\"text\" value={firstRegNo} id=\"firstRegNo\" name=\"firstRegNo\" size=\"3\"\r\n                                onChange={onFirstRegNoHandler} />\r\n                        &nbsp;\r\n                        -\r\n                        &nbsp;\r\n                        <input type=\"text\" value={secondRegNo} id=\"secondRegNo\" name=\"secondRegNo\" size=\"3\"\r\n                                onChange={onSecondRegNoHandler} />\r\n                        &nbsp;\r\n                        -\r\n                        &nbsp;\r\n                        <input type=\"text\" value={thirdRegNo} id=\"thirdRegNo\" name=\"thirdRegNo\" size=\"3\"\r\n                                onChange={onThirdRegNoHandler} />\r\n\r\n                            <input type=\"button\" class=\"useContractBtn\" onClick={onRegNoCheckHandler}\r\n                                value=\"중복확인\"></input>\r\n                        </td>\r\n                        <th className=\"memberInfo\">회원구분</th>\r\n                        <td colSpan=\"2\">\r\n                            <select onChange={onMemberTpHandler} value={memberTp}>\r\n                                {valueArr[0].map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"memberInfo\">대표자<span className=\"star\">(*)</span></th>\r\n                        <td>\r\n                            <input type=\"text\" value={empIdName} id=\"empIdName\" name=\"empIdName\" size=\"10\"\r\n                                onChange={onEmpIdNameHandler} /></td>\r\n\r\n                        <th className=\"memberInfo\">연락처<span className=\"star\">(*)</span></th>\r\n                        <td colSpan=\"2\">\r\n\r\n                            <input type=\"text\" value={firstEmpHp} id=\"firstEmpHp\" name=\"firstEmpHp\" size=\"5\"\r\n                                onChange={onFirstEmpHpHandler} />\r\n                        -\r\n                        &nbsp;\r\n                        <input type=\"text\" value={secondEmpHp} id=\"secondEmpHp\" name=\"secondEmpHp\" size=\"5\"\r\n                                onChange={onSecondEmpHpHandler} />\r\n                        -\r\n                        &nbsp;\r\n                        <input type=\"text\" value={thirdEmpHp} id=\"thirdEmpHp\" name=\"thirdEmpHp\" size=\"5\"\r\n                                onChange={onThirdEmpHpHandler} />\r\n                            <input type=\"button\" onClick={onEmpHpChkHandler} value=\"중복확인\" />\r\n                        </td>\r\n\r\n                        <th className=\"memberInfo\">E-mail<span className=\"star\">(*)</span></th>\r\n                        <td colSpan=\"2\">\r\n\r\n                            <input type=\"text\" value={empEmailId} id=\"empEmailId\" name=\"empEmailId\" size=\"5\"\r\n                                onChange={onEmpEmailIdHandler} />\r\n                        &nbsp;\r\n                        @\r\n                        &nbsp;\r\n                        <input type=\"text\" value={domainAddress} id=\"domainAddress\" name=\"domainAddress\"\r\n                                size=\"5\"\r\n                                onChange={onDomainAddressHandler} />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th rowSpan=\"2\" className=\"memberInfo\">대표자 주소</th>\r\n\r\n                        <td colSpan=\"9\">\r\n\r\n                            <input type=\"text\" value={zipcode} id=\"zipcode\" name=\"zipcode\" size=\"10\"\r\n                                onChange={onZipcodeHandler} />\r\n                            <input type=\"button\" class=\"useContractBtn\" onClick={handleOpenPost}\r\n                                value=\"우편\"\r\n                            />\r\n                            <DaumPostcode\r\n                                onComplete={handleComplete}\r\n                                style={postCodeStyle}\r\n                                //isPostOpen={false}\r\n                                autoClose={true}\r\n                            />\r\n\r\n                            <input type=\"text\" value={empAddress} id=\"empAddress\" name=\"empAddress\" size=\"30\"\r\n                                onChange={onEmpAddressHandler} />\r\n                        </td>\r\n\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"9\">\r\n                            <input type=\"text\" value={empDetailAddress}\r\n                                id=\"empDetailAddress\"\r\n                                name=\"empDetailAddress\" size=\"30\"\r\n                                onChange={onEmpDetailAddressHandler} />\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"memberInfo\">첨부파일</th>\r\n                        <td colSpan=\"4\">\r\n                        \r\n                        <input type='file'\r\n                        file = {idCardFile}\r\n                        name ='idCardFile'\r\n                        value = {idCardFileName}\r\n                        onChange = {idCardHandleFileChange}/> \r\n\r\n                        </td>\r\n                        <td colSpan=\"5\">\r\n                            \r\n                        <input type='file' \r\n                        file = {registCardFile} \r\n                        name='registCardFile'\r\n                        value = {registCardFileName}\r\n                        onChange = {registCardHandleFileChange}/>\r\n\r\n                        </td>\r\n\r\n                    </tr>\r\n\r\n\r\n                    {/* 계약정보란 */}\r\n\r\n                    <tr>\r\n                        <th rowSpan=\"7\" className=\"info\">계약정보</th>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"info\">계약구분</th>\r\n                        <td>\r\n                            <select multiple={false} onChange={onContractTpHandler} value={contractTp}>\r\n                                {valueArr[1].map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n\r\n                        <th className=\"info\">호실</th>\r\n                        <td>\r\n                            <select multiple={false} onChange={onContractTpValHandler} value={contractTpVal}>\r\n                                {contractTpVals.map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n\r\n                        <th className=\"info\">사물함</th>\r\n                        <td>\r\n                            <select multiple={false} onChange={onRoomLockerTpHandler} value={roomLockerTp}>\r\n                                {roomLockers.map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n\r\n                        </td>\r\n\r\n                        <th className=\"info\">월회비</th>\r\n                        <td>\r\n                            <input type=\"text\" value={contractMoney} id=\"contractMoney\" name=\"contractMoney\"\r\n                                size=\"5\"\r\n                                onChange={onContractMoneyHandler} />\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"info\">이용기간</th>\r\n                        <td><input type=\"text\" value={contractTerm} id=\"contractTerm\" name=\"contractTerm\" size=\"1\"\r\n                            onChange={onContractTermHandler} />&nbsp;개월 &nbsp;\r\n\r\n                        <div>\r\n                                <DatePicker\r\n                                    locale=\"ko\"\r\n                                    selected={startAsk_date.setHours(9, 0, 0, 0)}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                                    onChange={date => setStartAsk_date(date)}\r\n                                    selectsStart\r\n                                    startDate={startAsk_date.setHours(9, 0, 0, 0)}\r\n                                    endDate={endAsk_date}\r\n                                    dateFormat=\"yyyy.MM.dd\"\r\n\r\n                                />&nbsp;\r\n                            ~ &nbsp;\r\n                            <input type=\"text\" disabled={true} value={dateEnd} size=\"8\" />\r\n                                <input type=\"button\" onClick={onDateHandler} className=\"useContractBtn\"\r\n                                    value=\"중복확인\"></input>\r\n                            </div>\r\n                        </td>\r\n\r\n                        <th className=\"info\">입금일</th>\r\n                        <td>\r\n                            <select multiple={false} onChange={onPayDateHandler} value={payDate}>\r\n                                {payDates.map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n\r\n                        <th className=\"info\">납부방법</th>\r\n                        <td>\r\n                            <select multiple={false} onChange={onPayMethodHandler} value={payMethod}>\r\n                                {valueArr[2].map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n                        <th className=\"info\">예치금</th>\r\n                        <td><input type=\"text\" value={contractMoney} id=\"contractMoney\" name=\"contractMoney\"\r\n                            size=\"10\"\r\n                            onChange={onContractMoneyHandler} /></td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"info\">특약사항</th>\r\n                        <td colSpan=\"9\" className=\"alignLeft\" id=\"infoPadding\">\r\n                            계약기간 만료 또는 종료시 사업지 주소지와 전화를 7일이내 이전해야 하고,<br />\r\n                        계약을 해지할 경우 7일이전에 서면 또는 구두 통보해야함.<br />\r\n\r\n                            <textarea rows=\"5\" cols=\"110\" value={comment} id=\"comment\" name=\"comment\"\r\n                                onChange={onCommentHandler}></textarea>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"info\">이용범위</th>\r\n                        <td colSpan=\"9\" className=\"alignLeft\" id=\"etcInfoPadding\">\r\n                            사무공간 제공과 부대시설(회의실,접견실,휴게실,IT기기,유무선 통신망)을 이용 가능\r\n                    </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"basicInfoTitle\">센터</th>\r\n                        <td className=\"basicInfo\">(주)에스원테크</td>\r\n\r\n                        <th colSpan=\"2\" className=\"basicInfoTitle\">전화번호</th>\r\n                        <td colSpan=\"2\" className=\"basicInfo\">070-4355-2312</td>\r\n\r\n                        <th className=\"basicInfoTitle\">E-mail</th>\r\n                        <td className=\"basicInfo\">swonbiz@s-onetech.com</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"basicInfoTitle\">성명</th>\r\n                        <td className=\"basicInfo\">이정희</td>\r\n\r\n                        <th colSpan=\"2\" className=\"basicInfoTitle\">FAX번호</th>\r\n                        <td colSpan=\"2\" className=\"basicInfo\">070-4015-3344/02-6203-4433</td>\r\n\r\n                        <th className=\"info\">계약접근경로</th>\r\n                        <td>\r\n                            <select multiple={false} onChange={onContractPathHandler} value={contractPath}>\r\n                                {contractpaths.map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n\r\n                        </td>\r\n                    </tr>\r\n\r\n\r\n                    <tr>\r\n                        <td colSpan=\"9\" className=\"alignLeft\" id=\"borderBottom\">\r\n                            -에스원비즈 삼성센터(이하 \"갑\")과 상기 회원(이하 \"을\")은 \"갑\"이 제공하는 서비스를 \"을\"이 이용함에 있어서 수반되는 사항을 본\r\n                            이용계약서 약관대로 체결하고, 본 &nbsp; 계약의 성립을 증명하기 위하여 본 이용계약서 2부를 작성하여 기명, 날인하고 각 한 부씩 보관한다.\r\n                        <br />-본 이용계약서로는 임대차계약서를 대신할 수 없음\r\n                    </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"9\" className=\"alignRight\"\r\n                            id=\"borderTopBottom\"> 2021년 &nbsp;&nbsp; {new Date().getMonth() + 1}월 &nbsp;&nbsp; {new Date().getDate()}일\r\n                    </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td colSpan=\"5\" className=\"alignLeft\" id=\"fstTextSpacing\">\r\n\r\n                            갑: &nbsp; &nbsp; &nbsp;\r\n                        서울특별시 강남구 봉은사로 63길 11 명화빌딩 3, 4층(삼성동) <br />\r\n\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;㈜ 에스원테크 최현수 (인)<br />\r\n\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;계좌번호 : 우리은행 1005-002-433395<br />\r\n\r\n                        </td>\r\n                        <td colSpan=\"4\" className=\"alignLeft\" id=\"sndTextSpacing\">\r\n                            을 :&nbsp; &nbsp; &nbsp; \r\n                            {zipcode} {empAddress} {empDetailAddress}<br />\r\n                            &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {memberNm} {empIdName} (인)<br />\r\n                            <span id=\"hidden\">spacing</span>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <div class=\"btn-center\">\r\n                <input type=\"button\" hidden={props.newDataForm === 'N' || props.cDataForm === 'I'}\r\n                    onClick={temporaryStorage} value=\"임시저장\" />\r\n\r\n                <input type=\"button\" className=\"new\"\r\n                    hidden={props.newDataForm === 'N' || props.cDataForm === 'I'}\r\n                    onClick={onSubmitHandler} value=\"저장\" />\r\n\r\n\r\n                <input type=\"button\" className=\"memberId\" hidden={props.newDataForm !== 'N'}\r\n                    onClick={newMemberIdStorage} value=\"저장\" />\r\n\r\n\r\n                <input type=\"button\" className=\"contractId\" hidden={props.cDataForm !== 'I'}\r\n                    onClick={newContractIdStorage} value=\"저장\" />\r\n\r\n\r\n                <input type=\"button\" className=\"contractId\" hidden={props.cDataForm !== 'I'}\r\n                    onClick={newMemberIdModifyStorage} value=\"수정하기\" />\r\n\r\n\r\n                <input type=\"button\" value=\"출력\" />\r\n                <input type=\"button\" id=\"btnWidth\" value=\"임대차 계약처\" />\r\n                <input type=\"button\" className=\"memberId\" hidden={props.newDataForm !== 'N'}\r\n                    onClick={newTemporaryStorage} value=\"종료\" />\r\n                <input type=\"button\" className=\"contractId\" hidden={props.cDataForm !== 'I'}\r\n                    onClick={newTemporaryStorage} value=\"종료\" />\r\n                <input type=\"button\" hidden={ userStatus !== 'T'}\r\n                    onClick={onDeleteHandler} value=\"삭제\" />\r\n                <Link to=\"/member\">\r\n                </Link>\r\n            </div>\r\n        </form>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default S010100010;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100090.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100040.js",["186","187","188"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport Navbar from './Navbar';\r\nimport S010100010 from './S010100010';\r\nimport S010100050 from './S010100050';\r\nimport './css/S010100040.css';\r\nimport axios from \"axios\";\r\nimport Pagination from \"./utils/Pagination\";\r\n\r\n//엑셀다운로드\r\nimport xlsx from 'xlsx';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n// import DialogContent from '@material-ui/core/DialogContent';\r\n// import DialogContentText from '@material-ui/core/DialogContentText';\r\n// import DialogTitle from '@material-ui/core/DialogTitle';\r\n// import Button from '@material-ui/core/Button';\r\n//모달창 라이브러리 끝-->\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->ghy\r\n\r\n\r\nlet valueArr = [[]];\r\nlet queryArr = [['MEMBER_TP', '']];\r\nlet contractsStatus = [];\r\nlet endStatus = [{ key: '전체', value: '전체' },\r\n{ key: 'Y', value: 'Y' },\r\n{ key: 'N', value: 'N' }]\r\n\r\nlet memberName = '';\r\nlet memberEmpHp = '';\r\nlet memberIdM = '';\r\nlet rNum = 0;\r\n\r\nfunction S010100040(props) {\r\n\r\n    const [memberNm, setMemberNm] = useState('')\r\n    const [regNo, setRegNo] = useState('')\r\n    const [memberTp, setMemberTp] = useState('')\r\n    const [contractStatus, setContractStatus] = useState('')\r\n    const [memberSt, setMemberSt] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [numForDetailModal, setNumForDetailModal] = useState('')\r\n    const [empHpForDetailModal, setEmpHpForDetailModal] = useState('')\r\n    const [tbMember, setTbMember] = useState([])\r\n\r\n    //<!--모달창 속성 및 이벤트\r\n    const [open, setOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n\r\n    //페이징\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage, setPostsPerPage] = useState(10);\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n\r\n    const [memberIdModal,setMemberIdModal] = useState(0);\r\n\r\n\r\n    const memberList = () => {\r\n        axios.post('/api/s010100040/list')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('tb_member',response.data.rows);\r\n                    setTbMember(response.data.rows);\r\n                } else {\r\n                    alert(\"데이터 조회를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        memberList();\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        for (let i = 0; i < queryArr.length; i++) {\r\n\r\n            let firstVal = queryArr[i][0];\r\n            let secondVal = queryArr[i][1];\r\n            axios.post('/api/s010100140/selectTest', { firstVal: firstVal, secondVal: secondVal })\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        //console.log('ask_tp',response.data.rows);\r\n                        let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                        response.data.rows.map((data) =>\r\n                            arr.push({\r\n                                value: data.CD_V_MEANING,\r\n                                key: data.CD_V\r\n\r\n                            }));\r\n\r\n                        valueArr[i] = arr;\r\n                        //console.log(valueArr[2]);\r\n                    } else {\r\n                        alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                    }\r\n                })\r\n\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/s010100140/selectMemberSt')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('ask_tp',response.data.rows);\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n\r\n                        }));\r\n\r\n                    contractsStatus = arr;\r\n\r\n                } else {\r\n                    alert(\"회원상테 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n\r\n    }, [])\r\n\r\n    //<!--onSubmit\r\n    const onSearchSubmitHandler = (event) => {\r\n\r\n        const body = {\r\n            memberNm,\r\n            regNo,\r\n            name,\r\n            memberTp,\r\n            contractStatus,\r\n            memberSt\r\n        }\r\n\r\n        const memberList = () => {\r\n            axios.post('/api/s010100040/searchMember', body)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        //console.log('tb_member',response.data.rows);\r\n                        setTbMember(response.data.rows);\r\n                    } else {\r\n                        alert(\"검색에 실패하였습니다.\")\r\n                    }\r\n\r\n                })\r\n        }\r\n\r\n        memberList(body);\r\n\r\n    }\r\n    //onSubmit끝-->\r\n\r\n    const onHandleClickOpen = () => {\r\n        setStoreOpen(true);\r\n\r\n    };\r\n\r\n    const onHandleClickClose = () => {\r\n        setStoreOpen(false);\r\n        memberList();\r\n    }\r\n\r\n    const memberStHandler = (event) => {\r\n        setMemberSt(event.currentTarget.value);\r\n    }\r\n\r\n    const nameHandler = (event) => {\r\n        setName(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const memberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const regNoHandler = (event) => {\r\n        setRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const memberTpHandler = (event) => {\r\n        setMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n    const contractStatusHandler = (event) => {\r\n        setContractStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onHandleDetailClickOpen = (event) => {\r\n        //console.log(event.target.id);\r\n        memberEmpHp = event.target.id;\r\n        memberName = event.target.innerHTML;\r\n        memberIdM = event.target.className;\r\n        //console.log('memberIdM :',memberIdM);\r\n        //console.log('memberName :',memberName);\r\n        setEmpHpForDetailModal(memberEmpHp);\r\n        setNumForDetailModal(memberName);\r\n        setMemberIdModal(memberIdM);\r\n        setOpen(true);\r\n        //console.log('memberName',memberName);\r\n    }\r\n\r\n    const onHandleDetailClickClose = () => {\r\n        memberList();\r\n        setOpen(false);\r\n    }\r\n\r\n    const onModifyHandler = (event) => {\r\n\r\n    }\r\n\r\n    const onApprovalHandler = (event) => {\r\n\r\n    }\r\n\r\n    const excelHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(tbMember);\r\n        console.log(tbMember);\r\n\r\n        ['NO','사업자번호','회원명','회원구분','상태','대표자 성명','대표자 연락처','대표자 E-mail','종료여부']\r\n        .forEach((x,idx) => {\r\n            const cellAdd = xlsx.utils.encode_cell({c:idx,r:0});\r\n            ws[cellAdd].v = x;\r\n            \r\n        })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][0] = {hidden:true};\r\n        \r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb,ws,\"Sheet1\");\r\n        xlsx.writeFile(wb,\"회원현황.xlsx\");\r\n\r\n    }\r\n\r\n    const s010100040R = tbMember.map((tbMember, index) => {\r\n        return (\r\n            <tr className='dataTable'>\r\n                <td name=\"uname\" variant=\"outlined\" color=\"primary\"\r\n                    id={tbMember.MEMBER_ID}> {index + 1}</td>\r\n                <td >{tbMember.MEMBER_NM}</td>\r\n                <td id={tbMember.REG_NO}>{tbMember.REG_NO}</td>\r\n                <td onClick={onHandleDetailClickOpen} className={tbMember.MEMBER_ID} id={tbMember.EMP_HP}>{tbMember.NAME}</td>\r\n                <td >{tbMember.EMP_HP}</td>\r\n                <td >{tbMember.EMP_EMAIL}</td>\r\n                <td >{tbMember.MEMBER_TP}</td>\r\n                <td >{tbMember.MEMBER_ST}</td>\r\n                <td >{tbMember.END_FLAG}</td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    const currentPosts = s010100040R.slice(indexOfFirstPost, indexOfLastPost);\r\n    //Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n            <Navbar />\r\n\r\n            <form style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                width: '100%',\r\n            }} onSubmit={onSearchSubmitHandler}\r\n            >\r\n\r\n                <h1>회원현황</h1>\r\n                <div id=\"search\">\r\n\r\n                    회원명&nbsp;\r\n                    <input type=\"text\" value={memberNm} id=\"memberNm\" name=\"memberNm\" size=\"5\"\r\n                        onChange={memberNmHandler} />\r\n                    &nbsp;\r\n\r\n\r\n                    사업자번호 &nbsp;\r\n                    <input type=\"text\" value={regNo} id=\"regNo\" name=\"regNo\" size=\"10\"\r\n                        onChange={regNoHandler} />\r\n                    &nbsp;\r\n\r\n\r\n                    대표자명 &nbsp;\r\n                    <input type=\"text\" value={name} id=\"name\" name=\"name\" size=\"5\"\r\n                        onChange={nameHandler} />\r\n                    &nbsp;\r\n\r\n                    회원구분 &nbsp;\r\n                    <select multiple={false} onChange={memberTpHandler} value={memberTp}>\r\n\r\n                        {valueArr[0].map(item => (\r\n                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                        ))}\r\n                    </select>\r\n                    &nbsp;\r\n                    종료 &nbsp;\r\n                    <select multiple={false} onChange={contractStatusHandler} value={contractStatus}>\r\n                        {endStatus.map(item => (\r\n                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                        ))}\r\n                    </select>\r\n\r\n                    &nbsp;\r\n                    상태 &nbsp;\r\n                    <select multiple={false} onChange={memberStHandler} value={memberSt}>\r\n\r\n                        {contractsStatus.map(item => (\r\n                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                        ))}\r\n                    </select>\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    <input type=\"button\" onClick={onSearchSubmitHandler} value=\"조회\"></input>\r\n                </div>\r\n\r\n                <Dialog\r\n                    maxWidth={\"lg\"}\r\n                    open={open}\r\n                    onClose={onHandleDetailClickClose}>\r\n                    <S010100050 dataMemId = {memberIdModal} dataName={numForDetailModal} dataForm={\"U\"} dataEmpHp={empHpForDetailModal} />\r\n                    <DialogActions>\r\n                        {/* <Button onClick={onhandleStoreClose} color=\"primary\" autoFocus>\r\n                                저장\r\n                            </Button> */}\r\n                        <input type=\"button\" id=\"contractBtn\" onClick={onHandleDetailClickClose} color=\"primary\"\r\n                            value='닫기' />\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n\r\n                <table className=\"btn\">\r\n                    <thead>\r\n                        <tr>\r\n                            <td colSpan=\"5\">\r\n                                <input type=\"button\" onClick={onHandleClickOpen} value=\"신규회원\"></input>\r\n                                <input type=\"button\" onClick={onModifyHandler} value=\"SNS\" />\r\n                                <input type=\"button\" onClick={onApprovalHandler} value=\"메일전송\" />\r\n                            </td>\r\n                            <td id=\"alignRight\">\r\n                                <input type=\"button\" onClick = {excelHandler} value=\"엑셀다운로드\"></input>\r\n                            </td>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n\r\n                <table id=\"list\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th rowSpan=\"2\">No</th>\r\n                            <th rowSpan=\"2\">회원명</th>\r\n                            <th rowSpan=\"2\">사업자번호</th>\r\n                            <th colSpan=\"3\">대표자</th>\r\n                            <th rowSpan=\"2\">회원구분</th>\r\n                            <th rowSpan=\"2\">상태</th>\r\n                            <th rowSpan=\"2\">종료여부</th>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <th>성명</th>\r\n                            <th>연락처</th>\r\n                            <th>E-mail</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {currentPosts}\r\n                    </tbody>\r\n                </table>\r\n                <Pagination postsPerPage={postsPerPage} totalPosts={s010100040R.length} paginate={paginate} />\r\n            </form>\r\n\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={storeOpen}\r\n                onClose={onHandleClickClose}>\r\n                <S010100010 />\r\n                <DialogActions>\r\n                    <input type=\"button\" onClick={onHandleClickClose} color=\"primary\" value=\"닫기\">\r\n                    </input>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100040;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100060.js",["189","190","191"],"import React, {Fragment, useEffect, useState} from 'react';\r\nimport Navbar from './Navbar';\r\nimport S010100070 from \"./S010100070\";\r\nimport Pagination from \"./utils/Pagination\";\r\n//엑셀다운로드\r\nimport xlsx from 'xlsx';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, {registerLocale} from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nimport axios from \"axios\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport S010100010 from \"./S010100010\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nregisterLocale(\"ko\", ko);\r\n\r\n\r\n\r\n\r\n//켈린더 라이브러리 끝-->\r\nlet paymentState = [{key: '전체', value: '전체'},\r\n    {key: 'Y', value: 'Y'},\r\n    {key: 'N', value: 'N'}]\r\n\r\nfunction S010100060(props) {\r\n\r\n    const [userName, setUserName] = useState('');\r\n    const [paymentStatus, setPaymentStatus] = useState('');\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date('2021/02/01'));\r\n    const [endDate, setEndDate] = useState(new Date('2021/03/01'));\r\n    //캘린더 속성 끝--> \r\n\r\n    const [payStatusList, setPayStatusList] = useState([]);\r\n    const [storeOpen, setStoreOpen] = useState(false);\r\n    const [dataAllContract, setDataAllContract] = useState('');\r\n\r\n    //페이징\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage, setPostsPerPage] = useState(10);\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n    \r\n   \r\n    useEffect(() => {\r\n        let body = {\r\n            startDate: startDate,\r\n            endDate: endDate\r\n        }\r\n        axios.post('/api/s010100060/list', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    console.log('list60', response.data.rows);\r\n                    setPayStatusList(response.data.rows);\r\n                } else {\r\n                    alert(\"데이터 조회를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n    }, [])\r\n\r\n    const paymentSearchHandler = (event) => {\r\n        let body = {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            userName: userName,\r\n            paymentStatus: paymentStatus\r\n        }\r\n        axios.post('/api/s010100060/list', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    console.log('list60', response.data.rows);\r\n                    setPayStatusList(response.data.rows);\r\n                } else {\r\n                    alert(\"데이터 조회를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n    //<!--onSubmit\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n    }\r\n    //onSubmit끝-->\r\n\r\n    const nameSearchHandler = (event) => {\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler = (event) => {\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onPayHandleClickClose = () => {\r\n        setStoreOpen(false);\r\n    }\r\n\r\n\r\n    const handleToggle = (e) => {\r\n        console.log('event', e.target.id);\r\n\r\n\r\n        const currentIndex = checked.indexOf(e.target.id);\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        const newChecked = checked;\r\n\r\n            if (currentIndex === -1) {\r\n                newChecked.push(e.target.id)\r\n            } else {\r\n                newChecked.splice(currentIndex, 1)\r\n            }\r\n\r\n        setChecked(newChecked);\r\n        //빽주고\r\n        //state를 넣어준다\r\n\r\n        //e.target.checked = false;\r\n\r\n        console.log('currentIndex', currentIndex);\r\n        console.log('checked', checked);\r\n\r\n        // handleFilters(filters,tb_s10_ask010);\r\n\r\n    }\r\n\r\n    const onPaymenthandler = () => {\r\n        if (checked.length === 0) {\r\n            alert('선택하세요');\r\n        } else if(checked.length > 1){\r\n            alert('하나만 체크하세요');\r\n        }else {\r\n                setDataAllContract(checked);\r\n                //console.log(checked);\r\n                setStoreOpen(true);\r\n        }\r\n    }\r\n\r\n    const excelHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(payStatusList);\r\n        console.log(payStatusList);\r\n\r\n        ['회원명','납부예정일','납부여부','납부일자','계약기간','계약기간','대표자 성명','대표자 연락처','대표자 E-mail','계약ID']\r\n        .forEach((x,idx) => {\r\n            const cellAdd = xlsx.utils.encode_cell({c:idx,r:0});\r\n            ws[cellAdd].v = x;\r\n            \r\n        })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][9] = {hidden:true};\r\n        \r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb,ws,\"Sheet1\");\r\n        xlsx.writeFile(wb,\"고객납부현황.xlsx\");\r\n\r\n    }\r\n\r\n\r\n    const s010100060R = payStatusList.map((payStatusList, index) => {\r\n        return (\r\n            <tr class='dataTable'>\r\n                <td><input type=\"checkbox\" onChange={handleToggle} id={payStatusList.CONTRACT_ID}/></td>\r\n                <td name=\"uname\" variant=\"outlined\" color=\"primary\">\r\n                    {payStatusList.CONTRACT_ID}\r\n                </td>\r\n                <td>{payStatusList.MEMBER_NM}</td>\r\n                <td>{payStatusList.PAY_PLAN_DATE}</td>\r\n                <td>{payStatusList.PAYED_FLAG}</td>\r\n                <td>{payStatusList.PAYED_DATE}</td>\r\n                <td>{payStatusList.START_DATE} ~ {payStatusList.END_DATE}</td>\r\n                <td>{payStatusList.NAME}</td>\r\n                <td>{payStatusList.EMP_HP}</td>\r\n                <td>{payStatusList.EMP_EMAIL}</td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    const currentPosts = s010100060R.slice(indexOfFirstPost, indexOfLastPost);\r\n    //Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Navbar/>\r\n            <form style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                width: '100%'\r\n            }}\r\n                  onSubmit={onSubmitHandler}\r\n            >\r\n\r\n                <h1>고객납부현황</h1>\r\n                <div id=\"search\">\r\n\r\n                    납부예정일&nbsp;\r\n                    {/* date클릭할 때 고정 */}\r\n                    <DatePicker\r\n                        selected={startDate}\r\n                        onChange={date => setStartDate(date)}\r\n                        selectsStart\r\n                        startDate={startDate}\r\n                        endDate={endDate}\r\n                        dateFormat=\"yyyy.MM.dd\"\r\n                    /> ~&nbsp;\r\n                    <DatePicker\r\n                        selected={endDate}\r\n                        onChange={date => setEndDate(date)}\r\n                        selectsEnd\r\n                        startDate={startDate}\r\n                        endDate={endDate}\r\n                        minDate={startDate}\r\n                        dateFormat=\"yyyy.MM.dd\"\r\n                    />\r\n\r\n                    {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                    &nbsp;\r\n                    회원명&nbsp;\r\n                    <input type=\"text\" value={userName} id=\"userName\" name=\"userName\" size=\"5\"\r\n                           onChange={nameSearchHandler}/>\r\n                    &nbsp;\r\n\r\n                    납부여부&nbsp;\r\n                    <select multiple={false} onChange={paymentStatusHandler} value={paymentStatus}>\r\n\r\n                        {paymentState.map(item => (\r\n                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                        ))}\r\n\r\n                    </select>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    <input type=\"button\" value=\"조회\" onClick={paymentSearchHandler}></input>\r\n                </div>\r\n\r\n\r\n                <table id=\"btn\">\r\n                    <thead>\r\n                    <tr>\r\n                        <td id=\"btd\">\r\n                            <button className='loginBtn' onClick={onPaymenthandler}> 납부</button>\r\n                        </td>\r\n                        <td id=\"btd2\">\r\n                            <input type =\"button\" onClick ={excelHandler} value = \"엑셀다운로드\"></input>\r\n                        </td>\r\n                    </tr>\r\n                    </thead>\r\n                </table>\r\n\r\n                <table id=\"list\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th rowSpan=\"2\">선택</th>\r\n                        <th rowSpan=\"2\">No</th>\r\n                        <th rowSpan=\"2\">회원명</th>\r\n                        <th rowSpan=\"2\">납부예정일</th>\r\n                        <th rowSpan=\"2\">납부여부</th>\r\n                        <th rowSpan=\"2\">납부일자</th>\r\n                        <th rowSpan=\"2\">계약기간</th>\r\n                        <th colSpan=\"3\">대표자</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>성명</th>\r\n                        <th>연락처</th>\r\n                        <th>E-mail</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {currentPosts}\r\n                    </tbody>\r\n                </table>\r\n                <Pagination postsPerPage={postsPerPage} totalPosts={s010100060R.length} paginate={paginate} />\r\n                <Dialog\r\n                    maxWidth={\"lg\"}\r\n                    open={storeOpen}\r\n                    onClose={onPayHandleClickClose}>\r\n                    <S010100070 dataContracId={dataAllContract}/>\r\n                    <DialogActions>\r\n                        <input type=\"button\" onClick={onPayHandleClickClose} color=\"primary\" value=\"닫기\">\r\n                        </input>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n            </form>\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100060;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100130.js",["192","193","194"],"//<<상담현황 페이지>>\r\nimport React, {Fragment, useEffect, useState} from 'react';\r\nimport './css/S010100130.css';\r\nimport Navbar from './Navbar';\r\nimport axios from 'axios';\r\nimport S010100140 from './S010100140';\r\nimport Pagination from \"./utils/Pagination\";\r\n\r\n\r\n//엑셀다운로드\r\nimport xlsx from 'xlsx';\r\n\r\n//모달창 따로 분리해서 태그로 쓸 것\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n//모달창 라이브러리 끝-->\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, {registerLocale} from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\n\r\nlet dataForm = '';\r\n\r\nlet ask_tps = []\r\n\r\nfunction S010100130(props) {\r\n    const [data] = useState('I');\r\n    //console.log(data);\r\n    const [numForDetail, setNumForDetail] = useState('')\r\n    //TB_S10_ASK010 테이블 조회\r\n    const [tb_s10_ask010, setTb_s10_ask010] = useState([])\r\n    const [deleteAskOpen, setDeleteAskOpen] = React.useState(false);\r\n\r\n    //페이징\r\n\r\n    const [currentPage,setCurrentPage] = useState(1);\r\n    const [postsPerPage,setPostsPerPage] = useState(10);\r\n\r\n\r\n    useEffect(() => {\r\n        searchAsk();\r\n    }, [])\r\n\r\n\r\n    const searchAsk = () => {\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n\r\n         axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                //console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n    }\r\n    //<Lov(List of Value)를 데이터 베이스에서 가져오기\r\n\r\n    //select-option\r\n    const [ask_tp, setAsk_tp] = useState('')\r\n\r\n    //문의 구분\r\n    useEffect(() => {\r\n        axios.post('/api/s010100130/ask_tp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('Lov-ask_tp',response.data);\r\n                    let arr = [{key: '전체', value: '전체'}]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                    ask_tps = arr;\r\n\r\n                } else {\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n    //lov 끝>\r\n\r\n\r\n    //<!--모달창 속성 및 이벤트 \r\n    const [open, setOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n\r\n    //<상담등록 모달\r\n    const onHandleClickOpen = (event) => {\r\n        //console.log('상담열기');\r\n        setStoreOpen(true);\r\n\r\n    };\r\n\r\n    //상담등록 닫기 할 때 새로고침해서 가져오는 것\r\n    const onHandleClickClose = (event) => {\r\n        setStoreOpen(false);\r\n           searchAsk();\r\n    };\r\n    //상담등록 모달 끝>\r\n\r\n\r\n    // //<상세보기 모달\r\n    const onDetailHandleClickOpen = (event) => {\r\n        //console.log('target',event.target.id);\r\n        num = event.target.id;\r\n        rNum = parseInt(num);\r\n        setNumForDetail(rNum);\r\n        setOpen(true);\r\n    };\r\n\r\n    const onDetailHandleClickClose = () => {\r\n        setOpen(false);\r\n        searchAsk();\r\n\r\n    };\r\n    //상세보기 모달 끝>\r\n    //모달창 속성 및 이벤트 끝--!>\r\n\r\n\r\n    const [checkForDelete, setCheckForDelete] = useState(true);\r\n\r\n    const onDeleteHandle = () => {\r\n        setCheckForDelete(false);\r\n    }\r\n\r\n    const onBackHandle = () => {\r\n        setCheckForDelete(true);\r\n        setChecked([]);\r\n    }\r\n\r\n     const [checked, setChecked] = useState([]);\r\n\r\n        const handleToggle = (e) => {\r\n            //console.log('event', e.target.id);\r\n\r\n\r\n            const currentIndex= checked.indexOf(e.target.id);\r\n            //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n            const newChecked = checked;\r\n\r\n            if(currentIndex === -1){\r\n                newChecked.push(e.target.id)\r\n            }else {\r\n                newChecked.splice(currentIndex,1)\r\n            }\r\n            setChecked(newChecked);\r\n            //빽주고\r\n            //state를 넣어준다\r\n\r\n            //e.target.checked = false;\r\n\r\n            // console.log('currentIndex', currentIndex);\r\n            // console.log('checked', checked);\r\n\r\n            // handleFilters(filters,tb_s10_ask010);\r\n\r\n        }\r\n\r\n    //문의자명 속성\r\n    const [ask_name, setAsk_name] = useState(\"\")\r\n\r\n    //문의구분 select-option이벤트\r\n    const onAsk_tpHandler = (event) => {\r\n        setAsk_tp(event.currentTarget.value);\r\n    }\r\n\r\n    //문의자명 input type = \"text\"이벤트\r\n    const onAsk_nameHandler = (event) => {\r\n        setAsk_name(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onHandleDelete = (event) => {\r\n        setDeleteAskOpen(true);\r\n    }\r\n\r\n    const handleClose=(event)=>{\r\n        setDeleteAskOpen(false);\r\n    }\r\n\r\n    const deleteHandle = (event)=>{\r\n        let askIdArray = checked;\r\n        //console.log(askIdArray);\r\n        //'/api/s010100130/delete'\r\n         axios.post('/api/s010100130/delete',askIdArray)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    // //console.log('상담닫기',response.data.rows)\r\n                    // setTb_s10_ask010(response.data.rows)\r\n                } else {\r\n                    alert(\"error\")\r\n                }\r\n\r\n            })\r\n\r\n        setDeleteAskOpen(false);\r\n\r\n         const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n\r\n         axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                //console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n\r\n        setChecked([]);\r\n        onBackHandle();\r\n\r\n\r\n    }\r\n\r\n\r\n    //캘린더 속성\r\n    const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endAsk_date, setEndAsk_date] = useState(new Date());\r\n\r\n\r\n    // 조회 <!--onSubmit\r\n    const onHandleFormSubmit = (event) => {\r\n        //console.log('조회', event);\r\n\r\n        event.preventDefault();\r\n\r\n        // if(method.valueOf('전체')||!startDate||!endDate||!searchName){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n        //alert('ask_tp',ask_tp);\r\n        //console.log(\"조회조건\", body);\r\n        // alert('startDate day:'+startAsk_date.getDay());\r\n        // alert('endDate year:'+endAsk_date.getFullYear());\r\n        // alert('endDate day:'+endAsk_date.getDate());\r\n        // alert('endDate month:'+endAsk_date.getMonth()+1);\r\n        // alert(endAsk_date.getFullYear() + '/' + (endAsk_date.getMonth()+1) +'/'+endAsk_date.getDate());\r\n        // alert('startDate:'+startAsk_date.getMonth());\r\n\r\n        axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                //console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    const excelHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(tb_s10_ask010);\r\n        console.log(tb_s10_ask010);\r\n\r\n        ['NO','문의구분','문의일자','문의방법','접근경로','문의자명','연락처']\r\n        .forEach((x,idx) => {\r\n            const cellAdd = xlsx.utils.encode_cell({c:idx,r:0});\r\n            ws[cellAdd].v = x;\r\n            \r\n        })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][0] = {hidden:true};\r\n        \r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb,ws,\"Sheet1\");\r\n        xlsx.writeFile(wb,\"상담현황.xlsx\");\r\n\r\n    }\r\n\r\n\r\n//onSubmit끝-->\r\n\r\n\r\n    const s010100130R = tb_s10_ask010.map((tb_s10_ask010, index) => {\r\n        return (\r\n            <tr class='dataTable'>\r\n                <td id=\"chkLine\" hidden={checkForDelete}>\r\n                    {/*밑줄처리*/}\r\n                    <span id = \"underLine\"><input type=\"checkbox\"  onChange={handleToggle} id={tb_s10_ask010.ASK_ID}/></span></td>\r\n\r\n                {/*<input type = \"checkbox\" onChange={onCheckboxHandler} id={tb_s10_ask010.ASK_ID}/>*/}\r\n                <td className=\"cname\" name=\"cname\" variant=\"outlined\" color=\"primary\" onClick={onDetailHandleClickOpen} id={tb_s10_ask010.ASK_ID}>\r\n                    {index + 1}</td>\r\n                <td>{tb_s10_ask010.ASK_TP}</td>\r\n                <td >{tb_s10_ask010.ASK_DATE}</td>\r\n                <td>{tb_s10_ask010.ASK_METHOD}</td>\r\n                <td>{tb_s10_ask010.ASK_NAME}</td>\r\n                <td >{tb_s10_ask010.ASK_INFO}</td>\r\n                <td>{tb_s10_ask010.ASK_PATH}</td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    //Get current tb_s10_ask010;\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    const currentPosts = s010100130R.slice(indexOfFirstPost,indexOfLastPost);\r\n\r\n\r\n    //Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n    return (\r\n        <Fragment>\r\n            <Navbar/>\r\n\r\n            <form style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                width: '100%'\r\n            }} onSubmit={onHandleFormSubmit}>\r\n\r\n                <h1>상담현황</h1>\r\n                <div id=\"search\">\r\n                    <div id=\"datePickerArea\">\r\n                        문의일자\r\n                        &nbsp;\r\n                        {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            locale=\"ko\"\r\n                            selected={startAsk_date}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                            onChange={date => setStartAsk_date(date)}\r\n                            selectsStart\r\n                            startDate={startAsk_date}\r\n                            endDate={endAsk_date.setHours(9, 0, 0, 0)}\r\n                            dateFormat=\"yyyy.MM.dd\"\r\n                        />&nbsp;\r\n                        ~ &nbsp;\r\n                        <DatePicker\r\n                            locale=\"ko\"\r\n                            selected={endAsk_date}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                            onChange={date => setEndAsk_date(date)}\r\n                            selectsEnd\r\n                            startDate={startAsk_date}\r\n                            endDate={endAsk_date}\r\n                            minDate={startAsk_date}\r\n                            dateFormat=\"yyyy.MM.dd\"\r\n                        />\r\n                    </div>\r\n                    {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n\r\n                    <div id=\"searchArea\">\r\n                        문의구분\r\n                        &nbsp;\r\n                        <select multiple={false} onChange={onAsk_tpHandler} value={ask_tp}>\r\n\r\n                            {ask_tps.map(item => (\r\n                                <option key={item.key} value={item.key}>{item.value}</option>\r\n                            ))}\r\n\r\n                        </select>\r\n                        &nbsp;\r\n\r\n                        문의자명\r\n                        &nbsp;\r\n                        <input type=\"text\" value={ask_name} id=\"ask_name\" name=\"ask_name\" size=\"5\"\r\n                               onChange={onAsk_nameHandler}/>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button type=\"submit\" onClick={onHandleFormSubmit}>조회</button>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <table id=\"btn\">\r\n                    <thead>\r\n                    <tr>\r\n                        <td id=\"btd\">\r\n                            <input type=\"button\" className='loginBtn' onClick={onHandleClickOpen} value=\"상담등록\"/>\r\n                            <input type=\"button\" className='deleteBtn' hidden={!checkForDelete} onClick={onDeleteHandle}\r\n                                   value=\"삭제하기\"/>\r\n                            <input type=\"button\" className='backBtn' hidden={checkForDelete} onClick={onBackHandle}\r\n                                   value=\"되돌리기\"/>\r\n                            <input type=\"button\" className='delete' onClick={onHandleDelete} value=\"삭제\"\r\n                                   hidden={checkForDelete}/>\r\n                                   <Dialog\r\n                                        open={deleteAskOpen}\r\n                                        onClose={onHandleDelete}>\r\n                                        <DialogTitle id=\"alert-dialog-title\">{\"체크한 행을 삭제할까요?\"}</DialogTitle>\r\n                                        <DialogActions>\r\n                                          <Button onClick={deleteHandle} color=\"primary\">\r\n                                           네\r\n                                          </Button>\r\n                                          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                                            아니오\r\n                                          </Button>\r\n                                        </DialogActions>\r\n                                      </Dialog>\r\n                        </td>\r\n                        <td id=\"btd2\"><input type=\"button\" onClick={excelHandler} value='엑셀다운로드'/></td>\r\n                    </tr>\r\n                    </thead>\r\n                </table>\r\n                {/* 모달창 시작*/}\r\n                <Dialog\r\n                    maxWidth={\"lg\"}\r\n                    open={open}>\r\n                    <S010100140 dataForm={\"U\"} num={numForDetail}/>\r\n                    <DialogActions>\r\n                        <input type=\"button\" onClick={onDetailHandleClickClose} color=\"primary\" value='닫기'/>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* // 모달창 끝 */}\r\n\r\n\r\n                {/* 모달창 시작*/}\r\n                <Dialog\r\n                    maxWidth={\"lg\"}\r\n                    open={storeOpen}\r\n                >\r\n                    <S010100140 dataForm={data} num={numForDetail}/>\r\n                    <DialogActions>\r\n                        <input type=\"button\" onClick={onHandleClickClose} color=\"primary\" value='닫기'/>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* // 모달창 끝 */}\r\n\r\n                <table id=\"list\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th colSpan='2' id='chkWidth' hidden={checkForDelete}>No</th>\r\n                        <th id='chkWidth' hidden={!checkForDelete}>No</th>\r\n                        <th>문의 구분</th>\r\n                        <th>문의일자</th>\r\n                        <th>문의방법</th>\r\n                        <th>문의자명</th>\r\n                        <th>연락처</th>\r\n                        <th>접근경로</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {currentPosts}\r\n                    </tbody>\r\n              </table>\r\n                <Pagination postsPerPage={postsPerPage} totalPosts={s010100130R.length} paginate={paginate}/>\r\n\r\n            </form>\r\n\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100130;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100050.js",["195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Navbar.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100150.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100140.js",["217","218","219","220","221","222","223","224","225","226","227"],"//<<상담등록 페이지>>\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport { addDays } from 'date-fns';\r\nimport './css/S010100140.css';\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko'\r\nregisterLocale(\"ko\", ko);\r\n//datepicker끝\r\n\r\n\r\n\r\n\r\n\r\nfunction S010100140(props) {\r\n    \r\n     //console.log(props.dataForm);\r\n     //console.log(props.num);\r\n\r\n\r\n            const rNum = props.num;\r\n            //console.log('rNum',rNum);\r\n            //const modal = props.modal;\r\n\r\n            useEffect(()=>{\r\n            //if(isNaN(rNum)){ return alert('숫자를 클릭하세요') }\r\n\r\n                    if (props.dataForm === 'U'){\r\n\r\n                    axios.get(`/api/s010100140/tb_s10_ask010_by_id?id=${rNum}&type=single`)\r\n                    .then(response => {\r\n                            if(response.data.success){\r\n                                //console.log(response.data)\r\n                                const askTp = (response.data.rows[0].ASK_TP);\r\n                                const askDate = (response.data.rows[0].ASK_DATE);\r\n                                const askMethod = (response.data.rows[0].ASK_METHOD);\r\n                                const askName = (response.data.rows[0].ASK_NAME);\r\n                                const askPath = (response.data.rows[0].ASK_PATH);\r\n                                const askInfo = (response.data.rows[0].ASK_INFO);\r\n                                const askContent = (response.data.rows[0].ASK_CONTENT);\r\n\r\n                                // setModalAskDate(askDate);\r\n                                //console.log('askDate', askDate);\r\n                                setModalAskTp(askTp);\r\n                                setModalAskName(askName);\r\n                                setModalAskMethod(askMethod);\r\n                                setModalAskPath(askPath);\r\n                                setModalAskInfo(askInfo);\r\n                                setModalAskContent(askContent);\r\n                                setStartDate(new Date(askDate));\r\n                            }else{\r\n                                alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                            }\r\n                        })\r\n                    }\r\n                   \r\n            },[])\r\n\r\n\r\n\r\n\r\n\r\n    //<Lov(List of Value)를 데이터 베이스에서 가져오기\r\n\r\n    //select-option\r\n        const[modalAskTp, setModalAskTp]= useState('')\r\n        const[modalAskMethod, setModalAskMethod] = useState('')\r\n        const[modalAskPath, setModalAskPath] = useState('')\r\n\r\n\r\n        const[modalContractTpLov, setModalContractTpLov]= useState([{key: '', value: 'waiting...'}])\r\n        const[modalAskMethodLov, setModalAskMethodLov] = useState( [{key: '', value: 'waiting...'}])\r\n        const[modalAccessPathLov, setModalAccessPathLov] = useState( [{key: '', value: 'waiting...'}])\r\n\r\n        useEffect(()=>{\r\n            getContractTpLov();\r\n            getAskMethodLov();\r\n            getAccessPathLov();\r\n        },[]);\r\n\r\n    const getContractTpLov = () => {\r\n        getLovByCdTp('CONTRACT_TP','ASK');\r\n    };\r\n    const getAskMethodLov = () => {\r\n        getLovByCdTp('ASK_METHOD','');\r\n    };\r\n    const getAccessPathLov = () => {\r\n        getLovByCdTp('ACCESS_PATH','ASK');\r\n    };\r\n    /**\r\n     * desc : LOV에 필요한 항목을 받아 DB조회 후 조회값을 반환하는 로직\r\n     * */\r\n    async function getLovByCdTp(cdTp, attribute2) {\r\n        let arr = [{ key: '선택', value: '선택' }];\r\n        return await axios.post('/api/s010100140/selectTest',{firstVal:cdTp,secondVal:attribute2})\r\n        .then(response => {\r\n            if(response.data.success){\r\n                //console.log('modalAskTp',response.data.rows);\r\n                response.data.rows.map((data) =>\r\n                    arr.push({\r\n                    value: data.CD_V_MEANING,\r\n                    key: data.CD_V\r\n                }));\r\n                //return arr;\r\n                switch (cdTp){\r\n                    case 'CONTRACT_TP' : setModalContractTpLov(arr); break;\r\n                    case 'ASK_METHOD' : setModalAskMethodLov(arr); break;\r\n                    case 'ACCESS_PATH' : setModalAccessPathLov(arr); break;\r\n                }\r\n                if(cdTp === 'CONTRACT_TP')\r\n                setModalAccessPathLov(arr);\r\n            }else{\r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\")\r\n            }\r\n        }).catch(() =>{\r\n              alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n        })\r\n        return arr;\r\n        console.log('arr',arr);\r\n    }\r\n\r\n    //<Lov끝>\r\n\r\n\r\n    //datepicker속성 및 이벤트 시작\r\n    const [modalAskDate, setModalAskDate] = useState(new Date());\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    //datepicker속성 및 이벤트 끝\r\n\r\n\r\n    //input type =\"text\"\r\n    const[modalAskName, setModalAskName] = useState(\"\")\r\n    const[modalAskInfo, setModalAskInfo] = useState(\"\")\r\n    const[modalAskContent, setModalAskContent] = useState(\"\")\r\n\r\n    //select-option 이벤트들\r\n    const onAskTpHandler=(event)=>{\r\n        console.log(event.currentTarget.value);\r\n        setModalAskTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskMethodHandler=(event)=>{\r\n        setModalAskMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskPathHandler=(event)=>{\r\n        setModalAskPath(event.currentTarget.value);\r\n    }\r\n\r\n    //input type = \"text\" 이벤트들\r\n    const onAskNameHandler=(event)=>{\r\n        setModalAskName(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskInfoHandler=(event)=>{\r\n        setModalAskInfo(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskContentHandler=(event)=>{\r\n        setModalAskContent(event.currentTarget.value);\r\n    }\r\n\r\n    const onChangeHandler = (event)=> {\r\n        // DatePicker.value\r\n    }\r\n\r\n    const onModifyHandler = ()=>{\r\n\r\n        const body = {\r\n            modalAskId : rNum,\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: startDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n\r\n        axios.post('/api/s010100140/modify',body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 수정되었습니다.')\r\n            }else{\r\n                alert('수정에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    //상담등록저장버튼클릭시\r\n    const onHandleSubmit=(event)=> {\r\n\r\n        event.preventDefault();\r\n        //   //문의구분 NUll체크\r\n          if(modalAskTp == null ||modalAskTp == ''||modalAskTp == '선택'){\r\n              //alert('modalAskTp: '+modalAskTp);\r\n              return alert(\"문의구분을 선택하세요.\");\r\n         }\r\n\r\n         //문의방법 NUll체크\r\n         if(modalAskMethod == null || modalAskMethod == ''){\r\n             //alert('111');\r\n            //alert((modalAskMethod == null)+ ',' + (modalAskMethod == '' ));\r\n            return alert(\"문의방법을 선택하세요.\");\r\n        }\r\n        \r\n         //접근경로 NUll체크\r\n         if(modalAskPath == null || modalAskPath == ''){\r\n            return alert(\"접근경로를 선택하세요.\");\r\n        }\r\n        \r\n    \r\n        //서버에 채운 값들을 request로 보낸다.\r\n        const body = {\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: startDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n             //console.log('setModalAskDate',setModalAskDate);\r\n\r\n\r\n        axios.post(\"/api/s010100140\",body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 등록되었습니다.')\r\n            }else{\r\n                alert('등록에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n    // console.log(startDate);\r\n\r\n    return (\r\n            <form onSubmit={onHandleSubmit} id = \"formWrapper\">\r\n            {/* <h1>상담등록</h1> */}\r\n            <div id =\"wrapper\">\r\n                <table className =\"buttonTable\">\r\n                    <tbody>\r\n                    <tr>\r\n                        <th>문의구분</th>\r\n                            <td>\r\n                                <select multiple={false} onChange ={onAskTpHandler} value ={modalAskTp} >\r\n\r\n                                    {modalContractTpLov.map(item => (\r\n                                        <option key ={item.key} value ={item.key}>{item.value}</option>\r\n                                    ))}\r\n                                    \r\n                                </select>\r\n\r\n                            </td>\r\n\r\n                        <th>문의일자</th>\r\n                            <td>\r\n                                {/* <DatePicker\r\n                                    locale=\"ko\"\r\n                                    selected={new Date()}\r\n                                    value={modalAskDate}\r\n                                    onChange={date => setModalAskDate(date)}\r\n                                    minDate={new Date()}\r\n                                    maxDate={addDays(new Date(), 0)}\r\n                                    dateFormat=\"yy.MM.dd (eee)\"\r\n\r\n                                /> */}\r\n                                <DatePicker\r\n                                    locale=\"ko\"\r\n                                    selected={startDate.setHours(9, 0, 0, 0)}\r\n                                    onChange={date => setStartDate(date)}\r\n                                    dateFormat=\"yyyy.MM.dd (eee)\"\r\n                                    onClick={onChangeHandler}\r\n                                />\r\n                            </td>\r\n\r\n                        <th>문의자명</th>\r\n                            <td>\r\n                                <input type=\"text\" \r\n                                    value = {modalAskName} \r\n                                    id=\"modalAskName\" \r\n                                    name=\"modalAskName\" \r\n                                    size = \"7\"\r\n                                    onChange={onAskNameHandler}\r\n                                />\r\n                            </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th>문의방법</th>\r\n                            <td>\r\n                                <select multiple={false} value={modalAskMethod} onChange={onAskMethodHandler}  >\r\n                                    {modalAskMethodLov.map(item=>(\r\n                                            <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                                    ))}\r\n\r\n                                </select>\r\n                            </td>\r\n\r\n                        <th>접근경로</th>\r\n                            <td>\r\n                                <select multiple={false} value={modalAskPath} onChange={onAskPathHandler}  >\r\n                                    {modalAccessPathLov.map(item =>(\r\n                                        <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                                    ))}\r\n\r\n                                </select>\r\n                            </td>\r\n\r\n                        <th>문의자연락처</th>\r\n                            <td>\r\n                                <input type = \"text\" value = {modalAskInfo}id = \"modalAskInfo\" name = \"modalAskInfo\" size = \"7\"\r\n                                onChange={onAskInfoHandler} />\r\n                            </td>\r\n                    </tr>\r\n\r\n\r\n                    <tr>\r\n                        <th>상담내용</th>\r\n                            <td colSpan=\"5\">\r\n                                <textarea rows =\"5\" cols = \"100\" value = {modalAskContent} id=\"modalAskContent\" name = \"modalAskContent\"\r\n                                onChange={onAskContentHandler} ></textarea>\r\n                            </td>\r\n                    </tr>\r\n                    </tbody>                        \r\n                </table>\r\n\r\n            </div>\r\n                <input type =\"button\" className = \"popBtn\" value=\"수정하기\" onClick = {onModifyHandler}hidden = {props.dataForm !== 'U'}/>\r\n                {/* <button>닫기</button> */}\r\n                <input className = \"popBtn\" type = \"submit\" hidden = {props.dataForm === 'U'}/>\r\n\r\n            </form>\r\n        \r\n    );\r\n  }\r\nexport default S010100140;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Pagination.js",["228"],"import React from 'react';\r\n\r\nconst Pagination = ({postsPerPage,totalPosts,paginate}) =>{\r\n    const pageNumbers = [];\r\n\r\n    for(let i = 1;i <= Math.ceil(totalPosts/postsPerPage);i++){\r\n        pageNumbers.push(i);\r\n\r\n    }\r\n    return(\r\n        <nav>\r\n            <ul className = \"pagination\" style = {{ margin:0, padding:0}} >\r\n                {pageNumbers.map(number =>(\r\n                    <li key = {number} className = \"pageItem\" style = {{float:\"left\",  margin:0, padding:0}}>\r\n                        <a onClick={()=>paginate(number)} classname = \"pageLink\">\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Pagination;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100070.js",["229","230","231","232","233","234","235","236"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Table.js",[],{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":1,"column":16,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"241","severity":1,"message":"245","line":6,"column":10,"nodeType":"243","messageId":"244","endLine":6,"endColumn":14},{"ruleId":"241","severity":1,"message":"246","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":12},{"ruleId":"241","severity":1,"message":"247","line":17,"column":5,"nodeType":"243","messageId":"244","endLine":17,"endColumn":15},{"ruleId":"237","replacedBy":"248"},{"ruleId":"239","replacedBy":"249"},{"ruleId":"241","severity":1,"message":"250","line":6,"column":18,"nodeType":"243","messageId":"244","endLine":6,"endColumn":27},{"ruleId":"251","severity":1,"message":"252","line":11,"column":1,"nodeType":"253","endLine":33,"endColumn":2},{"ruleId":"241","severity":1,"message":"250","line":1,"column":26,"nodeType":"243","messageId":"244","endLine":1,"endColumn":35},{"ruleId":"241","severity":1,"message":"254","line":3,"column":8,"nodeType":"243","messageId":"244","endLine":3,"endColumn":13},{"ruleId":"241","severity":1,"message":"255","line":6,"column":8,"nodeType":"243","messageId":"244","endLine":6,"endColumn":18},{"ruleId":"241","severity":1,"message":"256","line":11,"column":5,"nodeType":"243","messageId":"244","endLine":11,"endColumn":14},{"ruleId":"241","severity":1,"message":"257","line":12,"column":5,"nodeType":"243","messageId":"244","endLine":12,"endColumn":12},{"ruleId":"241","severity":1,"message":"258","line":13,"column":5,"nodeType":"243","messageId":"244","endLine":13,"endColumn":10},{"ruleId":"241","severity":1,"message":"247","line":15,"column":5,"nodeType":"243","messageId":"244","endLine":15,"endColumn":15},{"ruleId":"241","severity":1,"message":"259","line":25,"column":20,"nodeType":"243","messageId":"244","endLine":25,"endColumn":31},{"ruleId":"241","severity":1,"message":"260","line":26,"column":16,"nodeType":"243","messageId":"244","endLine":26,"endColumn":23},{"ruleId":"241","severity":1,"message":"261","line":27,"column":21,"nodeType":"243","messageId":"244","endLine":27,"endColumn":33},{"ruleId":"241","severity":1,"message":"262","line":28,"column":20,"nodeType":"243","messageId":"244","endLine":28,"endColumn":31},{"ruleId":"241","severity":1,"message":"263","line":29,"column":21,"nodeType":"243","messageId":"244","endLine":29,"endColumn":33},{"ruleId":"241","severity":1,"message":"264","line":30,"column":18,"nodeType":"243","messageId":"244","endLine":30,"endColumn":27},{"ruleId":"241","severity":1,"message":"242","line":1,"column":16,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"241","severity":1,"message":"242","line":1,"column":16,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"237","replacedBy":"265"},{"ruleId":"239","replacedBy":"266"},{"ruleId":"241","severity":1,"message":"267","line":46,"column":25,"nodeType":"243","messageId":"244","endLine":46,"endColumn":39},{"ruleId":"241","severity":1,"message":"268","line":51,"column":12,"nodeType":"243","messageId":"244","endLine":51,"endColumn":25},{"ruleId":"241","severity":1,"message":"269","line":52,"column":12,"nodeType":"243","messageId":"244","endLine":52,"endColumn":23},{"ruleId":"241","severity":1,"message":"270","line":61,"column":12,"nodeType":"243","messageId":"244","endLine":61,"endColumn":16},{"ruleId":"241","severity":1,"message":"271","line":62,"column":12,"nodeType":"243","messageId":"244","endLine":62,"endColumn":22},{"ruleId":"241","severity":1,"message":"272","line":62,"column":24,"nodeType":"243","messageId":"244","endLine":62,"endColumn":37},{"ruleId":"241","severity":1,"message":"273","line":71,"column":11,"nodeType":"243","messageId":"244","endLine":71,"endColumn":29},{"ruleId":"274","severity":1,"message":"275","line":123,"column":8,"nodeType":"276","endLine":123,"endColumn":10,"suggestions":"277"},{"ruleId":"274","severity":1,"message":"278","line":221,"column":8,"nodeType":"276","endLine":221,"endColumn":10,"suggestions":"279"},{"ruleId":"241","severity":1,"message":"280","line":278,"column":25,"nodeType":"243","messageId":"244","endLine":278,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":328,"column":25,"nodeType":"283","messageId":"284","endLine":347,"endColumn":26},{"ruleId":"241","severity":1,"message":"285","line":424,"column":11,"nodeType":"243","messageId":"244","endLine":424,"endColumn":29},{"ruleId":"286","severity":1,"message":"287","line":595,"column":26,"nodeType":"288","messageId":"289","endLine":595,"endColumn":28},{"ruleId":"286","severity":1,"message":"287","line":597,"column":32,"nodeType":"288","messageId":"289","endLine":597,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":599,"column":31,"nodeType":"288","messageId":"289","endLine":599,"endColumn":33},{"ruleId":"286","severity":1,"message":"287","line":601,"column":32,"nodeType":"288","messageId":"289","endLine":601,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":601,"column":60,"nodeType":"288","messageId":"289","endLine":601,"endColumn":62},{"ruleId":"286","severity":1,"message":"287","line":601,"column":87,"nodeType":"288","messageId":"289","endLine":601,"endColumn":89},{"ruleId":"241","severity":1,"message":"290","line":825,"column":15,"nodeType":"243","messageId":"244","endLine":825,"endColumn":19},{"ruleId":"286","severity":1,"message":"287","line":866,"column":29,"nodeType":"288","messageId":"289","endLine":866,"endColumn":31},{"ruleId":"241","severity":1,"message":"291","line":948,"column":9,"nodeType":"243","messageId":"244","endLine":948,"endColumn":22},{"ruleId":"241","severity":1,"message":"292","line":1103,"column":13,"nodeType":"243","messageId":"244","endLine":1103,"endColumn":22},{"ruleId":"286","severity":1,"message":"287","line":1158,"column":26,"nodeType":"288","messageId":"289","endLine":1158,"endColumn":28},{"ruleId":"286","severity":1,"message":"287","line":1161,"column":32,"nodeType":"288","messageId":"289","endLine":1161,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":1163,"column":31,"nodeType":"288","messageId":"289","endLine":1163,"endColumn":33},{"ruleId":"286","severity":1,"message":"287","line":1165,"column":32,"nodeType":"288","messageId":"289","endLine":1165,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":1165,"column":60,"nodeType":"288","messageId":"289","endLine":1165,"endColumn":62},{"ruleId":"286","severity":1,"message":"287","line":1165,"column":87,"nodeType":"288","messageId":"289","endLine":1165,"endColumn":89},{"ruleId":"241","severity":1,"message":"255","line":22,"column":8,"nodeType":"243","messageId":"244","endLine":22,"endColumn":18},{"ruleId":"241","severity":1,"message":"293","line":38,"column":5,"nodeType":"243","messageId":"244","endLine":38,"endColumn":9},{"ruleId":"241","severity":1,"message":"294","line":58,"column":26,"nodeType":"243","messageId":"244","endLine":58,"endColumn":41},{"ruleId":"241","severity":1,"message":"295","line":13,"column":8,"nodeType":"243","messageId":"244","endLine":13,"endColumn":18},{"ruleId":"241","severity":1,"message":"294","line":42,"column":26,"nodeType":"243","messageId":"244","endLine":42,"endColumn":41},{"ruleId":"274","severity":1,"message":"296","line":61,"column":8,"nodeType":"276","endLine":61,"endColumn":10,"suggestions":"297"},{"ruleId":"241","severity":1,"message":"298","line":34,"column":5,"nodeType":"243","messageId":"244","endLine":34,"endColumn":13},{"ruleId":"241","severity":1,"message":"294","line":49,"column":25,"nodeType":"243","messageId":"244","endLine":49,"endColumn":40},{"ruleId":"274","severity":1,"message":"299","line":54,"column":8,"nodeType":"276","endLine":54,"endColumn":10,"suggestions":"300"},{"ruleId":"241","severity":1,"message":"301","line":1,"column":38,"nodeType":"243","messageId":"244","endLine":1,"endColumn":46},{"ruleId":"241","severity":1,"message":"302","line":10,"column":8,"nodeType":"243","messageId":"244","endLine":10,"endColumn":14},{"ruleId":"241","severity":1,"message":"255","line":11,"column":8,"nodeType":"243","messageId":"244","endLine":11,"endColumn":18},{"ruleId":"241","severity":1,"message":"303","line":12,"column":10,"nodeType":"243","messageId":"244","endLine":12,"endColumn":17},{"ruleId":"241","severity":1,"message":"270","line":22,"column":12,"nodeType":"243","messageId":"244","endLine":22,"endColumn":16},{"ruleId":"241","severity":1,"message":"304","line":23,"column":12,"nodeType":"243","messageId":"244","endLine":23,"endColumn":31},{"ruleId":"241","severity":1,"message":"305","line":33,"column":12,"nodeType":"243","messageId":"244","endLine":33,"endColumn":30},{"ruleId":"241","severity":1,"message":"306","line":46,"column":12,"nodeType":"243","messageId":"244","endLine":46,"endColumn":25},{"ruleId":"241","severity":1,"message":"307","line":47,"column":12,"nodeType":"243","messageId":"244","endLine":47,"endColumn":23},{"ruleId":"241","severity":1,"message":"267","line":47,"column":25,"nodeType":"243","messageId":"244","endLine":47,"endColumn":39},{"ruleId":"241","severity":1,"message":"308","line":75,"column":12,"nodeType":"243","messageId":"244","endLine":75,"endColumn":22},{"ruleId":"241","severity":1,"message":"309","line":75,"column":24,"nodeType":"243","messageId":"244","endLine":75,"endColumn":37},{"ruleId":"241","severity":1,"message":"310","line":76,"column":12,"nodeType":"243","messageId":"244","endLine":76,"endColumn":25},{"ruleId":"241","severity":1,"message":"311","line":76,"column":27,"nodeType":"243","messageId":"244","endLine":76,"endColumn":43},{"ruleId":"241","severity":1,"message":"294","line":81,"column":26,"nodeType":"243","messageId":"244","endLine":81,"endColumn":41},{"ruleId":"241","severity":1,"message":"312","line":134,"column":27,"nodeType":"243","messageId":"244","endLine":134,"endColumn":37},{"ruleId":"274","severity":1,"message":"313","line":178,"column":8,"nodeType":"276","endLine":178,"endColumn":10,"suggestions":"314"},{"ruleId":"241","severity":1,"message":"315","line":200,"column":11,"nodeType":"243","messageId":"244","endLine":200,"endColumn":38},{"ruleId":"241","severity":1,"message":"316","line":253,"column":11,"nodeType":"243","messageId":"244","endLine":253,"endColumn":29},{"ruleId":"241","severity":1,"message":"317","line":270,"column":11,"nodeType":"243","messageId":"244","endLine":270,"endColumn":28},{"ruleId":"318","severity":1,"message":"319","line":419,"column":45,"nodeType":"320","endLine":419,"endColumn":89},{"ruleId":"318","severity":1,"message":"319","line":423,"column":45,"nodeType":"320","endLine":423,"endColumn":90},{"ruleId":"241","severity":1,"message":"303","line":5,"column":10,"nodeType":"243","messageId":"244","endLine":5,"endColumn":17},{"ruleId":"274","severity":1,"message":"321","line":59,"column":15,"nodeType":"276","endLine":59,"endColumn":17,"suggestions":"322"},{"ruleId":"274","severity":1,"message":"323","line":81,"column":11,"nodeType":"276","endLine":81,"endColumn":13,"suggestions":"324"},{"ruleId":"281","severity":1,"message":"282","line":107,"column":17,"nodeType":"283","messageId":"284","endLine":111,"endColumn":18},{"ruleId":"325","severity":1,"message":"326","line":120,"column":9,"nodeType":"327","messageId":"328","endLine":121,"endColumn":32},{"ruleId":"241","severity":1,"message":"329","line":128,"column":12,"nodeType":"243","messageId":"244","endLine":128,"endColumn":24},{"ruleId":"241","severity":1,"message":"330","line":128,"column":26,"nodeType":"243","messageId":"244","endLine":128,"endColumn":41},{"ruleId":"286","severity":1,"message":"287","line":199,"column":46,"nodeType":"288","messageId":"289","endLine":199,"endColumn":48},{"ruleId":"286","severity":1,"message":"287","line":199,"column":64,"nodeType":"288","messageId":"289","endLine":199,"endColumn":66},{"ruleId":"286","severity":1,"message":"287","line":205,"column":54,"nodeType":"288","messageId":"289","endLine":205,"endColumn":56},{"ruleId":"286","severity":1,"message":"287","line":212,"column":50,"nodeType":"288","messageId":"289","endLine":212,"endColumn":52},{"ruleId":"318","severity":1,"message":"331","line":15,"column":25,"nodeType":"320","endLine":15,"endColumn":82},{"ruleId":"241","severity":1,"message":"332","line":8,"column":8,"nodeType":"243","messageId":"244","endLine":8,"endColumn":13},{"ruleId":"241","severity":1,"message":"333","line":9,"column":10,"nodeType":"243","messageId":"244","endLine":9,"endColumn":20},{"ruleId":"241","severity":1,"message":"294","line":28,"column":26,"nodeType":"243","messageId":"244","endLine":28,"endColumn":41},{"ruleId":"274","severity":1,"message":"334","line":258,"column":8,"nodeType":"276","endLine":258,"endColumn":10,"suggestions":"335"},{"ruleId":"241","severity":1,"message":"336","line":260,"column":11,"nodeType":"243","messageId":"244","endLine":260,"endColumn":18},{"ruleId":"274","severity":1,"message":"337","line":260,"column":21,"nodeType":"243","endLine":260,"endColumn":28},{"ruleId":"241","severity":1,"message":"338","line":289,"column":15,"nodeType":"243","messageId":"244","endLine":289,"endColumn":19},{"ruleId":"274","severity":1,"message":"337","line":289,"column":22,"nodeType":"243","endLine":289,"endColumn":29},"no-native-reassign",["339"],"no-negated-in-lhs",["340"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Main' is defined but never used.","'registNums' is assigned a value but never used.",["339"],["340"],"'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Axios' is defined but never used.","'DatePicker' is defined but never used.","'RoomTypes' is assigned a value but never used.","'Methods' is assigned a value but never used.","'Paths' is assigned a value but never used.","'setUserName' is assigned a value but never used.","'setBnum' is assigned a value but never used.","'setOwnerName' is assigned a value but never used.","'setUserSort' is assigned a value but never used.","'setEndStatus' is assigned a value but never used.","'setStatus' is assigned a value but never used.",["339"],["340"],"'setEndAsk_date' is assigned a value but never used.","'contractStart' is assigned a value but never used.","'contractEnd' is assigned a value but never used.","'open' is assigned a value but never used.","'isPostOpen' is assigned a value but never used.","'setIsPostOpen' is assigned a value but never used.","'onHandleClickClose' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'modalMemberId' and 'props.newDataForm'. Either include them or remove the dependency array.","ArrayExpression",["341"],"React Hook useEffect has missing dependencies: 'props.cDataForm' and 'rNum'. Either include them or remove the dependency array.",["342"],"'conAccessPath' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'onNewSubmitHandler' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'body' is assigned a value but never used.","'contractTerms' is assigned a value but never used.","'startDate' is assigned a value but never used.","'rNum' is assigned a value but never used.","'setPostsPerPage' is assigned a value but never used.","'S010100010' is defined but never used.","React Hook useEffect has missing dependencies: 'endDate' and 'startDate'. Either include them or remove the dependency array.",["343"],"'dataForm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'searchAsk'. Either include it or remove the dependency array.",["344"],"'Fragment' is defined but never used.","'Button' is defined but never used.","'addDays' is defined but never used.","'nameForDetailCModal' is assigned a value but never used.","'detailCheckoutDate' is assigned a value but never used.","'startAsk_date' is assigned a value but never used.","'endAsk_date' is assigned a value but never used.","'modifyDate' is assigned a value but never used.","'setModifyDate' is assigned a value but never used.","'endModifyDate' is assigned a value but never used.","'setEndModifyDate' is assigned a value but never used.","'modalIdImg' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataEmpHp' and 'dataName'. Either include them or remove the dependency array.",["345"],"'onDetailCheckoutDateHandler' is assigned a value but never used.","'onDetailClickClose' is assigned a value but never used.","'onContractHandler' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'props.dataForm' and 'rNum'. Either include them or remove the dependency array.",["346"],"React Hook useEffect has missing dependencies: 'getAccessPathLov', 'getAskMethodLov', and 'getContractTpLov'. Either include them or remove the dependency array.",["347"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'modalAskDate' is assigned a value but never used.","'setModalAskDate' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Table' is defined but never used.","'useForkRef' is defined but never used.","React Hook useEffect has missing dependencies: 'dataContracId' and 'setPaymentStatusPayedDate'. Either include them or remove the dependency array.",["348"],"'columns' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},"Update the dependencies array to be: [modalMemberId, props.newDataForm]",{"range":"365","text":"366"},"Update the dependencies array to be: [props.cDataForm, rNum]",{"range":"367","text":"368"},"Update the dependencies array to be: [endDate, startDate]",{"range":"369","text":"370"},"Update the dependencies array to be: [searchAsk]",{"range":"371","text":"372"},"Update the dependencies array to be: [dataEmpHp, dataName]",{"range":"373","text":"374"},"Update the dependencies array to be: [props.dataForm, rNum]",{"range":"375","text":"376"},"Update the dependencies array to be: [getAccessPathLov, getAskMethodLov, getContractTpLov]",{"range":"377","text":"378"},"Update the dependencies array to be: [dataContracId, setPaymentStatusPayedDate]",{"range":"379","text":"380"},[5210,5212],"[modalMemberId, props.newDataForm]",[10165,10167],"[props.cDataForm, rNum]",[1920,1922],"[endDate, startDate]",[1312,1314],"[searchAsk]",[7214,7216],"[dataEmpHp, dataName]",[2323,2325],"[props.dataForm, rNum]",[3033,3035],"[getAccessPathLov, getAskMethodLov, getContractTpLov]",[9482,9484],"[dataContracId, setPaymentStatusPayedDate]"]