[{"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js":"1","C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js":"2","C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js":"3","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js":"4","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js":"5","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js":"6","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js":"7","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js":"8","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js":"9","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js":"10","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js":"11","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js":"12","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\index.js":"13","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\App.js":"14","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\reportWebVitals.js":"15","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Routes\\Routes.js":"16","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100010.js":"17","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100090.js":"18","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100040.js":"19","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100060.js":"20","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100130.js":"21","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100050.js":"22","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Navbar.js":"23","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100150.js":"24","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100140.js":"25","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Pagination.js":"26","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100070.js":"27","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Table.js":"28","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\LeaseAgreement.js":"29"},{"size":555,"mtime":1609727657789,"results":"30","hashOfConfig":"31"},{"size":240,"mtime":1609727648266,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":499162500000,"results":"33","hashOfConfig":"31"},{"size":11524,"mtime":1609829204925,"results":"34","hashOfConfig":"31"},{"size":1055,"mtime":1609833591029,"results":"35","hashOfConfig":"31"},{"size":8135,"mtime":1609830177180,"results":"36","hashOfConfig":"31"},{"size":2082,"mtime":1609828498424,"results":"37","hashOfConfig":"31"},{"size":994,"mtime":1609727352401,"results":"38","hashOfConfig":"31"},{"size":1306,"mtime":1609834092417,"results":"39","hashOfConfig":"31"},{"size":4553,"mtime":1609836098390,"results":"40","hashOfConfig":"31"},{"size":4356,"mtime":1609833363720,"results":"41","hashOfConfig":"31"},{"size":5135,"mtime":1609835439756,"results":"42","hashOfConfig":"31"},{"size":513,"mtime":1611243681610,"results":"43","hashOfConfig":"44"},{"size":194,"mtime":1611382711135,"results":"45","hashOfConfig":"44"},{"size":362,"mtime":499162500000,"results":"46","hashOfConfig":"44"},{"size":1757,"mtime":1612855611172,"results":"47","hashOfConfig":"44"},{"size":68367,"mtime":1612863056379,"results":"48","hashOfConfig":"44"},{"size":5560,"mtime":1611029744956,"results":"49","hashOfConfig":"44"},{"size":12221,"mtime":1612861592278,"results":"50","hashOfConfig":"44"},{"size":10952,"mtime":1612855611084,"results":"51","hashOfConfig":"44"},{"size":16306,"mtime":1612503259396,"results":"52","hashOfConfig":"44"},{"size":21279,"mtime":1612855611122,"results":"53","hashOfConfig":"44"},{"size":1142,"mtime":1611024681714,"results":"54","hashOfConfig":"44"},{"size":1860,"mtime":1611029762477,"results":"55","hashOfConfig":"44"},{"size":12627,"mtime":1612855611026,"results":"56","hashOfConfig":"44"},{"size":757,"mtime":1612861086429,"results":"57","hashOfConfig":"44"},{"size":14536,"mtime":1612858372919,"results":"58","hashOfConfig":"44"},{"size":1922,"mtime":1611984088776,"results":"59","hashOfConfig":"44"},{"size":23348,"mtime":1612860323668,"results":"60","hashOfConfig":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"2g9vyx",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"63"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"63"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"63"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"63"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"63"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"63"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"1pgckxh",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"96"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"96"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"96"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"96"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"96"},"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js",[],["138","139"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js",["140","141"],"import React,{ Component, Fragment,useEffect,useState } from 'react';\r\nimport './Counseling.css';\r\nimport Main from'../Main/Main.js';\r\nimport axios from \"axios\";\r\nimport CounselStatus from './CounselStatus';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n//모달창 라이브러리 끝-->\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\nvar rNum = '';\r\nvar Rnum = 0;\r\n\r\n\r\nvar Methods = []\r\n\r\nfunction Counseling (props) {\r\n\r\n    const[ConsultRegists, setConsultRegists] = useState([])\r\n\r\n    useEffect(()=>{\r\n        \r\n        axios.post('/api/register/registers')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    console.log(response.data.rows)\r\n                    setConsultRegists(response.data.rows)\r\n                }else{ \r\n                    alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n\r\n    },[])\r\n    \r\n    const[method, setMethod]=useState([])\r\n    \r\n    useEffect(()=>{\r\n        axios.post('/api/register/insertMethod')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log('insertMethod',response.data);\r\n                let arr = [{value: '전체', text: '전체' }]\r\n\r\n                response.data.rows.map((data) => \r\n                    arr.push({\r\n                    value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                }));\r\n                \r\n                Methods=arr;\r\n\r\n                console.log('insertMethodArr',arr);\r\n            }else{\r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n            }\r\n        })\r\n\r\n        \r\n        \r\n    },[])\r\n\r\n    //<!--모달창 속성 및 이벤트 \r\n    const [open, setOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    const [CRegists,setCRegists] = useState({});\r\n\r\n\r\n\r\n    //상담등록 모달\r\n    const onhandleClickOpen = () => {\r\n        setStoreOpen(true); \r\n     \r\n     };  \r\n\r\n                //상담등록 저장버튼이벤트\r\n                // const onhandleStoreClose = () => {\r\n                //     setOpen(false);\r\n                // }\r\n            \r\n     const onhandleClose = (event) => {\r\n          \r\n        axios.post('/api/register/registers')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log(response.data.rows)\r\n                setConsultRegists(response.data.rows)\r\n            }else{ \r\n                alert(\"상담등록 페이지 가져오기를 실패하였습니다.\")\r\n            }\r\n\r\n        })\r\n\r\n        setStoreOpen(false);\r\n       };\r\n    //상담등록 모달 끝\r\n\r\n    //상세보기 모달\r\n    const handleClickOpen = (e) => {\r\n       setOpen(true); \r\n       rNum = e.target.innerHTML\r\n       Rnum= parseInt(rNum);\r\n       //console.log(Rnum)\r\n\r\n       axios.get(`/api/register/register_by_id?id=${Rnum}&type=single`) \r\n       .then(response => {\r\n           if(response.data.success){\r\n               console.log(response.data)\r\n               setCRegists(response.data.rows[0])\r\n               //console.log(response.data.consultRegistInfo.num)\r\n           }else{\r\n               alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n           }\r\n\r\n       })\r\n    };  \r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n      //상세보기 모달 끝 \r\n    //모달창 속성 및 이벤트 끝-->\r\n\r\n\r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n\r\n        // if(method.valueOf('전체') ||!startDate||!endDate||!searchName){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n         const body = {\r\n            startDate,\r\n            searchName,\r\n            method,\r\n            endDate\r\n        }\r\n        \r\n        //console.log(body);\r\n        \r\n        axios.post(\"/api/register/search\",body)\r\n        .then(response => {\r\n            if(response?.data?.success){\r\n                console.log('search',response.data.rows);\r\n                setConsultRegists(response.data.rows);\r\n            }else{\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    \r\n\r\n\r\n    const[searchName, setSearchName] = useState(\"\")\r\n\r\n    const MethodChangeHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const nameSearchHandler=(event)=>{\r\n        setSearchName(event.currentTarget.value);\r\n    }\r\n\r\n    //console.log('ConsultRegists',ConsultRegists);\r\n\r\n    const resultTable = ConsultRegists.map((ConsultRegists,index)=>{\r\n\r\n        return<tr>\r\n                <td name =\"cname\" variant=\"outlined\" color=\"primary\" onClick={handleClickOpen} id={ConsultRegists.num}><u>{ConsultRegists.num}\r\n                </u></td>\r\n                {/* 모달창 시작 */}\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{CRegists.cname+\"님의 상담내용 입니다.\"}</DialogTitle>\r\n                    <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {CRegists.content}\r\n                    </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                        확인\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* 모달창 끝*/}\r\n\r\n                <td>{ConsultRegists.roomtype}</td>\r\n                <td>{ConsultRegists.counseldate}</td>\r\n                <td>{ConsultRegists.method}</td>\r\n                <td>{ConsultRegists.cname}</td>\r\n                <td>{ConsultRegists.phone}</td>\r\n                <td>{ConsultRegists.path}</td>\r\n                \r\n            </tr>\r\n    })\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                \r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>상담현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                        문의일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        문의구분 \r\n                        <select onChange ={MethodChangeHandler} value ={method}>   \r\n                        \r\n                            {Methods.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                    \r\n                        </select>\r\n                        &nbsp; \r\n\r\n                        문의자명\r\n                         <input type=\"text\" value = {searchName} id=\"searchlName\" name=\"searchName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onhandleClickOpen} >상담등록</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    {/* 모달창 시작 --> 504에러 */}\r\n                        <Dialog\r\n                            open={storeOpen}\r\n                            onClose={onhandleClose}\r\n                            aria-labelledby=\"alert-dialog-title\"\r\n                            aria-describedby=\"alert-dialog-description\"\r\n                        >\r\n                            <DialogTitle id=\"alert-dialog-title\"><h1>상담등록</h1></DialogTitle>\r\n                            <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                                 <CounselStatus/>\r\n                            </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                            {/* <Button onClick={onhandleStoreClose} color=\"primary\" autoFocus>\r\n                                저장\r\n                            </Button> */}\r\n                            <Button onClick={onhandleClose} color=\"primary\">\r\n                                닫기\r\n                            </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                     {/* // 모달창 끝        */}\r\n\r\n                    \r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>No</th>\r\n                            <th>문의 구분</th>\r\n                            <th>문의일자</th>\r\n                            <th>문의방법</th>\r\n                            <th>문의자명</th>\r\n                            <th>연락처</th>\r\n                            <th>접근경로</th>\r\n                        </tr>\r\n\r\n                        \r\n                            {resultTable}\r\n                       \r\n\r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Counseling;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js",["142","143"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\nimport { addDays } from 'date-fns';\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nimport \"./CounselStatus.css\";\r\nregisterLocale(\"ko\", ko);\r\n\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction CounselStatus(props) {\r\n\r\n    //Lov(List of Value)를 데이터 베이스에서 가져오기 \r\n        //select\r\n        const[RoomType,setRoomType] = useState(1)\r\n        const[Method, setMethod] = useState(1)\r\n        const[Path, setPath] = useState(1)\r\n\r\n        //문의구분\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/roomType')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('roomType',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    RoomTypes = arr;\r\n\r\n                    //console.log('roomTypeArr',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n            \r\n            \r\n        },[])\r\n\r\n        //문의방법\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/methodA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('method',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Methods = arr;\r\n\r\n                    //console.log('method',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n\r\n        //접근경로\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/pathA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('Paths',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Paths = arr;\r\n\r\n                    //console.log('Paths',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n    //Lov끝    \r\n\r\n\r\n    \r\n    //datepicker속성 및 이벤트 시작\r\n    const [StartDate, setStartDate] = useState(new Date());\r\n    //datepicker속성 및 이벤트 끝\r\n    console.log(StartDate.getMonth()+1);\r\n    console.log(StartDate);\r\n    \r\n    const[CounselName, setCounselName] = useState(\"\")\r\n    const[UserPhone, setUserPhone] = useState(\"\")\r\n    const[Content, setContent] = useState(\"\")\r\n\r\n\r\n    const onNameHandler=(event)=>{\r\n        setCounselName(event.currentTarget.value);\r\n    }\r\n\r\n    const MethodHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const PathHandler=(event)=>{\r\n        setPath(event.currentTarget.value);\r\n    }\r\n\r\n    const onPhoneHandler=(event)=>{\r\n        setUserPhone(event.currentTarget.value);\r\n    }\r\n\r\n    const onContentHandler=(event)=>{\r\n        setContent(event.currentTarget.value);\r\n    }\r\n\r\n    const RoomTypeChangeHandler=(event)=>{\r\n        setRoomType(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n        //console.log(RoomType)\r\n    \r\n        // if(RoomType.valueOf('전체') ||!CounselName||Method.valueOf('전체')||Path.valueOf('전체')||!UserPhone||!Content){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n        \r\n        \r\n        //서버에 채운 값들을 request로 보낸다.\r\n        const body = {\r\n            roomtype: RoomType,\r\n            counseldate: StartDate,\r\n            cname: CounselName,\r\n            method: Method,\r\n            path: Path,\r\n            phone: UserPhone,\r\n            content: Content\r\n            \r\n        }\r\n        \r\n        \r\n        Axios.post(\"/api/register\",body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 등록되었습니다.')\r\n               // props.history.push('/counseling')\r\n            }else{\r\n                alert('등록에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          {/* <Main/>\r\n          <h1>상담등록</h1> */}\r\n          <table>\r\n            <tr>\r\n                <th>문의구분</th>\r\n                    <td>\r\n                        <select onChange ={RoomTypeChangeHandler} value ={RoomType}>   \r\n                        \r\n                            {RoomTypes.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                        \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의일자</th>\r\n                    <td>   \r\n                    <DatePicker\r\n                        locale=\"ko\"\r\n                        selected={StartDate}\r\n                        onChange={date => setStartDate(date)}\r\n                        minDate={new Date()}\r\n                        maxDate={addDays(new Date(), 0)}  \r\n                        dateFormat=\"yyyy.MM.dd (eee)\"\r\n                    />\r\n\r\n                    </td>\r\n                <th>문의자명</th>\r\n                    <td>\r\n                    <input type=\"text\" value = {CounselName}id=\"counselName\" name=\"counselName\" size = \"7\"\r\n                    onChange={onNameHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n            <tr>\r\n                <th>문의방법</th>\r\n                    <td>\r\n                        <select value={Method} onChange={MethodHandler} >\r\n                        {Methods.map(item=>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                        ))}\r\n                        </select>\r\n                    </td>\r\n                <th>접근경로</th>\r\n                    <td>\r\n                        <select value={Path} onChange={PathHandler} >\r\n                            {Paths.map(item =>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                            ))}\r\n                            \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의자연락처</th>\r\n                    <td>\r\n                    <input type = \"text\" value = {UserPhone}id = \"userPhone\" name = \"userPhone\" size = \"7\"\r\n                    onChange={onPhoneHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n\r\n            <tr>\r\n                <th>상담내용</th>\r\n                    <td colSpan=\"5\">\r\n                        <textarea rows =\"5\" cols = \"100\" value = {Content}id=\"content\" name = \"content\"\r\n                        onChange={onContentHandler}></textarea>\r\n                    </td>\r\n            </tr>\r\n          </table>\r\n          <div id = \"popbtn\"> \r\n            <button type = \"submit\">저장</button>\r\n            {/* <button>닫기</button> */}\r\n          </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n\r\nexport default CounselStatus;",["144","145"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js",["146"],"// import { Component, Fragment } from 'react';\r\n// import {useDispatch} from 'react-redux';\r\n//import {loginUser} from '../_actions/user_action';\r\nimport axios from 'axios';\r\nimport React,{Fragment} from 'react';\r\nimport {useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js'\r\n\r\n\r\nfunction LoginPage( props){\r\n  // const dispatch = useDispatch();\r\n\r\n  const [E_mal,setE_mal] = useState(\"\")\r\n  const [Password, setPassword] = useState(\"\")\r\n\r\n  const onEmailHandler = (event) => {\r\n    setE_mal(event.currentTarget.value)\r\n  }\r\n\r\n  const onPasswordHandler = (event) => {\r\n    setPassword(event.currentTarget.value)\r\n  }\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    let body = {\r\n        Email: E_mal,\r\n        PASSWORD: Password\r\n    }\r\n\r\n   axios.post('/api/users/login',body)\r\n        .then(response => {\r\n            if (response.data.loginResult) {\r\n                alert('로그인 되었습니다.')\r\n                //props.history.push('/counseling')\r\n                console.log(response.data.loginResult)\r\n            } else {\r\n                alert('아이디와 비밀번호를 확인하세요')\r\n            }\r\n        })\r\n      }\r\n\r\n    return (\r\n      <Fragment>\r\n          <Main/>\r\n          <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%',height:'50vh'}}>\r\n            <form style = {{display:'flex', flexDirection:'column'}}\r\n             onSubmit={onSubmitHandler}\r\n            >\r\n              \r\n                <label style={{fontFamily:'Jua',width:'180px'}}>Email</label>\r\n                <input style={{width:\"300px\"}} type = \"email\" value={E_mal} onChange={onEmailHandler} />\r\n                <label style={{fontFamily:'Jua'}}>Password</label>\r\n                <input style={{width:\"300px\"}} type = \"password\" value={Password} onChange={onPasswordHandler}/>\r\n                <br/>\r\n                <button type=\"submit\">Login</button>\r\n            \r\n            \r\n            </form>\r\n          </div>\r\n         \r\n          </Fragment>\r\n    )\r\n}\r\n\r\nexport default LoginPage","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js",["147"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Member from './Components/Member/Member';\r\nimport Counseling from './Components/Counseling/Counseling';\r\nimport CounselStatus from './Components/Counseling/CounselStatus';\r\nimport LoginPage from './Components/LoginPage/LoginPage';\r\nimport PaymentStatus from './Components/PaymentStatus/PaymentStatus';\r\nimport Swon from './Components/Staff/Swon';\r\nimport Main from './Components/Main/Main';\r\n\r\nexport default () => (\r\n  <Router>\r\n          {/* 메인 */}\r\n          <Route exact path = \"/\" component = {Main}></Route>\r\n\r\n\r\n          {/* 회원현황 */}\r\n          <Route exact path = \"/member\" component = {Member}></Route> \r\n          {/* 납부현황 */}\r\n          <Route path = \"/paymentStatus\" component = {PaymentStatus}></Route>\r\n          {/* 상담현황 */}\r\n          <Route exact path = \"/counseling\" component = {Counseling}></Route>\r\n          {/* 직원관리 */}\r\n          <Route exact path = \"/swon\" component = {Swon}></Route>\r\n          {/* 로그인/로그아웃*/}\r\n          <Route exact path = \"/login\" component = {LoginPage}></Route>\r\n\r\n\r\n\r\n          {/* 상담등록 */}\r\n          <Route exact path = \"/counselStatus\" component = {CounselStatus}></Route>\r\n  </Router>\r\n)\r\n\r\n","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js",["148","149","150","151","152","153","154","155","156","157","158","159","160"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\n\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction Member(props) {\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n      \r\n    }\r\n    const[userName,setUserName] = useState(\"\")\r\n    const[bnum,setBnum] = useState(\"\")\r\n    const[ownerName,setOwnerName] = useState(\"\")\r\n    const[userSort,setUserSort] = useState([])\r\n    const[endStatus,setEndStatus] = useState(\"\")\r\n    const[status,setStatus] = useState(\"\")\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          <Main/>\r\n          <h1>회원현황</h1>\r\n          <table >\r\n            <tr>\r\n                <th>회원명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {userName} id = \"userName\" name = \"userName\" size = \"7\"\r\n                        />\r\n                    </td>  \r\n                    {/* onChange={onPhoneHandler} */}\r\n                <th>사업자번호</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {bnum} id = \"bnum\" name = \"bnum\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>대표자명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {ownerName} id = \"ownerName\" name = \"ownerName\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>종류</th>\r\n                    <td>\r\n                        <select value ={endStatus}>  {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>상태</th>\r\n                    <td>\r\n                        <select value ={status}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                    <div > \r\n                        <button type = \"submit\">조회</button>\r\n                \r\n                    </div>\r\n                    </td>\r\n\r\n                \r\n            </tr>\r\n               \r\n            \r\n          </table>\r\n          <table>\r\n            <tr>\r\n                <td>\r\n                    <button>신규회원</button>\r\n                    <button>SNS</button>\r\n                    <button>메일전송</button>\r\n                    <button>엑셀다운로드</button>\r\n                </td>\r\n            </tr>\r\n          </table>\r\n          \r\n          <table>\r\n                <tr>\r\n                    <th>No</th>\r\n                    <th>문의 구분</th>\r\n                    <th>문의일자</th>\r\n                    <th>문의방법</th>\r\n                    <th>문의자명</th>\r\n                    <th>연락처</th>\r\n                    <th>접근경로</th>\r\n                </tr>\r\n          </table>\r\n\r\n      </form>\r\n\r\n      \r\n    );\r\n  }\r\n\r\n\r\nexport default Member;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js",["161"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction PaymentStatus (props) {\r\n\r\n    \r\n    const[userName, setUserName] = useState(\"\")\r\n    const[paymentStatus, setPaymentStatus]=useState([])\r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const nameSearchHandler=(event)=>{\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler=(event)=>{\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n    \r\n    const onPaymenthandler=()=>{\r\n        \r\n    }\r\n\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>고객납부현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                    납부예정일   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                        회원명\r\n                         <input type=\"text\" value = {userName} id=\"userName\" name=\"userName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp; \r\n\r\n                        납부여부\r\n                        <select onChange ={paymentStatusHandler} value ={paymentStatus}>   \r\n{/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                        </select>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onPaymenthandler}> 납부</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>No</th>\r\n                            <th>회원명</th>\r\n                            <th>납부예정일</th>\r\n                            <th>납부여부</th>\r\n                            <th>납부일자</th>\r\n                            <th>계약기간</th>\r\n                            <th>대표자</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default PaymentStatus;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js",["162"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction Swon (props) {\r\n\r\n    \r\n    const[staffName, setStaffName] = useState(\"\")\r\n    const[staffClass, setStaffClass] = useState([])\r\n    const[closeStatus, setCloseStatus] = useState([])\r\n    \r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const staffNameHandler=(event)=>{\r\n        setStaffName(event.currentTarget.value);\r\n    }\r\n\r\n    const staffClassHandler=(event)=>{\r\n        setStaffClass(event.currentTarget.value);\r\n    }\r\n    \r\n    const closeStatusHandler=(event)=>{\r\n        setCloseStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onRegistHandler = (event)=>{\r\n\r\n    }\r\n    const onModifyHandler = (event)=>{\r\n        \r\n    }\r\n    const onApprovalHandler = (event)=>{\r\n        \r\n    }\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>직원현황</h1>\r\n                    <div id = \"search\">\r\n\r\n                     성명\r\n                    <input type=\"text\" value = {staffName} id=\"staffName\" name=\"staffName\" size = \"5\"\r\n                    onChange={staffNameHandler}/>\r\n                    &nbsp; \r\n\r\n\r\n                    입사일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        직원구분\r\n                        <select onChange ={staffClassHandler} value ={staffClass}>  \r\n                    {/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                     \r\n                        </select>\r\n                        종료\r\n                        <select onChange ={closeStatusHandler} value ={closeStatus}>   \r\n                        </select>\r\n                        \r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onRegistHandler}> 등록</button> </td>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onModifyHandler}> 수정</button> </td>    \r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onApprovalHandler}> 승인</button> </td>                        \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>직번</th>\r\n                            <th>성명</th>\r\n                            <th>주민번호</th>\r\n                            <th>부서</th>\r\n                            <th>연락처</th>\r\n                            <th>E-mail</th>\r\n                            <th>직원구분</th>\r\n                            <th>승인여부</th>\r\n                            <th>직급</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Swon;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\index.js",[],["163","164"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\App.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Routes\\Routes.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100010.js",["165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100090.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100040.js",["190","191"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport Navbar from './Navbar';\r\nimport S010100010 from './S010100010';\r\nimport S010100050 from './S010100050';\r\nimport './css/S010100040.css';\r\nimport axios from \"axios\";\r\nimport Pagination from \"./utils/Pagination\";\r\n\r\n//엑셀다운로드\r\nimport xlsx from 'xlsx';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n//모달창 라이브러리 끝-->\r\n\r\n\r\nlet memberName = '';\r\nlet memberEmpHp = '';\r\nlet memberIdM = '';\r\n\r\nfunction S010100040(props) {\r\n\r\n    const [memberNm, setMemberNm] = useState('')\r\n    const [regNo, setRegNo] = useState('')\r\n    const [memberTp, setMemberTp] = useState('')\r\n    const [contractStatus, setContractStatus] = useState('')\r\n    const [memberSt, setMemberSt] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [numForDetailModal, setNumForDetailModal] = useState('')\r\n    const [empHpForDetailModal, setEmpHpForDetailModal] = useState('')\r\n    const [tbMember, setTbMember] = useState([])\r\n\r\n    //select박스\r\n    const [memberStatus,setMemberStatus] = useState([{}]);\r\n    const [memberType,setMemberType] = useState([{}]);\r\n\r\n    //<!--모달창 속성 및 이벤트\r\n    const [open, setOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n\r\n    //페이징\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage, setPostsPerPage] = useState(10);\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n\r\n    const [memberIdModal,setMemberIdModal] = useState(0);\r\n\r\n    //select박스\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/s010100140/selectMemberTp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('ask_tp',response.data.rows);\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n\r\n                        }));\r\n\r\n                        setMemberType(arr);\r\n\r\n                } else {\r\n                    alert(\"회원상태 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    const endStatus = [ { key: '전체', value: '전체'  },\r\n                        { key: 'Y', value: 'Y' },\r\n                        { key: 'N', value: 'N' } ]\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/s010100140/selectMemberSt')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('ask_tp',response.data.rows);\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n\r\n                        }));\r\n\r\n                        setMemberStatus(arr);\r\n\r\n                } else {\r\n                    alert(\"회원상태 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    //조회\r\n    const memberList = () => {\r\n        const body = {\r\n            memberNm,\r\n            regNo,\r\n            name,\r\n            memberTp,\r\n            contractStatus,\r\n            memberSt\r\n        }\r\n        \r\n        axios.post('/api/s010100040/searchMember', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('tb_member',response.data.rows);\r\n                    setTbMember(response.data.rows);\r\n                } else {\r\n                    alert(\"데이터 목록을 가져오는 것을 실패하였습니다.\")\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {    \r\n        memberList();\r\n    }, [])\r\n\r\n    const onSearchSubmitHandler = (event) => {\r\n        memberList();\r\n    }\r\n\r\n\r\n    const onHandleClickOpen = () => {\r\n        setStoreOpen(true);\r\n    };\r\n\r\n    const onHandleClickClose = () => {\r\n        setStoreOpen(false);\r\n        memberList();\r\n    }\r\n\r\n    const memberStHandler = (event) => {\r\n        setMemberSt(event.currentTarget.value);\r\n    }\r\n\r\n    const nameHandler = (event) => {\r\n        setName(event.currentTarget.value);\r\n    }\r\n\r\n    const memberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const regNoHandler = (event) => {\r\n        setRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const memberTpHandler = (event) => {\r\n        setMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n    const contractStatusHandler = (event) => {\r\n        setContractStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onHandleDetailClickOpen = (event) => {\r\n        memberEmpHp = event.target.id;\r\n        memberName = event.target.innerHTML;\r\n        memberIdM = event.target.className;\r\n\r\n        setEmpHpForDetailModal(memberEmpHp);\r\n        setNumForDetailModal(memberName);\r\n        setMemberIdModal(memberIdM);\r\n        setOpen(true);\r\n    }\r\n\r\n    const onHandleDetailClickClose = () => {\r\n        memberList();\r\n        setOpen(false);\r\n    }\r\n\r\n    const onSNSHandler = (event) => {\r\n\r\n    }\r\n\r\n    const onEmailHandler = (event) => {\r\n\r\n    }\r\n\r\n    //엑셀다운로드\r\n    const excelHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(tbMember);\r\n        //console.log(tbMember);\r\n\r\n        ['NO','사업자번호','회원명','회원구분','상태','대표자 성명','대표자 연락처','대표자 E-mail','종료여부']\r\n        .forEach((x,idx) => {\r\n            const cellAdd = xlsx.utils.encode_cell({c:idx,r:0});\r\n            ws[cellAdd].v = x;\r\n        })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][0] = {hidden:true};\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb,ws,\"Sheet1\");\r\n        xlsx.writeFile(wb,\"회원현황.xlsx\");\r\n    }\r\n\r\n    const s010100040R = tbMember.map((tbMember, index) => {\r\n        return (\r\n            <tr className='dataTable'>\r\n                <td name=\"uname\" variant=\"outlined\" color=\"primary\" id={tbMember.MEMBER_ID}> {index + 1}</td>\r\n                <td >{tbMember.MEMBER_NM}</td>\r\n                <td id={tbMember.REG_NO}>{tbMember.REG_NO}</td>\r\n                <td onClick={onHandleDetailClickOpen} className={tbMember.MEMBER_ID} id={tbMember.EMP_HP}>{tbMember.NAME}</td>\r\n                <td >{tbMember.EMP_HP}</td>\r\n                <td >{tbMember.EMP_EMAIL}</td>\r\n                <td >{tbMember.MEMBER_TP}</td>\r\n                <td >{tbMember.MEMBER_ST}</td>\r\n                <td >{tbMember.END_FLAG}</td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    const currentPosts = s010100040R.slice(indexOfFirstPost, indexOfLastPost);\r\n    //Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n            <Navbar />\r\n\r\n            <form style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    width: '100%',\r\n                }} \r\n            onSubmit={onSearchSubmitHandler}>\r\n\r\n                <h1>회원현황</h1>\r\n                <div id=\"search\">\r\n\r\n                    회원명&nbsp;\r\n                    <input type=\"text\" value={memberNm} id=\"memberNm\" name=\"memberNm\" size=\"5\"\r\n                        onChange={memberNmHandler} />\r\n                    &nbsp;\r\n\r\n\r\n                    사업자번호 &nbsp;\r\n                    <input type=\"text\" value={regNo} id=\"regNo\" name=\"regNo\" size=\"10\"\r\n                        onChange={regNoHandler} />\r\n                    &nbsp;\r\n\r\n\r\n                    대표자명 &nbsp;\r\n                    <input type=\"text\" value={name} id=\"name\" name=\"name\" size=\"5\"\r\n                        onChange={nameHandler} />\r\n                    &nbsp;\r\n\r\n                    회원구분 &nbsp;\r\n                    <select multiple={false} onChange={memberTpHandler} value={memberTp}>\r\n                        {memberType.map(item => (\r\n                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                        ))}\r\n                    </select>\r\n                    &nbsp;\r\n\r\n                    종료 &nbsp;\r\n                    <select multiple={false} onChange={contractStatusHandler} value={contractStatus}>\r\n                        {endStatus.map(item => (\r\n                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                        ))}\r\n                    </select>\r\n                    &nbsp;\r\n\r\n                    상태 &nbsp;\r\n                    <select multiple={false} onChange={memberStHandler} value={memberSt}>\r\n\r\n                        {memberStatus.map(item => (\r\n                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                        ))}\r\n                    </select>\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    <input type=\"button\" onClick={onSearchSubmitHandler} value=\"조회\"></input>\r\n                </div>\r\n\r\n                <Dialog\r\n                    maxWidth={\"lg\"}\r\n                    open={open}\r\n                    onClose={onHandleDetailClickClose}>\r\n                    <S010100050 dataMemId = {memberIdModal} dataName={numForDetailModal} dataForm={\"U\"} dataEmpHp={empHpForDetailModal} />\r\n                    <DialogActions>\r\n                        <input type=\"button\" id=\"contractBtn\" onClick={onHandleDetailClickClose} color=\"primary\" value='닫기' />\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n\r\n                <table className=\"btn\">\r\n                    <thead>\r\n                        <tr>\r\n                            <td colSpan=\"5\">\r\n                                <input type=\"button\" onClick={onHandleClickOpen} value=\"신규회원\"></input>\r\n                                <input type=\"button\" onClick={onSNSHandler} value=\"SNS\" />\r\n                                <input type=\"button\" onClick={onEmailHandler} value=\"메일전송\" />\r\n                            </td>\r\n                            <td id=\"alignRight\">\r\n                                <input type=\"button\" onClick = {excelHandler} value=\"엑셀다운로드\"></input>\r\n                            </td>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n\r\n                <table id=\"list\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th rowSpan=\"2\">No</th>\r\n                            <th rowSpan=\"2\">회원명</th>\r\n                            <th rowSpan=\"2\">사업자번호</th>\r\n                            <th colSpan=\"3\">대표자</th>\r\n                            <th rowSpan=\"2\">회원구분</th>\r\n                            <th rowSpan=\"2\">상태</th>\r\n                            <th rowSpan=\"2\">종료여부</th>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <th>성명</th>\r\n                            <th>연락처</th>\r\n                            <th>E-mail</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {currentPosts}\r\n                    </tbody>\r\n\r\n                </table>\r\n\r\n                <Pagination postsPerPage={postsPerPage} totalPosts={s010100040R.length} paginate={paginate} />\r\n\r\n            </form>\r\n\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={storeOpen}\r\n                onClose={onHandleClickClose}>\r\n                <S010100010/>\r\n                <DialogActions>\r\n                    <input type=\"button\" onClick={onHandleClickClose} color=\"primary\" value=\"닫기\"/>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100040;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100060.js",["192","193","194"],"import React, {Fragment, useEffect, useState} from 'react';\r\nimport Navbar from './Navbar';\r\nimport S010100070 from \"./S010100070\";\r\nimport Pagination from \"./utils/Pagination\";\r\n//엑셀다운로드\r\nimport xlsx from 'xlsx';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, {registerLocale} from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nimport axios from \"axios\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport S010100010 from \"./S010100010\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nregisterLocale(\"ko\", ko);\r\n\r\n\r\n\r\n\r\n//켈린더 라이브러리 끝-->\r\nlet paymentState = [{key: '전체', value: '전체'},\r\n    {key: 'Y', value: 'Y'},\r\n    {key: 'N', value: 'N'}]\r\n\r\nfunction S010100060(props) {\r\n\r\n    const [userName, setUserName] = useState('');\r\n    const [paymentStatus, setPaymentStatus] = useState('');\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date('2021/02/01'));\r\n    const [endDate, setEndDate] = useState(new Date('2021/03/01'));\r\n    //캘린더 속성 끝--> \r\n\r\n    const [payStatusList, setPayStatusList] = useState([]);\r\n    const [storeOpen, setStoreOpen] = useState(false);\r\n    const [dataAllContract, setDataAllContract] = useState('');\r\n\r\n    //페이징\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage, setPostsPerPage] = useState(10);\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n    \r\n   \r\n    useEffect(() => {\r\n        let startDates = startDate.getFullYear() + '.' + (startDate.getMonth() + 1) + '.' + startDate.getDate();\r\n        let endDates = endDate.getFullYear() + '.' + (endDate.getMonth() + 1) + '.' + endDate.getDate();\r\n\r\n        let body = {\r\n            startDate: startDates,\r\n            endDate: endDates\r\n        }\r\n        axios.post('/api/s010100060/list', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    console.log('list60', response.data.rows);\r\n                    setPayStatusList(response.data.rows);\r\n                } else {\r\n                    alert(\"데이터 조회를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n    }, [])\r\n\r\n    const paymentSearchHandler = (event) => {\r\n\r\n        let startDates = startDate.getFullYear() + '.' + (startDate.getMonth() + 1) + '.' + startDate.getDate();\r\n        let endDates = endDate.getFullYear() + '.' + (endDate.getMonth() + 1) + '.' + endDate.getDate();\r\n\r\n        let body = {\r\n            startDate: startDates,\r\n            endDate: endDates,\r\n            userName: userName,\r\n            paymentStatus: paymentStatus\r\n        }\r\n\r\n        \r\n    \r\n        axios.post('/api/s010100060/list', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    console.log('list60', response.data.rows);\r\n                    setPayStatusList(response.data.rows);\r\n                } else {\r\n                    alert(\"데이터 조회를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n    //<!--onSubmit\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n    }\r\n    //onSubmit끝-->\r\n\r\n    const nameSearchHandler = (event) => {\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler = (event) => {\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onPayHandleClickClose = () => {\r\n        setStoreOpen(false);\r\n    }\r\n\r\n\r\n    const handleToggle = (e) => {\r\n        console.log('event', e.target.id);\r\n\r\n\r\n        const currentIndex = checked.indexOf(e.target.id);\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        const newChecked = checked;\r\n\r\n            if (currentIndex === -1) {\r\n                newChecked.push(e.target.id)\r\n            } else {\r\n                newChecked.splice(currentIndex, 1)\r\n            }\r\n\r\n        setChecked(newChecked);\r\n        //빽주고\r\n        //state를 넣어준다\r\n\r\n        //e.target.checked = false;\r\n\r\n        console.log('currentIndex', currentIndex);\r\n        console.log('checked', checked);\r\n\r\n        // handleFilters(filters,tb_s10_ask010);\r\n\r\n    }\r\n\r\n    const onPaymenthandler = () => {\r\n        if (checked.length === 0) {\r\n            alert('선택하세요');\r\n        } else if(checked.length > 1){\r\n            alert('하나만 체크하세요');\r\n        }else {\r\n                setDataAllContract(checked);\r\n                //console.log(checked);\r\n                setStoreOpen(true);\r\n        }\r\n    }\r\n\r\n    const excelHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(payStatusList);\r\n        console.log(payStatusList);\r\n\r\n        ['회원명','납부예정일','납부여부','납부일자','계약기간','계약기간','대표자 성명','대표자 연락처','대표자 E-mail','계약ID']\r\n        .forEach((x,idx) => {\r\n            const cellAdd = xlsx.utils.encode_cell({c:idx,r:0});\r\n            ws[cellAdd].v = x;\r\n            \r\n        })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][9] = {hidden:true};\r\n        \r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb,ws,\"Sheet1\");\r\n        xlsx.writeFile(wb,\"고객납부현황.xlsx\");\r\n\r\n    }\r\n\r\n\r\n    const s010100060R = payStatusList.map((payStatusList, index) => {\r\n        return (\r\n            <tr class='dataTable'>\r\n                <td><input type=\"checkbox\" onChange={handleToggle} id={payStatusList.CONTRACT_ID}/></td>\r\n                <td name=\"uname\" variant=\"outlined\" color=\"primary\">\r\n                    {payStatusList.CONTRACT_ID}\r\n                </td>\r\n                <td>{payStatusList.MEMBER_NM}</td>\r\n                <td>{payStatusList.PAY_PLAN_DATE}</td>\r\n                <td>{payStatusList.PAYED_FLAG}</td>\r\n                <td>{payStatusList.PAYED_DATE}</td>\r\n                <td>{payStatusList.START_DATE} ~ {payStatusList.END_DATE}</td>\r\n                <td>{payStatusList.NAME}</td>\r\n                <td>{payStatusList.EMP_HP}</td>\r\n                <td>{payStatusList.EMP_EMAIL}</td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    const currentPosts = s010100060R.slice(indexOfFirstPost, indexOfLastPost);\r\n    //Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Navbar/>\r\n            <form style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                width: '100%'\r\n            }}\r\n                  onSubmit={onSubmitHandler}\r\n            >\r\n\r\n                <h1>고객납부현황</h1>\r\n                <div id=\"search\">\r\n\r\n                    납부예정일&nbsp;\r\n                    {/* date클릭할 때 고정 */}\r\n                    <DatePicker\r\n                        selected={startDate}\r\n                        onChange={date => setStartDate(date)}\r\n                        selectsStart\r\n                        startDate={startDate}\r\n                        endDate={endDate}\r\n                        dateFormat=\"yyyy.MM.dd\"\r\n                    /> ~&nbsp;\r\n                    <DatePicker\r\n                        selected={endDate}\r\n                        onChange={date => setEndDate(date)}\r\n                        selectsEnd\r\n                        startDate={startDate}\r\n                        endDate={endDate}\r\n                        minDate={startDate}\r\n                        dateFormat=\"yyyy.MM.dd\"\r\n                    />\r\n\r\n                    {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                    &nbsp;\r\n                    회원명&nbsp;\r\n                    <input type=\"text\" value={userName} id=\"userName\" name=\"userName\" size=\"5\"\r\n                           onChange={nameSearchHandler}/>\r\n                    &nbsp;\r\n\r\n                    납부여부&nbsp;\r\n                    <select multiple={false} onChange={paymentStatusHandler} value={paymentStatus}>\r\n\r\n                        {paymentState.map(item => (\r\n                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                        ))}\r\n\r\n                    </select>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    <input type=\"button\" value=\"조회\" onClick={paymentSearchHandler}></input>\r\n                </div>\r\n\r\n\r\n                <table id=\"btn\">\r\n                    <thead>\r\n                    <tr>\r\n                        <td id=\"btd\">\r\n                            <button className='loginBtn' onClick={onPaymenthandler}> 납부</button>\r\n                        </td>\r\n                        <td id=\"btd2\">\r\n                            <input type =\"button\" onClick ={excelHandler} value = \"엑셀다운로드\"></input>\r\n                        </td>\r\n                    </tr>\r\n                    </thead>\r\n                </table>\r\n\r\n                <table id=\"list\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th rowSpan=\"2\">선택</th>\r\n                        <th rowSpan=\"2\">No</th>\r\n                        <th rowSpan=\"2\">회원명</th>\r\n                        <th rowSpan=\"2\">납부예정일</th>\r\n                        <th rowSpan=\"2\">납부여부</th>\r\n                        <th rowSpan=\"2\">납부일자</th>\r\n                        <th rowSpan=\"2\">계약기간</th>\r\n                        <th colSpan=\"3\">대표자</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>성명</th>\r\n                        <th>연락처</th>\r\n                        <th>E-mail</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {currentPosts}\r\n                    </tbody>\r\n                </table>\r\n                <Pagination postsPerPage={postsPerPage} totalPosts={s010100060R.length} paginate={paginate} />\r\n                <Dialog\r\n                    maxWidth={\"lg\"}\r\n                    open={storeOpen}\r\n                    onClose={onPayHandleClickClose}>\r\n                    <S010100070 dataContracId={dataAllContract}/>\r\n                    <DialogActions>\r\n                        <input type=\"button\" onClick={onPayHandleClickClose} color=\"primary\" value=\"닫기\">\r\n                        </input>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n            </form>\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100060;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100130.js",["195","196","197"],"//<<상담현황 페이지>>\r\nimport React, {Fragment, useEffect, useState} from 'react';\r\nimport './css/S010100130.css';\r\nimport Navbar from './Navbar';\r\nimport axios from 'axios';\r\nimport S010100140 from './S010100140';\r\nimport Pagination from \"./utils/Pagination\";\r\n\r\n\r\n//엑셀다운로드\r\nimport xlsx from 'xlsx';\r\n\r\n//모달창 따로 분리해서 태그로 쓸 것\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n//모달창 라이브러리 끝-->\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, {registerLocale} from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\n\r\nlet dataForm = '';\r\n\r\n\r\n\r\nfunction S010100130(props) {\r\n    const [data] = useState('I');\r\n    //console.log(data);\r\n    const [numForDetail, setNumForDetail] = useState('')\r\n    //TB_S10_ASK010 테이블 조회\r\n    const [tb_s10_ask010, setTb_s10_ask010] = useState([])\r\n    const [deleteAskOpen, setDeleteAskOpen] = React.useState(false);\r\n\r\n    //페이징\r\n    const [currentPage,setCurrentPage] = useState(1);\r\n    const [postsPerPage,setPostsPerPage] = useState(10);\r\n\r\n    const[ask_tps, setAsk_tps]= useState([{}])\r\n\r\n    useEffect(() => {\r\n        searchAsk();\r\n    }, [])\r\n\r\n\r\n    const searchAsk = () => {\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n\r\n         axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                //console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n    }\r\n    //<Lov(List of Value)를 데이터 베이스에서 가져오기\r\n\r\n    //select-option\r\n    const [ask_tp, setAsk_tp] = useState('')\r\n\r\n    //문의 구분\r\n    useEffect(() => {\r\n        axios.post('/api/s010100130/ask_tp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('Lov-ask_tp',response.data);\r\n                    let arr = [{key: '전체', value: '전체'}]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                        setAsk_tps(arr);\r\n\r\n                } else {\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n    //lov 끝>\r\n\r\n\r\n    //<!--모달창 속성 및 이벤트 \r\n    const [open, setOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n\r\n    //<상담등록 모달\r\n    const onHandleClickOpen = (event) => {\r\n        //console.log('상담열기');\r\n        setStoreOpen(true);\r\n\r\n    };\r\n\r\n    //상담등록 닫기 할 때 새로고침해서 가져오는 것\r\n    const onHandleClickClose = (event) => {\r\n        setStoreOpen(false);\r\n           searchAsk();\r\n    };\r\n    //상담등록 모달 끝>\r\n\r\n\r\n    // //<상세보기 모달\r\n    const onDetailHandleClickOpen = (event) => {\r\n        //console.log('target',event.target.id);\r\n        num = event.target.id;\r\n        rNum = parseInt(num);\r\n        setNumForDetail(rNum);\r\n        setOpen(true);\r\n    };\r\n\r\n    const onDetailHandleClickClose = () => {\r\n        setOpen(false);\r\n        searchAsk();\r\n\r\n    };\r\n    //상세보기 모달 끝>\r\n    //모달창 속성 및 이벤트 끝--!>\r\n\r\n\r\n    const [checkForDelete, setCheckForDelete] = useState(true);\r\n\r\n    const onDeleteHandle = () => {\r\n        setCheckForDelete(false);\r\n    }\r\n\r\n    const onBackHandle = () => {\r\n        setCheckForDelete(true);\r\n        setChecked([]);\r\n    }\r\n\r\n     const [checked, setChecked] = useState([]);\r\n\r\n        const handleToggle = (e) => {\r\n            //console.log('event', e.target.id);\r\n\r\n\r\n            const currentIndex= checked.indexOf(e.target.id);\r\n            //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n            const newChecked = checked;\r\n\r\n            if(currentIndex === -1){\r\n                newChecked.push(e.target.id)\r\n            }else {\r\n                newChecked.splice(currentIndex,1)\r\n            }\r\n            setChecked(newChecked);\r\n            //빽주고\r\n            //state를 넣어준다\r\n\r\n            //e.target.checked = false;\r\n\r\n            // console.log('currentIndex', currentIndex);\r\n            // console.log('checked', checked);\r\n\r\n            // handleFilters(filters,tb_s10_ask010);\r\n\r\n        }\r\n\r\n    //문의자명 속성\r\n    const [ask_name, setAsk_name] = useState(\"\")\r\n\r\n    //문의구분 select-option이벤트\r\n    const onAsk_tpHandler = (event) => {\r\n        setAsk_tp(event.currentTarget.value);\r\n    }\r\n\r\n    //문의자명 input type = \"text\"이벤트\r\n    const onAsk_nameHandler = (event) => {\r\n        setAsk_name(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onHandleDelete = (event) => {\r\n        setDeleteAskOpen(true);\r\n    }\r\n\r\n    const handleClose=(event)=>{\r\n        setDeleteAskOpen(false);\r\n    }\r\n\r\n    const deleteHandle = (event)=>{\r\n        let askIdArray = checked;\r\n        //console.log(askIdArray);\r\n        //'/api/s010100130/delete'\r\n         axios.post('/api/s010100130/delete',askIdArray)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    // //console.log('상담닫기',response.data.rows)\r\n                    // setTb_s10_ask010(response.data.rows)\r\n                } else {\r\n                    alert(\"error\")\r\n                }\r\n\r\n            })\r\n\r\n        setDeleteAskOpen(false);\r\n\r\n         const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n\r\n         axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                //console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n\r\n        setChecked([]);\r\n        onBackHandle();\r\n\r\n\r\n    }\r\n\r\n\r\n    //캘린더 속성\r\n    const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endAsk_date, setEndAsk_date] = useState(new Date());\r\n\r\n\r\n    // 조회 <!--onSubmit\r\n    const onHandleFormSubmit = (event) => {\r\n        //console.log('조회', event);\r\n\r\n        event.preventDefault();\r\n\r\n        // if(method.valueOf('전체')||!startDate||!endDate||!searchName){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n\r\n        console.log('ask_tp',ask_tp);\r\n        //console.log(\"조회조건\", body);\r\n        // alert('startDate day:'+startAsk_date.getDay());\r\n        // alert('endDate year:'+endAsk_date.getFullYear());\r\n        // alert('endDate day:'+endAsk_date.getDate());\r\n        // alert('endDate month:'+endAsk_date.getMonth()+1);\r\n        // alert(endAsk_date.getFullYear() + '/' + (endAsk_date.getMonth()+1) +'/'+endAsk_date.getDate());\r\n        // alert('startDate:'+startAsk_date.getMonth());\r\n\r\n        axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                //console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    const excelHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(tb_s10_ask010);\r\n        console.log(tb_s10_ask010);\r\n\r\n        ['NO','문의구분','문의일자','문의방법','접근경로','문의자명','연락처']\r\n        .forEach((x,idx) => {\r\n            const cellAdd = xlsx.utils.encode_cell({c:idx,r:0});\r\n            ws[cellAdd].v = x;\r\n            \r\n        })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][0] = {hidden:true};\r\n        \r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb,ws,\"Sheet1\");\r\n        xlsx.writeFile(wb,\"상담현황.xlsx\");\r\n\r\n    }\r\n\r\n\r\n//onSubmit끝-->\r\n\r\n\r\n    const s010100130R = tb_s10_ask010.map((tb_s10_ask010, index) => {\r\n        return (\r\n            <tr className='dataTable'>\r\n                <td id=\"chkLine\" hidden={checkForDelete}>\r\n                    {/*밑줄처리*/}\r\n                    <span id = \"underLine\"><input type=\"checkbox\"  onChange={handleToggle} id={tb_s10_ask010.ASK_ID}/></span></td>\r\n\r\n                {/*<input type = \"checkbox\" onChange={onCheckboxHandler} id={tb_s10_ask010.ASK_ID}/>*/}\r\n                <td className=\"cname\" name=\"cname\" variant=\"outlined\" color=\"primary\" onClick={onDetailHandleClickOpen} id={tb_s10_ask010.ASK_ID}>\r\n                    {index + 1}</td>\r\n                <td>{tb_s10_ask010.ASK_TP}</td>\r\n                <td >{tb_s10_ask010.ASK_DATE}</td>\r\n                <td>{tb_s10_ask010.ASK_METHOD}</td>\r\n                <td>{tb_s10_ask010.ASK_NAME}</td>\r\n                <td >{tb_s10_ask010.ASK_INFO}</td>\r\n                <td>{tb_s10_ask010.ASK_PATH}</td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    //Get current tb_s10_ask010;\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    const currentPosts = s010100130R.slice(indexOfFirstPost,indexOfLastPost);\r\n\r\n\r\n    //Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n    return (\r\n        <Fragment>\r\n            <Navbar/>\r\n\r\n            <form style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                width: '100%'\r\n            }} onSubmit={onHandleFormSubmit}>\r\n\r\n                <h1>상담현황</h1>\r\n                <div id=\"search\">\r\n                    <div id=\"datePickerArea\">\r\n                        문의일자\r\n                        &nbsp;\r\n                        {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            locale=\"ko\"\r\n                            selected={startAsk_date}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                            onChange={date => setStartAsk_date(date)}\r\n                            selectsStart\r\n                            startDate={startAsk_date}\r\n                            endDate={endAsk_date.setHours(9, 0, 0, 0)}\r\n                            dateFormat=\"yyyy.MM.dd\"\r\n                        />&nbsp;\r\n                        ~ &nbsp;\r\n                        <DatePicker\r\n                            locale=\"ko\"\r\n                            selected={endAsk_date}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                            onChange={date => setEndAsk_date(date)}\r\n                            selectsEnd\r\n                            startDate={startAsk_date}\r\n                            endDate={endAsk_date}\r\n                            minDate={startAsk_date}\r\n                            dateFormat=\"yyyy.MM.dd\"\r\n                        />\r\n                    </div>\r\n                    {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n\r\n                    <div id=\"searchArea\">\r\n                        문의구분\r\n                        &nbsp;\r\n                        <select multiple={false} onChange={onAsk_tpHandler} value={ask_tp}>\r\n\r\n                            {ask_tps.map(item => (\r\n                                <option key={item.key} value={item.key}>{item.value}</option>\r\n                            ))}\r\n\r\n                        </select>\r\n                        &nbsp;\r\n\r\n                        문의자명\r\n                        &nbsp;\r\n                        <input type=\"text\" value={ask_name} id=\"ask_name\" name=\"ask_name\" size=\"5\"\r\n                               onChange={onAsk_nameHandler}/>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button type=\"submit\" onClick={onHandleFormSubmit}>조회</button>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <table id=\"btn\">\r\n                    <thead>\r\n                    <tr>\r\n                        <td id=\"btd\">\r\n                            <input type=\"button\" className='loginBtn' onClick={onHandleClickOpen} value=\"상담등록\"/>\r\n                            <input type=\"button\" className='deleteBtn' hidden={!checkForDelete} onClick={onDeleteHandle}\r\n                                   value=\"삭제하기\"/>\r\n                            <input type=\"button\" className='delete' onClick={onHandleDelete} value=\"삭제\"\r\n                                   hidden={checkForDelete}/>\r\n                                   <Dialog\r\n                                        open={deleteAskOpen}\r\n                                        onClose={onHandleDelete}>\r\n                                        <DialogTitle id=\"alert-dialog-title\">{\"체크한 행을 삭제할까요?\"}</DialogTitle>\r\n                                        <DialogActions>\r\n                                          <Button onClick={deleteHandle} color=\"primary\">\r\n                                           네\r\n                                          </Button>\r\n                                          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                                            아니오\r\n                                          </Button>\r\n                                        </DialogActions>\r\n                                      </Dialog>\r\n                        </td>\r\n                        <td id=\"btd2\"><input type=\"button\" onClick={excelHandler} value='엑셀다운로드'/></td>\r\n                    </tr>\r\n                    </thead>\r\n                </table>\r\n                {/* 모달창 시작*/}\r\n                <Dialog\r\n                    maxWidth={\"lg\"}\r\n                    open={open}>\r\n                    <S010100140 dataForm={\"U\"} num={numForDetail}/>\r\n                    <DialogActions>\r\n                        <input type=\"button\" onClick={onDetailHandleClickClose} color=\"primary\" value='닫기'/>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* // 모달창 끝 */}\r\n\r\n\r\n                {/* 모달창 시작*/}\r\n                <Dialog\r\n                    maxWidth={\"lg\"}\r\n                    open={storeOpen}\r\n                >\r\n                    <S010100140 dataForm={data} num={numForDetail}/>\r\n                    <DialogActions>\r\n                        <input type=\"button\" onClick={onHandleClickClose} color=\"primary\" value='닫기'/>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* // 모달창 끝 */}\r\n\r\n                <table id=\"list\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th colSpan='2' id='chkWidth' hidden={checkForDelete}>No</th>\r\n                        <th id='chkWidth' hidden={!checkForDelete}>No</th>\r\n                        <th>문의 구분</th>\r\n                        <th>문의일자</th>\r\n                        <th>문의방법</th>\r\n                        <th>문의자명</th>\r\n                        <th>연락처</th>\r\n                        <th>접근경로</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {currentPosts}\r\n                    </tbody>\r\n              </table>\r\n                <Pagination postsPerPage={postsPerPage} totalPosts={s010100130R.length} paginate={paginate}/>\r\n\r\n            </form>\r\n\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100130;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100050.js",["198","199","200","201","202","203","204","205","206","207","208","209"],"import React, { useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport './css/S010100050.css';\r\nimport S010100010 from './S010100010';\r\nimport Pagination from \"./utils/Pagination\";\r\nimport { post } from 'axios';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n//모달창 라이브러리 끝-->\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\nlet memberTpDetail = [];\r\n\r\nfunction S010100050(props) {\r\n\r\n    const [detailAllInfo, setDetailAllInfo] = useState([]);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [nameForDetailCModal, setNameForDetailCModal] = useState('');\r\n\r\n    //회원정보\r\n    const [detailMemberNm, setDetailMemberNm] = useState('');\r\n\r\n    const [detailFstRegNo, setDetailFstRegNo] = useState('');\r\n    const [detailSndRegNo, setDetailSndRegNo] = useState('');\r\n    const [detailThdRegNo, setDetailThdRegNo] = useState('');\r\n\r\n    const [detailMemberTp, setDetailMemberTp] = useState([])\r\n    const [detailCheckoutDate, setDetailCheckoutDate] = useState('');\r\n    const [detailName, setDetailName] = useState('');\r\n\r\n    const [detailFstEmpHp, setDetailFstEmpHp] = useState('');\r\n    const [detailSndEmpHp, setDetailSndEmpHp] = useState('');\r\n    const [detailThdEmpHp, setDetailThdEmpHp] = useState('');\r\n\r\n    const [detailEmpEmail, setDetailEmpEmail] = useState('');\r\n    const [detailDomain, setDetailDomain] = useState('');\r\n    const [detailAddress, setDetailAddress] = useState('');\r\n    const [detailZipcode, setDetailZipcode] = useState('');\r\n    const [detailDetailAddress, setDetailDetailAddress] = useState('');\r\n\r\n    const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endDateTest, setEndDateTest] = useState('');\r\n\r\n    \r\n    const [detailCeoIdCardImg, setDetailCeoIdCardImg] = useState('')\r\n    const [detailRegistCardImg, setDetailRegistCardImg] = useState('')\r\n\r\n\r\n    const dataName = props.dataName;\r\n    const dataEmpHp = props.dataEmpHp;\r\n    //console.log('dataEmpHp',dataEmpHp); dataMemId = {memberIdModal}\r\n    const dataMemId = props.dataMemId;\r\n  \r\n\r\n    const [conOpen, setConOpen] = React.useState(false);\r\n    const [newOpen, setNewOpen] = React.useState(false);\r\n    const [detailMemberId, setDetailMemberId] = useState('');\r\n\r\n\r\n    //페이징\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage, setPostsPerPage] = useState(3);\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n \r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/s010100150/memberTpDetail')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '선택', value: '선택' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n                        }));\r\n\r\n                    memberTpDetail = arr;\r\n                } else {\r\n                    alert(\" 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n\r\n    }, [])\r\n    const detailMemberList = () =>{\r\n        let body = {\r\n            dataName:dataName,\r\n            dataEmpHp:dataEmpHp\r\n        }\r\n\r\n        axios.post('/api/s010100050/detailMember_by_id',body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('memberId', response.data.rows[0].MEMBER_ID);\r\n\r\n                    const memberId = response.data.rows[0].MEMBER_ID;\r\n                    const modalMemberNm = response.data.rows[0].MEMBER_NM;\r\n                    const modalRegNo = response.data.rows[0].REG_NO;\r\n                    const modalMemberTp = response.data.rows[0].MEMBER_TP;\r\n                    const modalName = response.data.rows[0].NAME;\r\n                    const modalEmpHp = response.data.rows[0].EMP_HP;\r\n                    const modalEmpEmail = response.data.rows[0].EMP_EMAIL;\r\n                    const modalZip = response.data.rows[0].ZIP_CODE;\r\n                    const modalAddr = response.data.rows[0].ADDRESS;\r\n                    const modalDetailAddr = response.data.rows[0].DETAIL_ADDRESS;\r\n                    //const modalAddress = zip + ' ' + addr + ' ' + detailAddr;\r\n                    const modalEndDate = response.data.rows[0].END_DATE;\r\n                    const modalIdImg = response.data.rows[0].CEO_IMAGE_ID;\r\n                    const modalRegistImg = response.data.rows[0].CEO_IMAGE_REGISTER;\r\n                    const modalRegNos = modalRegNo.split('-');\r\n                    const modalEmpHps = modalEmpHp.split('-');\r\n                    const modalEmpEmails = modalEmpEmail.split('@');\r\n\r\n                    setDetailMemberId(memberId);\r\n                    setEndDateTest(modalEndDate);\r\n                    //console.log(modalRegistImg);\r\n                    setDetailAllInfo(response.data.rows);\r\n                    //console.log(detailAllInfo);\r\n                    setDetailMemberNm(modalMemberNm);\r\n\r\n                    setDetailFstRegNo(modalRegNos[0]);\r\n                    setDetailSndRegNo(modalRegNos[1]);\r\n                    setDetailThdRegNo(modalRegNos[2]);\r\n\r\n                    setDetailMemberTp(modalMemberTp);\r\n                    setDetailName(modalName);\r\n\r\n                    setDetailFstEmpHp(modalEmpHps[0]);\r\n                    setDetailSndEmpHp(modalEmpHps[1]);\r\n                    setDetailThdEmpHp(modalEmpHps[2]);\r\n\r\n                    setDetailEmpEmail(modalEmpEmails[0]);\r\n                    setDetailDomain(modalEmpEmails[1]);\r\n\r\n                    setStartAsk_date(new Date(modalEndDate));\r\n        \r\n                    setDetailZipcode(modalZip);\r\n                    setDetailAddress(modalAddr);\r\n                    setDetailDetailAddress(modalDetailAddr);\r\n                    setDetailCeoIdCardImg(modalIdImg);\r\n                    setDetailRegistCardImg(modalRegistImg);\r\n                    //setDetailCheckoutDate(modalEndDate);\r\n                } else {\r\n                    alert('상세정보 데이터를 불러오는데 실패하였습니다.');\r\n                }\r\n            })\r\n        }\r\n\r\n    useEffect(() => {\r\n        detailMemberList();\r\n    }, [])\r\n\r\n    const tempAddMember = () => {\r\n        const url ='/api/s010100050/detailMemberModify';\r\n        const formData = new FormData();\r\n\r\n        //let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n        \r\n        //첨부파일\r\n        // formData.append('idCardFile',idCardFile);\r\n        // formData.append('registCardFile',registCardFile);\r\n        // formData.append('idCardFileName',idCardFileName);\r\n        // formData.append('registCardFileName',registCardFileName);\r\n\r\n        // //회원명\r\n        // formData.append('memberNm',memberNm);\r\n        // //사업자번호\r\n        // formData.append('firstRegNo',firstRegNo);\r\n        // formData.append('secondRegNo',secondRegNo);\r\n        // formData.append('thirdRegNo',thirdRegNo);\r\n        // //회원구분\r\n        // formData.append('memberTp',memberTp);\r\n        // //성명\r\n        // formData.append('empIdName',empIdName);\r\n        // //연락처\r\n        // formData.append('firstEmpHp',firstEmpHp);\r\n        // formData.append('secondEmpHp',secondEmpHp);\r\n        // formData.append('thirdEmpHp',thirdEmpHp);\r\n        // //email\r\n        // formData.append('zipcode', zipcode);\r\n        // formData.append('empEmailId', empEmailId);\r\n        // //주소\r\n        // formData.append('domainAddress', domainAddress);\r\n        // formData.append('empAddress', empAddress);\r\n        // formData.append('empDetailAddress', empDetailAddress);\r\n       \r\n\r\n        const config = {\r\n            headers : {\r\n                'content-type':'multipart/form-data'\r\n            }\r\n        }\r\n        return post(url, formData, config);\r\n\r\n    }\r\n    //회원정보 수정\r\n    const onModifyHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        let body = {\r\n            dataName:dataName,\r\n            dataEmpHp:dataEmpHp,\r\n\r\n            detailMemberNm:detailMemberNm,\r\n            detailFstRegNo:detailFstRegNo,\r\n            detailSndRegNo:detailSndRegNo,\r\n            detailThdRegNo:detailThdRegNo,\r\n\r\n            detailMemberTp:detailMemberTp,\r\n            endDateTest:endDateTest\r\n        }\r\n\r\n        axios.post('/api/s010100050/detailMemberModify',body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('memberId', response.data.rows[0].MEMBER_ID);\r\n                    alert('회원정보를 수정하였습니다.');\r\n                } else {\r\n                    alert('수정에 실패하였습니다.');\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    const onDetailMemberNmHandler = (event) => {\r\n        setDetailMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailFstRegNoHandler = (event) => {\r\n        setDetailFstRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailSndRegNoHandler = (event) => {\r\n        setDetailSndRegNo(event.currentTarget.value);\r\n    }\r\n    const onDetailThdRegNoHandler = (event) => {\r\n        setDetailThdRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailMemberTpHandler = (event) => {\r\n        setDetailMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onDetailNameHandler = (event) => {\r\n        setDetailName(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailFstEmpHpHandler = (event) => {\r\n        setDetailFstEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailSndEmpHpHandler = (event) => {\r\n        setDetailSndEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailThdEmpHpHandler = (event) => {\r\n        setDetailThdEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailEmpEmailHandler = (event) => {\r\n        setDetailEmpEmail(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailDomainHandler = (event) => {\r\n        setDetailDomain(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailZipcodeHandler = (event) => {\r\n        setDetailZipcode(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailAddressHandler = (event) => {\r\n        setDetailAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailDetailAddressHandler = (event) => {\r\n        setDetailDetailAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onSubmitDetailHandler = (event) => {\r\n\r\n    }\r\n\r\n    const onDetailClickOpen = (event) => {\r\n        num = event.target.innerHTML;\r\n        rNum = parseInt(num);\r\n        setNameForDetailCModal(rNum);\r\n        console.log(rNum);\r\n        setConOpen(true);\r\n    }\r\n\r\n    const onDetailClickClose = (event) => {\r\n        setOpen(false);\r\n    }\r\n\r\n    const onConContractHandler = (event) => {\r\n        setConOpen(false);\r\n        detailMemberList();\r\n\r\n    }\r\n\r\n    //신규계약 닫기\r\n    const onNewContractHandler = (event) => {\r\n        setNewOpen(false);\r\n        detailMemberList();\r\n    }\r\n\r\n    const onNewOpenContractHandler = (event) => {\r\n        setNewOpen(true);\r\n    }\r\n\r\n    const onContractHandler = (event) => {\r\n        setConOpen(true);\r\n\r\n    }\r\n    \r\n    const onIdDownloadHandler = (event) => {\r\n        event.preventDefault();\r\n        console.log('dataMemId',dataMemId);\r\n\r\n        axios.get(`/api/s01010050/download/tb_s10_member010_by_id?id=${dataMemId}&type=single`)\r\n            .then(response => {\r\n                if (response) {\r\n                    alert('res');\r\n                   \r\n          } else {\r\n                    alert(\"다운로드에 실패하였습니다.\");\r\n                }\r\n            })\r\n    }\r\n\r\n    const onRegDownloadHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        axios.get(`/api/s01010050/download/tb_s10_member010_by_id?id=${dataMemId}&type=single`)\r\n            .then(response => {\r\n                if (response) {\r\n                    alert('res');\r\n                \r\n        } else {\r\n                    alert(\"다운로드에 실패하였습니다.\");\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    const s010100050R = detailAllInfo.map((detailAllInfo, index) => {\r\n        return (\r\n            <tr>\r\n                <td onClick={onDetailClickOpen} id={detailAllInfo.CONTRACT_ID}>{detailAllInfo.CONTRACT_ID}</td>\r\n                <td>{detailAllInfo.CONTRACT_DATE}</td>\r\n                <td>{detailAllInfo.CONTRACT_TP}</td>\r\n                <td>{detailAllInfo.CONTRACT_ROOM}</td>\r\n                <td>{detailAllInfo.CONTRACT_TERM}개월 ({detailAllInfo.START_DATE} ~ {detailAllInfo.END_DATE})</td>\r\n                <td>{detailAllInfo.MEMBER_ST}</td>\r\n                <td>{detailAllInfo.PAY_DATE}일</td>\r\n                <td>{detailAllInfo.PAYED_PLAN_MONEY}</td>\r\n                <td>{detailAllInfo.CONTRACT_LOCKER}</td>\r\n                <td>{detailAllInfo.END_FLAG}</td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    const currentPosts = s010100050R.slice(indexOfFirstPost, indexOfLastPost);\r\n    //Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n\r\n    return (\r\n\r\n        <form style={{\r\n            display: 'flex',\r\n            flexDirection: 'column14',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '100%'\r\n        }}\r\n            onSubmit={onSubmitDetailHandler}\r\n        >\r\n            <div className=\"memberInfoWrapper\">\r\n                <div className=\"memberInfoWrap\">\r\n                    {/* 회원정보란 */}\r\n                    <h2 id=\"infoTitle\">회원정보</h2>\r\n\r\n                    <table id = \"memberDetailTable\">\r\n                        <tr>\r\n                            <th>회원명</th>\r\n                            <td><input type=\"text\" value={detailMemberNm} id=\"detailMemberNm\" name=\"detailMemberNm\"\r\n                                size=\"5\"\r\n                                onChange={onDetailMemberNmHandler} /></td>\r\n                            <th>사업자번호</th>\r\n                            <td><input type=\"text\" value={detailFstRegNo} id=\"detailRegNo\" name=\"detailRegNo\" size=\"3\"\r\n                                onChange={onDetailFstRegNoHandler} /> -&nbsp;\r\n                                <input type=\"text\" value={detailSndRegNo} id=\"detailRegNo\" name=\"detailRegNo\" size=\"3\"\r\n                                    onChange={onDetailSndRegNoHandler} /> -&nbsp;\r\n                                <input type=\"text\" value={detailThdRegNo} id=\"detailRegNo\" name=\"detailRegNo\" size=\"3\"\r\n                                    onChange={onDetailThdRegNoHandler} />\r\n                            </td>\r\n                            <th>회원구분</th>\r\n                            <td>\r\n                                <select onChange={onDetailMemberTpHandler} value={detailMemberTp}>\r\n                                    {memberTpDetail.map(item => (\r\n                                        <option key={item.key} value={item.key}>{item.value}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </td>\r\n                            <th>퇴실일자</th>\r\n                            <td> \r\n                                <input type = \"text\" value = {endDateTest} size = \"6\" disabled></input>\r\n                            </td>\r\n\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <th rowSpan=\"2\">대표자</th>\r\n\r\n                            <th>성명</th>\r\n                            <td>\r\n                                <input type=\"text\" value={detailName} id=\"detailName\" name=\"detailName\" size=\"5\"\r\n                                    onChange={onDetailNameHandler} /></td>\r\n\r\n                            <th>연락처</th>\r\n                            <td colSpan=\"2\">\r\n                                <input type=\"text\" value={detailFstEmpHp} id=\"detailEmpHp\" name=\"detailEmpHp\" size=\"3\"\r\n                                    onChange={onDetailFstEmpHpHandler} /> -&nbsp;\r\n                                <input type=\"text\" value={detailSndEmpHp} id=\"detailEmpHp\" name=\"detailEmpHp\" size=\"3\"\r\n                                    onChange={onDetailSndEmpHpHandler} /> -&nbsp;\r\n                                <input type=\"text\" value={detailThdEmpHp} id=\"detailEmpHp\" name=\"detailEmpHp\" size=\"3\"\r\n                                    onChange={onDetailThdEmpHpHandler} />\r\n                            </td>\r\n                            <th>E-mail</th>\r\n                            <td>\r\n                                <input type=\"text\" value={detailEmpEmail} id=\"detailEmpEmail\" name=\"detailEmpEmail\"\r\n                                    size=\"10\"\r\n                                    onChange={onDetailEmpEmailHandler} /> @&nbsp;\r\n                                <input type=\"text\" value={detailDomain} id=\"detailEmpEmail\" name=\"detailEmpEmail\"\r\n                                    size=\"10\"\r\n                                    onChange={onDetailDomainHandler} />\r\n                            </td>\r\n\r\n                        </tr>\r\n                        <th>주소</th>\r\n                        <td colSpan=\"6\">\r\n                            <input type=\"text\" value={detailZipcode} id=\"detailAddress\" name=\"detailAddress\" size=\"7\"\r\n                                onChange={onDetailZipcodeHandler} />&nbsp;\r\n                            <input type=\"button\" value=\"우편\"/>&nbsp;\r\n                            <input type=\"text\" value={detailAddress} id=\"detailAddress\" name=\"detailAddress\" size=\"40\"\r\n                                onChange={onDetailAddressHandler} />\r\n                            <input type=\"text\" value={detailDetailAddress} id=\"detailAddress\" name=\"detailAddress\"\r\n                                size=\"80\"\r\n                                onChange={onDetailDetailAddressHandler} />\r\n                        </td>\r\n                        <tr>\r\n                            <th rowSpan=\"2\">첨부파일</th>\r\n                            <td colSpan=\"7\">\r\n                                <a href = '#' onClick={onIdDownloadHandler} >{detailCeoIdCardImg}</a>&nbsp;\r\n                                <input type = \"file\"/>\r\n                            </td>    \r\n                            {/* onClick={onIdDownloadHandler} */}\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan=\"7\">\r\n                                <a href = '#' onClick={onRegDownloadHandler}>{detailRegistCardImg}</a>&nbsp;\r\n                                <input type = \"file\"/>        \r\n                            </td>\r\n                        </tr>\r\n\r\n                    </table>\r\n\r\n                    <h6 id=\"conInfoTitle\">계약정보</h6>\r\n                    <table id = \"conInfoDetialTable\">\r\n                        <tr>\r\n                            <th>계약ID</th>\r\n                            <th>계약일자</th>\r\n                            <th>계약상품</th>\r\n                            <th>호실</th>\r\n                            <th>계약기간</th>\r\n                            <th>계약상태</th>\r\n                            <th>매월입금일</th>\r\n                            <th>월회비</th>\r\n                            <th>사물함</th>\r\n                            <th>종료여부</th>\r\n                        </tr>\r\n                        <tbody>\r\n                        {currentPosts}\r\n                        </tbody>\r\n                    </table>\r\n                    <Pagination postsPerPage={postsPerPage} totalPosts={s010100050R.length} paginate={paginate} />\r\n\r\n                    <div id=\"btnAlign\">\r\n                        <input type=\"button\" id=\"btn-centerN\" onClick={onNewOpenContractHandler} value=\"신규계약\" />\r\n                        <input type=\"button\" id=\"btn-centerN\" onClick={onModifyHandler} value=\"수정하기\" />\r\n                    </div>\r\n\r\n                    {/*계약ID클릭*/}\r\n                    <Dialog\r\n                        maxWidth={\"lg\"}\r\n                        //fullWidth = {true}\r\n                        open={conOpen}\r\n                        onClose={onConContractHandler}>\r\n                        <S010100010 dataNum={rNum} cDataForm={'I'} />\r\n                        <DialogActions>\r\n                            <input type=\"button\" onClick={onConContractHandler} color=\"primary\" value=\"닫기\" />\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n                    {/*신규계약 멤버ID클릭*/}\r\n                    <Dialog\r\n                        maxWidth={\"lg\"}\r\n                        //fullWidth = {true}\r\n                        open={newOpen}\r\n                        onClose={onNewContractHandler}>\r\n                        <S010100010 dataMem={detailMemberId} newDataForm={'N'} />\r\n                        <DialogActions>\r\n                            <input type=\"button\" onClick={onNewContractHandler} color=\"primary\" value=\"닫기\" />\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n                </div>\r\n            </div>\r\n        </form>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default S010100050;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Navbar.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100150.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100140.js",["210","211","212","213","214","215","216","217","218","219","220"],"//<<상담등록 페이지>>\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport { addDays } from 'date-fns';\r\nimport './css/S010100140.css';\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko'\r\nregisterLocale(\"ko\", ko);\r\n//datepicker끝\r\n\r\n\r\n\r\n\r\n\r\nfunction S010100140(props) {\r\n    \r\n     //console.log(props.dataForm);\r\n     //console.log(props.num);\r\n\r\n\r\n            const rNum = props.num;\r\n            //console.log('rNum',rNum);\r\n            //const modal = props.modal;\r\n\r\n            useEffect(()=>{\r\n            //if(isNaN(rNum)){ return alert('숫자를 클릭하세요') }\r\n\r\n                    if (props.dataForm === 'U'){\r\n\r\n                    axios.get(`/api/s010100140/tb_s10_ask010_by_id?id=${rNum}&type=single`)\r\n                    .then(response => {\r\n                            if(response.data.success){\r\n                                //console.log(response.data)\r\n                                const askTp = (response.data.rows[0].ASK_TP);\r\n                                const askDate = (response.data.rows[0].ASK_DATE);\r\n                                const askMethod = (response.data.rows[0].ASK_METHOD);\r\n                                const askName = (response.data.rows[0].ASK_NAME);\r\n                                const askPath = (response.data.rows[0].ASK_PATH);\r\n                                const askInfo = (response.data.rows[0].ASK_INFO);\r\n                                const askContent = (response.data.rows[0].ASK_CONTENT);\r\n\r\n                                // setModalAskDate(askDate);\r\n                                //console.log('askDate', askDate);\r\n                                setModalAskTp(askTp);\r\n                                setModalAskName(askName);\r\n                                setModalAskMethod(askMethod);\r\n                                setModalAskPath(askPath);\r\n                                setModalAskInfo(askInfo);\r\n                                setModalAskContent(askContent);\r\n                                setStartDate(new Date(askDate));\r\n                            }else{\r\n                                alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                            }\r\n                        })\r\n                    }\r\n                   \r\n            },[])\r\n\r\n\r\n\r\n\r\n\r\n    //<Lov(List of Value)를 데이터 베이스에서 가져오기\r\n\r\n    //select-option\r\n        const[modalAskTp, setModalAskTp]= useState('')\r\n        const[modalAskMethod, setModalAskMethod] = useState('')\r\n        const[modalAskPath, setModalAskPath] = useState('')\r\n\r\n\r\n        const[modalContractTpLov, setModalContractTpLov]= useState([{key: '', value: '선택'}])\r\n        const[modalAskMethodLov, setModalAskMethodLov] = useState( [{key: '', value: '선택'}])\r\n        const[modalAccessPathLov, setModalAccessPathLov] = useState( [{key: '', value: '선택'}])\r\n\r\n        useEffect(()=>{\r\n            getContractTpLov();\r\n            getAskMethodLov();\r\n            getAccessPathLov();\r\n        },[]);\r\n\r\n    const getContractTpLov = () => {\r\n        getLovByCdTp('CONTRACT_TP','ASK');\r\n    };\r\n    const getAskMethodLov = () => {\r\n        getLovByCdTp('ASK_METHOD','');\r\n    };\r\n    const getAccessPathLov = () => {\r\n        getLovByCdTp('ACCESS_PATH','ASK');\r\n    };\r\n    /**\r\n     * desc : LOV에 필요한 항목을 받아 DB조회 후 조회값을 반환하는 로직\r\n     * */\r\n    async function getLovByCdTp(cdTp, attribute2) {\r\n        let arr = [{ key: '선택', value: '선택' }];\r\n        return await axios.post('/api/s010100140/selectTest',{firstVal:cdTp,secondVal:attribute2})\r\n        .then(response => {\r\n            if(response.data.success){\r\n                //console.log('modalAskTp',response.data.rows);\r\n                response.data.rows.map((data) =>\r\n                    arr.push({\r\n                    value: data.CD_V_MEANING,\r\n                    key: data.CD_V\r\n                }));\r\n                //return arr;\r\n                switch (cdTp){\r\n                    case 'CONTRACT_TP' : setModalContractTpLov(arr); break;\r\n                    case 'ASK_METHOD' : setModalAskMethodLov(arr); break;\r\n                    case 'ACCESS_PATH' : setModalAccessPathLov(arr); break;\r\n                }\r\n                if(cdTp === 'CONTRACT_TP')\r\n                setModalAccessPathLov(arr);\r\n            }else{\r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\")\r\n            }\r\n        }).catch(() =>{\r\n              alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n        })\r\n        return arr;\r\n        console.log('arr',arr);\r\n    }\r\n\r\n    //<Lov끝>\r\n\r\n\r\n    //datepicker속성 및 이벤트 시작\r\n    const [modalAskDate, setModalAskDate] = useState(new Date());\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    //datepicker속성 및 이벤트 끝\r\n\r\n\r\n    //input type =\"text\"\r\n    const[modalAskName, setModalAskName] = useState(\"\")\r\n    const[modalAskInfo, setModalAskInfo] = useState(\"\")\r\n    const[modalAskContent, setModalAskContent] = useState(\"\")\r\n\r\n    //select-option 이벤트들\r\n    const onAskTpHandler=(event)=>{\r\n        console.log(event.currentTarget.value);\r\n        setModalAskTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskMethodHandler=(event)=>{\r\n        setModalAskMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskPathHandler=(event)=>{\r\n        setModalAskPath(event.currentTarget.value);\r\n    }\r\n\r\n    //input type = \"text\" 이벤트들\r\n    const onAskNameHandler=(event)=>{\r\n        setModalAskName(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskInfoHandler=(event)=>{\r\n        setModalAskInfo(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskContentHandler=(event)=>{\r\n        setModalAskContent(event.currentTarget.value);\r\n    }\r\n\r\n    const onChangeHandler = (event)=> {\r\n        // DatePicker.value\r\n    }\r\n\r\n    const onModifyHandler = ()=>{\r\n\r\n        const body = {\r\n            modalAskId : rNum,\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: startDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n\r\n        axios.post('/api/s010100140/modify',body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 수정되었습니다.')\r\n            }else{\r\n                alert('수정에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    //상담등록저장버튼클릭시\r\n    const onHandleSubmit=(event)=> {\r\n\r\n        event.preventDefault();\r\n        //   //문의구분 NUll체크\r\n          if(modalAskTp == null ||modalAskTp == ''||modalAskTp == '선택'){\r\n              //alert('modalAskTp: '+modalAskTp);\r\n              return alert(\"문의구분을 선택하세요.\");\r\n         }\r\n\r\n         //문의방법 NUll체크\r\n         if(modalAskMethod == null || modalAskMethod == ''){\r\n             //alert('111');\r\n            //alert((modalAskMethod == null)+ ',' + (modalAskMethod == '' ));\r\n            return alert(\"문의방법을 선택하세요.\");\r\n        }\r\n        \r\n         //접근경로 NUll체크\r\n         if(modalAskPath == null || modalAskPath == ''){\r\n            return alert(\"접근경로를 선택하세요.\");\r\n        }\r\n        \r\n    \r\n        //서버에 채운 값들을 request로 보낸다.\r\n        const body = {\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: startDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n             //console.log('setModalAskDate',setModalAskDate);\r\n\r\n\r\n        axios.post(\"/api/s010100140\",body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 등록되었습니다.')\r\n            }else{\r\n                alert('등록에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n    // console.log(startDate);\r\n\r\n    return (\r\n            <form onSubmit={onHandleSubmit} id = \"formWrapper\">\r\n            {/* <h1>상담등록</h1> */}\r\n            <div id =\"wrapper\">\r\n                <table className =\"buttonTable\">\r\n                    <tbody>\r\n                    <tr>\r\n                        <th>문의구분</th>\r\n                            <td>\r\n                                <select multiple={false} onChange ={onAskTpHandler} value ={modalAskTp} >\r\n\r\n                                    {modalContractTpLov.map(item => (\r\n                                        <option key ={item.key} value ={item.key}>{item.value}</option>\r\n                                    ))}\r\n                                    \r\n                                </select>\r\n\r\n                            </td>\r\n\r\n                        <th>문의일자</th>\r\n                            <td>\r\n                                {/* <DatePicker\r\n                                    locale=\"ko\"\r\n                                    selected={new Date()}\r\n                                    value={modalAskDate}\r\n                                    onChange={date => setModalAskDate(date)}\r\n                                    minDate={new Date()}\r\n                                    maxDate={addDays(new Date(), 0)}\r\n                                    dateFormat=\"yy.MM.dd (eee)\"\r\n\r\n                                /> */}\r\n                                <DatePicker\r\n                                    locale=\"ko\"\r\n                                    selected={startDate.setHours(9, 0, 0, 0)}\r\n                                    onChange={date => setStartDate(date)}\r\n                                    dateFormat=\"yyyy.MM.dd (eee)\"\r\n                                    onClick={onChangeHandler}\r\n                                />\r\n                            </td>\r\n\r\n                        <th>문의자명</th>\r\n                            <td>\r\n                                <input type=\"text\" \r\n                                    value = {modalAskName} \r\n                                    id=\"modalAskName\" \r\n                                    name=\"modalAskName\" \r\n                                    size = \"7\"\r\n                                    onChange={onAskNameHandler}\r\n                                />\r\n                            </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th>문의방법</th>\r\n                            <td>\r\n                                <select multiple={false} value={modalAskMethod} onChange={onAskMethodHandler}  >\r\n                                    {modalAskMethodLov.map(item=>(\r\n                                            <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                                    ))}\r\n\r\n                                </select>\r\n                            </td>\r\n\r\n                        <th>접근경로</th>\r\n                            <td>\r\n                                <select multiple={false} value={modalAskPath} onChange={onAskPathHandler}  >\r\n                                    {modalAccessPathLov.map(item =>(\r\n                                        <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                                    ))}\r\n\r\n                                </select>\r\n                            </td>\r\n\r\n                        <th>문의자연락처</th>\r\n                            <td>\r\n                                <input type = \"text\" value = {modalAskInfo}id = \"modalAskInfo\" name = \"modalAskInfo\" size = \"7\"\r\n                                onChange={onAskInfoHandler} />\r\n                            </td>\r\n                    </tr>\r\n\r\n\r\n                    <tr>\r\n                        <th>상담내용</th>\r\n                            <td colSpan=\"5\">\r\n                                <textarea rows =\"5\" cols = \"100\" value = {modalAskContent} id=\"modalAskContent\" name = \"modalAskContent\"\r\n                                onChange={onAskContentHandler} ></textarea>\r\n                            </td>\r\n                    </tr>\r\n                    </tbody>                        \r\n                </table>\r\n\r\n            </div>\r\n                <input type =\"button\" className = \"popBtn\" value=\"수정하기\" onClick = {onModifyHandler}hidden = {props.dataForm !== 'U'}/>\r\n                {/* <button>닫기</button> */}\r\n                <input className = \"popBtn\" type = \"submit\" hidden = {props.dataForm === 'U'}/>\r\n\r\n            </form>\r\n        \r\n    );\r\n  }\r\nexport default S010100140;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Pagination.js",["221"],"import React from 'react';\r\n\r\nconst Pagination = ({postsPerPage,totalPosts,paginate}) =>{\r\n    const pageNumbers = [];\r\n\r\n    for(let i = 1;i <= Math.ceil(totalPosts/postsPerPage);i++){\r\n        pageNumbers.push(i);\r\n\r\n    }\r\n    return(\r\n        <nav>\r\n            <ul className = \"pagination\" style = {{ margin:0, padding:0}} >\r\n                {pageNumbers.map(number =>(\r\n                    <li key = {number} className = \"pageItem\" style = {{float:\"left\",  margin:0, padding:0}}>\r\n                        <a onClick={()=>paginate(number)} className = \"pageLink\">\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Pagination;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100070.js",["222","223","224","225"],"import React, {Fragment, useState, useEffect, useRef} from 'react';\r\nimport './css/S010100070.css';\r\nimport axios from 'axios';\r\n//엑셀다운로드\r\nimport xlsx from 'xlsx';\r\n\r\nimport Pagination from'./utils/Pagination';\r\n\r\nimport DatePicker, {registerLocale} from 'react-datepicker';\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n\r\n\r\n\r\n\r\nfunction S010100070(props) {\r\n\r\n    const [paymentMemberNm, setPaymentMemberNm] = useState('');\r\n    const [paymentPeriod, setPaymentPeriod] = useState('');\r\n    const [paymentCeoNm, setPaymentCeoNm] = useState('');\r\n    const [paymentEmpHp, setPaymentEmpHp] = useState('');\r\n    const [paymentEmpEmail, setPaymentEmpEmail] = useState('');\r\n    const [paymentEmpComment, setPaymentEmpComment] = useState('');\r\n    const [paymentStatusList, setPaymentStatusList] = useState([]);\r\n\r\n    //페이징\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage, setPostsPerPage] = useState(12);\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    // const []\r\n    const paymentMemberNmHandler = (event) => {\r\n        setPaymentMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentPeriodHandler = (event) => {\r\n        setPaymentPeriod(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentCeoNmHandler = (event) => {\r\n        setPaymentCeoNm(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentEmpHpHandler = (event) => {\r\n        setPaymentEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentEmpEmailHandler = (event) => {\r\n        setPaymentEmpEmail(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentEmpCommentHandler = (event) => {\r\n        setPaymentEmpComment(event.currentTarget.value);\r\n    }\r\n\r\n     //데이터 들고오는 API\r\n     const paymentStList = () =>{\r\n        axios.get(`/api/s01010070/insert/tb_s10_contract020_by_id?id=${dataContracId}`)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //초기값 세팅\r\n                    response.data.rows.map((row) => {\r\n                        if(row.PAYED_DATE === null || row.PAYED_DATE === undefined) row.PAYED_DATE = makeYYMMDD(new Date());\r\n                        if(row.CONTRACT_COMMENT === null || row.CONTRACT_COMMENT === undefined) row.CONTRACT_COMMENT = '';\r\n                        console.log('row', row);\r\n                    })\r\n                   \r\n\r\n                    setPaymentStatusList(response.data.rows);\r\n                    setPaymentMemberNm(response.data.rows[0].MEMBER_NM);\r\n                    setPaymentPeriod(response.data.rows[0].CONTRACT_TERM + '개월 ' +\r\n                        '(' + response.data.rows[0].START_DATE + ' ~ ' + response.data.rows[0].END_DATE + ')');\r\n                    setPaymentCeoNm(response.data.rows[0].NAME);\r\n                    setPaymentEmpHp(response.data.rows[0].EMP_HP);\r\n                    setPaymentEmpEmail(response.data.rows[0].EMP_EMAIL);\r\n                    setPaymentEmpComment(response.data.rows[0].COMMENT);\r\n                    setPayMethodM(response.data.rows[0].PAY_METHOD);\r\n\r\n                } else {\r\n                    alert(\"데이터 조회를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n     useEffect(() => {\r\n        paymentStList();\r\n     }, [])\r\n\r\n     let newChecked;\r\n\r\n     const toggleHandler = (event) => {\r\n        const currentIndex = checked.indexOf(event.target.id);\r\n        // const currentIndex = checked.findIndex((items,idx) => \r\n        // {return items.PAY_PLAN_DATE !== event.target.id});\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        // console.log('event.target.id[0]',event.target.id);\r\n        // console.log('event.target.className',event.target.className[0]);\r\n        newChecked = checked;\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(event.target.id)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setChecked(newChecked);\r\n        \r\n        console.log('newChecked',newChecked);\r\n    }\r\n\r\n    //납부 버튼\r\n    const payBtnHandler = (event) => {\r\n\r\n        let modalContractId = props.dataContracId;\r\n        let modalPayPlanDate = checked;\r\n        //console.log(checked);\r\n        //console.log('modalContractId',modalContractId);\r\n\r\n        let body = {\r\n            //id -> date\r\n            modalContractId: modalContractId,\r\n            modalPayPlanDate: modalPayPlanDate,\r\n            payMethodM:payMethodM,\r\n            //insertPayDate: insertPayDate,\r\n            //paymentStatusList:paymentStatusList\r\n            newChecked:newChecked\r\n        }\r\n        console.log('newChecked', body);\r\n\r\n        axios.post('/api/s01010070/paymentUpdate',body)\r\n           .then(response => {\r\n                if (response.data.success) {\r\n                    alert('왼료되었습니다.');\r\n               } else {\r\n                   alert('실패하였습니다.');\r\n               }\r\n           })\r\n            //paymentStList();\r\n        }\r\n\r\n    const snsBtnHandler = (event) => {\r\n\r\n    }\r\n    const emailBtnHandler = (event) => {\r\n\r\n    }  \r\n    //엑셀다운로드\r\n    const excelBtnHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(paymentStatusList);\r\n\r\n        ['대표자','연락처','E-mail','회원명','계약상태','계약기간','계약기간','납부일자','특약사항','계약기간(개월)','납부예정일','contract_id','납부여부','비고']\r\n        .forEach((x,idx) => {\r\n            const cellAdd = xlsx.utils.encode_cell({c:idx,r:0});\r\n            ws[cellAdd].v = x;\r\n            \r\n        })\r\n\r\n        ws['!cols'] = [];\r\n        // ws['!cols'][4] = {hidden:true};\r\n        // ws['!cols'][7] = {hidden:true};\r\n        ws['!cols'][11] = {hidden:true};\r\n        \r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb,ws,\"Sheet1\");\r\n        xlsx.writeFile(wb,\"고객납부등록.xlsx\");\r\n    }\r\n\r\n\r\n    let dataContracId = props.dataContracId;\r\n\r\n    \r\n \r\n\r\n// const [s010100070R, setS010100070R] = useState([]);\r\nconst makeYYMMDD = (value) => {\r\n    let year = (value.getFullYear()+'').substring(2);\r\n    //console.log('year',year);\r\n    let month = value.getMonth() + 1;\r\n    let date = value.getDate();\r\n    month = month < 10 ? '0' + month : month;\r\n    date = date < 10 ? '0' + date : date;\r\n    return year+'.'+month+'.'+date;\r\n}\r\n\r\nconst changePayDateHandler = () => {\r\n\r\n    // // date => {setPaymentStatusList(\r\n    // //     paymentStatusList.map(changePaymentStatus =>\r\n    // //         changePaymentStatus.PAY_PLAN_DATE === paymentStatus.PAY_PLAN_DATE ?\r\n    // //         {...changePaymentStatus, PAYED_DATE : makeYYMMDD(date)}\r\n    // //         : changePaymentStatus\r\n    // // ))}\r\n\r\n    // payDateRef.current.focus()\r\n\r\n   \r\n    \r\n}\r\n\r\n//useRef();\r\nconst payDateRef = useRef();\r\n\r\n//뿌려주는 곳\r\nconst s010100070R = paymentStatusList.map((paymentStatus, index) => {\r\n    let insertPayDate = paymentStatus.PAYED_DATE \r\n                        ? new Date('20' + paymentStatus.PAYED_DATE) \r\n                        : new Date();\r\n\r\n        return (\r\n            <tr className='dataTable'>\r\n                {/*CONTRACT_ID와 날짜를 함께 들고가야한다.*/}\r\n                <td name=\"uname\" variant=\"outlined\" color=\"primary\">\r\n                    <input type=\"checkbox\" onChange={toggleHandler} id={paymentStatus.PAY_PLAN_DATE+','+paymentStatus.PAYED_DATE+','+paymentStatus.CONTRACT_COMMENT}/>\r\n                </td>\r\n                <td id = {paymentStatus.CONTRACT_ID}>{index + 1}</td>\r\n                <td>{paymentStatus.PAY_PLAN_DATE}</td>\r\n                <td>{paymentStatus.PAYED_FLAG}</td>\r\n                <td key = {paymentStatus.PAY_PLAN_DATE} id={paymentStatus.PAY_PLAN_DATE}>\r\n                    {/* api보고 바뀐이벤트값들고오는거 찾아서 했어요 */}\r\n                    <DatePicker\r\n                        ref = {payDateRef}\r\n                        id = {paymentStatus.PAY_PLAN_DATE}\r\n                        locale=\"ko\"\r\n                        selected={insertPayDate.setHours(9, 0, 0, 0)}\r\n                        onChange={\r\n                             date => {setPaymentStatusList(\r\n                             paymentStatusList.map(changePaymentStatus =>\r\n                             changePaymentStatus.PAY_PLAN_DATE === paymentStatus.PAY_PLAN_DATE ?\r\n                             {...changePaymentStatus, PAYED_DATE : makeYYMMDD(date)}\r\n                             : changePaymentStatus\r\n                             ))}\r\n                            }\r\n                        selectsStart\r\n                        startDate={insertPayDate}\r\n                        dateFormat=\"yyyy.MM.dd\"\r\n                    />\r\n                </td>\r\n                <td>\r\n                    {/* {paymentStatus.CONTRACT_COMMENT} */}\r\n                    <textarea type=\"text\" cols=\"20\" rows=\"2\" \r\n                              value = {paymentStatus.CONTRACT_COMMENT}\r\n                              size = \"5\" \r\n                              id = {paymentStatus.PAY_PLAN_DATE} \r\n                              onChange={ (e) => {\r\n                                //   console.log('비고',e.target.value);\r\n                                setPaymentStatusList(\r\n                                    paymentStatusList.map((changePaymentStatus,chIndex) =>\r\n                                    chIndex === index ?\r\n                                    {...changePaymentStatus, CONTRACT_COMMENT : e.target.value}\r\n                                    : changePaymentStatus\r\n                                    ))}\r\n                              }\r\n                              />\r\n                </td>\r\n    \r\n    \r\n            </tr>\r\n        )\r\n    });\r\n\r\n\r\n\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    const currentPosts = s010100070R.slice(indexOfFirstPost, indexOfLastPost);\r\n    //Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    const[payMethodM,setPayMethodM] = useState('');\r\n\r\n    return (\r\n        <div>\r\n            <Fragment>\r\n\r\n                <form style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    width: '100%'\r\n                }}>\r\n                    {/* */}\r\n\r\n\r\n                    <h1>고객납부등록</h1>\r\n                    <div id='list'>\r\n                        <table className='resultTable'>\r\n                            <tr>\r\n                                <td>\r\n                                    회원명&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                    <input type=\"text\" value={paymentMemberNm} id=\"memberNm\" name=\"memberNm\" size=\"5\"\r\n                                           onChange={paymentMemberNmHandler}/>\r\n                                    &nbsp;&nbsp;&nbsp;\r\n                                    계약기간 &nbsp;\r\n                                    <input type=\"text\" value={paymentPeriod} id=\"regNo\" name=\"regNo\" size=\"27\"\r\n                                           onChange={paymentPeriodHandler}/>\r\n                                    &nbsp;\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    대표자 &nbsp;&nbsp;&nbsp;\r\n                                    <input type=\"text\" value={paymentCeoNm} id=\"name\" name=\"name\" size=\"7\"\r\n                                           onChange={paymentCeoNmHandler}/>\r\n                                    &nbsp;\r\n\r\n                                    연락처 &nbsp;&nbsp;&nbsp;\r\n                                    <input type=\"text\" value={paymentEmpHp} id=\"name\" name=\"name\" size=\"13\"\r\n                                           onChange={paymentEmpHpHandler}/>\r\n                                    &nbsp;\r\n                                    메일주소 &nbsp;\r\n                                    <input type=\"text\" value={paymentEmpEmail} id=\"name\" name=\"name\" size=\"20\"\r\n                                           onChange={paymentEmpEmailHandler}/>\r\n\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <span id=\"commentTitle\">특약사항</span>&nbsp;\r\n                                    <textarea type=\"text\" cols=\"90\" rows=\"3\" value={paymentEmpComment} id=\"name\"\r\n                                              name=\"name\"\r\n                                              size=\"5\"\r\n                                              onChange={paymentEmpCommentHandler}/>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </div>\r\n                    <table id='paymentList'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>No</th>\r\n                            <th>납부예정일</th>\r\n                            <th>납부여부</th>\r\n                            <th>납부일자</th>\r\n                            <th>비고</th>\r\n                        </tr>\r\n                        </thead>\r\n                     <tbody>\r\n                     {currentPosts}\r\n                    </tbody>\r\n                   </table>\r\n                   <Pagination postsPerPage={postsPerPage} totalPosts={s010100070R.length} paginate={paginate} />\r\n                    <div>\r\n                        <input type=\"button\"\r\n                               onClick={payBtnHandler} value=\"납부\"/>\r\n                        <input type=\"button\" className=\"new\"\r\n                               onClick={snsBtnHandler} value=\"SNS 전송\"/>\r\n                        <input type=\"button\" className=\"memberId\"\r\n                               onClick={emailBtnHandler} value=\"메일 전송\"/>\r\n                        <input type=\"button\" className=\"contractId\"\r\n                               onClick={excelBtnHandler} value=\"엑셀다운로드\"/>\r\n                        <input type=\"button\" id=\"btnWidth\" value=\"계산서발행\"/>\r\n                    </div>\r\n                </form>\r\n            </Fragment>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100070;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Table.js",[],["226","227"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\LeaseAgreement.js",["228","229","230"],"import React,{Fragment, useState, useEffect}from 'react';\r\nimport axios from 'axios';\r\nimport './utilsCss/LeaseAgreement.css';\r\n\r\nfunction LeaseAgreement (props){\r\n\r\n\r\n    const [contractStart,setContractStart] = useState('');\r\n    const [contractEnd,setContractEnd] = useState('');\r\n    const [contractMoney,setContractMoney] = useState('');\r\n    const [roomLockerTp,setRoomLockerTp] = useState('');\r\n    const [contractPayDate,setContractPayDate] = useState('');\r\n    const [vatMoney, setVatMoney] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n      const rNum = props.dataNum;\r\n      axios.get(`/api/s01010010/tb_s10_contract010_by_id?id=${rNum}&type=single`)\r\n          .then(response => {\r\n              if (response.data.success) {\r\n                  \r\n                //   const modalCMemberNm = response.data.rows[0].MEMBER_NM;\r\n                //   const modalCRegNo = response.data.rows[0].REG_NO;\r\n                //   const modalCMemberTp = response.data.rows[0].MEMBER_TP;\r\n                //   const modalCName = response.data.rows[0].NAME;\r\n                //   const modalCEmpHp = response.data.rows[0].EMP_HP;\r\n                //   const modalCEmpEmail = response.data.rows[0].EMP_EMAIL;\r\n                //   const modalCZipCode = response.data.rows[0].ZIP_CODE;\r\n                //   const modalCAddress = response.data.rows[0].ADDRESS;\r\n                //   const modalCDetailAddress = response.data.rows[0].DETAIL_ADDRESS;\r\n                 \r\n\r\n                const modalCContractDate = response.data.rows[0].CONTRACT_DATE;\r\n                const modalCContractMoney = response.data.rows[0].PAYED_PLAN_MONEY;\r\n                const modalCEndDate = response.data.rows[0].END_DATE;\r\n                const modalCContractTpValM = response.data.rows[0].CONTRACT_ROOM_M;\r\n                const modalCPayDate = response.data.rows[0].PAY_DATE;\r\n\r\n                //VAT(10%)적용한 modalCContractMoney 값\r\n                let VatMoney = modalCContractMoney-(modalCContractMoney*(10/100));\r\n                //   setRegNo(modalCRegNos);\r\n                //   setEmpIdName(modalCName);\r\n                //   setEmpHp(modalCEmpHps);\r\n                //   setEmpEmail(modalCEmpEmails);\r\n                //   setZipcode(modalCZipCode);\r\n                //   setEmpAddress(modalCAddress);\r\n                //   setEmpDetailAddress(modalCDetailAddress);\r\n\r\n                  setContractStart(modalCContractDate);\r\n                  setContractEnd(modalCEndDate);\r\n                  setContractMoney(modalCContractMoney);\r\n                  setVatMoney(VatMoney);\r\n                  setRoomLockerTp(modalCContractTpValM);\r\n                  setContractPayDate(modalCPayDate);\r\n\r\n              } else {\r\n                  alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n              }\r\n          })\r\n        }, [])\r\n  \r\n\r\n    return(\r\n             <div>\r\n                    <Fragment>\r\n                        <div className = \"agreementWrapper\">\r\n                        <h1> 임 대 차 계 약 서 </h1>\r\n                            <div className = \"paragraph\">\r\n                            <h3> 갑 : ㈜에스원테크   최현수</h3>\t\t\t\t\t\t\t\t\r\n                            <h3> 을 : \t\t</h3>\t\t\t\t\t\t\t\r\n                            </div>     \r\n\r\n                            <div className = \"paragraph\">                                \r\n                                위 '갑'과 '을'은  20    년     월     일 다음과 같이 회원 가입을 체결 한다.\t\t\t\t\t\t\t\t\t\r\n                            </div>   \r\n\r\n                            <div className = \"paragraph\">\r\n                                <h3>1. 본 계약의 목적</h3>                        \t\t\t\t\t\t\t\t\r\n                                    본 계약은 '갑'이 '을'에게 '갑'의 사무실 및 부대시설을 사용 할 수 있는 권리를 허용함과 동시에 '을'이\t\t\t\t\t\t\t\t\t\r\n                                    필요로하는 서비스를 제공함에 있어서 '갑-을'간의 권리의무에 관한 사항을 정하기 위한 목적에서 체결 한다.\t\t\t\t\t\t\t\t\t\r\n                            </div> \r\n\r\n                            <div className = \"paragraph\">                                   \r\n                            <h3>2. 을의 권리의 책임</h3>\r\n                                    <ul>\t\t\t\t\t\t\t\t\r\n                                        <li>\r\n                                            1) '갑'은 '을'에게 제2항 및 제3항에 규정된 바와 같이 '갑'의 사무실 및 기타 부대시설을 사용할 수 있는\t\t\t\t\t\t\t\t\t\r\n                                                권리를 부여한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            2) '을'이 사용 할 수 있는 사무실의 내역은 다음과 같다.<br/>\t\t\t\t\t\t\t\t\r\n                                            &emsp;&nbsp;대상 : 서울시 강남구 봉은사로63길 11,3,4층      {roomLockerTp}호(삼성동,명화빌딩)<br/>\t\t\t\t\t\t\t\t\t\r\n                                            &emsp;&nbsp;용도 : 업무용<br/>\t\t\t\t\t\t\t\t\t\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;월회비  :         {contractMoney}원<br/>\t\t\t\t\t\t\t\t\t\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VAT     :         {vatMoney}원<br/>\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            3) '을'은 상기한 제3항의 사무실 제공과 동시에 부대시설 (회의실, 접견실, 휴게실, OA기기)을 '갑'이\t\t\t\t\t\t\t\t\t\r\n                                            정한 원칙에 의거하여 사용할 수 있다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            4) '을'은 사무실과 부대시설을 사용함에 있어서 선량한 관리자의 주의 의무를 다해야 하며, 사무실과\t\t\t\t\t\t\t\t\t\r\n                                            부대시설에 야기된 제반 손상이나 훼손에 대하여 자신의 비용으로 이를 처리해야 한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            5) '을'은 건물주 및 '갑'의 이해관계인에게 손해 등 문제가 발생할 우려가 있는 경우, 즉시 '갑'에게 사전\t\t\t\t\t\t\t\t\t\r\n                                            고지를 해야 하며 그렇지 않을 경우, 이로 인해 발생하는 '갑'의 모든 손해 (6개월간의 월회비와 법적인\t\t\t\t\t\t\t\t\t\r\n                                            문제 해결을 위한 제반 경비)에 대하여 배상을 한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            6) 상기 5)항에 대하여 '을'은 '갑'에게 관련 정보제공, 법적인 문제인 경우 이를 해결하기 위해 적극\t\t\t\t\t\t\t\t\t\r\n                                            협조한다.(또한, 채권 가압류의 경우 즉시항고, 이의신청 등을 진행하기 위한 업무협조를 포함한다.)\t\t\t\t\t\t\t\t\t\r\n                                        </li>    \r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                 \r\n                                <h3>3. 계약기간</h3>\t\t\t\t\t\t\t\t\t\r\n                                <ul>\r\n                                    <li>\r\n                                        1) 본 계약의 계약기간은 20   년   월   일부터 20   년  월   일까지로 한다.\t\t\t\t\t\t\t\t\t\r\n                                    </li>            \r\n                                </ul>\r\n                                </div>  \r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>4. 예치금</h3>\t\t\t\t\t\t\t\t\t\r\n                                <ul>\r\n                                    <li>\r\n                                        1) '을'은 본 계약서에 서명함과 동시에 예치금 {contractMoney} 원을 '갑'에게 지급하여야 한다.\t\t\t\t\t\t\t\t\t\r\n                                    </li>\r\n                                    <li>            \r\n                                        2) 위 제1항에 명시된 예치금은 본 계약기간 동안 '갑'이 보유하며, 계약기간 만료 또는 종료 시 '을'이\t\t\t\t\t\t\t\t\t\r\n                                            '갑'에게 사무실 및 부대시설을 원상 복구하여 반환하고, '갑'에게 지급할 모든 금액의 지급을 완료하고,\t\t\t\t\t\t\t\t\t\r\n                                            사업자 주소지와 전화를 7일 이내에 옮긴다.\t\t\t\t\t\t\t\t\t\r\n                                        이것이 확인된 후 3일 이내에 예치금을 반환하기로 한다. 단, 예치금에는 이자가 발생하지 않는 것으로\t\t\t\t\t\t\t\t\t\r\n                                        한다.\r\n                                    </li>           \r\n                                </ul>\t\r\n                                </div>           \r\n\r\n                                                                    \r\n                                <div className = \"paragraph\">                                               \r\n                                <h3>5. 회비 및 부가서비스 이용대금의 지급</h3>\t\t\t\t\t\t\t\t\t\r\n                                    <ul>\r\n                                        <li>\r\n                                            1) '을'은 매월  {contractPayDate} 일에 월 회비를 '갑'에게 지급하여야 하며, 그 지급일이 공휴일인 경우에는 익일까지\t\t\t\t\t\t\t\t\t\r\n                                            납부해야 한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\r\n                                            2) 월 회비나 부가서비스 이용대금이 납부기한까지 전액 납부되지 않은 경우, '갑'은 본 계약에 의하여\t\t\t\t\t\t\t\t\t\r\n                                            부여된 여타 권리와는 별도로 연체료 월 2%를 을에게 청구할 수 있다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\t        \r\n                                    </ul>            \r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>6. '갑'의 면책사항</h3>\t\t\r\n                                    <ul>\r\n                                        <li>\r\n                                            1) 본 계약서의 내용은 사정에 의하여 변동될 수 있으며, '갑'은 이러한 변경에 대하여 '을'에게\t\t\t\t\t\t\t\t\t\r\n                                            사전고지하고 상호 합의가 있는 경우, '을'은 본 계약 위반의 책임을 지지 아니한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            2) '을'이나 제3자가 다음과 같은 원인에 의하여 다치거나 재산상의 손해를 입게 된 경우 \t\t\t\t\t\t\t\t\t\r\n                                            '갑'은 이에 대하여 여하한 배상책임도 부담하지 않는다.\t\r\n                                            <ul>\r\n                                                <li>\t\t\t\t\t\t\t\t\r\n                                                - 배수관, 스프링쿨러, 연기 혹은 기타 물질이 건물에서 누출 될 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                - 건물의 서비스와 설비에 결함이 있는 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                - 건물의 보안이나 보호\r\n                                                </li>\r\n                                            </ul>    \r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            3) '갑'이 '을'에게 제공하는 세무전문서비스는 '을'과 '갑'의 제휴세무사가 직접 계약을 체결하기로 한다.\t\t\t\t\t\t\t\t\t\r\n                                            세무전문서비스의 제공과 관련하는 발생하는 문제에 대하여 '갑'은 책임을 지지 아니한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                    </ul>           \r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>7. 계약의 양도 금지</h3>\t\t\t\t\t\t\t\t\t\r\n                                '을'은 본 계약상의 권리나 의무를 '갑'의 동의 없이 제3자에게 양도하거나 처분할 수 없다.\t\t\t\t\t\t\t\t\t\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>8. 계약의 해지 및 갱신</h3>\r\n                                    <ul>\r\n                                        <li>\t\t\t\t\t\t\t\t\r\n                                            1) '을'이 본 계약의 해지 및 갱신을 원하는 경우, 본 계약서 제 3조에 명시된 계약기간의 만료 15일 전까지\t\t\t\t\t\t\t\t\t\r\n                                            그러한 의사를 '갑'에게 반드시 통지 해야한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>        \r\n                                            2) 계약 만료일 15일전에 의사표시를 하지않는 경우에는, 계약만료를 통보한 날로부터 15일 이후를\t\t\t\t\t\t\t\t\t\r\n                                            계약만료일로 하며, 해당 기간의 사용료를 손해배상금으로 '갑'에게  지급한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>        \r\n                                            3) 월회비 할인률이 적용된 경우,  '을'의 사정으로 계약만료일 이전에 중도 해지할 경우는 해당기간 동안\t\t\t\t\t\t\t\t\t\r\n                                            할인 받은 총금액을 최종 정산시 일괄 반환한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>       \r\n                                            4) '갑'이 부득이한 사정으로 인하여 중도에 본 계약을 해지하고자 하는 경우 '갑'은 1개월 전에 해지의사를\t\t\t\t\t\t\t\t\t\r\n                                            '을'에게 표시하여야 한다.\r\n                                        </li>\r\n                                        <li>    \t\t\t\t\t\t\t\t\t\r\n                                            5) 다음의 경우에는 '갑'이 일방적으로 계약을 해지 할 수 있다.\r\n                                                <ul>\r\n                                                <li>\r\n                                                    - '을' 이 30일 이내 2회 이상 '갑'으로부터 납부 권고를 받고도 월 이용회비를 납부하지 않은 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '갑' 이 규정한 ‘회원이용안내’의 규칙을 준수하지 않고 질서를 문란하여 타 회원에게 피해를\t\t\t\t\t\t\t\t\t\r\n                                                    입힌 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '을'이  '갑' 의 사전 승인 없이 회원계약을 제 3자에게 인도한 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '을' 의 업무가 반사회적이거나, 현행 법률에 저촉되어 물의가 될 것으로 판단되는 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '을' 로 인해  '갑' 과  '갑'의 이해당사자에게 법적인 문제(채권 가압류등) 및 피해가 발생한 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                </ul>\r\n                                            </li>\r\n                                    \r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>9. 위 제8조 제5항에 의거하여 '갑'이 일방적으로 본 계약을 해지 할 경우</h3>\r\n                                    <ul>\t\r\n                                        <li>\t\t\t\t\t\t\t\t\r\n                                            1) 해지 3일 전에 서면 또는 전자메일로 통보하며 계약해지에 따른 월회비나 서비스 이용대금을 정산하고\t\t\t\t\t\t\t\t\t\r\n                                            '을'의 회원자격을 박탈한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            2) '을'은 계약해지를 통보 받은 날로부터 3일 이내에 '갑'의 유치물품을 퇴거해야 하며, 퇴거하지 않을 경우\t\t\t\t\t\t\t\t\t\r\n                                            '을'의 유치물품에 대한 분실이나 도난에 대해 '갑'은 책임을 지지 않는다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>                            \r\n                                            3) 본 계약서에 명시된 월회비나 서비스 이용대금을 전액 납부하지 않은 경우, '갑'은 사무실 또는 건물에\t\t\t\t\t\t\t\t\t\r\n                                            있는 '을'의 자산에 대하여 최우선적인 담보권을 취득한다. 만일 '을'이 '갑'의 서면 통지를 받은\t\t\t\t\t\t\t\t\t\r\n                                            날로부터 10일 내에 미지급된 금액을 납부하지 않을 경우, '갑'은 '을'의 동의 없이 '갑'이 자산을 이전\t\t\t\t\t\t\t\t\t\r\n                                            및 임의 처분할 권리를 가진다.\r\n                                        </li>\r\n                                    </ul>\t\t\t\t\t\t\t\t\t\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>10. 분쟁의 해결</h3>\r\n                                    <ul>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            1) '갑'과 '을'간에 본 계약과 관련하여 분쟁이 야기되는 경우, 해당 분쟁은 대한상사중재원에게 상사중재에 \t\t\t\t\t\t\t\t\t\r\n                                                의하여 상호 해결하는데 동의한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            2) 본 계약의 준거법은 대한국민법으로 한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            3) '을'이 계약을 해지하고자 할 경우에는 해지를 희망하는 날로부터 15일전에 '갑'에게 서면 통지하여야\t\t\t\t\t\t\t\t\t\r\n                                                하며, '갑'은 사용료를 일할 정산한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>        \r\n                                    </ul>\r\n                                </div>                                    \r\n                                                                    \r\n                                <div className = \"paragraph\">\r\n                                이상과 같은 합의를 증명하기 위하여 본 계약을 체결하며, 양 당사자는 계약서에 각기 서명 날인하여 1부씩\t\t\t\t\t\t\t\t\t\r\n                                이를 보관 한다.\t\t\r\n                                </div>\t\t\t\t\t\t\t\r\n                                                                    \r\n                                <div className = \"paragraph\" id = \"processOfSign\">                                    \r\n                                센터매니저&emsp;&emsp;상기내용을 잘 주지시켰음 &nbsp;&nbsp;&nbsp;&nbsp;&emsp;&emsp;서명<br/>\t\t\t\t\t\t\t\t\r\n                                이용자&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&emsp;&emsp; 상기내용을 완전히 숙지하였음 &emsp;   서명\t\t\t\t\t\t\t\t\t\r\n                                </div>                                    \r\n                                                                    \r\n                                                                    \r\n                                <div className = \"paragraph\">                                    \r\n                                임대인 : ㈜에스원테크 &emsp;&emsp;&emsp;서명(인)<br/>             \t\t\t\t\t\t\t\t\t\r\n                                &emsp;&emsp;&emsp;&nbsp;                  최현수<br/>\t\t\t\t\t\t\t\t\t\r\n                                법인등록번호 110111-4806381<br/>           \t\t\t\t\t\t\t\t\t\r\n                                사업등록번호 105-87-68698<br/>              \t\t\t\t\t\t\t\t\t\r\n                                주소 : 서울시 강남구 봉은사로63길 11, 3,4층<br/>  \t\t\t\t\t\t\t\t\t\r\n                                연락처 : 070-4355-2312<br/>                 \t\t\t\t\t\t\t\t\t\r\n                                </div>                                   \r\n                            \r\n                                <div className = \"paragraph\">                                   \r\n                                임차인 : <span id = \"finalSign\">서명(인)</span><br/>\t\t\t\t\t\t\t\t\t\r\n                                <br/>                        \r\n                                법인등록번호 :\t\t\t\t\t\t\t\t\t<br/>\r\n                                사업자등록번호 : \t\t\t\t\t\t\t\t<br/>\t\r\n                                주소 :\t\t\t\t\t\t\t\t\t<br/>\r\n                                <br/>                                    \r\n                                                                    \r\n                                연락처 : <br/>\r\n                                </div>\r\n                        </div>                                    \r\n                    </Fragment>\r\n                </div>\r\n\r\n\r\n     );\r\n}\r\nexport default LeaseAgreement;\r\n",{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","severity":1,"message":"236","line":1,"column":16,"nodeType":"237","messageId":"238","endLine":1,"endColumn":25},{"ruleId":"235","severity":1,"message":"239","line":6,"column":10,"nodeType":"237","messageId":"238","endLine":6,"endColumn":14},{"ruleId":"235","severity":1,"message":"240","line":2,"column":8,"nodeType":"237","messageId":"238","endLine":2,"endColumn":12},{"ruleId":"235","severity":1,"message":"241","line":17,"column":5,"nodeType":"237","messageId":"238","endLine":17,"endColumn":15},{"ruleId":"231","replacedBy":"242"},{"ruleId":"233","replacedBy":"243"},{"ruleId":"235","severity":1,"message":"244","line":6,"column":18,"nodeType":"237","messageId":"238","endLine":6,"endColumn":27},{"ruleId":"245","severity":1,"message":"246","line":11,"column":1,"nodeType":"247","endLine":33,"endColumn":2},{"ruleId":"235","severity":1,"message":"244","line":1,"column":26,"nodeType":"237","messageId":"238","endLine":1,"endColumn":35},{"ruleId":"235","severity":1,"message":"248","line":3,"column":8,"nodeType":"237","messageId":"238","endLine":3,"endColumn":13},{"ruleId":"235","severity":1,"message":"249","line":6,"column":8,"nodeType":"237","messageId":"238","endLine":6,"endColumn":18},{"ruleId":"235","severity":1,"message":"250","line":11,"column":5,"nodeType":"237","messageId":"238","endLine":11,"endColumn":14},{"ruleId":"235","severity":1,"message":"251","line":12,"column":5,"nodeType":"237","messageId":"238","endLine":12,"endColumn":12},{"ruleId":"235","severity":1,"message":"252","line":13,"column":5,"nodeType":"237","messageId":"238","endLine":13,"endColumn":10},{"ruleId":"235","severity":1,"message":"241","line":15,"column":5,"nodeType":"237","messageId":"238","endLine":15,"endColumn":15},{"ruleId":"235","severity":1,"message":"253","line":25,"column":20,"nodeType":"237","messageId":"238","endLine":25,"endColumn":31},{"ruleId":"235","severity":1,"message":"254","line":26,"column":16,"nodeType":"237","messageId":"238","endLine":26,"endColumn":23},{"ruleId":"235","severity":1,"message":"255","line":27,"column":21,"nodeType":"237","messageId":"238","endLine":27,"endColumn":33},{"ruleId":"235","severity":1,"message":"256","line":28,"column":20,"nodeType":"237","messageId":"238","endLine":28,"endColumn":31},{"ruleId":"235","severity":1,"message":"257","line":29,"column":21,"nodeType":"237","messageId":"238","endLine":29,"endColumn":33},{"ruleId":"235","severity":1,"message":"258","line":30,"column":18,"nodeType":"237","messageId":"238","endLine":30,"endColumn":27},{"ruleId":"235","severity":1,"message":"236","line":1,"column":16,"nodeType":"237","messageId":"238","endLine":1,"endColumn":25},{"ruleId":"235","severity":1,"message":"236","line":1,"column":16,"nodeType":"237","messageId":"238","endLine":1,"endColumn":25},{"ruleId":"231","replacedBy":"259"},{"ruleId":"233","replacedBy":"260"},{"ruleId":"235","severity":1,"message":"261","line":1,"column":38,"nodeType":"237","messageId":"238","endLine":1,"endColumn":44},{"ruleId":"235","severity":1,"message":"262","line":53,"column":25,"nodeType":"237","messageId":"238","endLine":53,"endColumn":39},{"ruleId":"235","severity":1,"message":"263","line":58,"column":12,"nodeType":"237","messageId":"238","endLine":58,"endColumn":25},{"ruleId":"235","severity":1,"message":"264","line":59,"column":12,"nodeType":"237","messageId":"238","endLine":59,"endColumn":23},{"ruleId":"235","severity":1,"message":"265","line":69,"column":12,"nodeType":"237","messageId":"238","endLine":69,"endColumn":21},{"ruleId":"235","severity":1,"message":"266","line":69,"column":22,"nodeType":"237","messageId":"238","endLine":69,"endColumn":34},{"ruleId":"267","severity":1,"message":"268","line":141,"column":8,"nodeType":"269","endLine":141,"endColumn":10,"suggestions":"270"},{"ruleId":"267","severity":1,"message":"271","line":247,"column":8,"nodeType":"269","endLine":247,"endColumn":10,"suggestions":"272"},{"ruleId":"273","severity":1,"message":"274","line":420,"column":21,"nodeType":"275","messageId":"276","endLine":439,"endColumn":22},{"ruleId":"235","severity":1,"message":"277","line":581,"column":11,"nodeType":"237","messageId":"238","endLine":581,"endColumn":24},{"ruleId":"278","severity":1,"message":"279","line":693,"column":26,"nodeType":"280","messageId":"281","endLine":693,"endColumn":28},{"ruleId":"278","severity":1,"message":"279","line":695,"column":32,"nodeType":"280","messageId":"281","endLine":695,"endColumn":34},{"ruleId":"278","severity":1,"message":"279","line":697,"column":31,"nodeType":"280","messageId":"281","endLine":697,"endColumn":33},{"ruleId":"278","severity":1,"message":"279","line":699,"column":32,"nodeType":"280","messageId":"281","endLine":699,"endColumn":34},{"ruleId":"278","severity":1,"message":"279","line":699,"column":60,"nodeType":"280","messageId":"281","endLine":699,"endColumn":62},{"ruleId":"278","severity":1,"message":"279","line":699,"column":87,"nodeType":"280","messageId":"281","endLine":699,"endColumn":89},{"ruleId":"278","severity":1,"message":"279","line":715,"column":26,"nodeType":"280","messageId":"281","endLine":715,"endColumn":28},{"ruleId":"278","severity":1,"message":"279","line":717,"column":32,"nodeType":"280","messageId":"281","endLine":717,"endColumn":34},{"ruleId":"278","severity":1,"message":"279","line":719,"column":31,"nodeType":"280","messageId":"281","endLine":719,"endColumn":33},{"ruleId":"278","severity":1,"message":"279","line":721,"column":32,"nodeType":"280","messageId":"281","endLine":721,"endColumn":34},{"ruleId":"278","severity":1,"message":"279","line":721,"column":60,"nodeType":"280","messageId":"281","endLine":721,"endColumn":62},{"ruleId":"278","severity":1,"message":"279","line":721,"column":87,"nodeType":"280","messageId":"281","endLine":721,"endColumn":89},{"ruleId":"278","severity":1,"message":"279","line":865,"column":21,"nodeType":"280","messageId":"281","endLine":865,"endColumn":23},{"ruleId":"278","severity":1,"message":"279","line":867,"column":27,"nodeType":"280","messageId":"281","endLine":867,"endColumn":29},{"ruleId":"278","severity":1,"message":"279","line":1244,"column":103,"nodeType":"280","messageId":"281","endLine":1244,"endColumn":105},{"ruleId":"235","severity":1,"message":"282","line":44,"column":26,"nodeType":"237","messageId":"238","endLine":44,"endColumn":41},{"ruleId":"267","severity":1,"message":"283","line":124,"column":8,"nodeType":"269","endLine":124,"endColumn":10,"suggestions":"284"},{"ruleId":"235","severity":1,"message":"285","line":13,"column":8,"nodeType":"237","messageId":"238","endLine":13,"endColumn":18},{"ruleId":"235","severity":1,"message":"282","line":42,"column":26,"nodeType":"237","messageId":"238","endLine":42,"endColumn":41},{"ruleId":"267","severity":1,"message":"286","line":64,"column":8,"nodeType":"269","endLine":64,"endColumn":10,"suggestions":"287"},{"ruleId":"235","severity":1,"message":"288","line":34,"column":5,"nodeType":"237","messageId":"238","endLine":34,"endColumn":13},{"ruleId":"235","severity":1,"message":"282","line":48,"column":25,"nodeType":"237","messageId":"238","endLine":48,"endColumn":40},{"ruleId":"267","severity":1,"message":"289","line":54,"column":8,"nodeType":"269","endLine":54,"endColumn":10,"suggestions":"290"},{"ruleId":"235","severity":1,"message":"291","line":20,"column":12,"nodeType":"237","messageId":"238","endLine":20,"endColumn":16},{"ruleId":"235","severity":1,"message":"292","line":21,"column":12,"nodeType":"237","messageId":"238","endLine":21,"endColumn":31},{"ruleId":"235","severity":1,"message":"293","line":31,"column":12,"nodeType":"237","messageId":"238","endLine":31,"endColumn":30},{"ruleId":"235","severity":1,"message":"294","line":31,"column":32,"nodeType":"237","messageId":"238","endLine":31,"endColumn":53},{"ruleId":"235","severity":1,"message":"295","line":44,"column":12,"nodeType":"237","messageId":"238","endLine":44,"endColumn":25},{"ruleId":"235","severity":1,"message":"282","line":65,"column":26,"nodeType":"237","messageId":"238","endLine":65,"endColumn":41},{"ruleId":"267","severity":1,"message":"296","line":156,"column":8,"nodeType":"269","endLine":156,"endColumn":10,"suggestions":"297"},{"ruleId":"235","severity":1,"message":"277","line":158,"column":11,"nodeType":"237","messageId":"238","endLine":158,"endColumn":24},{"ruleId":"235","severity":1,"message":"298","line":298,"column":11,"nodeType":"237","messageId":"238","endLine":298,"endColumn":29},{"ruleId":"235","severity":1,"message":"299","line":318,"column":11,"nodeType":"237","messageId":"238","endLine":318,"endColumn":28},{"ruleId":"300","severity":1,"message":"301","line":463,"column":33,"nodeType":"302","endLine":463,"endColumn":78},{"ruleId":"300","severity":1,"message":"301","line":470,"column":33,"nodeType":"302","endLine":470,"endColumn":78},{"ruleId":"235","severity":1,"message":"303","line":5,"column":10,"nodeType":"237","messageId":"238","endLine":5,"endColumn":17},{"ruleId":"267","severity":1,"message":"304","line":59,"column":15,"nodeType":"269","endLine":59,"endColumn":17,"suggestions":"305"},{"ruleId":"267","severity":1,"message":"306","line":81,"column":11,"nodeType":"269","endLine":81,"endColumn":13,"suggestions":"307"},{"ruleId":"273","severity":1,"message":"274","line":107,"column":17,"nodeType":"275","messageId":"276","endLine":111,"endColumn":18},{"ruleId":"308","severity":1,"message":"309","line":120,"column":9,"nodeType":"310","messageId":"311","endLine":121,"endColumn":32},{"ruleId":"235","severity":1,"message":"312","line":128,"column":12,"nodeType":"237","messageId":"238","endLine":128,"endColumn":24},{"ruleId":"235","severity":1,"message":"313","line":128,"column":26,"nodeType":"237","messageId":"238","endLine":128,"endColumn":41},{"ruleId":"278","severity":1,"message":"279","line":199,"column":46,"nodeType":"280","messageId":"281","endLine":199,"endColumn":48},{"ruleId":"278","severity":1,"message":"279","line":199,"column":64,"nodeType":"280","messageId":"281","endLine":199,"endColumn":66},{"ruleId":"278","severity":1,"message":"279","line":205,"column":54,"nodeType":"280","messageId":"281","endLine":205,"endColumn":56},{"ruleId":"278","severity":1,"message":"279","line":212,"column":50,"nodeType":"280","messageId":"281","endLine":212,"endColumn":52},{"ruleId":"300","severity":1,"message":"314","line":15,"column":25,"nodeType":"302","endLine":15,"endColumn":82},{"ruleId":"235","severity":1,"message":"282","line":28,"column":26,"nodeType":"237","messageId":"238","endLine":28,"endColumn":41},{"ruleId":"315","severity":1,"message":"316","line":64,"column":50,"nodeType":"317","messageId":"318","endLine":64,"endColumn":52},{"ruleId":"267","severity":1,"message":"319","line":90,"column":9,"nodeType":"269","endLine":90,"endColumn":11,"suggestions":"320"},{"ruleId":"235","severity":1,"message":"321","line":191,"column":7,"nodeType":"237","messageId":"238","endLine":191,"endColumn":27},{"ruleId":"231","replacedBy":"322"},{"ruleId":"233","replacedBy":"323"},{"ruleId":"235","severity":1,"message":"263","line":8,"column":12,"nodeType":"237","messageId":"238","endLine":8,"endColumn":25},{"ruleId":"235","severity":1,"message":"264","line":9,"column":12,"nodeType":"237","messageId":"238","endLine":9,"endColumn":23},{"ruleId":"267","severity":1,"message":"324","line":60,"column":12,"nodeType":"269","endLine":60,"endColumn":14,"suggestions":"325"},"no-native-reassign",["326"],"no-negated-in-lhs",["327"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Main' is defined but never used.","'registNums' is assigned a value but never used.",["326"],["327"],"'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Axios' is defined but never used.","'DatePicker' is defined but never used.","'RoomTypes' is assigned a value but never used.","'Methods' is assigned a value but never used.","'Paths' is assigned a value but never used.","'setUserName' is assigned a value but never used.","'setBnum' is assigned a value but never used.","'setOwnerName' is assigned a value but never used.","'setUserSort' is assigned a value but never used.","'setEndStatus' is assigned a value but never used.","'setStatus' is assigned a value but never used.",["326"],["327"],"'useRef' is defined but never used.","'setEndAsk_date' is assigned a value but never used.","'contractStart' is assigned a value but never used.","'contractEnd' is assigned a value but never used.","'roomCheck' is assigned a value but never used.","'setRoomCheck' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'modalMemberId' and 'props.newDataForm'. Either include them or remove the dependency array.","ArrayExpression",["328"],"React Hook useEffect has missing dependencies: 'props.cDataForm' and 'rNum'. Either include them or remove the dependency array.",["329"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'tempAddMember' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setPostsPerPage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'memberList'. Either include it or remove the dependency array.",["330"],"'S010100010' is defined but never used.","React Hook useEffect has missing dependencies: 'endDate' and 'startDate'. Either include them or remove the dependency array.",["331"],"'dataForm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'searchAsk'. Either include it or remove the dependency array.",["332"],"'open' is assigned a value but never used.","'nameForDetailCModal' is assigned a value but never used.","'detailCheckoutDate' is assigned a value but never used.","'setDetailCheckoutDate' is assigned a value but never used.","'startAsk_date' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'detailMemberList'. Either include it or remove the dependency array.",["333"],"'onDetailClickClose' is assigned a value but never used.","'onContractHandler' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'addDays' is defined but never used.","React Hook useEffect has missing dependencies: 'props.dataForm' and 'rNum'. Either include them or remove the dependency array.",["334"],"React Hook useEffect has missing dependencies: 'getAccessPathLov', 'getAskMethodLov', and 'getContractTpLov'. Either include them or remove the dependency array.",["335"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'modalAskDate' is assigned a value but never used.","'setModalAskDate' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'paymentStList'. Either include it or remove the dependency array.",["336"],"'changePayDateHandler' is assigned a value but never used.",["326"],["327"],"React Hook useEffect has a missing dependency: 'props.dataNum'. Either include it or remove the dependency array.",["337"],"no-global-assign","no-unsafe-negation",{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},"Update the dependencies array to be: [modalMemberId, props.newDataForm]",{"range":"358","text":"359"},"Update the dependencies array to be: [props.cDataForm, rNum]",{"range":"360","text":"361"},"Update the dependencies array to be: [memberList]",{"range":"362","text":"363"},"Update the dependencies array to be: [endDate, startDate]",{"range":"364","text":"365"},"Update the dependencies array to be: [searchAsk]",{"range":"366","text":"367"},"Update the dependencies array to be: [detailMemberList]",{"range":"368","text":"369"},"Update the dependencies array to be: [props.dataForm, rNum]",{"range":"370","text":"371"},"Update the dependencies array to be: [getAccessPathLov, getAskMethodLov, getContractTpLov]",{"range":"372","text":"373"},"Update the dependencies array to be: [paymentStList]",{"range":"374","text":"375"},"Update the dependencies array to be: [props.dataNum]",{"range":"376","text":"377"},[6125,6127],"[modalMemberId, props.newDataForm]",[11640,11642],"[props.cDataForm, rNum]",[3791,3793],"[memberList]",[2144,2146],"[endDate, startDate]",[1342,1344],"[searchAsk]",[6171,6173],"[detailMemberList]",[2323,2325],"[props.dataForm, rNum]",[3009,3011],"[getAccessPathLov, getAskMethodLov, getContractTpLov]",[3280,3282],"[paymentStList]",[2790,2792],"[props.dataNum]"]