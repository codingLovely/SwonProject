[{"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js":"1","C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js":"2","C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js":"3","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js":"4","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js":"5","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js":"6","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js":"7","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js":"8","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js":"9","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js":"10","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js":"11","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js":"12","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\index.js":"13","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\App.js":"14","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\reportWebVitals.js":"15","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Routes\\Routes.js":"16","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100010.js":"17","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100090.js":"18","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100040.js":"19","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100060.js":"20","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100130.js":"21","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100050.js":"22","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Navbar.js":"23","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100150.js":"24","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100140.js":"25","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Pagination.js":"26","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100070.js":"27","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\LeaseAgreement.js":"28","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Dashboard.js":"29","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Orders.js":"30","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\listItems.js":"31","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\css\\Title.js":"32","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Title.js":"33"},{"size":555,"mtime":1609727657789,"results":"34","hashOfConfig":"35"},{"size":240,"mtime":1609727648266,"results":"36","hashOfConfig":"35"},{"size":362,"mtime":499162500000,"results":"37","hashOfConfig":"35"},{"size":11524,"mtime":1609829204925,"results":"38","hashOfConfig":"35"},{"size":1055,"mtime":1609833591029,"results":"39","hashOfConfig":"35"},{"size":8135,"mtime":1609830177180,"results":"40","hashOfConfig":"35"},{"size":2082,"mtime":1609828498424,"results":"41","hashOfConfig":"35"},{"size":994,"mtime":1609727352401,"results":"42","hashOfConfig":"35"},{"size":1306,"mtime":1609834092417,"results":"43","hashOfConfig":"35"},{"size":4553,"mtime":1609836098390,"results":"44","hashOfConfig":"35"},{"size":4356,"mtime":1609833363720,"results":"45","hashOfConfig":"35"},{"size":5135,"mtime":1609835439756,"results":"46","hashOfConfig":"35"},{"size":502,"mtime":1613487653161,"results":"47","hashOfConfig":"48"},{"size":194,"mtime":1611382711135,"results":"49","hashOfConfig":"48"},{"size":362,"mtime":499162500000,"results":"50","hashOfConfig":"48"},{"size":1793,"mtime":1613520821635,"results":"51","hashOfConfig":"48"},{"size":68062,"mtime":1613628602238,"results":"52","hashOfConfig":"48"},{"size":14348,"mtime":1613524667995,"results":"53","hashOfConfig":"48"},{"size":22655,"mtime":1613634889060,"results":"54","hashOfConfig":"48"},{"size":20210,"mtime":1613630324359,"results":"55","hashOfConfig":"48"},{"size":25599,"mtime":1613633753677,"results":"56","hashOfConfig":"48"},{"size":22785,"mtime":1613648642249,"results":"57","hashOfConfig":"48"},{"size":1229,"mtime":1613487653161,"results":"58","hashOfConfig":"48"},{"size":7190,"mtime":1613635853712,"results":"59","hashOfConfig":"48"},{"size":12478,"mtime":1613545847291,"results":"60","hashOfConfig":"48"},{"size":775,"mtime":1613554840662,"results":"61","hashOfConfig":"48"},{"size":14205,"mtime":1613552271977,"results":"62","hashOfConfig":"48"},{"size":25772,"mtime":1613628922217,"results":"63","hashOfConfig":"48"},{"size":5762,"mtime":1613460570472,"results":"64","hashOfConfig":"48"},{"size":3389,"mtime":1613623343587,"results":"65","hashOfConfig":"48"},{"size":2259,"mtime":1613461598936,"results":"66","hashOfConfig":"48"},{"size":356,"mtime":1613452834720,"results":"67","hashOfConfig":"68"},{"size":356,"mtime":1613452929179,"results":"69","hashOfConfig":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"2g9vyx",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"1i31dyy",{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"105"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"105"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"105"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"105"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"105"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"105"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"105"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"105"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"105"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"105"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"105"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pgckxh",{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js",[],["158","159"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js",["160","161"],"import React,{ Component, Fragment,useEffect,useState } from 'react';\r\nimport './Counseling.css';\r\nimport Main from'../Main/Main.js';\r\nimport axios from \"axios\";\r\nimport CounselStatus from './CounselStatus';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n//모달창 라이브러리 끝-->\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\nvar rNum = '';\r\nvar Rnum = 0;\r\n\r\n\r\nvar Methods = []\r\n\r\nfunction Counseling (props) {\r\n\r\n    const[ConsultRegists, setConsultRegists] = useState([])\r\n\r\n    useEffect(()=>{\r\n        \r\n        axios.post('/api/register/registers')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    console.log(response.data.rows)\r\n                    setConsultRegists(response.data.rows)\r\n                }else{ \r\n                    alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n\r\n    },[])\r\n    \r\n    const[method, setMethod]=useState([])\r\n    \r\n    useEffect(()=>{\r\n        axios.post('/api/register/insertMethod')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log('insertMethod',response.data);\r\n                let arr = [{value: '전체', text: '전체' }]\r\n\r\n                response.data.rows.map((data) => \r\n                    arr.push({\r\n                    value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                }));\r\n                \r\n                Methods=arr;\r\n\r\n                console.log('insertMethodArr',arr);\r\n            }else{\r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n            }\r\n        })\r\n\r\n        \r\n        \r\n    },[])\r\n\r\n    //<!--모달창 속성 및 이벤트 \r\n    const [open, setOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    const [CRegists,setCRegists] = useState({});\r\n\r\n\r\n\r\n    //상담등록 모달\r\n    const onhandleClickOpen = () => {\r\n        setStoreOpen(true); \r\n     \r\n     };  \r\n\r\n                //상담등록 저장버튼이벤트\r\n                // const onhandleStoreClose = () => {\r\n                //     setOpen(false);\r\n                // }\r\n            \r\n     const onhandleClose = (event) => {\r\n          \r\n        axios.post('/api/register/registers')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log(response.data.rows)\r\n                setConsultRegists(response.data.rows)\r\n            }else{ \r\n                alert(\"상담등록 페이지 가져오기를 실패하였습니다.\")\r\n            }\r\n\r\n        })\r\n\r\n        setStoreOpen(false);\r\n       };\r\n    //상담등록 모달 끝\r\n\r\n    //상세보기 모달\r\n    const handleClickOpen = (e) => {\r\n       setOpen(true); \r\n       rNum = e.target.innerHTML\r\n       Rnum= parseInt(rNum);\r\n       //console.log(Rnum)\r\n\r\n       axios.get(`/api/register/register_by_id?id=${Rnum}&type=single`) \r\n       .then(response => {\r\n           if(response.data.success){\r\n               console.log(response.data)\r\n               setCRegists(response.data.rows[0])\r\n               //console.log(response.data.consultRegistInfo.num)\r\n           }else{\r\n               alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n           }\r\n\r\n       })\r\n    };  \r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n      //상세보기 모달 끝 \r\n    //모달창 속성 및 이벤트 끝-->\r\n\r\n\r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n\r\n        // if(method.valueOf('전체') ||!startDate||!endDate||!searchName){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n         const body = {\r\n            startDate,\r\n            searchName,\r\n            method,\r\n            endDate\r\n        }\r\n        \r\n        //console.log(body);\r\n        \r\n        axios.post(\"/api/register/search\",body)\r\n        .then(response => {\r\n            if(response?.data?.success){\r\n                console.log('search',response.data.rows);\r\n                setConsultRegists(response.data.rows);\r\n            }else{\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    \r\n\r\n\r\n    const[searchName, setSearchName] = useState(\"\")\r\n\r\n    const MethodChangeHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const nameSearchHandler=(event)=>{\r\n        setSearchName(event.currentTarget.value);\r\n    }\r\n\r\n    //console.log('ConsultRegists',ConsultRegists);\r\n\r\n    const resultTable = ConsultRegists.map((ConsultRegists,index)=>{\r\n\r\n        return<tr>\r\n                <td name =\"cname\" variant=\"outlined\" color=\"primary\" onClick={handleClickOpen} id={ConsultRegists.num}><u>{ConsultRegists.num}\r\n                </u></td>\r\n                {/* 모달창 시작 */}\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{CRegists.cname+\"님의 상담내용 입니다.\"}</DialogTitle>\r\n                    <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {CRegists.content}\r\n                    </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                        확인\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* 모달창 끝*/}\r\n\r\n                <td>{ConsultRegists.roomtype}</td>\r\n                <td>{ConsultRegists.counseldate}</td>\r\n                <td>{ConsultRegists.method}</td>\r\n                <td>{ConsultRegists.cname}</td>\r\n                <td>{ConsultRegists.phone}</td>\r\n                <td>{ConsultRegists.path}</td>\r\n                \r\n            </tr>\r\n    })\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                \r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>상담현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                        문의일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        문의구분 \r\n                        <select onChange ={MethodChangeHandler} value ={method}>   \r\n                        \r\n                            {Methods.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                    \r\n                        </select>\r\n                        &nbsp; \r\n\r\n                        문의자명\r\n                         <input type=\"text\" value = {searchName} id=\"searchlName\" name=\"searchName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onhandleClickOpen} >상담등록</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    {/* 모달창 시작 --> 504에러 */}\r\n                        <Dialog\r\n                            open={storeOpen}\r\n                            onClose={onhandleClose}\r\n                            aria-labelledby=\"alert-dialog-title\"\r\n                            aria-describedby=\"alert-dialog-description\"\r\n                        >\r\n                            <DialogTitle id=\"alert-dialog-title\"><h1>상담등록</h1></DialogTitle>\r\n                            <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                                 <CounselStatus/>\r\n                            </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                            {/* <Button onClick={onhandleStoreClose} color=\"primary\" autoFocus>\r\n                                저장\r\n                            </Button> */}\r\n                            <Button onClick={onhandleClose} color=\"primary\">\r\n                                닫기\r\n                            </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                     {/* // 모달창 끝        */}\r\n\r\n                    \r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>No</th>\r\n                            <th>문의 구분</th>\r\n                            <th>문의일자</th>\r\n                            <th>문의방법</th>\r\n                            <th>문의자명</th>\r\n                            <th>연락처</th>\r\n                            <th>접근경로</th>\r\n                        </tr>\r\n\r\n                        \r\n                            {resultTable}\r\n                       \r\n\r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Counseling;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js",["162","163"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\nimport { addDays } from 'date-fns';\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nimport \"./CounselStatus.css\";\r\nregisterLocale(\"ko\", ko);\r\n\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction CounselStatus(props) {\r\n\r\n    //Lov(List of Value)를 데이터 베이스에서 가져오기 \r\n        //select\r\n        const[RoomType,setRoomType] = useState(1)\r\n        const[Method, setMethod] = useState(1)\r\n        const[Path, setPath] = useState(1)\r\n\r\n        //문의구분\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/roomType')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('roomType',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    RoomTypes = arr;\r\n\r\n                    //console.log('roomTypeArr',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n            \r\n            \r\n        },[])\r\n\r\n        //문의방법\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/methodA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('method',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Methods = arr;\r\n\r\n                    //console.log('method',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n\r\n        //접근경로\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/pathA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('Paths',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Paths = arr;\r\n\r\n                    //console.log('Paths',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n    //Lov끝    \r\n\r\n\r\n    \r\n    //datepicker속성 및 이벤트 시작\r\n    const [StartDate, setStartDate] = useState(new Date());\r\n    //datepicker속성 및 이벤트 끝\r\n    console.log(StartDate.getMonth()+1);\r\n    console.log(StartDate);\r\n    \r\n    const[CounselName, setCounselName] = useState(\"\")\r\n    const[UserPhone, setUserPhone] = useState(\"\")\r\n    const[Content, setContent] = useState(\"\")\r\n\r\n\r\n    const onNameHandler=(event)=>{\r\n        setCounselName(event.currentTarget.value);\r\n    }\r\n\r\n    const MethodHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const PathHandler=(event)=>{\r\n        setPath(event.currentTarget.value);\r\n    }\r\n\r\n    const onPhoneHandler=(event)=>{\r\n        setUserPhone(event.currentTarget.value);\r\n    }\r\n\r\n    const onContentHandler=(event)=>{\r\n        setContent(event.currentTarget.value);\r\n    }\r\n\r\n    const RoomTypeChangeHandler=(event)=>{\r\n        setRoomType(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n        //console.log(RoomType)\r\n    \r\n        // if(RoomType.valueOf('전체') ||!CounselName||Method.valueOf('전체')||Path.valueOf('전체')||!UserPhone||!Content){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n        \r\n        \r\n        //서버에 채운 값들을 request로 보낸다.\r\n        const body = {\r\n            roomtype: RoomType,\r\n            counseldate: StartDate,\r\n            cname: CounselName,\r\n            method: Method,\r\n            path: Path,\r\n            phone: UserPhone,\r\n            content: Content\r\n            \r\n        }\r\n        \r\n        \r\n        Axios.post(\"/api/register\",body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 등록되었습니다.')\r\n               // props.history.push('/counseling')\r\n            }else{\r\n                alert('등록에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          {/* <Main/>\r\n          <h1>상담등록</h1> */}\r\n          <table>\r\n            <tr>\r\n                <th>문의구분</th>\r\n                    <td>\r\n                        <select onChange ={RoomTypeChangeHandler} value ={RoomType}>   \r\n                        \r\n                            {RoomTypes.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                        \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의일자</th>\r\n                    <td>   \r\n                    <DatePicker\r\n                        locale=\"ko\"\r\n                        selected={StartDate}\r\n                        onChange={date => setStartDate(date)}\r\n                        minDate={new Date()}\r\n                        maxDate={addDays(new Date(), 0)}  \r\n                        dateFormat=\"yyyy.MM.dd (eee)\"\r\n                    />\r\n\r\n                    </td>\r\n                <th>문의자명</th>\r\n                    <td>\r\n                    <input type=\"text\" value = {CounselName}id=\"counselName\" name=\"counselName\" size = \"7\"\r\n                    onChange={onNameHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n            <tr>\r\n                <th>문의방법</th>\r\n                    <td>\r\n                        <select value={Method} onChange={MethodHandler} >\r\n                        {Methods.map(item=>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                        ))}\r\n                        </select>\r\n                    </td>\r\n                <th>접근경로</th>\r\n                    <td>\r\n                        <select value={Path} onChange={PathHandler} >\r\n                            {Paths.map(item =>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                            ))}\r\n                            \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의자연락처</th>\r\n                    <td>\r\n                    <input type = \"text\" value = {UserPhone}id = \"userPhone\" name = \"userPhone\" size = \"7\"\r\n                    onChange={onPhoneHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n\r\n            <tr>\r\n                <th>상담내용</th>\r\n                    <td colSpan=\"5\">\r\n                        <textarea rows =\"5\" cols = \"100\" value = {Content}id=\"content\" name = \"content\"\r\n                        onChange={onContentHandler}></textarea>\r\n                    </td>\r\n            </tr>\r\n          </table>\r\n          <div id = \"popbtn\"> \r\n            <button type = \"submit\">저장</button>\r\n            {/* <button>닫기</button> */}\r\n          </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n\r\nexport default CounselStatus;",["164","165"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js",["166"],"// import { Component, Fragment } from 'react';\r\n// import {useDispatch} from 'react-redux';\r\n//import {loginUser} from '../_actions/user_action';\r\nimport axios from 'axios';\r\nimport React,{Fragment} from 'react';\r\nimport {useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js'\r\n\r\n\r\nfunction LoginPage( props){\r\n  // const dispatch = useDispatch();\r\n\r\n  const [E_mal,setE_mal] = useState(\"\")\r\n  const [Password, setPassword] = useState(\"\")\r\n\r\n  const onEmailHandler = (event) => {\r\n    setE_mal(event.currentTarget.value)\r\n  }\r\n\r\n  const onPasswordHandler = (event) => {\r\n    setPassword(event.currentTarget.value)\r\n  }\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    let body = {\r\n        Email: E_mal,\r\n        PASSWORD: Password\r\n    }\r\n\r\n   axios.post('/api/users/login',body)\r\n        .then(response => {\r\n            if (response.data.loginResult) {\r\n                alert('로그인 되었습니다.')\r\n                //props.history.push('/counseling')\r\n                console.log(response.data.loginResult)\r\n            } else {\r\n                alert('아이디와 비밀번호를 확인하세요')\r\n            }\r\n        })\r\n      }\r\n\r\n    return (\r\n      <Fragment>\r\n          <Main/>\r\n          <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%',height:'50vh'}}>\r\n            <form style = {{display:'flex', flexDirection:'column'}}\r\n             onSubmit={onSubmitHandler}\r\n            >\r\n              \r\n                <label style={{fontFamily:'Jua',width:'180px'}}>Email</label>\r\n                <input style={{width:\"300px\"}} type = \"email\" value={E_mal} onChange={onEmailHandler} />\r\n                <label style={{fontFamily:'Jua'}}>Password</label>\r\n                <input style={{width:\"300px\"}} type = \"password\" value={Password} onChange={onPasswordHandler}/>\r\n                <br/>\r\n                <button type=\"submit\">Login</button>\r\n            \r\n            \r\n            </form>\r\n          </div>\r\n         \r\n          </Fragment>\r\n    )\r\n}\r\n\r\nexport default LoginPage","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js",["167"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Member from './Components/Member/Member';\r\nimport Counseling from './Components/Counseling/Counseling';\r\nimport CounselStatus from './Components/Counseling/CounselStatus';\r\nimport LoginPage from './Components/LoginPage/LoginPage';\r\nimport PaymentStatus from './Components/PaymentStatus/PaymentStatus';\r\nimport Swon from './Components/Staff/Swon';\r\nimport Main from './Components/Main/Main';\r\n\r\nexport default () => (\r\n  <Router>\r\n          {/* 메인 */}\r\n          <Route exact path = \"/\" component = {Main}></Route>\r\n\r\n\r\n          {/* 회원현황 */}\r\n          <Route exact path = \"/member\" component = {Member}></Route> \r\n          {/* 납부현황 */}\r\n          <Route path = \"/paymentStatus\" component = {PaymentStatus}></Route>\r\n          {/* 상담현황 */}\r\n          <Route exact path = \"/counseling\" component = {Counseling}></Route>\r\n          {/* 직원관리 */}\r\n          <Route exact path = \"/swon\" component = {Swon}></Route>\r\n          {/* 로그인/로그아웃*/}\r\n          <Route exact path = \"/login\" component = {LoginPage}></Route>\r\n\r\n\r\n\r\n          {/* 상담등록 */}\r\n          <Route exact path = \"/counselStatus\" component = {CounselStatus}></Route>\r\n  </Router>\r\n)\r\n\r\n","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js",["168","169","170","171","172","173","174","175","176","177","178","179","180"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\n\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction Member(props) {\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n      \r\n    }\r\n    const[userName,setUserName] = useState(\"\")\r\n    const[bnum,setBnum] = useState(\"\")\r\n    const[ownerName,setOwnerName] = useState(\"\")\r\n    const[userSort,setUserSort] = useState([])\r\n    const[endStatus,setEndStatus] = useState(\"\")\r\n    const[status,setStatus] = useState(\"\")\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          <Main/>\r\n          <h1>회원현황</h1>\r\n          <table >\r\n            <tr>\r\n                <th>회원명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {userName} id = \"userName\" name = \"userName\" size = \"7\"\r\n                        />\r\n                    </td>  \r\n                    {/* onChange={onPhoneHandler} */}\r\n                <th>사업자번호</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {bnum} id = \"bnum\" name = \"bnum\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>대표자명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {ownerName} id = \"ownerName\" name = \"ownerName\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>종류</th>\r\n                    <td>\r\n                        <select value ={endStatus}>  {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>상태</th>\r\n                    <td>\r\n                        <select value ={status}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                    <div > \r\n                        <button type = \"submit\">조회</button>\r\n                \r\n                    </div>\r\n                    </td>\r\n\r\n                \r\n            </tr>\r\n               \r\n            \r\n          </table>\r\n          <table>\r\n            <tr>\r\n                <td>\r\n                    <button>신규회원</button>\r\n                    <button>SNS</button>\r\n                    <button>메일전송</button>\r\n                    <button>엑셀다운로드</button>\r\n                </td>\r\n            </tr>\r\n          </table>\r\n          \r\n          <table>\r\n                <tr>\r\n                    <th>No</th>\r\n                    <th>문의 구분</th>\r\n                    <th>문의일자</th>\r\n                    <th>문의방법</th>\r\n                    <th>문의자명</th>\r\n                    <th>연락처</th>\r\n                    <th>접근경로</th>\r\n                </tr>\r\n          </table>\r\n\r\n      </form>\r\n\r\n      \r\n    );\r\n  }\r\n\r\n\r\nexport default Member;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js",["181"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction PaymentStatus (props) {\r\n\r\n    \r\n    const[userName, setUserName] = useState(\"\")\r\n    const[paymentStatus, setPaymentStatus]=useState([])\r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const nameSearchHandler=(event)=>{\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler=(event)=>{\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n    \r\n    const onPaymenthandler=()=>{\r\n        \r\n    }\r\n\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>고객납부현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                    납부예정일   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                        회원명\r\n                         <input type=\"text\" value = {userName} id=\"userName\" name=\"userName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp; \r\n\r\n                        납부여부\r\n                        <select onChange ={paymentStatusHandler} value ={paymentStatus}>   \r\n{/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                        </select>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onPaymenthandler}> 납부</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>No</th>\r\n                            <th>회원명</th>\r\n                            <th>납부예정일</th>\r\n                            <th>납부여부</th>\r\n                            <th>납부일자</th>\r\n                            <th>계약기간</th>\r\n                            <th>대표자</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default PaymentStatus;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js",["182"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction Swon (props) {\r\n\r\n    \r\n    const[staffName, setStaffName] = useState(\"\")\r\n    const[staffClass, setStaffClass] = useState([])\r\n    const[closeStatus, setCloseStatus] = useState([])\r\n    \r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const staffNameHandler=(event)=>{\r\n        setStaffName(event.currentTarget.value);\r\n    }\r\n\r\n    const staffClassHandler=(event)=>{\r\n        setStaffClass(event.currentTarget.value);\r\n    }\r\n    \r\n    const closeStatusHandler=(event)=>{\r\n        setCloseStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onRegistHandler = (event)=>{\r\n\r\n    }\r\n    const onModifyHandler = (event)=>{\r\n        \r\n    }\r\n    const onApprovalHandler = (event)=>{\r\n        \r\n    }\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>직원현황</h1>\r\n                    <div id = \"search\">\r\n\r\n                     성명\r\n                    <input type=\"text\" value = {staffName} id=\"staffName\" name=\"staffName\" size = \"5\"\r\n                    onChange={staffNameHandler}/>\r\n                    &nbsp; \r\n\r\n\r\n                    입사일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        직원구분\r\n                        <select onChange ={staffClassHandler} value ={staffClass}>  \r\n                    {/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                     \r\n                        </select>\r\n                        종료\r\n                        <select onChange ={closeStatusHandler} value ={closeStatus}>   \r\n                        </select>\r\n                        \r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onRegistHandler}> 등록</button> </td>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onModifyHandler}> 수정</button> </td>    \r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onApprovalHandler}> 승인</button> </td>                        \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>직번</th>\r\n                            <th>성명</th>\r\n                            <th>주민번호</th>\r\n                            <th>부서</th>\r\n                            <th>연락처</th>\r\n                            <th>E-mail</th>\r\n                            <th>직원구분</th>\r\n                            <th>승인여부</th>\r\n                            <th>직급</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Swon;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\index.js",[],["183","184"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\App.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Routes\\Routes.js",["185"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport S010100010 from '../S010100010';\r\nimport S010100040 from '../S010100040';\r\nimport S010100050 from '../S010100050';\r\nimport S010100060 from '../S010100060';\r\nimport S010100090 from '../S010100090';\r\nimport S010100130 from '../S010100130';\r\nimport S010100140 from '../S010100140';\r\nimport S010100150 from '../S010100150';\r\nimport Dashboard from '../Dashboard';\r\n\r\nimport LeaseAgreement from '../utils/LeaseAgreement';\r\n//export default\r\n function Routes (){\r\n   return(\r\n  <Router>\r\n          {/* 메인 */}\r\n          <Route exact path = \"/\" component = {S010100130}></Route>\r\n\r\n\r\n          {/* 회원현황 */}\r\n          <Route exact path = \"/member\" component = {S010100040}></Route> \r\n          {/* 납부현황 */}\r\n          <Route exact path = \"/paymentStatus\" component = {S010100060}></Route>\r\n          {/* 상담현황 */}\r\n          <Route exact path = \"/consultationStatus\" component = {S010100130}></Route>\r\n          {/* 직원현황 */}\r\n          <Route exact path = \"/staff\" component = {S010100090}></Route>\r\n          {/* 로그인/로그아웃*/}\r\n          <Route exact path = \"/login\" component = {S010100150}></Route>\r\n\r\n          {/* 상담등록 */}\r\n          <Route exact path = \"/registration\" component = {S010100140}></Route>\r\n          {/* 이용계약서  */}\r\n          <Route exact path = \"/useContract\" component = {S010100010}></Route>\r\n          {/* 회원상세현황 */}\r\n          <Route exact path = \"/memberDetails\" component = {S010100050}></Route>\r\n          {/* 임대차계약서 */}\r\n          <Route exact path = \"/leasAgreement\" component = {LeaseAgreement}></Route>\r\n          \r\n          \r\n\r\n  </Router>\r\n  );\r\n }\r\nexport default Routes;\r\n","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100010.js",["186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport DaumPostcode from 'react-daum-postcode';\r\nimport axios from 'axios';\r\nimport { post } from 'axios';\r\nimport './css/S010100010.css';\r\nimport LeaseAgreement from './utils/LeaseAgreement';\r\nimport Table from 'react-bootstrap/Table'\r\n\r\n// 모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\n// 켈린더 라이브러리\r\nimport DatePicker, { registerLocale } from 'react-datepicker';\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale('ko', ko);\r\n\r\n// select박스\r\nlet valueArr = [[], [], [], [], []];\r\nlet queryArr = [['MEMBER_TP', ''], ['CONTRACT_TP', 'ASK'], ['PAY_METHOD', '']];\r\nlet payDates = [];\r\n\r\n// 출력용\r\nlet forPrint;\r\n// 확정-가계약\r\nlet forMemberStatus;\r\n// 계약 수정하기 이용기간 중복확인\r\nlet existingStartDate;\r\nlet existingEndDate;\r\n\r\nfunction S010100010(props) {\r\n\r\n    // 회원정보\r\n    const [memberNm, setMemberNm] = useState('');\r\n    const [firstRegNo, setFisrtRegNo] = useState('');\r\n    const [secondRegNo, setSecondRegNo] = useState('');\r\n    const [thirdRegNo, setThirdRegNo] = useState('');\r\n    const [memberTp, setMemberTp] = useState('');\r\n    const [empIdName, setEmpIdName] = useState('');\r\n    const [firstEmpHp, setFirstEmpHp] = useState('');\r\n    const [secondEmpHp, setSecondEmpHp] = useState('');\r\n    const [thirdEmpHp, setThirdEmpHp] = useState('');\r\n    const [empEmailId, setEmpEmailId] = useState('');\r\n    const [domainAddress, setDomainAddress] = useState('');\r\n    const [zipcode, setZipcode] = useState('');\r\n    const [empAddress, setEmpAddress] = useState('');\r\n    const [empDetailAddress, setEmpDetailAddress] = useState('');\r\n    const [ceoIdCardImg, setCeoIdCardImg] = useState('');\r\n    const [ceoRegistCardImg, setCeoRegistCardImg] = useState('');\r\n\r\n    // 계약정보\r\n    const [contractTp, setContractTp] = useState('');\r\n    const [contractTpVal, setContractTpVal] = useState([{ key: '', value: '선택' }]);\r\n    const [roomLockerTp, setRoomLockerTp] = useState(0);\r\n    const [contractMoney, setContractMoney] = useState('');\r\n    const [contractTerm, setContractTerm] = useState('0');\r\n    const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endAsk_date, setEndAsk_date] = useState(new Date());\r\n    const [payDate, setPayDate] = useState('');\r\n    const [comment, setComment] = useState('');\r\n    const [payMethod, setPayMethod] = useState('');\r\n    const [contractPath, setContractPath] = useState('');\r\n    const [contractStart, setContractStart] = useState('');\r\n    const [contractEnd, setContractEnd] = useState('');\r\n    const [userStatus, setUserStatus] = useState('');\r\n\r\n    // 중복확인\r\n    const [regNoCheckBtn, setRegNoCheckBtn] = useState('');\r\n    const [empHpCheckBtn, setEmpHpCheckBtn] = useState('');\r\n    const [dateCheckBtn, setDateCheckBtn] = useState('');\r\n \r\n\r\n    // dialog open\r\n    const [printSheetOpen, setPrintSheetOpen] = useState(false);\r\n    const [leaseAgreementOpen, setLeaseAgreementOpen] = useState(false);\r\n\r\n    // cd_v_meaning for printing\r\n    const [memberTpPrint, setMemberTpPrint] = useState('');\r\n    const [contractTpPrint, setContractTpPrint] = useState('');\r\n    const [payMethodPrint, setPayMethodPrint] = useState('');\r\n    const [accessPrint, setAccessPrint] = useState('');\r\n\r\n    // 첨부파일업로드\r\n    const [idCardFile, setIdCardFile] = useState(null);\r\n    const [idCardFileName, setIdCardFileName] = useState('');\r\n\r\n    const [registCardFile, setRegistCardFile] = useState(null);\r\n    const [registCardFileName, setRegistCardFileName] = useState('');\r\n\r\n    // 확정/가계약구분\r\n    const [memberStFlag,setMemberStFlag] = useState('');\r\n\r\n    const rNum = props.dataNum;\r\n    const modalMemberId = props.dataMem;\r\n\r\n    useEffect(() => {\r\n        if (props.newDataForm === 'N') {\r\n            axios.get(`/api/memStList/insert/tb_s10_contract010_by_id?id=${modalMemberId}&type=single`)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n\r\n                        const modalCMemberNm = response.data.rows[0].MEMBER_NM;\r\n                        const modalCRegNo = response.data.rows[0].REG_NO;\r\n                        const modalCMemberTp = response.data.rows[0].MEMBER_TP;\r\n                        const modalCName = response.data.rows[0].NAME;\r\n                        const modalCEmpHp = response.data.rows[0].EMP_HP;\r\n                        const modalCEmpEmail = response.data.rows[0].EMP_EMAIL;\r\n                        const modalCZipCode = response.data.rows[0].ZIP_CODE;\r\n                        const modalCAddress = response.data.rows[0].ADDRESS;\r\n                        const modalCDetailAddress = response.data.rows[0].DETAIL_ADDRESS;\r\n\r\n                        const modalCRegNos = modalCRegNo.split(\"-\");\r\n                        const modalCEmpHps = modalCEmpHp.split(\"-\");\r\n                        const modalCEmpEmails = modalCEmpEmail.split(\"@\");\r\n\r\n                        setMemberNm(modalCMemberNm);\r\n                        setFisrtRegNo(modalCRegNos[0]);\r\n                        setSecondRegNo(modalCRegNos[1]);\r\n                        setThirdRegNo(modalCRegNos[2]);\r\n                        setMemberTp(modalCMemberTp);\r\n                        setEmpIdName(modalCName);\r\n                        setFirstEmpHp(modalCEmpHps[0]);\r\n                        setSecondEmpHp(modalCEmpHps[1]);\r\n                        setThirdEmpHp(modalCEmpHps[2]);\r\n                        setEmpEmailId(modalCEmpEmails[0]);\r\n                        setDomainAddress(modalCEmpEmails[1]);\r\n                        setZipcode(modalCZipCode);\r\n                        setEmpAddress(modalCAddress);\r\n                        setEmpDetailAddress(modalCDetailAddress);\r\n\r\n                        //setEndFlag(modalEndFLag);\r\n                    } else {\r\n                        alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                    }\r\n                })\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.cDataForm === 'I') {\r\n            //계약상세정보 함수(contract_id이용)\r\n            axios.get(`/api/memStList/tb_s10_contract010_by_id?id=${rNum}&type=single`)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n\r\n                        const modalCMemberNm = response.data.rows[0].MEMBER_NM;\r\n                        const modalCRegNo = response.data.rows[0].REG_NO;\r\n                        const modalCMemberTp = response.data.rows[0].MEMBER_TP;\r\n                        const modalCName = response.data.rows[0].NAME;\r\n                        const modalCEmpHp = response.data.rows[0].EMP_HP;\r\n                        const modalCEmpEmail = response.data.rows[0].EMP_EMAIL;\r\n                        const modalCZipCode = response.data.rows[0].ZIP_CODE;\r\n                        const modalCAddress = response.data.rows[0].ADDRESS;\r\n                        const modalCDetailAddress = response.data.rows[0].DETAIL_ADDRESS;\r\n                        const modalCCeoIdCardImg = response.data.rows[0].CEO_IMAGE_ID;\r\n                        const modalCRegistIdCardImg = response.data.rows[0].CEO_IMAGE_REGISTER;\r\n\r\n                        const modalCContractDate = response.data.rows[0].CONTRACT_DATE;\r\n                        const modalCContractTp = response.data.rows[0].CONTRACT_TP;\r\n                        const modalCContractTerm = response.data.rows[0].CONTRACT_TERM;\r\n                        const modalCPayDate = response.data.rows[0].PAY_DATE;\r\n                        const modalCContractMoney = response.data.rows[0].PAYED_PLAN_MONEY;\r\n                        const modalCPayMethod = response.data.rows[0].PAY_METHOD;\r\n\r\n                        const modalCContractPath = response.data.rows[0].CONTRACT_PATH;\r\n                        const modalCContractPathM = response.data.rows[0].CONTRACT_PATH_M;\r\n\r\n                        const modalCEndDate = response.data.rows[0].END_DATE;\r\n\r\n                        const modalCContractTpVal = response.data.rows[0].CONTRACT_ROOM;\r\n                        const modalCRoomLockerTp = response.data.rows[0].CONTRACT_LOCKER;\r\n                        const modalCContractTpValM = response.data.rows[0].CONTRACT_ROOM_M;\r\n                        const modalCRoomLockerTpM = response.data.rows[0].CONTRACT_LOCKER_M;\r\n                        const modalCMemberSt = response.data.rows[0].MEMBER_ST;\r\n\r\n                        const modalCComment = response.data.rows[0].COMMENT;\r\n\r\n                        const modalCMemberTpPrint = response.data.rows[0].MEMBER_TP_M;\r\n                        const modalCContractTpPrint = response.data.rows[0].CONTRACT_TP_M;\r\n                        const modalCPayMethodPrint = response.data.rows[0].PAY_METHOD_M;\r\n                        const modalCAccessPrint = response.data.rows[0].CONTRACT_PATH_M;\r\n\r\n                        const modalCRegNos = modalCRegNo.split(\"-\");\r\n                        const modalCEmpHps = modalCEmpHp.split(\"-\");\r\n                        const modalCEmpEmails = modalCEmpEmail.split(\"@\");\r\n\r\n                        setUserStatus(modalCMemberSt);\r\n                        setMemberStFlag(modalCMemberSt);\r\n                        setMemberNm(modalCMemberNm);\r\n                        setFisrtRegNo(modalCRegNos[0]);\r\n                        setSecondRegNo(modalCRegNos[1]);\r\n                        setThirdRegNo(modalCRegNos[2]);\r\n                        setMemberTp(modalCMemberTp);\r\n\r\n                        setContractTpVal(modalCContractTpVal);\r\n\r\n                        setEmpIdName(modalCName);\r\n                        setFirstEmpHp(modalCEmpHps[0]);\r\n                        setSecondEmpHp(modalCEmpHps[1]);\r\n                        setThirdEmpHp(modalCEmpHps[2]);\r\n                        setEmpEmailId(modalCEmpEmails[0]);\r\n                        setDomainAddress(modalCEmpEmails[1]);\r\n                        setZipcode(modalCZipCode);\r\n                        setEmpAddress(modalCAddress);\r\n                        setCeoIdCardImg(modalCCeoIdCardImg);\r\n                        setCeoRegistCardImg(modalCRegistIdCardImg);\r\n\r\n                        setEmpDetailAddress(modalCDetailAddress);\r\n                        setContractStart(modalCContractDate);\r\n                        setContractEnd(modalCEndDate);\r\n\r\n                        setContractTp(modalCContractTp);\r\n                        setContractTerm(modalCContractTerm);\r\n                        setPayDate(modalCPayDate);\r\n                        setContractMoney(modalCContractMoney);\r\n                        setPayMethod(modalCPayMethod);\r\n                        //setContractPath(modalCContractPath);\r\n                        setRoomLockerTp(modalCRoomLockerTp);\r\n                        setComment(modalCComment);\r\n\r\n                        setStartAsk_date(new Date(modalCContractDate));\r\n\r\n                        setContractTpVal(modalCContractTpVal);\r\n                        setRoomLockerTp(modalCRoomLockerTp);\r\n                        setContractPath(modalCContractPath);\r\n\r\n                        setContractTpVals([{ key: modalCContractTpVal, value: modalCContractTpValM }]);\r\n                        setRoomLockers([{ key: modalCRoomLockerTp, value: modalCRoomLockerTpM }]);\r\n                        setContractPaths([{ key: modalCContractPath, value: modalCContractPathM }]);\r\n\r\n                        //print용\r\n                        setMemberTpPrint(modalCMemberTpPrint);\r\n                        setContractTpPrint(modalCContractTpPrint);\r\n                        setPayMethodPrint(modalCPayMethodPrint);\r\n                        setAccessPrint(modalCAccessPrint);\r\n                    } else {\r\n                        alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                    }\r\n                })\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n    const findAddr = () => {\r\n        //     const script = document.createElement(\"script\");\r\n        //     script.innerHTML = `         \r\n        //     new daum.Postcode({\r\n        //         oncomplete: function(data) {\r\n\r\n        //             var addr = ''; \r\n        //             var extraAddr = ''; \r\n\r\n\r\n        //             if (data.userSelectedType === 'R') { \r\n        //                 addr = data.roadAddress;\r\n        //             } else {\r\n        //                 addr = data.jibunAddress;\r\n        //             }\r\n\r\n\r\n        //             if(data.userSelectedType === 'R'){\r\n\r\n        //                 if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){\r\n        //                     extraAddr += data.bname;\r\n        //                 }\r\n\r\n        //                 if(data.buildingName !== '' && data.apartment === 'Y'){\r\n        //                     extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n        //                 }\r\n\r\n        //                 if(extraAddr !== ''){\r\n        //                     extraAddr = ' (' + extraAddr + ')';\r\n        //                 }\r\n\r\n        //                 document.getElementById(\"sample6_extraAddress\").value = extraAddr;\r\n\r\n        //             } else {\r\n        //                 document.getElementById(\"sample6_extraAddress\").value = '';\r\n        //             }\r\n\r\n\r\n        //             document.getElementById('sample6_postcode').value = data.zonecode;\r\n        //             document.getElementById(\"sample6_address\").value = addr;\r\n\r\n        //             document.getElementById(\"sample6_detailAddress\").focus();  \r\n        //         }\r\n        //     }).open();\r\n        //    `;\r\n        //     script.type = \"text/javascript\";\r\n        //     script.async = \"async\";\r\n        //     document.head.appendChild(script);\r\n\r\n        //console.log('ggggg');\r\n\r\n        const postCodeStyle = {\r\n            display: \"block\",\r\n            position: \"absolute\",\r\n            top: \"26%\",\r\n            right: \"33%\",\r\n            width: \"1000px\",\r\n            height: \"1600px\"\r\n\r\n        }\r\n\r\n        const handleComplete = (data) => {\r\n            let fullAddress = data.address;\r\n            let extraAddress = '';\r\n\r\n            if (data.addressType === 'R') {\r\n                if (data.bname !== '') {\r\n                    extraAddress += data.bname;\r\n                }\r\n                if (data.buildingName !== '') {\r\n                    extraAddress += (extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName);\r\n                }\r\n                fullAddress += (extraAddress !== '' ? ` (${extraAddress})` : '');\r\n            }\r\n\r\n            console.log(fullAddress);  // e.g. '서울 성동구 왕십리로2길 20 (성수동1가)'\r\n            setZipcode(data.zonecode);\r\n            setEmpAddress(fullAddress);\r\n            alert('입력되었습니다.');\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {console.log(';/')}\r\n                <DaumPostcode\r\n                    onComplete={handleComplete}\r\n                    style={postCodeStyle}\r\n                    height={700}\r\n                />\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n    //<Lov시작>\r\n    useEffect(() => {\r\n        for (let i = 0; i < queryArr.length; i++) {\r\n\r\n            let firstVal = queryArr[i][0];\r\n            let secondVal = queryArr[i][1];\r\n            axios.post('/api/memStList/selectTest', { firstVal: firstVal, secondVal: secondVal })\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        //console.log('ask_tp',response.data.rows);\r\n                        let arr = [{ key: '선택', value: '선택' }]\r\n\r\n                        response.data.rows.map((data) =>\r\n                            arr.push({\r\n                                value: data.CD_V_MEANING,\r\n                                key: data.CD_V\r\n                            }));\r\n\r\n                        valueArr[i] = arr;\r\n                    } else {\r\n                        alert(\" 데이터를 불러오는데 실패하였습니다.\");\r\n                    }\r\n                })\r\n\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        axios.post('/api/memStList/accessPath')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '선택', value: '선택' }]\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n                    setContractPaths(arr);\r\n                } else {\r\n                    alert(\"데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    //날 일\r\n    let arr = [{ key: '선택', value: '선택' }];\r\n    for (let i = 1; i <= 31; i++) {\r\n        arr.push({\r\n            value: i,\r\n            key: i\r\n        });\r\n        payDates = arr;\r\n    }\r\n\r\n    const [contractTpVals, setContractTpVals] = useState([{ key: '', value: '선택' }]);\r\n    const [roomLockers, setRoomLockers] = useState([{ key: '', value: '선택' }]);\r\n    const [contractpaths, setContractPaths] = useState([{ key: '', value: '선택' }]);\r\n\r\n    const onContractTpHandler = (event) => {\r\n\r\n        setContractTp(event.currentTarget.value);\r\n        let contractTpBody = event.currentTarget.value;\r\n\r\n\r\n        axios.post('/api/memStList/contHier', { contractTpBody: contractTpBody })\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('ContractTpVal', response.data.rows);\r\n                    let arr = [{ key: '선택', value: '선택' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n                    switch (contractTpBody) {\r\n                        case 'R1':\r\n                            setContractTpVals(arr);\r\n                            break;\r\n                        case 'R2':\r\n                            setContractTpVals(arr);\r\n                            break;\r\n                        case 'R3':\r\n                            setContractTpVals(arr);\r\n                            break;\r\n                        case 'FI':\r\n                            setContractTpVals(arr);\r\n                            break;\r\n                        case 'FL':\r\n                            setContractTpVals(arr);\r\n                            break;\r\n                        case 'FR':\r\n                            setContractTpVals(arr);\r\n                            break;\r\n                    }//switch\r\n\r\n                    if (contractTpBody === 'FI' || contractTpBody === 'FL') {\r\n                        axios.post('/api/memStList/roomLockerHier')\r\n                            .then(response => {\r\n                                if (response.data.success) {\r\n                                    //console.log('roomLocker', response.data.rows);\r\n                                    let arr = [{ key: '선택', value: '선택' }]\r\n                                    response.data.rows.map((data) =>\r\n                                        arr.push({\r\n                                            value: data.CD_V_MEANING, key: data.CD_V\r\n                                        }));\r\n                                    setRoomLockers(arr);\r\n                                } else {\r\n                                    alert('사물함정보를 불러오는데 실패하였습니다.');\r\n                                }\r\n                            })//axios\r\n                    } else {\r\n                        let arr = [{ key: '선택', value: '선택' }];\r\n                        setRoomLockers(arr);\r\n                    }\r\n\r\n\r\n                    let monthlyMoney = {\r\n                        contractTpBody: contractTpBody\r\n                    }\r\n                    axios.post('/api/memStList/monthlyMoney', monthlyMoney)\r\n                        .then(response => {\r\n                            if (response.data.success) {\r\n                                //console.log(response.data.rows[0].ATTRIBUTE3);\r\n                                setContractMoney(response.data.rows[0].ATTRIBUTE3);\r\n\r\n                            } else {\r\n                                alert('사물함정보를 불러오는데 실패하였습니다.');\r\n                            }\r\n                        })\r\n\r\n                }//if문\r\n                else {\r\n                    alert('호실 정보를 불러오는데 실패하였습니다.');\r\n                }\r\n\r\n            })//axios,then\r\n\r\n    }\r\n\r\n    const onContractTpValHandler = (event) => {\r\n        setContractTpVal(event.currentTarget.value);\r\n    }\r\n\r\n    const onRoomLockerTpHandler = (event) => {\r\n        setRoomLockerTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onContractMoneyHandler = (event) => {\r\n        setContractMoney(event.currentTarget.value);\r\n    }\r\n\r\n    const onContractTermHandler = (event) => {\r\n        setContractTerm(event.currentTarget.value);\r\n    }\r\n\r\n    const onPayDateHandler = (event) => {\r\n        setPayDate(event.currentTarget.value);\r\n    }\r\n\r\n    const onCommentHandler = (event) => {\r\n        setComment(event.currentTarget.value);\r\n    }\r\n\r\n    const onPayMethodHandler = (event) => {\r\n        setPayMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const onContractPathHandler = (event) => {\r\n        setContractPath(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => setRegNoCheckBtn('');\r\n    }, []);\r\n    useEffect(() => {\r\n        return () => setEmpHpCheckBtn('');\r\n    }, []);\r\n    useEffect(() => {\r\n        return () => setDateCheckBtn('');\r\n    }, []);\r\n\r\n\r\n    // 첨부파일 서버로 보내는 함수\r\n    const addMember = () => {\r\n        const url = '/api/s010100010/insertMember010';\r\n        const formData = new FormData();\r\n\r\n        let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n\r\n        formData.append('idCardFile', idCardFile);\r\n        formData.append('registCardFile', registCardFile);\r\n        formData.append('idCardFileName', idCardFileName);\r\n        formData.append('registCardFileName', registCardFileName);\r\n\r\n        formData.append('memberNm', memberNm);\r\n        formData.append('firstRegNo', firstRegNo);\r\n        formData.append('secondRegNo', secondRegNo);\r\n        formData.append('thirdRegNo', thirdRegNo);\r\n        formData.append('memberTp', memberTp);\r\n        formData.append('empIdName', empIdName);\r\n        formData.append('firstEmpHp', firstEmpHp);\r\n        formData.append('secondEmpHp', secondEmpHp);\r\n        formData.append('thirdEmpHp', thirdEmpHp);\r\n\r\n        formData.append('zipcode', zipcode);\r\n        formData.append('empEmailId', empEmailId);\r\n        formData.append('domainAddress', domainAddress);\r\n        formData.append('empAddress', empAddress);\r\n        formData.append('empDetailAddress', empDetailAddress);\r\n\r\n        //계약정보\r\n        formData.append('contractTp', contractTp);\r\n        formData.append('contractTpVal', contractTpVal);\r\n        formData.append('roomLockerTp', roomLockerTp);\r\n        formData.append('contractMoney', contractMoney);\r\n        formData.append('contractTerm', contractTerm);\r\n        formData.append('startAsk_date', startDate);\r\n        formData.append('endDate', dateEnd);\r\n        formData.append('payDate', payDate);\r\n        formData.append('payMethod', payMethod);\r\n        formData.append('contractPath', contractPath);\r\n        formData.append('comment', comment);\r\n        formData.append('forMemberStatus', forMemberStatus);\r\n\r\n        // console.log(formData);\r\n        // alert('forMemberStatus', forMemberStatus);\r\n\r\n        const config = {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        }\r\n        return post(url, formData, config);\r\n    }\r\n\r\n\r\n\r\n    //저장-확정\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        forMemberStatus = \"C\";\r\n\r\n        // //대표자 NUll체크\r\n        // if (empIdName == null || empIdName == '') {\r\n        //     return alert(\"대표자를 입력하세요.\");\r\n        // }\r\n        //\r\n        // //연락처 NUll체크\r\n        // if (firstEmpHp == null || firstEmpHp == '' || secondEmpHp == null || secondEmpHp == '' || thirdEmpHp == null || thirdEmpHp == '') {\r\n        //     return alert(\"연락처를 입력하세요.\");\r\n        // }\r\n        //\r\n       \r\n        //\r\n        // //계약구분 NUll체크\r\n        // if (contractTp == null || contractTp == '') {\r\n        //     return alert(\"계약구분을 선택하세요.\");\r\n        // }\r\n        //\r\n        // //호실 NUll체크\r\n        // if (contractTpVal == null || contractTpVal == '') {\r\n        //     return alert(\"호실을 선택하세요.\");\r\n        // }\r\n        //\r\n        // //이용기간 NUll체크\r\n        // if (contractTerm == null || contractTerm == '') {\r\n        //     return alert(\"이용기간을 입력하세요.\");\r\n        // }\r\n        //\r\n        // //입금일 NUll체크\r\n        // if (payDate == null || payDate == '') {\r\n        //     return alert(\"입금일을 하세요.\");\r\n        // }\r\n        //\r\n        // //납부방법 NUll체크\r\n        // if (payMethod == null || payMethod == '') {\r\n        //     return alert(\"납부방법을 선택하세요.\");\r\n        // }\r\n        //\r\n      \r\n\r\n        //중복확인\r\n        if (regNoCheckBtn == '') {\r\n            alert('사업자 번호 중복확인 하세요.');\r\n        } else if (empHpCheckBtn == '') {\r\n            alert('전화번호 중복확인 하세요.');\r\n        } else if (dateCheckBtn == '') {\r\n            alert('이용날짜 중복확인 하세요.');\r\n        } else if (regNoCheckBtn == 'check' && empHpCheckBtn == 'check' && dateCheckBtn == 'check') {\r\n            addMember().then((response) => {\r\n                alert('정상적으로 등록 되었습니다.');\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    //임시저장-가계약\r\n    const temporaryStorage = (event) => {\r\n        event.preventDefault();\r\n        forMemberStatus = \"T\";\r\n        \r\n        // //대표자 NUll체크\r\n        // if (empIdName == null || empIdName == '') {\r\n        //     return alert(\"대표자를 입력하세요.\");\r\n        // }\r\n        //\r\n        // //연락처 NUll체크\r\n        // if (firstEmpHp == null || firstEmpHp == '' || secondEmpHp == null || secondEmpHp == '' || thirdEmpHp == null || thirdEmpHp == '') {\r\n        //     return alert(\"연락처를 입력하세요.\");\r\n        // }\r\n        //\r\n      \r\n\r\n        //중복확인\r\n        if (regNoCheckBtn == '') {\r\n            alert('사업자 번호 중복확인 하세요.');\r\n        } else if (empHpCheckBtn == '') {\r\n            alert('전화번호 중복확인 하세요.');\r\n        } else if (dateCheckBtn == '') {\r\n            alert('이용날짜 중복확인 하세요.');\r\n        } else if (regNoCheckBtn == 'check' && empHpCheckBtn == 'check' && dateCheckBtn == 'check') {\r\n            addMember().then((response) => {\r\n                alert('정상적으로 등록 되었습니다.');\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    //신규계약추가\r\n    const newMemberIdStorage = (event) => {\r\n\r\n        // //계약구분 NUll체크\r\n        // if (contractTp == null || contractTp == '') {\r\n        //     return alert(\"계약구분을 선택하세요.\");\r\n        // }\r\n        //\r\n        // //호실 NUll체크\r\n        // if (contractTpVal == null || contractTpVal == '') {\r\n        //     return alert(\"호실을 선택하세요.\");\r\n        // }\r\n        //\r\n        // //이용기간 NUll체크\r\n        // if (contractTerm == null || contractTerm == '') {\r\n        //     return alert(\"이용기간을 입력하세요.\");\r\n        // }\r\n        //\r\n        // //입금일 NUll체크\r\n        // if (payDate == null || payDate == '') {\r\n        //     return alert(\"입금일을 하세요.\");\r\n        // }\r\n        //\r\n        // //납부방법 NUll체크\r\n        // if (payMethod == null || payMethod == '') {\r\n        //     return alert(\"납부방법을 선택하세요.\");\r\n        // }\r\n        //\r\n        // //월회비 NUll체크\r\n        // if (contractMoney == null || contractMoney == '') {\r\n        //     return alert(\"월회비를 입력하세요.\");\r\n        // }\r\n        //\r\n        // //납부액 NUll체크\r\n        // if (contractMoney == null || contractMoney == '') {\r\n        //     return alert(\"납부액을 입력하세요.\");\r\n        // }\r\n\r\n        // //계약접근경로 NUll체크\r\n        // if (contractPath == null || contractPath == '') {\r\n        //     return alert(\"계약접근경로를 선택하세요.\");\r\n        // }\r\n\r\n        //memberId\r\n        let memberIdForNew = props.dataMem;\r\n        //시작일자\r\n        let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n\r\n        let body = {\r\n            //계약정보\r\n            memberIdForNew: memberIdForNew,\r\n            contractTp: contractTp,\r\n            contractTpVal: contractTpVal,\r\n            roomLockerTp: roomLockerTp,\r\n            contractMoney: contractMoney,\r\n            contractTerm: contractTerm,\r\n            startAsk_date: startDate,\r\n            endDate: dateEnd,\r\n            payDate: payDate,\r\n            payMethod: payMethod,\r\n            contractPath: contractPath,\r\n            comment: comment\r\n        }\r\n\r\n        axios.post('/api/memStList/detailNewContract_by_id', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('신규계약에 성공 하였습니다');\r\n\r\n                } else {\r\n                    alert('신규계약에 실패 하였습니다');\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    // 가계약을 확정으로 + 수정하기\r\n    const newContractIdStorage = (event) => {\r\n        \r\n        // console.log('memberStFlag',memberStFlag);\r\n        if(memberStFlag == 'T' ){\r\n            //가계약을 확정으로\r\n            let memberBody = {\r\n                rNum: rNum\r\n            }\r\n            axios.post('/api/memStList/modifymemberSt', memberBody)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        alert('확정되었습니다');\r\n                    } else {\r\n                        alert('확정실패 하였습니다');\r\n                    }\r\n                })\r\n        }\r\n\r\n        //수정하기\r\n        let modifyDataNum = props.dataNum;\r\n\r\n        let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n\r\n        let body = {\r\n            //계약정보\r\n            modifyDataNum: modifyDataNum,\r\n            contractTp: contractTp,\r\n            contractTpVal: contractTpVal,\r\n            roomLockerTp: roomLockerTp,\r\n            contractMoney: contractMoney,\r\n            contractTerm: contractTerm,\r\n            startAsk_date: startDate,\r\n            endDate: dateEnd,\r\n            payDate: payDate,\r\n            payMethod: payMethod,\r\n            contractPath: contractPath,\r\n            comment: comment\r\n        }\r\n        \r\n        console.log('comment',comment);\r\n        let dateChangeChk = props.dataNum;\r\n\r\n        let dataChk = {\r\n            dateChangeChk: dateChangeChk,\r\n            contractTpVal: contractTpVal\r\n        }\r\n\r\n\r\n        // 이용기간 중복확인 할 때 (기존 db에 있는)startDate,endDate 가져오는 api \r\n        axios.post('/api/memStList/contractModify/dateChangeSt', dataChk)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('response.data.row',response.data.row);\r\n                    let wastedStartDate = response.data.row[0].START_DATE;\r\n                    let wastedEndDate = response.data.row[0].END_DATE;\r\n                    let wastedContractTerm = response.data.row[0].CONTRACT_TERM;\r\n\r\n                    let wasteStartDateDay = wastedStartDate.substring(8, 10);\r\n                    let wasteStartMonthDay = wastedStartDate.substring(5, 7);\r\n                    let wasteStartYearDay = wastedStartDate.substring(0, 4);\r\n                    existingStartDate = wasteStartYearDay + '-' + parseInt(wasteStartMonthDay) + '-' + (parseInt(wasteStartDateDay) + 1);\r\n\r\n                    let wasteEndDateDay = wastedEndDate.substring(8, 10);\r\n                    let wasteEndMonthDay = wastedEndDate.substring(5, 7);\r\n                    let wasteEndYearDay = wastedEndDate.substring(0, 4);\r\n\r\n                    //endDate는 DatePicker(x) input-> '.'로 바로 설정했었음\r\n                    existingEndDate = wasteEndYearDay + '.' + parseInt(wasteEndMonthDay) + '.' + (parseInt(wasteEndDateDay) + 1);\r\n\r\n                    //날짜 수정x\r\n                    if (dateEnd === existingEndDate || contractTerm === wastedContractTerm) {\r\n\r\n                        setDateCheckBtn('check');\r\n\r\n                        axios.post('/api/memStList/detailModifyContracId', body)\r\n                            .then(response => {\r\n                                if (response.data.success) {\r\n                                    alert('이용계약서를 수정하였습니다');\r\n                                } else {\r\n                                    alert('이용계약서 수정을 실패 하였습니다');\r\n                                }\r\n                            })\r\n                        alert('날짜 수정안했음');\r\n\r\n                        //날짜 수정o\r\n                    } else {\r\n                        //console.log('contractTerm != wastedContractTerm', contractTerm != wastedContractTerm);\r\n                        alert('날짜 수정했음');\r\n                        if (dateCheckBtn == 'check') {\r\n\r\n                            axios.post('/api/memStList/detailModifyContracId', body)\r\n                                .then(response => {\r\n                                    if (response.data.success) {\r\n                                        alert('이용계약서를 수정하였습니다');\r\n                                    } else {\r\n                                        alert('이용계약서 수정을 실패 하였습니다');\r\n                                    }\r\n                                })\r\n\r\n                        } else if (dateCheckBtn == '') {\r\n                            alert('날짜 중복확인 하세요');\r\n                        }\r\n                        setDateCheckBtn('');\r\n                    }\r\n\r\n                } else {\r\n\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    //출력버튼 모달 open\r\n    const onPrintHandler = (event) => {\r\n        forPrint = true;\r\n        setPrintSheetOpen(true);\r\n    }\r\n    //출력버튼 모달 close\r\n    const onPrintSheetClose = (event) => {\r\n        forPrint = false;\r\n        setPrintSheetOpen(false);\r\n    }\r\n\r\n    //const printArea = useRef();\r\n    //출력함수\r\n    // const onPrintSheetHandler = (event) => {\r\n    //     let printContents =printArea.current.focus; \r\n    //     let originalContents = document.body.innerHTML;\r\n    //     document.body.innerHTML = printContents;\r\n    //     window.print();\r\n    //     document.body.innerHTML = originalContents;\r\n\r\n    // }\r\n\r\n    const onleaseAgreementHandler = (event) => {\r\n        setLeaseAgreementOpen(true);\r\n    }\r\n\r\n    const onleaseAgreementClose = (event) => {\r\n        setLeaseAgreementOpen(false);\r\n    }\r\n\r\n    const onMemberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const onFirstRegNoHandler = (event) => {\r\n        setFisrtRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const onSecondRegNoHandler = (event) => {\r\n        setSecondRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const onThirdRegNoHandler = (event) => {\r\n        setThirdRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const onMemberTpHandler = (event) => {\r\n        setMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpIdNameHandler = (event) => {\r\n        setEmpIdName(event.currentTarget.value);\r\n    }\r\n\r\n    const onFirstEmpHpHandler = (event) => {\r\n        setFirstEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const onSecondEmpHpHandler = (event) => {\r\n        setSecondEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const onThirdEmpHpHandler = (event) => {\r\n        setThirdEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpEmailIdHandler = (event) => {\r\n        setEmpEmailId(event.currentTarget.value);\r\n    }\r\n\r\n    const onDomainAddressHandler = (event) => {\r\n        setDomainAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onZipcodeHandler = (event) => {\r\n        setZipcode(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpAddressHandler = (event) => {\r\n        setEmpAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpDetailAddressHandler = (event) => {\r\n        setEmpDetailAddress(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    //종료\r\n    const newEndHandler = (event) => {\r\n        event.preventDefault();\r\n        const body = {\r\n            //계약정보\r\n            rNum: rNum\r\n        }\r\n        axios.post('/api/memStList/endFlag', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('종료처리 하였습니다.')\r\n                } else {\r\n                    alert('종료처리에 실패하였습니다.')\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    const onDeleteHandler = (event) => {\r\n\r\n        setUserStatus('');\r\n\r\n        axios.post(`/api/memStList/memberDelete_by_id?id=${rNum}`)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('삭제 하였습니다.')\r\n                } else {\r\n                    alert('삭제에 실패하였습니다.')\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    const onRegNoCheckHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        setRegNoCheckBtn('check');\r\n\r\n        //console.log('regNoCheckBtn2.', regNoCheckBtn);\r\n\r\n        const body = {\r\n            //회원정보\r\n            firstRegNo: firstRegNo,\r\n            secondRegNo: secondRegNo,\r\n            thirdRegNo: thirdRegNo,\r\n        }\r\n\r\n        axios.post('/api/memStList/regNoCheck', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    if (response.data.number[0].RowNum >= 1) {\r\n                        alert('이미 존재하는 사업자번호입니다.');\r\n                    } else if (response.data.number[0].RowNum === 0) {\r\n                        alert('사용할 수 있는 사업자 번호입니다.')\r\n                    }\r\n                } else {\r\n                    alert('중복체크에 실패 하였습니다.')\r\n                }\r\n            })\r\n\r\n        console.log('regNoCheckBtn3.', regNoCheckBtn);\r\n    }\r\n\r\n    const onEmpHpChkHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        setEmpHpCheckBtn('check');\r\n\r\n        const body = {\r\n            //회원정보\r\n            firstEmpHp: firstEmpHp,\r\n            secondEmpHp: secondEmpHp,\r\n            thirdEmpHp: thirdEmpHp,\r\n        }\r\n\r\n\r\n        axios.post('/api/memStList/empHpCheck', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    if (response.data.number[0].RowNum >= 1) {\r\n                        alert('이미 존재하는 전화번호입니다.');\r\n                    } else if (response.data.number[0].RowNum === 0) {\r\n                        alert('사용할 수 있는 전화번호입니다.')\r\n                    }\r\n                } else {\r\n                    alert('중복체크에 실패 하였습니다.')\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    let finalYear = ((startAsk_date.getMonth() * 1 + contractTerm * 1) / 12) + startAsk_date.getFullYear();\r\n\r\n    let finalMonth = ((startAsk_date.getMonth() * 1 + contractTerm * 1) % 12) + 1;\r\n    finalMonth = finalMonth < 10 ? '0' + finalMonth : finalMonth;\r\n\r\n    let finalDate = new Date(finalYear, finalMonth, 0).getDate() > startAsk_date.getDate()\r\n        ? startAsk_date.getDate()\r\n        : new Date(finalYear, finalMonth, 0).getDate();\r\n    let dateEnd = Math.floor(finalYear) + '.' + finalMonth + '.' + finalDate;\r\n\r\n\r\n    //이용기간 중복체크\r\n    const funcDateChk = () => {\r\n\r\n        // setDateCheckBtn('check');\r\n        const rNum = props.dataNum;\r\n        let startDate = startAsk_date.getFullYear() + '.' + (startAsk_date.getMonth() + 1) + '.' + startAsk_date.getDate();\r\n\r\n        const body = {\r\n            contractTp: contractTp,\r\n            contractTpVal: contractTpVal,\r\n            roomLockerTp: roomLockerTp,\r\n            startDate: startDate,\r\n            endDate: dateEnd,\r\n            modalMemberId: modalMemberId,\r\n            contractId: rNum\r\n        }\r\n\r\n        //console.log(modalMemberId);\r\n\r\n        axios.post('/api/memStList/dateCheck', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    if (response.data.number[0].STARTENDDATE >= 1) {\r\n                        alert('이미 이용중인 날짜입니다.');\r\n                    } else if (response.data.number[0].STARTENDDATE === 0) {\r\n                        alert('사용가능한 날짜입니다.')\r\n                    }\r\n                } else {\r\n                    alert('중복체크에 실패 하였습니다.')\r\n                }\r\n            })\r\n\r\n        setDateCheckBtn('check');\r\n\r\n    }\r\n\r\n\r\n    const onDateHandler = (event) => {\r\n        event.preventDefault();\r\n        funcDateChk();\r\n    }\r\n\r\n\r\n    const onPlusDateHandler = (event) => {\r\n        event.preventDefault();\r\n        funcDateChk();\r\n    }\r\n\r\n\r\n    const idCardHandleFileChange = (event) => {\r\n        // file: event.currentTarget.idCardFiles[0];\r\n        setIdCardFile(event.currentTarget.files[0]);\r\n        setIdCardFileName(event.currentTarget.value);\r\n    }\r\n\r\n    const registCardHandleFileChange = (event) => {\r\n        // file: event.currentTarget.registCardFiles[0];\r\n        setRegistCardFile(event.currentTarget.files[0]);\r\n        setRegistCardFileName(event.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n\r\n        <form style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '100%'\r\n        }}\r\n            //onSubmit={onSubmitHandler}\r\n            encType='multipart/form-data'\r\n        >\r\n            <h1 id=\"useContractTitle\">이용계약서</h1>\r\n            <Table striped bordered hover className=\"useContractTable\">\r\n                {/* 회원정보란 */}\r\n                <tbody>\r\n                    <tr>\r\n                        <th rowSpan=\"6\" className=\"memberInfo\">회원정보</th>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"memberInfo\">회원명</th>\r\n                        <td hidden={forPrint}>\r\n                            <input type=\"text\" value={memberNm} id=\"memberNm\" name=\"memberNm\" size=\"10\"\r\n                                onChange={onMemberNmHandler} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'}\r\n                            />\r\n                        </td>\r\n\r\n                        {/* 회원명 출력 td */}\r\n                        <td hidden={!forPrint}>\r\n                            {memberNm}\r\n                        </td>\r\n\r\n                        <th className=\"memberInfo\">사업자 번호</th>\r\n                        <td colSpan=\"2\" hidden={forPrint}>\r\n\r\n                            <input type=\"text\" value={firstRegNo} id=\"firstRegNo\" name=\"firstRegNo\" size=\"3\"\r\n                                onChange={onFirstRegNoHandler} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'} />\r\n                        &nbsp;\r\n                        -\r\n                        &nbsp;\r\n                        <input type=\"text\" value={secondRegNo} id=\"secondRegNo\" name=\"secondRegNo\" size=\"3\"\r\n                                onChange={onSecondRegNoHandler} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'} />\r\n                        &nbsp;\r\n                        -\r\n                        &nbsp;\r\n                        <input type=\"text\" value={thirdRegNo} id=\"thirdRegNo\" name=\"thirdRegNo\" size=\"3\"\r\n                                onChange={onThirdRegNoHandler} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'} />\r\n\r\n                            {/*신규회원 중복확인 */}\r\n                            <input type=\"button\" className=\"useContractBtn\" onClick={onRegNoCheckHandler}\r\n                                hidden={props.cDataForm === 'I' || props.newDataForm === 'N'} value=\"중복확인\"></input>\r\n\r\n                        </td>\r\n                        {/*사업자 번호 출력용 */}\r\n                        <td colSpan=\"2\" hidden={!forPrint} >{firstRegNo}-{secondRegNo}-{thirdRegNo}</td>\r\n\r\n\r\n                        <th className=\"memberInfo\" >회원구분</th>\r\n                        <td colSpan=\"2\" hidden={forPrint}>\r\n                            <select multiple={false} onChange={onMemberTpHandler} value={memberTp} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'}>\r\n                                {valueArr[0].map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n\r\n                        {/*회원구분 출력용 */}\r\n                        <td colSpan=\"2\" hidden={!forPrint} >{memberTpPrint}</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"memberInfo\">대표자<span className=\"star\">(*)</span></th>\r\n                        <td hidden={forPrint}>\r\n                            <input type=\"text\" value={empIdName} id=\"empIdName\" name=\"empIdName\" size=\"10\"\r\n                                onChange={onEmpIdNameHandler} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'} />\r\n                        </td>\r\n\r\n                        {/* 대표자(이름) 출력용 */}\r\n                        <td hidden={!forPrint} >{empIdName}</td>\r\n\r\n                        <th className=\"memberInfo\">연락처<span className=\"star\">(*)</span></th>\r\n                        <td colSpan=\"2\" hidden={forPrint}>\r\n\r\n                            <input type=\"text\" value={firstEmpHp} id=\"firstEmpHp\" name=\"firstEmpHp\" size=\"5\"\r\n                                onChange={onFirstEmpHpHandler} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'} />\r\n                        -\r\n                        &nbsp;\r\n                        <input type=\"text\" value={secondEmpHp} id=\"secondEmpHp\" name=\"secondEmpHp\" size=\"5\"\r\n                                onChange={onSecondEmpHpHandler} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'} />\r\n                        -\r\n                        &nbsp;\r\n                        <input type=\"text\" value={thirdEmpHp} id=\"thirdEmpHp\" name=\"thirdEmpHp\" size=\"5\"\r\n                                onChange={onThirdEmpHpHandler} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'} />\r\n                            <input type=\"button\" onClick={onEmpHpChkHandler} hidden={props.cDataForm == 'I' || props.newDataForm === 'N'} value=\"중복확인\" />\r\n                        </td>\r\n\r\n                        {/* 대표자(전화번호) 출력용 */}\r\n                        <td colSpan=\"2\" hidden={!forPrint} >{firstEmpHp}-{secondEmpHp}-{thirdEmpHp}</td>\r\n\r\n\r\n                        <th className=\"memberInfo\">E-mail<span className=\"star\">(*)</span></th>\r\n                        <td colSpan=\"2\" hidden={forPrint}>\r\n\r\n                            <input type=\"text\" value={empEmailId} id=\"empEmailId\" name=\"empEmailId\" size=\"5\"\r\n                                onChange={onEmpEmailIdHandler} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'} />\r\n                        &nbsp;\r\n                        @\r\n                        &nbsp;\r\n                        <input type=\"text\" value={domainAddress} id=\"domainAddress\" name=\"domainAddress\"\r\n                                size=\"5\"\r\n                                onChange={onDomainAddressHandler} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'} />\r\n                        </td>\r\n\r\n                        {/* 대표자(이메일) 출력용 */}\r\n                        <td colSpan=\"2\" hidden={!forPrint} >{empEmailId}@{domainAddress}</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th rowSpan=\"2\" className=\"memberInfo\">대표자 주소</th>\r\n\r\n                        <td colSpan=\"9\" hidden={forPrint}>\r\n\r\n                            <input type=\"text\" value={zipcode} id=\"zipcode\" name=\"zipcode\" size=\"10\"\r\n                                onChange={onZipcodeHandler} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'} />\r\n                            <input type=\"button\" className=\"useContractBtn\" onClick={findAddr}\r\n                                disabled={props.cDataForm === 'I' || props.newDataForm === 'N'}\r\n                                value=\"우편\"\r\n                            />\r\n                            <input type=\"text\" value={empAddress} id=\"empAddress\" name=\"empAddress\" size=\"30\"\r\n                                onChange={onEmpAddressHandler} disabled={props.cDataForm === 'I' || props.newDataForm === 'N'} />\r\n                        </td>\r\n\r\n                        <td colSpan=\"9\" hidden={!forPrint}>{zipcode}{empAddress}{empDetailAddress}</td>\r\n\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"9\" hidden={forPrint}>\r\n                            <input type=\"text\"\r\n                                value={empDetailAddress}\r\n                                id=\"empDetailAddress\"\r\n                                name=\"empDetailAddress\" size=\"30\"\r\n                                onChange={onEmpDetailAddressHandler}\r\n                                disabled={props.cDataForm === 'I' || props.newDataForm === 'N'} />\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"memberInfo\" >첨부파일</th>\r\n                        <td colSpan=\"4\" hidden={forPrint || props.cDataForm === 'I' || props.newDataForm === 'N'}>\r\n                            <input type='file'\r\n                                file={idCardFile}\r\n                                name='idCardFile'\r\n                                value={idCardFileName}\r\n                                onChange={idCardHandleFileChange}\r\n                            />\r\n                        </td>\r\n                        <td colSpan=\"5\" hidden={forPrint || props.cDataForm === 'I' || props.newDataForm === 'N'}>\r\n                            <input type='file'\r\n                                file={registCardFile}\r\n                                name='registCardFile'\r\n                                value={registCardFileName}\r\n                                onChange={registCardHandleFileChange}\r\n                            />\r\n                        </td>\r\n\r\n                        {/* 출력용 */}\r\n                        <td colSpan=\"4\" hidden={!forPrint && props.cDataForm === 'I' && props.newDataForm === 'N'}>\r\n                            {ceoIdCardImg}\r\n                        </td>\r\n\r\n                        <td colSpan=\"5\" hidden={!forPrint && props.cDataForm !== 'I' && props.newDataForm !== 'N'}>\r\n                            {ceoRegistCardImg}\r\n                        </td>\r\n                    </tr>\r\n\r\n\r\n                    {/* 계약정보란 */}\r\n\r\n                    <tr>\r\n                        <th rowSpan=\"7\" className=\"info\">계약정보</th>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"info\">계약구분</th>\r\n                        <td hidden={forPrint}>\r\n                            <select multiple={false} onChange={onContractTpHandler} value={contractTp}>\r\n                                {valueArr[1].map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n\r\n                        {/* 계약구분 출력용 */}\r\n                        <td hidden={!forPrint}>\r\n                            {contractTpPrint}\r\n                        </td>\r\n\r\n                        <th className=\"info\">호실</th>\r\n                        <td hidden={forPrint}>\r\n                            <select multiple={false} onChange={onContractTpValHandler} value={contractTpVal}>\r\n                                {contractTpVals.map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n                        {/* 호실 출력용 */}\r\n                        <td hidden={!forPrint}>\r\n                            {contractTpVals.map(item => (\r\n                                <option key={item.key} value={item.key}>{item.value}</option>\r\n                            ))}\r\n                        </td>\r\n\r\n                        <th className=\"info\">사물함</th>\r\n                        <td hidden={forPrint}>\r\n                            <select multiple={false} onChange={onRoomLockerTpHandler} value={roomLockerTp}>\r\n                                {roomLockers.map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n                        {/* 사물함 출력용 */}\r\n                        <td hidden={!forPrint}>\r\n                            {roomLockers.map(item => (\r\n                                <option key={item.key} value={item.key}>{item.value}</option>\r\n                            ))}\r\n                        </td>\r\n\r\n                        <th className=\"info\">월회비</th>\r\n                        <td hidden={forPrint}>\r\n                            <input type=\"text\" value={contractMoney} id=\"contractMoney\" name=\"contractMoney\"\r\n                                size=\"5\"\r\n                                onChange={onContractMoneyHandler} />\r\n                        </td>\r\n\r\n                        {/* 월회비 출력용 */}\r\n                        <td hidden={!forPrint}>\r\n                            {contractMoney}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"info\">이용기간</th>\r\n                        <td hidden={forPrint}>\r\n                            <input type=\"text\" value={contractTerm} id=\"contractTerm\" name=\"contractTerm\" size=\"1\"\r\n                                onChange={onContractTermHandler} /> &nbsp;개월 &nbsp;\r\n\r\n                                <DatePicker\r\n                                multiple={false}\r\n                                locale=\"ko\"\r\n                                selected={startAsk_date.setHours(9, 0, 0, 0)}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                                onChange={date => setStartAsk_date(date)}\r\n                                selectsStart\r\n                                startDate={startAsk_date.setHours(9, 0, 0, 0)}\r\n                                endDate={endAsk_date}\r\n                                dateFormat=\"yyyy.MM.dd\"\r\n\r\n                            />&nbsp;\r\n                            ~ &nbsp;\r\n                            <input type=\"text\" disabled={true} value={dateEnd} size=\"8\" />\r\n                            {/* 신규계약 중복확인 */}\r\n                            <input type=\"button\" onClick={onDateHandler} className=\"useContractBtn\"\r\n                                hidden={props.newDataForm === 'N'} value=\"중복확인\"></input>\r\n\r\n                            {/*기존회원 신규계약 중복확인 */}\r\n                            <input type=\"button\" className=\"plusContractBtn\" onClick={onPlusDateHandler}\r\n                                hidden={props.newDataForm !== 'N'} value=\"중복확인\"></input>\r\n                        </td>\r\n\r\n                        {/* 이용기간 출력용 */}\r\n                        <td hidden={!forPrint}>\r\n                            {contractTerm}개월 &nbsp;\r\n\r\n                                <DatePicker\r\n                                multiple={false}\r\n                                locale=\"ko\"\r\n                                selected={startAsk_date.setHours(9, 0, 0, 0)}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                                onChange={date => setStartAsk_date(date)}\r\n                                selectsStart\r\n                                startDate={startAsk_date.setHours(9, 0, 0, 0)}\r\n                                endDate={endAsk_date}\r\n                                dateFormat=\"yyyy.MM.dd\"\r\n\r\n                            />&nbsp;\r\n                            ~ &nbsp;\r\n                            <input type=\"text\" disabled={true} value={dateEnd} size=\"8\" />\r\n                            {/* 신규계약 중복확인 */}\r\n                            <input type=\"button\" onClick={onDateHandler} className=\"useContractBtn\"\r\n                                hidden={props.newDataForm === 'N' || forPrint} value=\"중복확인\"></input>\r\n\r\n                            {/*기존회원 신규계약 중복확인 */}\r\n                            <input type=\"button\" className=\"plusContractBtn\" onClick={onPlusDateHandler}\r\n                                hidden={props.newDataForm !== 'N'} value=\"중복확인\"></input>\r\n                        </td>\r\n\r\n                        <th className=\"info\">입금일</th>\r\n                        <td hidden={forPrint}>\r\n                            <select multiple={false} onChange={onPayDateHandler} value={payDate}>\r\n                                {payDates.map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n\r\n                        <td hidden={!forPrint}>\r\n                            {payDate}일\r\n                        </td>\r\n\r\n                        <th className=\"info\">납부방법</th>\r\n                        <td hidden={forPrint}>\r\n                            <select multiple={false} onChange={onPayMethodHandler} value={payMethod}>\r\n                                {valueArr[2].map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n\r\n                        <td hidden={!forPrint}>\r\n                            {payMethodPrint}\r\n                        </td>\r\n\r\n                        <th className=\"info\">예치금</th>\r\n                        <td hidden={forPrint}>\r\n                            <input type=\"text\" value={contractMoney} id=\"contractMoney\" name=\"contractMoney\"\r\n                                size=\"10\"\r\n                                onChange={onContractMoneyHandler}\r\n                            />\r\n                        </td>\r\n\r\n                        {/*예치금 출력용  */}\r\n                        <td hidden={!forPrint}>\r\n                            {contractMoney}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"info\">특약사항</th>\r\n                        <td colSpan=\"9\" className=\"alignLeft\" id=\"infoPadding\" hidden={forPrint}>\r\n                            계약기간 만료 또는 종료시 사업지 주소지와 전화를 7일이내 이전해야 하고,<br />\r\n                            계약을 해지할 경우 7일이전에 서면 또는 구두 통보해야함.<br />\r\n                            <textarea rows=\"5\" cols=\"110\" value={comment} id=\"comment\" name=\"comment\"\r\n                                onChange={onCommentHandler}></textarea>\r\n                        </td>\r\n\r\n                        {/* 특약사항 출력용 */}\r\n                        <td colSpan=\"9\" className=\"alignLeft\" id=\"infoPadding\" hidden={!forPrint}>\r\n                            계약기간 만료 또는 종료시 사업지 주소지와 전화를 7일이내 이전해야 하고,<br />\r\n                            계약을 해지할 경우 7일이전에 서면 또는 구두 통보해야함.<br />\r\n                            <hr></hr>\r\n                            {comment}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"info\">이용범위</th>\r\n                        <td colSpan=\"9\" className=\"alignLeft\" id=\"etcInfoPadding\">\r\n                            사무공간 제공과 부대시설(회의실,접견실,휴게실,IT기기,유무선 통신망)을 이용 가능\r\n                    </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"basicInfoTitle\">센터</th>\r\n                        <td className=\"basicInfo\">(주)에스원테크</td>\r\n\r\n                        <th className=\"basicInfoTitle\">전화번호</th>\r\n                        <td colSpan=\"2\" className=\"basicInfo\">070-4355-2312</td>\r\n\r\n                        <th className=\"basicInfoTitle\">E-mail</th>\r\n                        <td colSpan=\"2\" className=\"basicInfo\">swonbiz@s-onetech.com</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"basicInfoTitle\">성명</th>\r\n                        <td className=\"basicInfo\">이정희</td>\r\n\r\n                        <th className=\"basicInfoTitle\">FAX번호</th>\r\n                        <td colSpan=\"2\" className=\"basicInfo\">070-4015-3344/02-6203-4433</td>\r\n\r\n                        <th colSpan=\"2\" className=\"info\">계약접근경로</th>\r\n                        <td hidden={forPrint}>\r\n                            <select multiple={false} onChange={onContractPathHandler} value={contractPath}>\r\n                                {contractpaths.map(item => (\r\n                                    <option key={item.key} value={item.key}>{item.value}</option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n\r\n                        {/* 계약접근경로 출력용 */}\r\n                        <td hidden={!forPrint}>\r\n                            {accessPrint}\r\n                        </td>\r\n\r\n                    </tr>\r\n\r\n\r\n                    <tr>\r\n                        <td colSpan=\"9\" className=\"alignLeft\" id=\"borderBottom\">\r\n                            -에스원비즈 삼성센터(이하 \"갑\")과 상기 회원(이하 \"을\")은 \"갑\"이 제공하는 서비스를 \"을\"이 이용함에 있어서 수반되는 사항을 본\r\n                            이용계약서 약관대로 체결하고, 본 &nbsp; 계약의 성립을 증명하기 위하여 본 이용계약서 2부를 작성하여 기명, 날인하고 각 한 부씩 보관한다.\r\n                        <br />-본 이용계약서로는 임대차계약서를 대신할 수 없음\r\n                    </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"9\" className=\"alignRight\"\r\n                            id=\"borderTopBottom\"> 2021년 &nbsp;&nbsp; {new Date().getMonth() + 1}월 &nbsp;&nbsp; {new Date().getDate()}일\r\n                    </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td colSpan=\"5\" className=\"alignLeft\" id=\"fstTextSpacing\">\r\n\r\n                            갑: &nbsp; &nbsp; &nbsp;\r\n                        서울특별시 강남구 봉은사로 63길 11 명화빌딩 3, 4층(삼성동) <br />\r\n\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;㈜ 에스원테크 최현수 (인)<br />\r\n\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;계좌번호 : 우리은행 1005-002-433395<br />\r\n\r\n                        </td>\r\n                        <td colSpan=\"4\" className=\"alignLeft\" id=\"sndTextSpacing\">\r\n                            을 :&nbsp; &nbsp; &nbsp;\r\n                            {zipcode} {empAddress} {empDetailAddress}<br />\r\n                            &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {memberNm} {empIdName} (인)<br />\r\n                            <span id=\"hidden\">spacing</span>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n\r\n            <div className=\"btn-center\" hidden={forPrint}>\r\n                {/* 신규계약 */}\r\n                <input type=\"button\" hidden={props.newDataForm === 'N' || props.cDataForm === 'I'}\r\n                    onClick={temporaryStorage} value=\"임시저장\" />\r\n                <input type=\"button\" className=\"new\"\r\n                    hidden={props.newDataForm === 'N' || props.cDataForm === 'I'}\r\n                    onClick={onSubmitHandler} value=\"저장\" />\r\n\r\n                <input type=\"button\" className=\"memberId\" hidden={props.newDataForm !== 'N'}\r\n                    onClick={newMemberIdStorage} value=\"저장\" />\r\n\r\n                {/* 가계약을 확정으로  / 수정한거 저장하기 */}\r\n                <input type=\"button\" className=\"contractId\" hidden={props.cDataForm !== 'I'}\r\n                    onClick={newContractIdStorage} value=\"저장\" />\r\n\r\n\r\n                {/* <input type=\"button\" className=\"contractId\" hidden={props.cDataForm !== 'I'}\r\n                    onClick={newMemberModifyStorage} value=\"수정하기\" /> */}\r\n\r\n                <input type=\"button\" onClick={onPrintHandler} value=\"출력\" />\r\n                <input type=\"button\" onClick={onleaseAgreementHandler} id=\"btnWidth\" value=\"임대차 계약서\" />\r\n\r\n                {/* <input type=\"button\" className=\"memberId\" hidden={props.newDataForm !== 'N'}\r\n                    onClick={newEndHandler} value=\"종료\" /> */}\r\n                <input type=\"button\" className=\"contractId\" hidden={props.cDataForm !== 'I'}\r\n                    onClick={newEndHandler} value=\"종료\" />\r\n                <input type=\"button\" hidden={userStatus !== 'T'}\r\n                    onClick={onDeleteHandler} value=\"삭제\" />\r\n            </div>\r\n\r\n            {/* <input type=\"button\" onClick = {onPrintSheetHandler} hidden = {!forPrint} value=\"출력\" /> */}\r\n\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={printSheetOpen}\r\n                onClose={onPrintSheetClose}>\r\n                <S010100010 dataNum={rNum} cDataForm={'I'} />\r\n                {/* ref={printArea} */}\r\n                <DialogActions>\r\n                    <input type=\"button\" onClick={onPrintSheetClose} color=\"primary\" value=\"닫기\" hidden={forPrint} />\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={leaseAgreementOpen}\r\n                onClose={onleaseAgreementClose}>\r\n                <LeaseAgreement dataNum={rNum} />\r\n                <DialogActions>\r\n                    {/* <input type=\"button\" onClick={onleaseAgreementClose} color=\"primary\" value=\"닫기\" hidden={forPrint} /> */}\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </form>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default S010100010;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100090.js",["210","211","212"],"import React, { Fragment, useState } from 'react';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport Button from '@material-ui/core/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\n\r\nimport { DatePicker } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\n\r\n// //<!--켈린더 라이브러리시작\r\n// import DatePicker, { registerLocale } from \"react-datepicker\";\r\n// import ko from 'date-fns/locale/ko';\r\n// registerLocale(\"ko\", ko);\r\n// //켈린더 라이브러리 끝-->\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}));\r\n\r\n\r\nfunction S010100090(props) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n\r\n    const [staffName, setStaffName] = useState('')\r\n    const [staffClass, setStaffClass] = useState('')\r\n    const [closeStatus, setCloseStatus] = useState('')\r\n\r\n\r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date('2020/01/01'));\r\n    const [endDate, setEndDate] = useState(new Date('2022/01/01'));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n    }\r\n    //onSubmit끝-->\r\n\r\n    const staffNameHandler = (event) => {\r\n        setStaffName(event.currentTarget.value);\r\n    }\r\n\r\n    const staffClassHandler = (event) => {\r\n        setStaffClass(event.currentTarget.value);\r\n    }\r\n\r\n    const closeStatusHandler = (event) => {\r\n        setCloseStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onRegistHandler = (event) => {\r\n\r\n    }\r\n    const onModifyHandler = (event) => {\r\n\r\n    }\r\n    const onApprovalHandler = (event) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단파란툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                            Dashboard\r\n          </Typography>\r\n                        <IconButton color=\"inherit\">\r\n                            <Badge badgeContent={4} color=\"secondary\">\r\n                                <NotificationsIcon />\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/* 왼쪽 메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>{mainListItems}</List>\r\n                    <Divider />\r\n                    <List>{secondaryListItems}</List>\r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <form onSubmit={onSubmitHandler}>\r\n\r\n\r\n\r\n                                                                            성명&nbsp;\r\n                                   <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                             value={staffName} id=\"staffName\" name=\"staffName\" \r\n                                             onChange={staffNameHandler} />\r\n\r\n                                    &nbsp;\r\n\r\n\r\n                                    입사일자   &nbsp;\r\n                                    {/* date클릭할 때 고정 */}\r\n                                        <DatePicker\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(date)}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                        />&nbsp; ~ &nbsp;\r\n                                        <DatePicker\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(date)}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            minDate={startDate}\r\n                                        />\r\n\r\n                                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                                        &nbsp;\r\n\r\n                                        직원구분&nbsp;\r\n                                        <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                            multiple={false} onChange={staffClassHandler} value={staffClass}>\r\n                                                {/* {paymentState.map(item => ( \r\n                                                    <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                                                ))} */}\r\n                                        </Form.Control>\r\n                                       &nbsp;\r\n                                        종료&nbsp;\r\n                                        <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                            multiple={false}  onChange={closeStatusHandler} value={closeStatus}>\r\n                                                {/* {paymentState.map(item => ( \r\n                                                    <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                                                ))} */}\r\n                                        </Form.Control>\r\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                        <Button variant=\"contained\" style={{ width: 80 }} color=\"primary\" href=\"#contained-buttons\">\r\n                                        조회\r\n                                        </Button>\r\n\r\n\r\n                                    </form>\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                            <table className=\"btn\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <td >\r\n                                                <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" href=\"#contained-buttons\"> 등록 </Button>\r\n                                                <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" href=\"#contained-buttons\"> 수정 </Button>\r\n                                                <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" href=\"#contained-buttons\"> 승인 </Button>\r\n                                                <Button variant=\"contained\" style={{ width: 140 }} color=\"primary\" href=\"#contained-buttons\"> 엑셀다운로드 </Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </thead>\r\n                                </table>\r\n\r\n\r\n                            {/* 결과 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                <React.Fragment>\r\n                                            <Title>직원 현황</Title>\r\n                                            <Table size=\"small\">\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell>선택</TableCell>\r\n                                                    <TableCell>직번</TableCell>\r\n                                                    <TableCell>성명</TableCell>\r\n                                                    <TableCell>주민번호</TableCell>\r\n                                                    <TableCell>부서</TableCell>\r\n                                                    <TableCell>연락처</TableCell>\r\n                                                    <TableCell>E-mail</TableCell>\r\n                                                    <TableCell>직원구분</TableCell>\r\n                                                    <TableCell>승인여부</TableCell>\r\n                                                    <TableCell>직급</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n\r\n                                            <TableBody>\r\n                                           \r\n                                            </TableBody>\r\n                                            </Table>\r\n                                            \r\n                                        </React.Fragment>\r\n                \r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Box pt={4}>\r\n\r\n                        </Box>\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100090;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100040.js",["213","214","215","216","217"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport S010100010 from './S010100010';\r\nimport S010100050 from './S010100050';\r\nimport './css/S010100040.css';\r\nimport axios from \"axios\";\r\nimport ReactPaginate from 'react-paginate';\r\n\r\n//엑셀다운로드\r\nimport xlsx from 'xlsx';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n//모달창 라이브러리 끝-->\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport Button from '@material-ui/core/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}));\r\n\r\n// let memberName = '';\r\n// let memberEmpHp = '';\r\nlet memberId = '';\r\n\r\nfunction S010100040(props) {\r\n\r\n    const [memberNm, setMemberNm] = useState('')\r\n    const [regNo, setRegNo] = useState('')\r\n    const [memberTp, setMemberTp] = useState('')\r\n    const [contractStatus, setContractStatus] = useState('')\r\n    const [memberSt, setMemberSt] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [numForDetailModal, setNumForDetailModal] = useState('')\r\n    const [empHpForDetailModal, setEmpHpForDetailModal] = useState('')\r\n    const [tbMember, setTbMember] = useState([].slice(0,5))\r\n\r\n    //select박스\r\n    const [memberStatus, setMemberStatus] = useState([{}]);\r\n    const [memberType, setMemberType] = useState([{}]);\r\n\r\n    //<!--모달창 속성 및 이벤트\r\n    const [open, setOpen] = React.useState(true);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n\r\n    const [memberIdModal, setMemberIdModal] = useState(0);\r\n\r\n    const classes = useStyles();\r\n    const [modalOpen, setModalOpen] = React.useState(false);\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    //select박스\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/memStList/selectMemberTp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('ask_tp',response.data.rows);\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n\r\n                        }));\r\n\r\n                    setMemberType(arr);\r\n\r\n                } else {\r\n                    alert(\"회원상태 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    const endStatus = [{ key: '전체', value: '전체' },\r\n    { key: 'Y', value: 'Y' },\r\n    { key: 'N', value: 'N' }]\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/memStList/selectMemberSt')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('ask_tp',response.data.rows);\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n\r\n                        }));\r\n\r\n                    setMemberStatus(arr);\r\n\r\n                } else {\r\n                    alert(\"회원상태 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    //조회\r\n    const memberList = () => {\r\n        const body = {\r\n            memberNm,\r\n            regNo,\r\n            name,\r\n            memberTp,\r\n            contractStatus,\r\n            memberSt\r\n        }\r\n\r\n        axios.post('/api/memStList/searchMember', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('tb_member',response.data.rows);\r\n                    setTbMember(response.data.rows);\r\n                } else {\r\n                    alert(\"데이터 목록을 가져오는 것을 실패하였습니다.\")\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        memberList();\r\n    }, [])\r\n\r\n    const onSearchSubmitHandler = (event) => {\r\n        memberList();\r\n    }\r\n\r\n    const onHandleClickOpen = () => {\r\n        setStoreOpen(true);\r\n    };\r\n\r\n    const onHandleClickClose = () => {\r\n        setStoreOpen(false);\r\n        memberList();\r\n    }\r\n\r\n    const memberStHandler = (event) => {\r\n        setMemberSt(event.currentTarget.value);\r\n    }\r\n\r\n    const nameHandler = (event) => {\r\n        setName(event.currentTarget.value);\r\n    }\r\n\r\n    const memberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const regNoHandler = (event) => {\r\n        setRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const memberTpHandler = (event) => {\r\n        setMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n    const contractStatusHandler = (event) => {\r\n        setContractStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onHandleDetailClickOpen = (event) => {\r\n        memberId = event.target.id;\r\n        //memberName = event.target.innerHTML;\r\n        //memberIdM = event.target.className;\r\n\r\n        //setEmpHpForDetailModal(memberEmpHp);\r\n        //setNumForDetailModal(memberName);\r\n        setMemberIdModal(memberId);\r\n        //console.log();\r\n        setModalOpen(true);\r\n    }\r\n\r\n    const onHandleDetailClickClose = () => {\r\n        memberList();\r\n        setModalOpen(false);\r\n    }\r\n\r\n    const onSNSHandler = (event) => {\r\n\r\n    }\r\n\r\n    const onEmailHandler = (event) => {\r\n\r\n    }\r\n\r\n    // 엑셀다운로드\r\n    const excelHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(tbMember);\r\n\r\n        ['NO', '사업자번호', '회원명', '회원구분', '상태', '대표자 성명', '대표자 연락처', '대표자 E-mail', '종료여부']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][0] = { hidden: true };\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"회원현황.xlsx\");\r\n    }\r\n\r\n    const [pageNumber,setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    \r\n    const displayMemSt = tbMember.slice(pagesVisited,pagesVisited + usersPerPage).map((tbMember, index) => {\r\n        return (\r\n            <TableRow key={index}>\r\n            <TableCell id={tbMember.MEMBER_ID} >{index + 1}</TableCell>\r\n            <TableCell>{tbMember.MEMBER_NM}</TableCell>\r\n            <TableCell>{tbMember.REG_NO}</TableCell>\r\n            <TableCell onClick={onHandleDetailClickOpen} className='underLineForDetail' id={tbMember.MEMBER_ID}>{tbMember.NAME}</TableCell>\r\n            <TableCell>{tbMember.EMP_HP}</TableCell>\r\n            <TableCell>{tbMember.EMP_EMAIL}</TableCell>\r\n            <TableCell>{tbMember.MEMBER_TP}</TableCell>\r\n            <TableCell>{tbMember.MEMBER_ST}</TableCell>\r\n            <TableCell>{tbMember.END_FLAG}</TableCell>\r\n            </TableRow>\r\n         )\r\n    });\r\n\r\n \r\n\r\n    const pageCount = Math.ceil(tbMember.length/usersPerPage);\r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단파란툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                            Dashboard\r\n                        </Typography>\r\n                        <IconButton color=\"inherit\">\r\n                            <Badge badgeContent={4} color=\"secondary\">\r\n                                <NotificationsIcon />\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/* 왼쪽 메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>{mainListItems}</List>\r\n                    <Divider />\r\n                    <List>{secondaryListItems}</List>\r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper style={{ padding: 16 }}>\r\n                                    <form onSubmit={onSearchSubmitHandler}>\r\n                                        회원명&nbsp;\r\n                                            <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                            value={memberNm} id=\"memberNm\" name=\"memberNm\" onChange={memberNmHandler} />\r\n\r\n                   &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                    사업자번호 &nbsp;\r\n                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                            value={regNo} id=\"regNo\" name=\"regNo\"\r\n                                            onChange={regNoHandler} />\r\n\r\n                   &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                    대표자명 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                            value={name} id=\"name\" name=\"name\"\r\n                                            onChange={nameHandler} />\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    회원구분 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                            multiple={false} onChange={memberTpHandler} value={memberTp}>\r\n                                            {memberType.map(item => (\r\n                                                <option key={item.key} value={item.key}>{item.value}</option>\r\n                                            ))}\r\n\r\n                                        </Form.Control>\r\n\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    종료 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                            multiple={false} onChange={contractStatusHandler} value={contractStatus}>\r\n                                            {endStatus.map(item => (\r\n                                                <option key={item.key} value={item.key}>{item.value}</option>\r\n                                            ))}\r\n\r\n                                        </Form.Control>\r\n\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    상태 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                            multiple={false} onChange={memberStHandler} value={memberSt}>\r\n                                            {memberStatus.map(item => (\r\n                                                <option key={item.key} value={item.key}>{item.value}</option>\r\n                                            ))}\r\n\r\n                                        </Form.Control>\r\n\r\n\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                    <Button variant=\"contained\" style={{ width: 80 }} color=\"primary\" onClick={onSearchSubmitHandler}>\r\n                                            조회\r\n                                    </Button>\r\n                                    </form>\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                            <table className=\"btn\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td colSpan=\"5\">\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" onClick={onHandleClickOpen} >\r\n                                                신규회원\r\n                                            </Button>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" onClick={onSNSHandler} >\r\n                                                SNS\r\n                                            </Button>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" onClick={onEmailHandler} >\r\n                                                메일전송\r\n                                            </Button>\r\n                                        </td>\r\n                                    \r\n                                        <td  id=\"alignRight\">\r\n                                           \r\n                                        </td>\r\n                                        <td  id=\"alignRight\">\r\n                                           \r\n                                        </td>\r\n                                        <td colSpan = \"5\" id=\"alignRight\">\r\n                                            <Button variant=\"contained\" style={{ width: 140 }} color=\"primary\" onClick={excelHandler}>\r\n                                                엑셀다운로드\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </thead>\r\n                            </table>\r\n\r\n                            {/* 결과 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                            <Title>회원 현황</Title>\r\n                                            <Table size=\"small\">\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell rowSpan=\"2\">No</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">회원명</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">사업자번호</TableCell>\r\n                                                    <TableCell colSpan=\"3\">대표자</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">회원구분</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">상태</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">종료여부</TableCell>\r\n                                                </TableRow>\r\n                                                <TableRow>\r\n                                                    <TableCell>성명</TableCell>\r\n                                                    <TableCell>연락처</TableCell>\r\n                                                    <TableCell>E-mail</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                            {displayMemSt}\r\n                                            </TableBody>\r\n                                            </Table>\r\n                                            \r\n                                        </React.Fragment>\r\n\r\n                                        <div id = \"reactPage\">\r\n                                                <ReactPaginate\r\n                                                    previousLabel = {\"Previous\"}\r\n                                                    nextLabel = {\"Next\"}\r\n                                                    pageCount = {pageCount}\r\n                                                    onPageChange = {changePage}\r\n                                                    containerClassName={\"paginationBtns\"}\r\n                                                    previousLinkClassName={\"previousBtn\"}\r\n                                                    nextLinkClassName={\"nextBtn\"}\r\n                                                    disabledClassName={\"paginationDisabled\"}\r\n                                                    activeClassName={\"paginationActive\"}   \r\n                                                />\r\n                                            </div>\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={modalOpen}\r\n                onClose={onHandleDetailClickClose}>\r\n                <S010100050 dataMemId={memberIdModal} dataForm={\"U\"} />\r\n                {/* dataName={numForDetailModal} dataEmpHp={empHpForDetailModal} */}\r\n                <DialogActions>\r\n                    <input type=\"button\" id=\"contractBtn\" onClick={onHandleDetailClickClose} color=\"primary\" value='닫기' />\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={storeOpen}\r\n                onClose={onHandleClickClose}>\r\n                <S010100010 />\r\n                <DialogActions>\r\n                    <input type=\"button\" onClick={onHandleClickClose} color=\"primary\" value=\"닫기\" />\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100040;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100060.js",["218","219"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport S010100070 from './S010100070';\r\nimport ReactPaginate from 'react-paginate';\r\nimport moment from 'moment';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport Button from '@material-ui/core/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\n\r\n//엑셀다운로드\r\nimport xlsx from 'xlsx';\r\n\r\nimport { DatePicker } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\n// //<!--켈린더 라이브러리시작\r\n// import DatePicker, { registerLocale } from 'react-datepicker';\r\n// import ko from 'date-fns/locale/ko';\r\n// registerLocale('ko', ko);\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}));\r\n\r\n\r\n\r\n\r\n//켈린더 라이브러리 끝-->\r\nlet paymentState = [{ key: '전체', value: '전체' },\r\n{ key: 'Y', value: 'Y' },\r\n{ key: 'N', value: 'N' }]\r\n\r\nfunction S010100060(props) {\r\n\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const [userName, setUserName] = useState('');\r\n    const [paymentStatus, setPaymentStatus] = useState('');\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(moment().date('01')));\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    //캘린더 속성 끝--> \r\n\r\n    const [payStatusList, setPayStatusList] = useState([].slice(0, 5));\r\n    const [storeOpen, setStoreOpen] = useState(false);\r\n    const [dataAllContract, setDataAllContract] = useState('');\r\n\r\n    useEffect(() => {\r\n        // let startDates = startDate.getFullYear() + '.' + (startDate.getMonth() + 1) + '.' + startDate.getDate();\r\n        // let endDates = endDate.getFullYear() + '.' + (endDate.getMonth() + 1) + '.' + endDate.getDate();\r\n\r\n        let body = {\r\n            startDate: startDate,\r\n            endDate: endDate\r\n        }\r\n\r\n        console.log('startDate',startDate);\r\n        console.log('endDate',endDate);\r\n\r\n        axios.post('/api/payStList/list', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    // console.log('list60', response.data.rows);\r\n                    setPayStatusList(response.data.rows);\r\n                } else {\r\n                    alert('데이터 조회를 실패하였습니다.')\r\n                }\r\n\r\n            })\r\n    }, [])\r\n\r\n    const paymentSearchHandler = () => {\r\n\r\n        // let startDates = startDate.getFullYear() + '.' + (startDate.getMonth() + 1) + '.' + startDate.getDate();\r\n        // let endDates = endDate.getFullYear() + '.' + (endDate.getMonth() + 1) + '.' + endDate.getDate();\r\n\r\n        let body = {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            userName: userName,\r\n            paymentStatus: paymentStatus\r\n        }\r\n\r\n        console.log(body);\r\n        axios.post('/api/payStList/list', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('list60', response.data.rows);\r\n                    setPayStatusList(response.data.rows);\r\n                } else {\r\n                    alert('데이터 조회를 실패하였습니다.')\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    //<!--onSubmit\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n    }\r\n    //onSubmit끝-->\r\n\r\n    const nameSearchHandler = (event) => {\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler = (event) => {\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onPayHandleClickClose = () => {\r\n        setStoreOpen(false);\r\n        paymentSearchHandler();\r\n    }\r\n\r\n\r\n    const handleToggle = (e) => {\r\n        //console.log('event', e.target.id);\r\n        const currentIndex = checked.indexOf(e.target.id);\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        const newChecked = checked;\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(e.target.id)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n\r\n        setChecked(newChecked);\r\n\r\n        // console.log('currentIndex', currentIndex);\r\n        // console.log('checked', checked);\r\n\r\n    }\r\n\r\n    const onPaymenthandler = () => {\r\n        if (checked.length === 0) {\r\n            alert('선택하세요');\r\n        } else if (checked.length > 1) {\r\n            alert('하나만 체크하세요');\r\n        } else {\r\n            setDataAllContract(checked);\r\n            //console.log(checked);\r\n            setStoreOpen(true);\r\n        }\r\n    }\r\n\r\n    const excelHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(payStatusList);\r\n        console.log(payStatusList);\r\n\r\n        ['회원명', '납부예정일', '납부여부', '납부일자', '계약기간', '계약기간', '대표자 성명', '대표자 연락처', '대표자 E-mail', '계약ID']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][9] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n        xlsx.writeFile(wb, '고객납부현황.xlsx');\r\n\r\n    }\r\n   \r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n\r\n    const displayPayStList = payStatusList.slice(pagesVisited, pagesVisited + usersPerPage).map((payStatusList, index) => {\r\n        return (\r\n            <TableRow key={payStatusList.CONTRACT_ID}>\r\n                <TableCell><input type='checkbox' onChange={handleToggle} id={payStatusList.CONTRACT_ID} /></TableCell>\r\n                <TableCell>{payStatusList.CONTRACT_ID}</TableCell>\r\n                <TableCell>{payStatusList.MEMBER_NM}</TableCell>\r\n                <TableCell>{payStatusList.PAY_PLAN_DATE}</TableCell>\r\n                <TableCell>{payStatusList.PAYED_FLAG}</TableCell>\r\n                <TableCell>{payStatusList.PAYED_DATE}</TableCell>\r\n                <TableCell>{payStatusList.START_DATE} ~ {payStatusList.END_DATE}</TableCell>\r\n                <TableCell>{payStatusList.NAME}</TableCell>\r\n                <TableCell>{payStatusList.EMP_HP}</TableCell>\r\n                <TableCell>{payStatusList.EMP_EMAIL}</TableCell>\r\n            </TableRow>\r\n        )\r\n    });\r\n\r\n\r\n    const pageCount = Math.ceil(payStatusList.length / usersPerPage);\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단파란툴바 */}\r\n                <AppBar position='absolute' className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge='start'\r\n                            color='inherit'\r\n                            aria-label='open drawer'\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component='h1' variant='h6' color='inherit' noWrap className={classes.title}>\r\n                            Dashboard\r\n          </Typography>\r\n                        <IconButton color='inherit'>\r\n                            <Badge badgeContent={4} color='secondary'>\r\n                                <NotificationsIcon />\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/* 왼쪽 메뉴바 */}\r\n                <Drawer\r\n                    variant='permanent'\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>{mainListItems}</List>\r\n                    <Divider />\r\n                    <List>{secondaryListItems}</List>\r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth='lg' className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <form\r\n                                        onSubmit={onSubmitHandler}\r\n                                    >\r\n\r\n                                        납부예정일&nbsp;\r\n                   \r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(date)}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            defaultValue={moment(moment().date('01'),'YYYY-MM-DD')}\r\n                                        /> &nbsp;~&nbsp;\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(date)}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            minDate={startDate}\r\n                                            defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                        />\r\n\r\n                                        {/* <input type='image' src='/examples/images/submit_icon.png' alt='제출버튼' height='30' width='30'/> */}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    회원명&nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size='sm' type='text'\r\n                                            value={userName}\r\n                                            id='userName'\r\n                                            name='userName'\r\n                                            onChange={nameSearchHandler} />\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    납부여부&nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size='sm' as='select'\r\n                                            multiple={false} onChange={paymentStatusHandler} value={paymentStatus}>\r\n                                            {paymentState.map(item => (\r\n                                                <option key={item.key} value={item.key}>{item.value}</option>\r\n                                            ))}\r\n\r\n                                        </Form.Control>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <Button variant='contained' style={{ width: 80 }} color='primary' onClick={paymentSearchHandler}>\r\n                                            조회\r\n                    </Button>\r\n\r\n                                    </form>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                            <table className='btn'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <Button variant='contained' style={{ width: 80 }} color='primary' onClick = {onPaymenthandler}> 납부 </Button>\r\n                                            <Button variant='contained' style={{ width: 140 }} color='primary' onClick = {excelHandler} >엑셀다운로드 </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </thead>\r\n                            </table>\r\n\r\n                            {/* 결과 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                        <Title>납부 현황</Title>\r\n                                        <Table size='small'>\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell rowSpan='2'>선택</TableCell>\r\n                                                    <TableCell rowSpan='2'>No</TableCell>\r\n                                                    <TableCell rowSpan='2'>회원명</TableCell>\r\n                                                    <TableCell rowSpan='2'>납부예정일</TableCell>\r\n                                                    <TableCell rowSpan='2'>납부여부</TableCell>\r\n                                                    <TableCell rowSpan='2'>납부일자</TableCell>\r\n                                                    <TableCell rowSpan='2'>계약기간</TableCell>\r\n                                                    <TableCell colSpan='3'>대표자</TableCell>\r\n                                                </TableRow>\r\n                                                <TableRow>\r\n                                                    <TableCell>성명</TableCell>\r\n                                                    <TableCell>연락처</TableCell>\r\n                                                    <TableCell>E-mail</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {displayPayStList}\r\n                                            </TableBody>\r\n                                        </Table>\r\n\r\n                                    </React.Fragment>\r\n                                    <div id='reactPage'>\r\n                                        <ReactPaginate\r\n                                            previousLabel={'Previous'}\r\n                                            nextLabel={'Next'}\r\n                                            pageCount={pageCount}\r\n                                            onPageChange={changePage}\r\n                                            containerClassName={'paginationBtns'}\r\n                                            previousLinkClassName={'previousBtn'}\r\n                                            nextLinkClassName={'nextBtn'}\r\n                                            disabledClassName={'paginationDisabled'}\r\n                                            activeClassName={'paginationActive'}\r\n                                        />\r\n                                    </div>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n\r\n\r\n            <Dialog\r\n                maxWidth={'lg'}\r\n                open={storeOpen}\r\n                onClose={onPayHandleClickClose}>\r\n                <S010100070 dataContracId={dataAllContract} />\r\n                <DialogActions>\r\n                    <input type='button' onClick={onPayHandleClickClose} color='primary' value='닫기'>\r\n                    </input>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100060;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100130.js",["220","221","222","223"],"//<<상담현황 페이지>>\r\nimport React, { Fragment, useEffect, useState } from 'react';\r\nimport './css/S010100130.css';\r\nimport axios from 'axios';\r\nimport S010100140 from './S010100140';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport 'react-datepicker/dist/react-datepicker-cssmodules.min.css';\r\nimport moment from 'moment';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\n\r\nimport { DatePicker } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\n\r\n//<!--켈린더 라이브러리시작\r\n// import DatePicker, { registerLocale } from \"react-datepicker\";\r\n//import ko from 'date-fns/locale/ko';\r\n//registerLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n//엑셀다운로드\r\nimport xlsx from 'xlsx';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n//모달창 라이브러리 끝-->\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 200,\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n    \r\n    // TableHead:{\r\n    //     backgroundColor:'#3f51b5'\r\n    // },\r\n}));\r\n\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\nlet chkSt = '';\r\n\r\nfunction S010100130(props) {\r\n\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n    const [mOpen, setMOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const [data] = useState('I');\r\n\r\n    const [numForDetail, setNumForDetail] = useState('');\r\n    const [tb_s10_ask010, setTb_s10_ask010] = useState([].slice(0,5));\r\n    const [deleteAskOpen, setDeleteAskOpen] = React.useState(false);\r\n    const [ask_tps, setAsk_tps] = useState([{}])\r\n\r\n    const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endAsk_date, setEndAsk_date] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        searchAsk();\r\n    }, []);\r\n\r\n    const searchAsk = () => {\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n        console.log('startAsk_date',startAsk_date);\r\n        console.log('endAsk_date',endAsk_date);\r\n\r\n        axios.post(\"/api/askStList/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                //console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n    }\r\n\r\n    //select-option\r\n    const [ask_tp, setAsk_tp] = useState('')\r\n\r\n    //문의 구분\r\n    useEffect(() => {\r\n        axios.post('/api/askStList/ask_tp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('Lov-ask_tp',response.data);\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                    setAsk_tps(arr);\r\n\r\n                } else {\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n    \r\n\r\n    //상담등록 모달\r\n    const onHandleClickOpen = (event) => {\r\n        //console.log('상담열기');\r\n        setStoreOpen(true);\r\n\r\n    };\r\n\r\n    const onHandleClickClose = (event) => {\r\n        setStoreOpen(false);\r\n        searchAsk();\r\n    };\r\n    \r\n\r\n    //상세보기 모달\r\n    const onDetailHandleClickOpen = (event) => {\r\n        //console.log('target',event.target.id);\r\n        num = event.target.id;\r\n        rNum = parseInt(num);\r\n        setNumForDetail(rNum);\r\n        setMOpen(true);\r\n    };\r\n\r\n    const onDetailHandleClickClose = () => {\r\n        setMOpen(false);\r\n        searchAsk();\r\n\r\n    };\r\n    \r\n    const [checkForDelete, setCheckForDelete] = useState(true);\r\n\r\n    const onDeleteHandle = () => {\r\n        setCheckForDelete(false);\r\n    }\r\n\r\n    const onBackHandle = () => {\r\n        setCheckForDelete(true);\r\n        setChecked([]);\r\n    }\r\n\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    const handleToggle = (e) => {\r\n        //console.log('event', e.target.id);\r\n\r\n\r\n        const currentIndex = checked.indexOf(e.target.id);\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        const newChecked = checked;\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(e.target.id)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setChecked(newChecked);\r\n\r\n        newChecked.length > 0 ? chkSt = 'check' : chkSt = ''; \r\n        console.log('chkSt',chkSt);\r\n        console.log('newChecked.length',newChecked.length);\r\n\r\n    }\r\n\r\n    //문의자명 속성\r\n    const [ask_name, setAsk_name] = useState(\"\")\r\n\r\n    //문의구분 select-option이벤트\r\n    const onAsk_tpHandler = (event) => {\r\n        setAsk_tp(event.currentTarget.value);\r\n    }\r\n\r\n    //문의자명 input type = \"text\"이벤트\r\n    const onAsk_nameHandler = (event) => {\r\n        setAsk_name(event.currentTarget.value);\r\n    }\r\n\r\n    const handleClose = (event) => {\r\n        setDeleteAskOpen(false);\r\n    }\r\n\r\n    const onHandleDelete = (event) => {\r\n        if(chkSt == 'check'){\r\n            setDeleteAskOpen(true);\r\n        }else{\r\n            alert('삭제할 사용자를 선택하세요.');\r\n        }\r\n    }\r\n  \r\n    const deleteHandle = (event) => {\r\n        let askIdArray = checked;\r\n       \r\n            axios.post('/api/askStList/delete', askIdArray)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                            alert('삭제하였습니다.');\r\n                            searchAsk();\r\n                    } else {\r\n                        alert(\"error\")\r\n                        \r\n                    }\r\n                })\r\n        chkSt = '';        \r\n        setDeleteAskOpen(false);\r\n\r\n        setChecked([]);\r\n        onBackHandle();\r\n    }\r\n\r\n\r\n\r\n    // 조회 \r\n    const onHandleFormSubmit = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        // if(method.valueOf('전체')||!startDate||!endDate||!searchName){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n\r\n        //console.log('ask_tp', ask_tp);\r\n        //console.log(\"조회조건\", body);\r\n        // alert('startDate day:'+startAsk_date.getDay());\r\n        // alert('endDate year:'+endAsk_date.getFullYear());\r\n        // alert('endDate day:'+endAsk_date.getDate());\r\n        // alert('endDate month:'+endAsk_date.getMonth()+1);\r\n        // alert(endAsk_date.getFullYear() + '/' + (endAsk_date.getMonth()+1) +'/'+endAsk_date.getDate());\r\n        // alert('startDate:'+startAsk_date.getMonth());\r\n\r\n        axios.post(\"/api/askStList/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                //console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    const excelHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(tb_s10_ask010);\r\n        console.log(tb_s10_ask010);\r\n\r\n        ['NO', '문의구분', '문의일자', '문의방법', '접근경로', '문의자명', '연락처']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][0] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"상담현황.xlsx\");\r\n\r\n    }\r\n\r\n\r\n    const [pageNumber,setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    \r\n    const displayUsers = tb_s10_ask010.slice(pagesVisited,pagesVisited + usersPerPage).map((tb_s10_ask010, index) => {\r\n        return (\r\n            <TableRow key={tb_s10_ask010.ASK_ID}>\r\n            <TableCell>\r\n            <input type=\"checkbox\" onChange={handleToggle} id={tb_s10_ask010.ASK_ID} />\r\n            </TableCell>\r\n            <TableCell onClick={onDetailHandleClickOpen} id={tb_s10_ask010.ASK_ID} className='underLineForDetail'>{index + 1}</TableCell>\r\n            <TableCell>{tb_s10_ask010.ASK_TP}</TableCell>\r\n            <TableCell>{tb_s10_ask010.ASK_DATE}</TableCell>\r\n            <TableCell>{tb_s10_ask010.ASK_METHOD}</TableCell>\r\n            <TableCell>{tb_s10_ask010.ASK_NAME}</TableCell>\r\n            <TableCell>{tb_s10_ask010.ASK_INFO}</TableCell>\r\n            <TableCell>{tb_s10_ask010.ASK_PATH}</TableCell>\r\n            </TableRow>\r\n        );\r\n    });\r\n   \r\n    const pageCount = Math.ceil(tb_s10_ask010.length/usersPerPage);\r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단 파란색 툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                            Dashboard\r\n                        </Typography>\r\n                        <IconButton color=\"inherit\">\r\n                            <Badge badgeContent={4} color=\"secondary\">\r\n                                <NotificationsIcon />\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {/* 왼쪽메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>{mainListItems}</List>\r\n                    <Divider />\r\n                    <List>{secondaryListItems}</List>\r\n                </Drawer>\r\n\r\n\r\n                {/* 메인화면  */}\r\n\r\n                <main className={classes.content}>\r\n                    <form onSubmit={onHandleFormSubmit}>\r\n                        <div className={classes.appBarSpacer} />\r\n                        <Container maxWidth=\"lg\" className={classes.container}>\r\n                            <Grid container spacing={3}>\r\n                                {/* Chart */}\r\n                                <Grid item xs={12}>\r\n                                    <Paper style={{ padding: 16 }}>\r\n\r\n                                        <div className=\"gridInline\">\r\n\r\n                                            문의일자\r\n                                            &nbsp;\r\n                                        \r\n                                        {/* date클릭할 때 고정 */}\r\n                                            <DatePicker\r\n                                                locale=\"ko\"\r\n                                                selected={startAsk_date}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                                                onChange={date => setStartAsk_date(date)}\r\n                                                selectsStart\r\n                                                startDate={startAsk_date}\r\n                                                // endDate={endAsk_date.setHours(9, 0, 0, 0)}\r\n                                                endDate={endAsk_date}\r\n                                                dateFormat=\"yyyy.MM.dd\"\r\n                                                defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                            />\r\n                                          &nbsp;\r\n                                        ~ &nbsp;\r\n                                        <DatePicker\r\n                                                locale=\"ko\"\r\n                                                selected={endAsk_date}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                                                onChange={date => setEndAsk_date(date)}\r\n                                                selectsEnd\r\n                                                startDate={startAsk_date}\r\n                                                endDate={endAsk_date}\r\n                                                minDate={startAsk_date}\r\n                                                defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                            />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n\r\n\r\n                                            문의구분\r\n                                            &nbsp;\r\n\r\n                                                                <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onAsk_tpHandler} value={ask_tp}>\r\n                                                                    {ask_tps.map(item => (\r\n                                                                        <option key={item.key} value={item.key}>{item.value}</option>\r\n                                                                    ))}\r\n\r\n                                                                </Form.Control>\r\n                                                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                                            문의자명\r\n                                            &nbsp;\r\n                                            <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\" type=\"text\" value={ask_name} id=\"ask_name\" name=\"ask_name\" onChange={onAsk_nameHandler} />\r\n                                            &nbsp;\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                                            <Button variant=\"contained\" style={{ width: 80, display: 'inline' }} color=\"primary\" onClick={onHandleFormSubmit}>\r\n                                                조회\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Paper>\r\n                                </Grid>\r\n\r\n                                <table className=\"btn\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <td colSpan=\"5\" >\r\n                                                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} onClick={onHandleClickOpen} >\r\n                                                    상담등록\r\n                                                </Button>\r\n                                                <Button variant=\"contained\" color=\"primary\"  style={{ width: 100 }} onClick={onHandleDelete}\r\n                                                    value=\"삭제하기\" >\r\n                                                    삭제하기\r\n                                                        </Button>\r\n                                                <Dialog\r\n                                                    open={deleteAskOpen}\r\n                                                    onClose={onHandleDelete}>\r\n                                                    <DialogTitle id=\"alert-dialog-title\">{\"체크한 행을 삭제할까요?\"}</DialogTitle>\r\n                                                    <DialogActions>\r\n                                                        <Button onClick={deleteHandle} color=\"primary\">\r\n                                                            네\r\n                                                        </Button>\r\n                                                        <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                                                            아니오\r\n                                                        </Button>\r\n                                                    </DialogActions>\r\n                                                </Dialog>\r\n                                            </td>\r\n                                            <td  id=\"alignRight\"><Button variant=\"contained\" style={{ width: 150 }} color=\"primary\" onClick={excelHandler}>엑셀다운로드</Button></td>\r\n                                        </tr>\r\n                                    </thead>\r\n                                </table>\r\n\r\n\r\n                                {/*상담현황 테이블 */}\r\n                                <Grid item xs={12}>\r\n                                    <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                            <Title>상담 현황</Title>\r\n                                            <Table size=\"small\">\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                <TableCell>선택</TableCell>\r\n                                                <TableCell>No</TableCell>\r\n                                                <TableCell>문의구분</TableCell>\r\n                                                <TableCell>문의일자</TableCell>\r\n                                                <TableCell>문의방법</TableCell>\r\n                                                <TableCell>문의자명</TableCell>\r\n                                                <TableCell>연락처</TableCell>\r\n                                                <TableCell>접근경로</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                            {/* {currentPosts} */}{ displayUsers}\r\n                                            </TableBody>\r\n                                            </Table>\r\n                                            <div id = \"reactPage\">\r\n                                                <ReactPaginate\r\n                                                    previousLabel = {\"Previous\"}\r\n                                                    nextLabel = {\"Next\"}\r\n                                                    pageCount = {pageCount}\r\n                                                    onPageChange = {changePage}\r\n                                                    containerClassName={\"paginationBtns\"}\r\n                                                    previousLinkClassName={\"previousBtn\"}\r\n                                                    nextLinkClassName={\"nextBtn\"}\r\n                                                    disabledClassName={\"paginationDisabled\"}\r\n                                                    activeClassName={\"paginationActive\"}   \r\n                                                />\r\n                                            </div>\r\n                                        </React.Fragment>\r\n                                    </Paper>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Container>\r\n                    </form>\r\n                </main>\r\n            </div>\r\n\r\n\r\n            {/* 모달창 시작*/}\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={mOpen}>\r\n                <S010100140 dataForm={\"U\"} num={numForDetail} />\r\n                <DialogActions>\r\n                    <input type=\"button\" onClick={onDetailHandleClickClose} color=\"primary\" value='닫기' />\r\n                </DialogActions>\r\n            </Dialog>\r\n            {/* // 모달창 끝 */}\r\n\r\n\r\n            {/* 모달창 시작*/}\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={storeOpen}\r\n            >\r\n                <S010100140 dataForm={data} num={numForDetail} />\r\n                <DialogActions>\r\n                    <input type=\"button\" onClick={onHandleClickClose} color=\"primary\" value='닫기' />\r\n                </DialogActions>\r\n            </Dialog>\r\n            {/* // 모달창 끝 */}\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100130;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100050.js",["224","225","226","227","228","229","230","231","232","233","234","235"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Navbar.js",[],["236","237"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100150.js",["238","239","240","241","242"],"import axios from 'axios';\r\nimport React, { Fragment } from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  \r\n}));\r\n\r\n\r\n\r\nfunction S010100150(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const [email, setEmail] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\")\r\n\r\n  const onEmailHandler = (event) => {\r\n    setEmail(event.currentTarget.value)\r\n  }\r\n\r\n  const onPasswordHandler = (event) => {\r\n    setPassword(event.currentTarget.value)\r\n  }\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    let body = {\r\n      email: email,\r\n      password: password\r\n    }\r\n\r\n    axios.post('/api/users/login', body)\r\n      .then(response => {\r\n        if (response.data.loginResult) {\r\n          alert('로그인 되었습니다.')\r\n          //props.history.push('/counseling')\r\n          console.log(response.data.loginResult)\r\n        } else {\r\n          alert('아이디와 비밀번호를 확인하세요')\r\n        }\r\n      })\r\n  }\r\n\r\n  return (\r\n\r\n    <div className={classes.root}>\r\n    {/* 백그라운드 */}\r\n    <CssBaseline />\r\n    {/* 상단파란툴바 */}\r\n    <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n      <Toolbar className={classes.toolbar}>\r\n        <IconButton\r\n          edge=\"start\"\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          onClick={handleDrawerOpen}\r\n          className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n          Dashboard\r\n        </Typography>\r\n        <IconButton color=\"inherit\">\r\n          <Badge badgeContent={4} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n      </Toolbar>\r\n    </AppBar>\r\n    {/* 왼쪽 메뉴바 */}\r\n    <Drawer\r\n      variant=\"permanent\"\r\n      classes={{\r\n        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n      }}\r\n      open={open}\r\n    >\r\n      <div className={classes.toolbarIcon}>\r\n        <IconButton onClick={handleDrawerClose}>\r\n          <ChevronLeftIcon />\r\n        </IconButton>\r\n      </div>\r\n      <Divider />\r\n      <List>{mainListItems}</List>\r\n      <Divider />\r\n      <List>{secondaryListItems}</List>\r\n    </Drawer>\r\n                    <main className={classes.content}>\r\n                      <div className={classes.appBarSpacer} />\r\n                      <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                         \r\n                          {/* <Grid item xs={12}>\r\n                            <Paper className={classes.paper}>\r\n                            \r\n                            </Paper>\r\n                      </Grid> */}\r\n                        \r\n                         \r\n                          <Grid item xs={12}>\r\n                            <Paper className={classes.paper}>\r\n                            <div className={classes.root}>{\"준비중인 페이지 입니다.\"}</div>\r\n                            </Paper>\r\n                          </Grid>\r\n                        </Grid>\r\n                        <Box pt={4}>\r\n                      \r\n                        </Box>\r\n                      </Container>\r\n                    </main>\r\n  </div>\r\n\r\n        \r\n        // <form \r\n        //   onSubmit={onSubmitHandler}\r\n        // >\r\n\r\n        //   <label style={{ fontFamily: 'Jua', width: '180px' }}>Email</label>\r\n        //   <input style={{ width: \"300px\" }} type=\"email\" value={email} onChange={onEmailHandler} />\r\n        //   <label style={{ fontFamily: 'Jua' }}>Password</label>\r\n        //   <input style={{ width: \"300px\" }} type=\"password\" value={password} onChange={onPasswordHandler} />\r\n        //   <br />\r\n        //   <Button type=\"submit\">Login</Button>\r\n\r\n\r\n        // </form>   \r\n      \r\n    )\r\n}\r\n\r\nexport default S010100150;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100140.js",["243","244","245","246"],"//<<상담등록 페이지>>\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport './css/S010100140.css';\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko'\r\nregisterLocale(\"ko\", ko);\r\n//datepicker끝\r\n\r\n\r\n\r\nfunction S010100140(props) {\r\n    //console.log(props.dataForm);\r\n    //console.log(props.num);\r\n\r\n\r\n    const rNum = props.num;\r\n    //console.log('rNum',rNum);\r\n    //const modal = props.modal;\r\n\r\n    useEffect(() => {\r\n        //if(isNaN(rNum)){ return alert('숫자를 클릭하세요') }\r\n\r\n        if (props.dataForm === 'U') {\r\n\r\n            axios.get(`/api/askStList/tb_s10_ask010_by_id?id=${rNum}&type=single`)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        //console.log(response.data)\r\n                        const askTp = (response.data.rows[0].ASK_TP);\r\n                        const askDate = (response.data.rows[0].ASK_DATE);\r\n                        const askMethod = (response.data.rows[0].ASK_METHOD);\r\n                        const askName = (response.data.rows[0].ASK_NAME);\r\n                        const askPath = (response.data.rows[0].ASK_PATH);\r\n                        const askInfo = (response.data.rows[0].ASK_INFO);\r\n                        const askContent = (response.data.rows[0].ASK_CONTENT);\r\n\r\n                        // setModalAskDate(askDate);\r\n                        //console.log('askDate', askDate);\r\n                        setModalAskTp(askTp);\r\n                        setModalAskName(askName);\r\n                        setModalAskMethod(askMethod);\r\n                        setModalAskPath(askPath);\r\n                        setModalAskInfo(askInfo);\r\n                        setModalAskContent(askContent);\r\n                        setStartDate(new Date(askDate));\r\n                    } else {\r\n                        alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                    }\r\n                })\r\n        }\r\n\r\n    }, [])\r\n\r\n    //select-option\r\n    const [modalAskTp, setModalAskTp] = useState('')\r\n    const [modalAskMethod, setModalAskMethod] = useState('')\r\n    const [modalAskPath, setModalAskPath] = useState('')\r\n\r\n\r\n    const [modalContractTpLov, setModalContractTpLov] = useState([{ key: '', value: '선택' }])\r\n    const [modalAskMethodLov, setModalAskMethodLov] = useState([{ key: '', value: '선택' }])\r\n    const [modalAccessPathLov, setModalAccessPathLov] = useState([{ key: '', value: '선택' }])\r\n\r\n    useEffect(() => {\r\n        getContractTpLov();\r\n        getAskMethodLov();\r\n        getAccessPathLov();\r\n    }, []);\r\n\r\n    const getContractTpLov = () => {\r\n        getLovByCdTp('CONTRACT_TP', 'ASK');\r\n    };\r\n    const getAskMethodLov = () => {\r\n        getLovByCdTp('ASK_METHOD', '');\r\n    };\r\n    const getAccessPathLov = () => {\r\n        getLovByCdTp('ACCESS_PATH', 'ASK');\r\n    };\r\n\r\n    /**\r\n     * desc : LOV에 필요한 항목을 받아 DB조회 후 조회값을 반환하는 로직\r\n     * */\r\n    async function getLovByCdTp(cdTp, attribute2) {\r\n        let arr = [{ key: '선택', value: '선택' }];\r\n        return await axios.post('/api/askStList/selectTest', { firstVal: cdTp, secondVal: attribute2 })\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //console.log('modalAskTp',response.data.rows);\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n                        }));\r\n                    //return arr;\r\n                    switch (cdTp) {\r\n                        case 'CONTRACT_TP': setModalContractTpLov(arr); break;\r\n                        case 'ASK_METHOD': setModalAskMethodLov(arr); break;\r\n                        case 'ACCESS_PATH': setModalAccessPathLov(arr); break;\r\n                    }\r\n                    if (cdTp === 'CONTRACT_TP')\r\n                        setModalAccessPathLov(arr);\r\n                } else {\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\")\r\n                }\r\n            }).catch(() => {\r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n            })\r\n        return arr;\r\n        console.log('arr', arr);\r\n    }\r\n\r\n\r\n    //datepicker속성 및 이벤트 시작\r\n    //const [modalAskDate, setModalAskDate] = useState(new Date());\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    //datepicker속성 및 이벤트 끝\r\n\r\n\r\n    //input type =\"text\"\r\n    const [modalAskName, setModalAskName] = useState(\"\")\r\n    const [modalAskInfo, setModalAskInfo] = useState(\"\")\r\n    const [modalAskContent, setModalAskContent] = useState(\"\")\r\n\r\n    //select-option 이벤트들\r\n    const onAskTpHandler = (event) => {\r\n        //console.log(event.currentTarget.value);\r\n        setModalAskTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskMethodHandler = (event) => {\r\n        setModalAskMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskPathHandler = (event) => {\r\n        setModalAskPath(event.currentTarget.value);\r\n    }\r\n\r\n    //input type = \"text\" 이벤트들\r\n    const onAskNameHandler = (event) => {\r\n        setModalAskName(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskInfoHandler = (event) => {\r\n        setModalAskInfo(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskContentHandler = (event) => {\r\n        setModalAskContent(event.currentTarget.value);\r\n    }\r\n\r\n    const onChangeHandler = (event) => {\r\n        // DatePicker.value\r\n    }\r\n\r\n    const onModifyHandler = () => {\r\n\r\n        const body = {\r\n            modalAskId: rNum,\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: startDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n\r\n        axios.post('/api/askStList/modify', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('정상적으로 수정되었습니다.')\r\n                } else {\r\n                    alert('수정에 실패하였습니다.')\r\n                }\r\n            })\r\n\r\n\r\n    }\r\n\r\n    //상담등록저장버튼클릭시\r\n    const onHandleSubmit = (event) => {\r\n        event.preventDefault();\r\n        //   //문의구분 NUll체크\r\n        if (!modalAskTp || modalAskTp === '선택') {\r\n            //alert('modalAskTp: '+modalAskTp);\r\n            return alert(\"문의구분을 선택하세요.\");\r\n        }\r\n\r\n        //문의방법 NUll체크\r\n        if (!modalAskMethod) {\r\n            //alert('111');\r\n            //alert((modalAskMethod == null)+ ',' + (modalAskMethod == '' ));\r\n            return alert(\"문의방법을 선택하세요.\");\r\n        }\r\n\r\n        //접근경로 NUll체크\r\n        if (!modalAskPath) {\r\n            return alert(\"접근경로를 선택하세요.\");\r\n        }\r\n\r\n        //서버에 채운 값들을 request로 보낸다.\r\n        const body = {\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: startDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n        //console.log('setModalAskDate',setModalAskDate);\r\n\r\n\r\n        axios.post('/api/askStList/insert', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('정상적으로 등록되었습니다.')\r\n                } else {\r\n                    alert('등록에 실패하였습니다.')\r\n                }\r\n            })\r\n\r\n    }\r\n  \r\n    return (\r\n        \r\n        <form onSubmit={onHandleSubmit} id=\"formWrapper\">\r\n            {/* <h1>상담등록</h1> */}\r\n            <div id=\"wrapper\">\r\n                <table className=\"buttonTable\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>문의구분</th>\r\n                            <td>\r\n                                <select multiple={false} onChange={onAskTpHandler} value={modalAskTp} >\r\n\r\n                                    {modalContractTpLov.map(item => (\r\n                                        <option key={item.key} value={item.key}>{item.value}</option>\r\n                                    ))}\r\n\r\n                                </select>\r\n\r\n                            </td>\r\n\r\n                            <th>문의일자</th>\r\n                            <td>\r\n                                {/* <DatePicker\r\n                                    locale=\"ko\"\r\n                                    selected={new Date()}\r\n                                    value={modalAskDate}\r\n                                    onChange={date => setModalAskDate(date)}\r\n                                    minDate={new Date()}\r\n                                    maxDate={addDays(new Date(), 0)}\r\n                                    dateFormat=\"yy.MM.dd (eee)\"\r\n\r\n                                /> */}\r\n                                <DatePicker\r\n                                    locale=\"ko\"\r\n                                    selected={startDate.setHours(9, 0, 0, 0)}\r\n                                    onChange={date => setStartDate(date)}\r\n                                    dateFormat=\"yyyy.MM.dd (eee)\"\r\n                                    onClick={onChangeHandler}\r\n                                />\r\n                            </td>\r\n\r\n                            <th>문의자명</th>\r\n                            <td>\r\n                                <input type=\"text\"\r\n                                    value={modalAskName}\r\n                                    id=\"modalAskName\"\r\n                                    name=\"modalAskName\"\r\n                                    size=\"7\"\r\n                                    onChange={onAskNameHandler}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <th>문의방법</th>\r\n                            <td>\r\n                                <select multiple={false} value={modalAskMethod} onChange={onAskMethodHandler}  >\r\n                                    {modalAskMethodLov.map(item => (\r\n                                        <option key={item.key} value={item.key}>{item.value}</option>\r\n                                    ))}\r\n\r\n                                </select>\r\n                            </td>\r\n\r\n                            <th>접근경로</th>\r\n                            <td>\r\n                                <select multiple={false} value={modalAskPath} onChange={onAskPathHandler}  >\r\n                                    {modalAccessPathLov.map(item => (\r\n                                        <option key={item.key} value={item.key}>{item.value}</option>\r\n                                    ))}\r\n\r\n                                </select>\r\n                            </td>\r\n\r\n                            <th>문의자연락처</th>\r\n                            <td>\r\n                                <input type=\"text\" value={modalAskInfo} id=\"modalAskInfo\" name=\"modalAskInfo\" size=\"7\"\r\n                                    onChange={onAskInfoHandler} />\r\n                            </td>\r\n                        </tr>\r\n\r\n\r\n                        <tr>\r\n                            <th>상담내용</th>\r\n                            <td colSpan=\"5\">\r\n                                <textarea rows=\"5\" cols=\"100\" value={modalAskContent} id=\"modalAskContent\" name=\"modalAskContent\"\r\n                                    onChange={onAskContentHandler} ></textarea>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div>\r\n            <input type=\"button\" className=\"popBtn\" value=\"수정하기\" onClick={onModifyHandler} hidden={props.dataForm !== 'U'} />\r\n            {/* <button>닫기</button> */}\r\n            <input className=\"popBtn\" type=\"submit\" hidden={props.dataForm === 'U'} />\r\n\r\n        </form>\r\n\r\n    );\r\n}\r\nexport default S010100140;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Pagination.js",["247"],"import React from 'react';\r\n\r\nconst Pagination = ({postsPerPage,totalPosts,paginate}) =>{\r\n    const pageNumbers = [];\r\n\r\n    for(let i = 1;i <= Math.ceil(totalPosts/postsPerPage);i++){\r\n        pageNumbers.push(i);\r\n\r\n    }\r\n    return(\r\n        <nav id = \"pageCenter\">\r\n            <ul className = \"pagination\" style = {{ margin:0, padding:0}} >\r\n                {pageNumbers.map(number =>(\r\n                    <li key = {number} className = \"pageItem\" style = {{float:\"left\",  margin:0, padding:0}}>\r\n                        <a onClick={()=>paginate(number)} className = \"pageLink\">\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Pagination;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100070.js",["248","249","250","251","252"],"import React, {Fragment, useState, useEffect, useRef} from 'react';\r\nimport './css/S010100070.css';\r\nimport axios from 'axios';\r\n//엑셀다운로드\r\nimport xlsx from 'xlsx';\r\n\r\nimport Pagination from'./utils/Pagination';\r\n\r\n\r\nimport DatePicker, {registerLocale} from 'react-datepicker';\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n\r\n\r\n\r\nlet payDateSt = '';\r\nfunction S010100070(props) {\r\n\r\n    const [paymentMemberNm, setPaymentMemberNm] = useState('');\r\n    const [paymentPeriod, setPaymentPeriod] = useState('');\r\n    const [paymentCeoNm, setPaymentCeoNm] = useState('');\r\n    const [paymentEmpHp, setPaymentEmpHp] = useState('');\r\n    const [paymentEmpEmail, setPaymentEmpEmail] = useState('');\r\n    const [paymentEmpComment, setPaymentEmpComment] = useState('');\r\n    const [paymentStatusList, setPaymentStatusList] = useState([]);\r\n\r\n    //페이징\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage, setPostsPerPage] = useState(12);\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    // const []\r\n    const paymentMemberNmHandler = (event) => {\r\n        setPaymentMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentPeriodHandler = (event) => {\r\n        setPaymentPeriod(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentCeoNmHandler = (event) => {\r\n        setPaymentCeoNm(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentEmpHpHandler = (event) => {\r\n        setPaymentEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentEmpEmailHandler = (event) => {\r\n        setPaymentEmpEmail(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentEmpCommentHandler = (event) => {\r\n        setPaymentEmpComment(event.currentTarget.value);\r\n    }\r\n\r\n     //데이터 들고오는 API\r\n     const paymentStList = () =>{\r\n        axios.get(`/api/payStList/insert/tb_s10_contract020_by_id?id=${dataContracId}`)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //초기값 세팅\r\n                    response.data.rows.map((row) => {\r\n                        if(row.PAYED_DATE === null || row.PAYED_DATE === undefined) row.PAYED_DATE = makeYYMMDD(new Date());\r\n                        if(row.CONTRACT_COMMENT === null || row.CONTRACT_COMMENT === undefined) row.CONTRACT_COMMENT = '';\r\n                        console.log('row', row);\r\n                    })\r\n                   \r\n\r\n                    setPaymentStatusList(response.data.rows);\r\n                    setPaymentMemberNm(response.data.rows[0].MEMBER_NM);\r\n                    setPaymentPeriod(response.data.rows[0].CONTRACT_TERM + '개월 ' +\r\n                        '(' + response.data.rows[0].START_DATE + ' ~ ' + response.data.rows[0].END_DATE + ')');\r\n                    setPaymentCeoNm(response.data.rows[0].NAME);\r\n                    setPaymentEmpHp(response.data.rows[0].EMP_HP);\r\n                    setPaymentEmpEmail(response.data.rows[0].EMP_EMAIL);\r\n                    setPaymentEmpComment(response.data.rows[0].COMMENT);\r\n                    setPayMethodM(response.data.rows[0].PAY_METHOD);\r\n\r\n                } else {\r\n                    alert(\"데이터 조회를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n     useEffect(() => {\r\n        paymentStList();\r\n     }, [])\r\n\r\n     let newChecked;\r\n\r\n    \r\n     const toggleHandler = (event) => {\r\n      \r\n        const currentIndex = checked.indexOf(event.target.id);\r\n        // const currentIndex = checked.findIndex((items,idx) => \r\n        // {return items.PAY_PLAN_DATE !== event.target.id});\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        // console.log('event.target.id[0]',event.target.id);\r\n        // console.log('event.target.className',event.target.className[0]);\r\n        newChecked = checked;\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(event.target.id)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setChecked(newChecked);\r\n        \r\n        console.log('newChecked',newChecked);\r\n     }\r\n\r\n\r\n    //납부 버튼\r\n    const payBtnHandler = (event) => {\r\n\r\n        let modalContractId = props.dataContracId;\r\n        let modalPayPlanDate = checked;\r\n        console.log(checked);\r\n        console.log('modalContractId',modalContractId);\r\n\r\n        let body = {\r\n            //id -> date\r\n            modalContractId: modalContractId,\r\n            modalPayPlanDate: modalPayPlanDate,\r\n            payMethodM:payMethodM,\r\n            //insertPayDate: insertPayDate,\r\n            //paymentStatusList:paymentStatusList\r\n            newChecked:newChecked\r\n        }\r\n        console.log('newChecked', body);\r\n\r\n        axios.post('/api/payStList/paymentUpdate',body)\r\n           .then(response => {\r\n                if (response.data.success) {\r\n                    alert('완료되었습니다.');\r\n               } else {\r\n                   alert('실패하였습니다.');\r\n               }\r\n           })\r\n            //paymentStList();\r\n            newChecked=[];\r\n        }\r\n        \r\n    const snsBtnHandler = (event) => {\r\n\r\n    }\r\n    const emailBtnHandler = (event) => {\r\n\r\n    }  \r\n    //엑셀다운로드\r\n    const excelBtnHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(paymentStatusList);\r\n\r\n        ['대표자','연락처','E-mail','회원명','계약상태','계약기간','계약기간','납부일자','특약사항','계약기간(개월)','납부예정일','contract_id','납부여부','비고']\r\n        .forEach((x,idx) => {\r\n            const cellAdd = xlsx.utils.encode_cell({c:idx,r:0});\r\n            ws[cellAdd].v = x;\r\n            \r\n        })\r\n\r\n        ws['!cols'] = [];\r\n        // ws['!cols'][4] = {hidden:true};\r\n        // ws['!cols'][7] = {hidden:true};\r\n        ws['!cols'][11] = {hidden:true};\r\n        \r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb,ws,\"Sheet1\");\r\n        xlsx.writeFile(wb,\"고객납부등록.xlsx\");\r\n    }\r\n\r\n\r\n    let dataContracId = props.dataContracId;\r\n\r\n    \r\n \r\n\r\n// const [s010100070R, setS010100070R] = useState([]);\r\nconst makeYYMMDD = (value) => {\r\n    let year = (value.getFullYear()+'').substring(2);\r\n    //console.log('year',year);\r\n    let month = value.getMonth() + 1;\r\n    let date = value.getDate();\r\n    month = month < 10 ? '0' + month : month;\r\n    date = date < 10 ? '0' + date : date;\r\n    return year+'.'+month+'.'+date;\r\n}\r\n\r\n\r\n//뿌려주는 곳\r\nconst s010100070R = paymentStatusList.map((paymentStatus, index) => {\r\n    let insertPayDate = paymentStatus.PAYED_DATE \r\n                        ? new Date('20' + paymentStatus.PAYED_DATE) \r\n                        : new Date();\r\n\r\n        return (\r\n            <tr className='dataTable'>\r\n                {/*CONTRACT_ID와 날짜를 함께 들고가야한다.*/}\r\n                <td name=\"uname\" variant=\"outlined\" color=\"primary\">\r\n                    <input type=\"checkbox\" onChange={toggleHandler} id={paymentStatus.PAY_PLAN_DATE+','+paymentStatus.PAYED_DATE+','+paymentStatus.CONTRACT_COMMENT}/>\r\n                </td>\r\n                <td id = {paymentStatus.CONTRACT_ID}>{index + 1}</td>\r\n                <td>{paymentStatus.PAY_PLAN_DATE}</td>\r\n                <td>{paymentStatus.PAYED_FLAG}</td>\r\n                <td key = {paymentStatus.PAY_PLAN_DATE} id={paymentStatus.PAY_PLAN_DATE}>\r\n                    {/* api보고 바뀐 이벤트 값 들고오는거 찾아서 했어요 */}\r\n                    <DatePicker\r\n                        //ref = {payDateRef}\r\n                        id = {paymentStatus.PAY_PLAN_DATE}\r\n                        locale=\"ko\"\r\n                        selected={insertPayDate.setHours(9, 0, 0, 0)}\r\n                        onChange={\r\n                             date => {setPaymentStatusList(\r\n                             paymentStatusList.map(changePaymentStatus =>\r\n                             changePaymentStatus.PAY_PLAN_DATE === paymentStatus.PAY_PLAN_DATE ?\r\n                             {...changePaymentStatus, PAYED_DATE : makeYYMMDD(date)}\r\n                             : changePaymentStatus\r\n                             ))}\r\n                             \r\n                            \r\n                            }\r\n                        selectsStart\r\n                        startDate={insertPayDate}\r\n                        dateFormat=\"yyyy.MM.dd\"\r\n                    />\r\n                </td>\r\n                <td>\r\n                    {/* {paymentStatus.CONTRACT_COMMENT} */}\r\n                    <textarea type=\"text\" cols=\"20\" rows=\"2\" \r\n                              value = {paymentStatus.CONTRACT_COMMENT}\r\n                              size = \"5\" \r\n                              id = {paymentStatus.PAY_PLAN_DATE} \r\n                              onChange={ (e) => {\r\n                                //   console.log('비고',e.target.value);\r\n                                setPaymentStatusList(\r\n                                    paymentStatusList.map((changePaymentStatus,chIndex) =>\r\n                                    chIndex === index ?\r\n                                    {...changePaymentStatus, CONTRACT_COMMENT : e.target.value}\r\n                                    : changePaymentStatus\r\n                                    ))}\r\n                              }\r\n                              />\r\n                </td>\r\n    \r\n    \r\n            </tr>\r\n        )\r\n    });\r\n\r\n\r\n\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    const currentPosts = s010100070R.slice(indexOfFirstPost, indexOfLastPost);\r\n    //Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    const[payMethodM,setPayMethodM] = useState('');\r\n\r\n    return (\r\n        <div>\r\n            <Fragment>\r\n\r\n                <form style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    width: '100%'\r\n                }}>\r\n                    \r\n\r\n                    <h1>고객납부등록</h1>\r\n                    <div id='list'>\r\n                        <table className='resultTable'>\r\n                            <tr>\r\n                                <td>\r\n                                    회원명&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                    <input type=\"text\" value={paymentMemberNm} id=\"memberNm\" name=\"memberNm\" size=\"5\"\r\n                                           onChange={paymentMemberNmHandler}/>\r\n                                    &nbsp;&nbsp;&nbsp;\r\n                                    계약기간 &nbsp;\r\n                                    <input type=\"text\" value={paymentPeriod} id=\"regNo\" name=\"regNo\" size=\"27\"\r\n                                           onChange={paymentPeriodHandler}/>\r\n                                    &nbsp;\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    대표자 &nbsp;&nbsp;&nbsp;\r\n                                    <input type=\"text\" value={paymentCeoNm} id=\"name\" name=\"name\" size=\"7\"\r\n                                           onChange={paymentCeoNmHandler}/>\r\n                                    &nbsp;\r\n\r\n                                    연락처 &nbsp;&nbsp;&nbsp;\r\n                                    <input type=\"text\" value={paymentEmpHp} id=\"name\" name=\"name\" size=\"13\"\r\n                                           onChange={paymentEmpHpHandler}/>\r\n                                    &nbsp;\r\n                                    메일주소 &nbsp;\r\n                                    <input type=\"text\" value={paymentEmpEmail} id=\"name\" name=\"name\" size=\"20\"\r\n                                           onChange={paymentEmpEmailHandler}/>\r\n\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <span id=\"commentTitle\">특약사항</span>&nbsp;\r\n                                    <textarea type=\"text\" cols=\"90\" rows=\"3\" value={paymentEmpComment} id=\"name\"\r\n                                              name=\"name\"\r\n                                              size=\"5\"\r\n                                              onChange={paymentEmpCommentHandler}/>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </div>\r\n                    <table id='paymentList'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>No</th>\r\n                            <th>납부예정일</th>\r\n                            <th>납부여부</th>\r\n                            <th>납부일자</th>\r\n                            <th>비고</th>\r\n                        </tr>\r\n                        </thead>\r\n                     <tbody>\r\n                     {currentPosts}\r\n                    </tbody>\r\n                   </table>\r\n                   <Pagination postsPerPage={postsPerPage} totalPosts={s010100070R.length} paginate={paginate} />\r\n                    <div>\r\n                        <input type=\"button\"\r\n                               onClick={payBtnHandler} value=\"납부\"/>\r\n                        <input type=\"button\" className=\"new\"\r\n                               onClick={snsBtnHandler} value=\"SNS 전송\"/>\r\n                        <input type=\"button\" className=\"memberId\"\r\n                               onClick={emailBtnHandler} value=\"메일 전송\"/>\r\n                        <input type=\"button\" className=\"contractId\"\r\n                               onClick={excelBtnHandler} value=\"엑셀다운로드\"/>\r\n                        <input type=\"button\" id=\"btnWidth\" value=\"계산서발행\"/>\r\n                    </div>\r\n                </form>\r\n            </Fragment>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100070;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\LeaseAgreement.js",["253","254"],"import React,{Fragment, useState, useEffect}from 'react';\r\nimport axios from 'axios';\r\nimport './utilsCss/LeaseAgreement.css';\r\n\r\nfunction LeaseAgreement (props){\r\n\r\n    // 계약시작년도,월,일\r\n    const [startYear,setStartYear] = useState('');\r\n    const [startMonth,setStartMonth] = useState('');\r\n    const [startDay,setStartDay] = useState('');\r\n    \r\n    // 계약종료년도,월,일\r\n    const [endYear,setEndYear] = useState('');\r\n    const [endMonth,setEndMonth] = useState('');\r\n    const [endDay,setEndDay] = useState('');\r\n\r\n    const [contractMoney,setContractMoney] = useState('');\r\n    const [roomLockerTp,setRoomLockerTp] = useState('');\r\n    const [contractPayDate,setContractPayDate] = useState('');\r\n    const [vatMoney, setVatMoney] = useState(0);\r\n\r\n    const [companyName,setCompanyName] = useState('');\r\n    const [ceoName,setCeoName] = useState('');\r\n    const [bLicenseNum,setBLicenseNum] = useState('');\r\n    const [companyAddr,setCompanyAddr] = useState('');\r\n    const [ceoTel,setCeoTel] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n      const rNum = props.dataNum;\r\n      axios.get(`/api/memStList/tb_s10_contract010_by_id?id=${rNum}&type=single`)\r\n          .then(response => {\r\n              if (response.data.success) {\r\n\r\n                const modalCContractDate = response.data.rows[0].CONTRACT_DATE;\r\n                const modalCContractMoney = response.data.rows[0].PAYED_PLAN_MONEY;\r\n               \r\n                const modalCContractTpValM = response.data.rows[0].CONTRACT_ROOM_M;\r\n                const modalCPayDate = response.data.rows[0].PAY_DATE;\r\n\r\n                //VAT(10%)적용한 modalCContractMoney 값\r\n                let VatMoney = modalCContractMoney-(modalCContractMoney*(10/100));\r\n               \r\n                const modalCStartDate = response.data.rows[0].START_DATE;\r\n                const modalCEndDate = response.data.rows[0].END_DATE;\r\n                \r\n                let wasteStartYear = modalCStartDate.substring(0, 4);\r\n                let wasteStartMonth = modalCStartDate.substring(5, 7);\r\n                let wasteStartDay = modalCStartDate.substring(8, 10);\r\n\r\n                let wasteEndYear = modalCEndDate.substring(0, 4);\r\n                let wasteEndMonth = modalCEndDate.substring(5, 7);\r\n                let wasteEndDay = modalCEndDate.substring(8, 10);\r\n\r\n                const modalCMemberNm = response.data.rows[0].MEMBER_NM;\r\n                const modalCRegNo = response.data.rows[0].REG_NO;\r\n                const modalCName = response.data.rows[0].NAME;\r\n                const modalCEmpHp = response.data.rows[0].EMP_HP;\r\n            \r\n                const modalCZipCode = response.data.rows[0].ZIP_CODE;\r\n                const modalCAddress = response.data.rows[0].ADDRESS;\r\n                const modalCDetailAddress = response.data.rows[0].DETAIL_ADDRESS;\r\n                \r\n                \r\n                setStartYear(wasteStartYear);\r\n                setStartMonth(wasteStartMonth);\r\n                setStartDay(wasteStartDay);\r\n\r\n                setEndYear(wasteEndYear);\r\n                setEndMonth(wasteEndMonth);\r\n                setEndDay(wasteEndDay);\r\n\r\n                setContractMoney(modalCContractMoney);\r\n                setVatMoney(VatMoney);\r\n                setRoomLockerTp(modalCContractTpValM);\r\n                setContractPayDate(modalCPayDate);\r\n\r\n                setCompanyName(modalCMemberNm);\r\n                setCeoName(modalCName);\r\n\r\n                setBLicenseNum(modalCRegNo);\r\n                setCompanyAddr(modalCZipCode + ' ' + modalCAddress + ' ' + modalCDetailAddress);\r\n                setCeoTel(modalCEmpHp);\r\n\r\n              } else {\r\n                  alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n              }\r\n          })\r\n        }, [])\r\n\r\n        // 현재날짜 출력\r\n        let today = new Date();\r\n        let dd = today.getDate();\r\n        let mm = today.getMonth()+1; \r\n        let yyyy = today.getFullYear();\r\n\r\n        if(dd<10) {\r\n            dd='0'+dd\r\n        } \r\n\r\n        if(mm<10) {\r\n            mm='0'+mm\r\n        } \r\n\r\n    return(\r\n             <div>\r\n                    <Fragment>\r\n                        <div className = \"agreementWrapper\">\r\n                        <h1> 임 대 차 계 약 서 </h1>\r\n                        <br/>\r\n                            <div className = \"paragraph\">\r\n                            <h3> 갑 : ㈜에스원테크   최현수</h3>\t\t\t\t\t\t\t\t\r\n                            <h3> 을 : {companyName}\t{ceoName}\t</h3>\t\t\t\t\t\t\t\r\n                            </div>     \r\n\r\n                            <div className = \"paragraph\">                                \r\n                                위 '갑'과 '을'은  {yyyy}년 {mm}월 {dd}일 다음과 같이 회원 가입을 체결 한다.\t\t\t\t\t\t\t\t\t\r\n                            </div>   \r\n\r\n                            <div className = \"paragraph\">\r\n                                <h3>1. 본 계약의 목적</h3>                        \t\t\t\t\t\t\t\t\r\n                                    본 계약은 '갑'이 '을'에게 '갑'의 사무실 및 부대시설을 사용 할 수 있는 권리를 허용함과 동시에 '을'이\t\t\t\t\t\t\t\t\t\r\n                                    필요로하는 서비스를 제공함에 있어서 '갑-을'간의 권리의무에 관한 사항을 정하기 위한 목적에서 체결 한다.\t\t\t\t\t\t\t\t\t\r\n                            </div> \r\n\r\n                            <div className = \"paragraph\">                                   \r\n                            <h3>2. 을의 권리의 책임</h3>\r\n                                    <ul>\t\t\t\t\t\t\t\t\r\n                                        <li>\r\n                                            1) '갑'은 '을'에게 제2항 및 제3항에 규정된 바와 같이 '갑'의 사무실 및 기타 부대시설을 사용할 수 있는\t\t\t\t\t\t\t\t\t\r\n                                                권리를 부여한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            2) '을'이 사용 할 수 있는 사무실의 내역은 다음과 같다.<br/>\t\t\t\t\t\t\t\t\r\n                                            &emsp;&nbsp;대상 : 서울시 강남구 봉은사로63길 11, 3,4층      {roomLockerTp}(삼성동,명화빌딩)<br/>\t\t\t\t\t\t\t\t\t\r\n                                            &emsp;&nbsp;용도 : 업무용<br/>\t\t\t\t\t\t\t\t\t\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;월회비  :         {contractMoney}원<br/>\t\t\t\t\t\t\t\t\t\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VAT     :         {vatMoney}원<br/>\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            3) '을'은 상기한 제3항의 사무실 제공과 동시에 부대시설 (회의실, 접견실, 휴게실, OA기기)을 '갑'이\t\t\t\t\t\t\t\t\t\r\n                                            정한 원칙에 의거하여 사용할 수 있다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            4) '을'은 사무실과 부대시설을 사용함에 있어서 선량한 관리자의 주의 의무를 다해야 하며, 사무실과\t\t\t\t\t\t\t\t\t\r\n                                            부대시설에 야기된 제반 손상이나 훼손에 대하여 자신의 비용으로 이를 처리해야 한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            5) '을'은 건물주 및 '갑'의 이해관계인에게 손해 등 문제가 발생할 우려가 있는 경우, 즉시 '갑'에게 사전\t\t\t\t\t\t\t\t\t\r\n                                            고지를 해야 하며 그렇지 않을 경우, 이로 인해 발생하는 '갑'의 모든 손해 (6개월간의 월회비와 법적인\t\t\t\t\t\t\t\t\t\r\n                                            문제 해결을 위한 제반 경비)에 대하여 배상을 한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            6) 상기 5)항에 대하여 '을'은 '갑'에게 관련 정보제공, 법적인 문제인 경우 이를 해결하기 위해 적극\t\t\t\t\t\t\t\t\t\r\n                                            협조한다.(또한, 채권 가압류의 경우 즉시항고, 이의신청 등을 진행하기 위한 업무협조를 포함한다.)\t\t\t\t\t\t\t\t\t\r\n                                        </li>    \r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                 \r\n                                <h3>3. 계약기간</h3>\t\t\t\t\t\t\t\t\t\r\n                                <ul>\r\n                                    <li>\r\n                                        1) 본 계약의 계약기간은 {startYear}년 {startMonth}월 {startDay}일부터 {endYear}년 {endMonth}월 {endDay}일까지로 한다.\t\t\t\t\t\t\t\t\t\r\n                                    </li>            \r\n                                </ul>\r\n                                </div>  \r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>4. 예치금</h3>\t\t\t\t\t\t\t\t\t\r\n                                <ul>\r\n                                    <li>\r\n                                        1) '을'은 본 계약서에 서명함과 동시에 예치금 {contractMoney}원을 '갑'에게 지급하여야 한다.\t\t\t\t\t\t\t\t\t\r\n                                    </li>\r\n                                    <li>            \r\n                                        2) 위 제1항에 명시된 예치금은 본 계약기간 동안 '갑'이 보유하며, 계약기간 만료 또는 종료 시 '을'이\t\t\t\t\t\t\t\t\t\r\n                                            '갑'에게 사무실 및 부대시설을 원상 복구하여 반환하고, '갑'에게 지급할 모든 금액의 지급을 완료하고,\t\t\t\t\t\t\t\t\t\r\n                                            사업자 주소지와 전화를 7일 이내에 옮긴다.\t\t\t\t\t\t\t\t\t\r\n                                        이것이 확인된 후 3일 이내에 예치금을 반환하기로 한다. 단, 예치금에는 이자가 발생하지 않는 것으로\t\t\t\t\t\t\t\t\t\r\n                                        한다.\r\n                                    </li>           \r\n                                </ul>\t\r\n                                </div>           \r\n\r\n                                                                    \r\n                                <div className = \"paragraph\">                                               \r\n                                <h3>5. 회비 및 부가서비스 이용대금의 지급</h3>\t\t\t\t\t\t\t\t\t\r\n                                    <ul>\r\n                                        <li>\r\n                                            1) '을'은 매월  {contractPayDate} 일에 월 회비를 '갑'에게 지급하여야 하며, 그 지급일이 공휴일인 경우에는 익일까지\t\t\t\t\t\t\t\t\t\r\n                                            납부해야 한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\r\n                                            2) 월 회비나 부가서비스 이용대금이 납부기한까지 전액 납부되지 않은 경우, '갑'은 본 계약에 의하여\t\t\t\t\t\t\t\t\t\r\n                                            부여된 여타 권리와는 별도로 연체료 월 2%를 을에게 청구할 수 있다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\t        \r\n                                    </ul>            \r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>6. '갑'의 면책사항</h3>\t\t\r\n                                    <ul>\r\n                                        <li>\r\n                                            1) 본 계약서의 내용은 사정에 의하여 변동될 수 있으며, '갑'은 이러한 변경에 대하여 '을'에게\t\t\t\t\t\t\t\t\t\r\n                                            사전고지하고 상호 합의가 있는 경우, '을'은 본 계약 위반의 책임을 지지 아니한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            2) '을'이나 제3자가 다음과 같은 원인에 의하여 다치거나 재산상의 손해를 입게 된 경우 \t\t\t\t\t\t\t\t\t\r\n                                            '갑'은 이에 대하여 여하한 배상책임도 부담하지 않는다.\t\r\n                                            <ul>\r\n                                                <li>\t\t\t\t\t\t\t\t\r\n                                                - 배수관, 스프링쿨러, 연기 혹은 기타 물질이 건물에서 누출 될 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                - 건물의 서비스와 설비에 결함이 있는 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                - 건물의 보안이나 보호\r\n                                                </li>\r\n                                            </ul>    \r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            3) '갑'이 '을'에게 제공하는 세무전문서비스는 '을'과 '갑'의 제휴세무사가 직접 계약을 체결하기로 한다.\t\t\t\t\t\t\t\t\t\r\n                                            세무전문서비스의 제공과 관련하는 발생하는 문제에 대하여 '갑'은 책임을 지지 아니한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                    </ul>           \r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>7. 계약의 양도 금지</h3>\t\t\t\t\t\t\t\t\t\r\n                                '을'은 본 계약상의 권리나 의무를 '갑'의 동의 없이 제3자에게 양도하거나 처분할 수 없다.\t\t\t\t\t\t\t\t\t\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>8. 계약의 해지 및 갱신</h3>\r\n                                    <ul>\r\n                                        <li>\t\t\t\t\t\t\t\t\r\n                                            1) '을'이 본 계약의 해지 및 갱신을 원하는 경우, 본 계약서 제 3조에 명시된 계약기간의 만료 15일 전까지\t\t\t\t\t\t\t\t\t\r\n                                            그러한 의사를 '갑'에게 반드시 통지 해야한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>        \r\n                                            2) 계약 만료일 15일전에 의사표시를 하지않는 경우에는, 계약만료를 통보한 날로부터 15일 이후를\t\t\t\t\t\t\t\t\t\r\n                                            계약만료일로 하며, 해당 기간의 사용료를 손해배상금으로 '갑'에게  지급한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>        \r\n                                            3) 월회비 할인률이 적용된 경우,  '을'의 사정으로 계약만료일 이전에 중도 해지할 경우는 해당기간 동안\t\t\t\t\t\t\t\t\t\r\n                                            할인 받은 총금액을 최종 정산시 일괄 반환한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>       \r\n                                            4) '갑'이 부득이한 사정으로 인하여 중도에 본 계약을 해지하고자 하는 경우 '갑'은 1개월 전에 해지의사를\t\t\t\t\t\t\t\t\t\r\n                                            '을'에게 표시하여야 한다.\r\n                                        </li>\r\n                                        <li>    \t\t\t\t\t\t\t\t\t\r\n                                            5) 다음의 경우에는 '갑'이 일방적으로 계약을 해지 할 수 있다.\r\n                                                <ul>\r\n                                                <li>\r\n                                                    - '을' 이 30일 이내 2회 이상 '갑'으로부터 납부 권고를 받고도 월 이용회비를 납부하지 않은 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '갑' 이 규정한 ‘회원이용안내’의 규칙을 준수하지 않고 질서를 문란하여 타 회원에게 피해를\t\t\t\t\t\t\t\t\t\r\n                                                    입힌 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '을'이  '갑' 의 사전 승인 없이 회원계약을 제 3자에게 인도한 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '을' 의 업무가 반사회적이거나, 현행 법률에 저촉되어 물의가 될 것으로 판단되는 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '을' 로 인해  '갑' 과  '갑'의 이해당사자에게 법적인 문제(채권 가압류등) 및 피해가 발생한 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                </ul>\r\n                                            </li>\r\n                                    \r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>9. 위 제8조 제5항에 의거하여 '갑'이 일방적으로 본 계약을 해지 할 경우</h3>\r\n                                    <ul>\t\r\n                                        <li>\t\t\t\t\t\t\t\t\r\n                                            1) 해지 3일 전에 서면 또는 전자메일로 통보하며 계약해지에 따른 월회비나 서비스 이용대금을 정산하고\t\t\t\t\t\t\t\t\t\r\n                                            '을'의 회원자격을 박탈한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            2) '을'은 계약해지를 통보 받은 날로부터 3일 이내에 '갑'의 유치물품을 퇴거해야 하며, 퇴거하지 않을 경우\t\t\t\t\t\t\t\t\t\r\n                                            '을'의 유치물품에 대한 분실이나 도난에 대해 '갑'은 책임을 지지 않는다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>                            \r\n                                            3) 본 계약서에 명시된 월회비나 서비스 이용대금을 전액 납부하지 않은 경우, '갑'은 사무실 또는 건물에\t\t\t\t\t\t\t\t\t\r\n                                            있는 '을'의 자산에 대하여 최우선적인 담보권을 취득한다. 만일 '을'이 '갑'의 서면 통지를 받은\t\t\t\t\t\t\t\t\t\r\n                                            날로부터 10일 내에 미지급된 금액을 납부하지 않을 경우, '갑'은 '을'의 동의 없이 '갑'이 자산을 이전\t\t\t\t\t\t\t\t\t\r\n                                            및 임의 처분할 권리를 가진다.\r\n                                        </li>\r\n                                    </ul>\t\t\t\t\t\t\t\t\t\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>10. 분쟁의 해결</h3>\r\n                                    <ul>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            1) '갑'과 '을'간에 본 계약과 관련하여 분쟁이 야기되는 경우, 해당 분쟁은 대한상사중재원에게 상사중재에 \t\t\t\t\t\t\t\t\t\r\n                                                의하여 상호 해결하는데 동의한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            2) 본 계약의 준거법은 대한국민법으로 한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            3) '을'이 계약을 해지하고자 할 경우에는 해지를 희망하는 날로부터 15일전에 '갑'에게 서면 통지하여야\t\t\t\t\t\t\t\t\t\r\n                                                하며, '갑'은 사용료를 일할 정산한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>        \r\n                                    </ul>\r\n                                </div>                                    \r\n                                <div className = \"paragraph\">\r\n                                이상과 같은 합의를 증명하기 위하여 본 계약을 체결하며, 양 당사자는 계약서에 각기 서명 날인하여 1부씩\t\t\t\t\t\t\t\t\t\r\n                                이를 보관 한다.\t\t\r\n                                </div>\t\t\t\t\t\t\t\r\n                                                                    \r\n                                <div className = \"paragraph\" id = \"processOfSign\">      \r\n                                    <table>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>센터매니저</td>\r\n                                                <td></td>\r\n                                                <td></td>\r\n                                                <td>상기내용을 잘 주지시켰음</td>\r\n                                                <td></td>\r\n                                                <td></td>\r\n                                                <td>서명</td>\r\n                                            </tr> \r\n                                            <tr>\r\n                                                <td>이용자</td>\r\n                                                <td></td>\r\n                                                <td></td>\r\n                                                <td>상기내용을 완전히 숙지하였음</td>\r\n                                                <td></td>\r\n                                                <td></td>\r\n                                                <td>서명</td>\r\n                                            </tr>                             \r\n                                \t\t\t\t\t\t\t\t\t\t\t\t\t\r\n                                        </tbody>        \r\n                                    </table>            \r\n                                </div>                                    \r\n                                                                    \r\n                                                                    \r\n                                <div className = \"paragraph\">                                    \r\n                                임대인 : ㈜에스원테크 &emsp;&emsp;서명(인)<br/>             \t\t\t\t\t\t\t\t\t\r\n                                &emsp;&emsp;&emsp;&nbsp;&nbsp; 최현수<br/>\t\t\t\t\t\t\t\t\t\r\n                                법인등록번호 110111-4806381<br/>           \t\t\t\t\t\t\t\t\t\r\n                                사업등록번호 105-87-68698<br/>              \t\t\t\t\t\t\t\t\t\r\n                                주소 : 서울시 강남구 봉은사로63길 11, 3,4층<br/>  \t\t\t\t\t\t\t\t\t\r\n                                연락처 : 070-4355-2312<br/>                 \t\t\t\t\t\t\t\t\t\r\n                                </div>                                   \r\n                                <br/>\r\n                                <div className = \"paragraph\">                                   \r\n                                임차인 : {companyName} &emsp;&emsp;서명(인)<br/>\t\t\t\t\t\t\t\t\t\r\n                                &emsp;&emsp;&emsp;&nbsp;&nbsp; {ceoName}\r\n                                <br/>                        \r\n                                법인등록번호 :\t\t\t\t\t\t\t\t<br/>\r\n                                사업자등록번호 : \t{bLicenseNum}\t\t\t\t\t\t\t\t<br/>\t\r\n                                주소 : {companyAddr}\t\t\t\t\t\t\t\t\t<br/>\r\n                                <br/>                                                    \r\n                                연락처 : {ceoTel} <br/>\r\n                                </div>\r\n                        </div>                                    \r\n                    </Fragment>\r\n                </div>\r\n\r\n\r\n     );\r\n}\r\nexport default LeaseAgreement;\r\n","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Dashboard.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Orders.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\listItems.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\css\\Title.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Title.js",[],{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","severity":1,"message":"260","line":1,"column":16,"nodeType":"261","messageId":"262","endLine":1,"endColumn":25},{"ruleId":"259","severity":1,"message":"263","line":6,"column":10,"nodeType":"261","messageId":"262","endLine":6,"endColumn":14},{"ruleId":"259","severity":1,"message":"264","line":2,"column":8,"nodeType":"261","messageId":"262","endLine":2,"endColumn":12},{"ruleId":"259","severity":1,"message":"265","line":17,"column":5,"nodeType":"261","messageId":"262","endLine":17,"endColumn":15},{"ruleId":"255","replacedBy":"266"},{"ruleId":"257","replacedBy":"267"},{"ruleId":"259","severity":1,"message":"268","line":6,"column":18,"nodeType":"261","messageId":"262","endLine":6,"endColumn":27},{"ruleId":"269","severity":1,"message":"270","line":11,"column":1,"nodeType":"271","endLine":33,"endColumn":2},{"ruleId":"259","severity":1,"message":"268","line":1,"column":26,"nodeType":"261","messageId":"262","endLine":1,"endColumn":35},{"ruleId":"259","severity":1,"message":"272","line":3,"column":8,"nodeType":"261","messageId":"262","endLine":3,"endColumn":13},{"ruleId":"259","severity":1,"message":"273","line":6,"column":8,"nodeType":"261","messageId":"262","endLine":6,"endColumn":18},{"ruleId":"259","severity":1,"message":"274","line":11,"column":5,"nodeType":"261","messageId":"262","endLine":11,"endColumn":14},{"ruleId":"259","severity":1,"message":"275","line":12,"column":5,"nodeType":"261","messageId":"262","endLine":12,"endColumn":12},{"ruleId":"259","severity":1,"message":"276","line":13,"column":5,"nodeType":"261","messageId":"262","endLine":13,"endColumn":10},{"ruleId":"259","severity":1,"message":"265","line":15,"column":5,"nodeType":"261","messageId":"262","endLine":15,"endColumn":15},{"ruleId":"259","severity":1,"message":"277","line":25,"column":20,"nodeType":"261","messageId":"262","endLine":25,"endColumn":31},{"ruleId":"259","severity":1,"message":"278","line":26,"column":16,"nodeType":"261","messageId":"262","endLine":26,"endColumn":23},{"ruleId":"259","severity":1,"message":"279","line":27,"column":21,"nodeType":"261","messageId":"262","endLine":27,"endColumn":33},{"ruleId":"259","severity":1,"message":"280","line":28,"column":20,"nodeType":"261","messageId":"262","endLine":28,"endColumn":31},{"ruleId":"259","severity":1,"message":"281","line":29,"column":21,"nodeType":"261","messageId":"262","endLine":29,"endColumn":33},{"ruleId":"259","severity":1,"message":"282","line":30,"column":18,"nodeType":"261","messageId":"262","endLine":30,"endColumn":27},{"ruleId":"259","severity":1,"message":"260","line":1,"column":16,"nodeType":"261","messageId":"262","endLine":1,"endColumn":25},{"ruleId":"259","severity":1,"message":"260","line":1,"column":16,"nodeType":"261","messageId":"262","endLine":1,"endColumn":25},{"ruleId":"255","replacedBy":"283"},{"ruleId":"257","replacedBy":"284"},{"ruleId":"259","severity":1,"message":"285","line":11,"column":8,"nodeType":"261","messageId":"262","endLine":11,"endColumn":17},{"ruleId":"259","severity":1,"message":"286","line":1,"column":38,"nodeType":"261","messageId":"262","endLine":1,"endColumn":44},{"ruleId":"259","severity":1,"message":"287","line":58,"column":25,"nodeType":"261","messageId":"262","endLine":58,"endColumn":39},{"ruleId":"259","severity":1,"message":"288","line":63,"column":12,"nodeType":"261","messageId":"262","endLine":63,"endColumn":25},{"ruleId":"259","severity":1,"message":"289","line":64,"column":12,"nodeType":"261","messageId":"262","endLine":64,"endColumn":23},{"ruleId":"290","severity":1,"message":"291","line":138,"column":8,"nodeType":"292","endLine":138,"endColumn":10,"suggestions":"293"},{"ruleId":"290","severity":1,"message":"294","line":245,"column":8,"nodeType":"292","endLine":245,"endColumn":10,"suggestions":"295"},{"ruleId":"296","severity":1,"message":"297","line":415,"column":21,"nodeType":"298","messageId":"299","endLine":434,"endColumn":22},{"ruleId":"300","severity":1,"message":"301","line":624,"column":27,"nodeType":"302","messageId":"303","endLine":624,"endColumn":29},{"ruleId":"300","severity":1,"message":"301","line":626,"column":34,"nodeType":"302","messageId":"303","endLine":626,"endColumn":36},{"ruleId":"300","severity":1,"message":"301","line":628,"column":33,"nodeType":"302","messageId":"303","endLine":628,"endColumn":35},{"ruleId":"300","severity":1,"message":"301","line":630,"column":34,"nodeType":"302","messageId":"303","endLine":630,"endColumn":36},{"ruleId":"300","severity":1,"message":"301","line":630,"column":62,"nodeType":"302","messageId":"303","endLine":630,"endColumn":64},{"ruleId":"300","severity":1,"message":"301","line":630,"column":89,"nodeType":"302","messageId":"303","endLine":630,"endColumn":91},{"ruleId":"300","severity":1,"message":"301","line":656,"column":27,"nodeType":"302","messageId":"303","endLine":656,"endColumn":29},{"ruleId":"300","severity":1,"message":"301","line":658,"column":34,"nodeType":"302","messageId":"303","endLine":658,"endColumn":36},{"ruleId":"300","severity":1,"message":"301","line":660,"column":33,"nodeType":"302","messageId":"303","endLine":660,"endColumn":35},{"ruleId":"300","severity":1,"message":"301","line":662,"column":34,"nodeType":"302","messageId":"303","endLine":662,"endColumn":36},{"ruleId":"300","severity":1,"message":"301","line":662,"column":62,"nodeType":"302","messageId":"303","endLine":662,"endColumn":64},{"ruleId":"300","severity":1,"message":"301","line":662,"column":89,"nodeType":"302","messageId":"303","endLine":662,"endColumn":91},{"ruleId":"300","severity":1,"message":"301","line":750,"column":25,"nodeType":"302","messageId":"303","endLine":750,"endColumn":27},{"ruleId":"259","severity":1,"message":"304","line":807,"column":21,"nodeType":"261","messageId":"262","endLine":807,"endColumn":38},{"ruleId":"300","severity":1,"message":"301","line":835,"column":42,"nodeType":"302","messageId":"303","endLine":835,"endColumn":44},{"ruleId":"300","severity":1,"message":"301","line":846,"column":49,"nodeType":"302","messageId":"303","endLine":846,"endColumn":51},{"ruleId":"300","severity":1,"message":"301","line":1203,"column":102,"nodeType":"302","messageId":"303","endLine":1203,"endColumn":104},{"ruleId":"259","severity":1,"message":"305","line":165,"column":11,"nodeType":"261","messageId":"262","endLine":165,"endColumn":26},{"ruleId":"259","severity":1,"message":"306","line":168,"column":11,"nodeType":"261","messageId":"262","endLine":168,"endColumn":26},{"ruleId":"259","severity":1,"message":"307","line":171,"column":11,"nodeType":"261","messageId":"262","endLine":171,"endColumn":28},{"ruleId":"259","severity":1,"message":"308","line":138,"column":12,"nodeType":"261","messageId":"262","endLine":138,"endColumn":29},{"ruleId":"259","severity":1,"message":"309","line":138,"column":31,"nodeType":"261","messageId":"262","endLine":138,"endColumn":51},{"ruleId":"259","severity":1,"message":"310","line":139,"column":12,"nodeType":"261","messageId":"262","endLine":139,"endColumn":31},{"ruleId":"259","severity":1,"message":"311","line":139,"column":33,"nodeType":"261","messageId":"262","endLine":139,"endColumn":55},{"ruleId":"290","severity":1,"message":"312","line":236,"column":8,"nodeType":"292","endLine":236,"endColumn":10,"suggestions":"313"},{"ruleId":"259","severity":1,"message":"314","line":11,"column":8,"nodeType":"261","messageId":"262","endLine":11,"endColumn":11},{"ruleId":"290","severity":1,"message":"315","line":187,"column":8,"nodeType":"292","endLine":187,"endColumn":10,"suggestions":"316"},{"ruleId":"290","severity":1,"message":"317","line":186,"column":8,"nodeType":"292","endLine":186,"endColumn":10,"suggestions":"318"},{"ruleId":"259","severity":1,"message":"319","line":261,"column":12,"nodeType":"261","messageId":"262","endLine":261,"endColumn":26},{"ruleId":"259","severity":1,"message":"320","line":263,"column":11,"nodeType":"261","messageId":"262","endLine":263,"endColumn":25},{"ruleId":"300","severity":1,"message":"301","line":313,"column":18,"nodeType":"302","messageId":"303","endLine":313,"endColumn":20},{"ruleId":"259","severity":1,"message":"321","line":20,"column":12,"nodeType":"261","messageId":"262","endLine":20,"endColumn":16},{"ruleId":"259","severity":1,"message":"322","line":21,"column":12,"nodeType":"261","messageId":"262","endLine":21,"endColumn":31},{"ruleId":"259","severity":1,"message":"323","line":31,"column":12,"nodeType":"261","messageId":"262","endLine":31,"endColumn":30},{"ruleId":"259","severity":1,"message":"324","line":31,"column":32,"nodeType":"261","messageId":"262","endLine":31,"endColumn":53},{"ruleId":"259","severity":1,"message":"325","line":64,"column":26,"nodeType":"261","messageId":"262","endLine":64,"endColumn":41},{"ruleId":"259","severity":1,"message":"326","line":135,"column":27,"nodeType":"261","messageId":"262","endLine":135,"endColumn":39},{"ruleId":"290","severity":1,"message":"327","line":178,"column":8,"nodeType":"292","endLine":178,"endColumn":10,"suggestions":"328"},{"ruleId":"259","severity":1,"message":"329","line":306,"column":11,"nodeType":"261","messageId":"262","endLine":306,"endColumn":29},{"ruleId":"259","severity":1,"message":"330","line":325,"column":11,"nodeType":"261","messageId":"262","endLine":325,"endColumn":28},{"ruleId":"300","severity":1,"message":"301","line":382,"column":31,"nodeType":"302","messageId":"303","endLine":382,"endColumn":33},{"ruleId":"331","severity":1,"message":"332","line":484,"column":33,"nodeType":"333","endLine":484,"endColumn":78},{"ruleId":"331","severity":1,"message":"332","line":496,"column":33,"nodeType":"333","endLine":496,"endColumn":78},{"ruleId":"255","replacedBy":"334"},{"ruleId":"257","replacedBy":"335"},{"ruleId":"259","severity":1,"message":"336","line":2,"column":17,"nodeType":"261","messageId":"262","endLine":2,"endColumn":25},{"ruleId":"259","severity":1,"message":"337","line":24,"column":8,"nodeType":"261","messageId":"262","endLine":24,"endColumn":14},{"ruleId":"259","severity":1,"message":"338","line":123,"column":9,"nodeType":"261","messageId":"262","endLine":123,"endColumn":23},{"ruleId":"259","severity":1,"message":"339","line":127,"column":9,"nodeType":"261","messageId":"262","endLine":127,"endColumn":26},{"ruleId":"259","severity":1,"message":"340","line":131,"column":9,"nodeType":"261","messageId":"262","endLine":131,"endColumn":24},{"ruleId":"290","severity":1,"message":"341","line":56,"column":8,"nodeType":"292","endLine":56,"endColumn":10,"suggestions":"342"},{"ruleId":"290","severity":1,"message":"343","line":72,"column":8,"nodeType":"292","endLine":72,"endColumn":10,"suggestions":"344"},{"ruleId":"296","severity":1,"message":"297","line":99,"column":21,"nodeType":"298","messageId":"299","endLine":103,"endColumn":22},{"ruleId":"345","severity":1,"message":"346","line":112,"column":9,"nodeType":"347","messageId":"348","endLine":113,"endColumn":33},{"ruleId":"331","severity":1,"message":"349","line":15,"column":25,"nodeType":"333","endLine":15,"endColumn":82},{"ruleId":"259","severity":1,"message":"286","line":1,"column":47,"nodeType":"261","messageId":"262","endLine":1,"endColumn":53},{"ruleId":"259","severity":1,"message":"350","line":16,"column":5,"nodeType":"261","messageId":"262","endLine":16,"endColumn":14},{"ruleId":"259","severity":1,"message":"325","line":29,"column":26,"nodeType":"261","messageId":"262","endLine":29,"endColumn":41},{"ruleId":"351","severity":1,"message":"352","line":65,"column":50,"nodeType":"353","messageId":"354","endLine":65,"endColumn":52},{"ruleId":"290","severity":1,"message":"355","line":91,"column":9,"nodeType":"292","endLine":91,"endColumn":11,"suggestions":"356"},{"ruleId":"259","severity":1,"message":"357","line":35,"column":23,"nodeType":"261","messageId":"262","endLine":35,"endColumn":41},{"ruleId":"290","severity":1,"message":"358","line":89,"column":12,"nodeType":"292","endLine":89,"endColumn":14,"suggestions":"359"},"no-native-reassign",["360"],"no-negated-in-lhs",["361"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Main' is defined but never used.","'registNums' is assigned a value but never used.",["360"],["361"],"'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Axios' is defined but never used.","'DatePicker' is defined but never used.","'RoomTypes' is assigned a value but never used.","'Methods' is assigned a value but never used.","'Paths' is assigned a value but never used.","'setUserName' is assigned a value but never used.","'setBnum' is assigned a value but never used.","'setOwnerName' is assigned a value but never used.","'setUserSort' is assigned a value but never used.","'setEndStatus' is assigned a value but never used.","'setStatus' is assigned a value but never used.",["360"],["361"],"'Dashboard' is defined but never used.","'useRef' is defined but never used.","'setEndAsk_date' is assigned a value but never used.","'contractStart' is assigned a value but never used.","'contractEnd' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'modalMemberId' and 'props.newDataForm'. Either include them or remove the dependency array.","ArrayExpression",["362"],"React Hook useEffect has missing dependencies: 'props.cDataForm' and 'rNum'. Either include them or remove the dependency array.",["363"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'existingStartDate' is assigned a value but never used.","'onRegistHandler' is assigned a value but never used.","'onModifyHandler' is assigned a value but never used.","'onApprovalHandler' is assigned a value but never used.","'numForDetailModal' is assigned a value but never used.","'setNumForDetailModal' is assigned a value but never used.","'empHpForDetailModal' is assigned a value but never used.","'setEmpHpForDetailModal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'memberList'. Either include it or remove the dependency array.",["364"],"'Box' is defined but never used.","React Hook useEffect has missing dependencies: 'endDate' and 'startDate'. Either include them or remove the dependency array.",["365"],"React Hook useEffect has a missing dependency: 'searchAsk'. Either include it or remove the dependency array.",["366"],"'checkForDelete' is assigned a value but never used.","'onDeleteHandle' is assigned a value but never used.","'open' is assigned a value but never used.","'nameForDetailCModal' is assigned a value but never used.","'detailCheckoutDate' is assigned a value but never used.","'setDetailCheckoutDate' is assigned a value but never used.","'setPostsPerPage' is assigned a value but never used.","'modalEndFlag' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'detailMemberList'. Either include it or remove the dependency array.",["367"],"'onDetailClickClose' is assigned a value but never used.","'onContractHandler' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["360"],["361"],"'Fragment' is defined but never used.","'Button' is defined but never used.","'onEmailHandler' is assigned a value but never used.","'onPasswordHandler' is assigned a value but never used.","'onSubmitHandler' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.dataForm' and 'rNum'. Either include them or remove the dependency array.",["368"],"React Hook useEffect has missing dependencies: 'getAccessPathLov', 'getAskMethodLov', and 'getContractTpLov'. Either include them or remove the dependency array.",["369"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'payDateSt' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'paymentStList'. Either include it or remove the dependency array.",["370"],"'modalCContractDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.dataNum'. Either include it or remove the dependency array.",["371"],"no-global-assign","no-unsafe-negation",{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},"Update the dependencies array to be: [modalMemberId, props.newDataForm]",{"range":"392","text":"393"},"Update the dependencies array to be: [props.cDataForm, rNum]",{"range":"394","text":"395"},"Update the dependencies array to be: [memberList]",{"range":"396","text":"397"},"Update the dependencies array to be: [endDate, startDate]",{"range":"398","text":"399"},"Update the dependencies array to be: [searchAsk]",{"range":"400","text":"401"},"Update the dependencies array to be: [detailMemberList]",{"range":"402","text":"403"},"Update the dependencies array to be: [props.dataForm, rNum]",{"range":"404","text":"405"},"Update the dependencies array to be: [getAccessPathLov, getAskMethodLov, getContractTpLov]",{"range":"406","text":"407"},"Update the dependencies array to be: [paymentStList]",{"range":"408","text":"409"},"Update the dependencies array to be: [props.dataNum]",{"range":"410","text":"411"},[5919,5921],"[modalMemberId, props.newDataForm]",[11729,11731],"[props.cDataForm, rNum]",[7337,7339],"[memberList]",[5943,5945],"[endDate, startDate]",[5688,5690],"[searchAsk]",[6878,6880],"[detailMemberList]",[2010,2012],"[props.dataForm, rNum]",[2614,2616],"[getAccessPathLov, getAskMethodLov, getContractTpLov]",[3301,3303],"[paymentStList]",[3728,3730],"[props.dataNum]"]