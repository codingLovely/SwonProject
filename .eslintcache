[{"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js":"1","C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js":"2","C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js":"3","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js":"4","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js":"5","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js":"6","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js":"7","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js":"8","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js":"9","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js":"10","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js":"11","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js":"12","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\index.js":"13","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\App.js":"14","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\reportWebVitals.js":"15","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Routes\\Routes.js":"16","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100010.js":"17","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100090.js":"18","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100040.js":"19","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100060.js":"20","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100130.js":"21","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100050.js":"22","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100150.js":"23","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100140.js":"24","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Pagination.js":"25","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100070.js":"26","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\LeaseAgreement.js":"27","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\listItems.js":"28","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\PostCard.js":"29","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100100.js":"30","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100160.js":"31","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100151.js":"32","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\taste.js":"33","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Title.js":"34","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\ScreenLayout.js":"35","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\service\\s010100040.js":"36","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\service\\s010100010.js":"37","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Test.js":"38","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\service\\s010100050.js":"39","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\service\\s010100060.js":"40"},{"size":555,"mtime":1609727657789,"results":"41","hashOfConfig":"42"},{"size":240,"mtime":1609727648266,"results":"43","hashOfConfig":"42"},{"size":362,"mtime":499162500000,"results":"44","hashOfConfig":"42"},{"size":11524,"mtime":1609829204925,"results":"45","hashOfConfig":"42"},{"size":1055,"mtime":1609833591029,"results":"46","hashOfConfig":"42"},{"size":8135,"mtime":1609830177180,"results":"47","hashOfConfig":"42"},{"size":2082,"mtime":1609828498424,"results":"48","hashOfConfig":"42"},{"size":994,"mtime":1609727352401,"results":"49","hashOfConfig":"42"},{"size":1306,"mtime":1609834092417,"results":"50","hashOfConfig":"42"},{"size":4553,"mtime":1609836098390,"results":"51","hashOfConfig":"42"},{"size":4356,"mtime":1609833363720,"results":"52","hashOfConfig":"42"},{"size":5135,"mtime":1609835439756,"results":"53","hashOfConfig":"42"},{"size":508,"mtime":1616130102573,"results":"54","hashOfConfig":"55"},{"size":285,"mtime":1616130100602,"results":"56","hashOfConfig":"55"},{"size":362,"mtime":499162500000,"results":"57","hashOfConfig":"55"},{"size":2714,"mtime":1621515501594,"results":"58","hashOfConfig":"55"},{"size":85538,"mtime":1617927337900,"results":"59","hashOfConfig":"55"},{"size":27222,"mtime":1617354201929,"results":"60","hashOfConfig":"55"},{"size":26966,"mtime":1617847039587,"results":"61","hashOfConfig":"55"},{"size":20560,"mtime":1617690792203,"results":"62","hashOfConfig":"55"},{"size":24781,"mtime":1617354226386,"results":"63","hashOfConfig":"55"},{"size":31424,"mtime":1617847024343,"results":"64","hashOfConfig":"55"},{"size":10484,"mtime":1617354273929,"results":"65","hashOfConfig":"55"},{"size":13374,"mtime":1616722148035,"results":"66","hashOfConfig":"55"},{"size":775,"mtime":1613554840662,"results":"67","hashOfConfig":"55"},{"size":20777,"mtime":1617354436620,"results":"68","hashOfConfig":"55"},{"size":26840,"mtime":1616413994832,"results":"69","hashOfConfig":"55"},{"size":2379,"mtime":1615551799255,"results":"70","hashOfConfig":"55"},{"size":771,"mtime":1613825634853,"results":"71","hashOfConfig":"55"},{"size":47611,"mtime":1616722085204,"results":"72","hashOfConfig":"55"},{"size":20428,"mtime":1621515501594,"results":"73","hashOfConfig":"55"},{"size":8787,"mtime":1617354295166,"results":"74","hashOfConfig":"55"},{"size":2142,"mtime":1615424762882,"results":"75","hashOfConfig":"55"},{"size":356,"mtime":1615566765754,"results":"76","hashOfConfig":"55"},{"size":7473,"mtime":1617354351597,"results":"77","hashOfConfig":"55"},{"size":380,"mtime":1621515501594,"results":"78","hashOfConfig":"55"},{"size":2095,"mtime":1617866524593,"results":"79","hashOfConfig":"55"},{"size":2310,"mtime":1617612620576,"results":"80","hashOfConfig":"55"},{"size":666,"mtime":1617603979311,"results":"81","hashOfConfig":"55"},{"size":320,"mtime":1617682576257,"results":"82","hashOfConfig":"55"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"2g9vyx",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"85"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"85"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"85"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"85"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"85"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"85"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"1i31dyy",{"filePath":"119","messages":"120","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"118"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":68,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"118"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"118"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"118"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"118"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"118"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"118"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"118"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"118"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"118"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"118"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"118"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"118"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"118"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"C:\\Users\\team_\\Desktop\\mysqltest\\src\\index.js",[],["194","195"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\App.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\Counseling.js",["196","197"],"import React,{ Component, Fragment,useEffect,useState } from 'react';\r\nimport './Counseling.css';\r\nimport Main from'../Main/Main.js';\r\nimport axios from \"axios\";\r\nimport CounselStatus from './CounselStatus';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//<!--모달창 라이브러리\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n//모달창 라이브러리 끝-->\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\nvar rNum = '';\r\nvar Rnum = 0;\r\n\r\n\r\nvar Methods = []\r\n\r\nfunction Counseling (props) {\r\n\r\n    const[ConsultRegists, setConsultRegists] = useState([])\r\n\r\n    useEffect(()=>{\r\n        \r\n        axios.post('/api/register/registers')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    console.log(response.data.rows)\r\n                    setConsultRegists(response.data.rows)\r\n                }else{ \r\n                    alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n\r\n    },[])\r\n    \r\n    const[method, setMethod]=useState([])\r\n    \r\n    useEffect(()=>{\r\n        axios.post('/api/register/insertMethod')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log('insertMethod',response.data);\r\n                let arr = [{value: '전체', text: '전체' }]\r\n\r\n                response.data.rows.map((data) => \r\n                    arr.push({\r\n                    value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                }));\r\n                \r\n                Methods=arr;\r\n\r\n                console.log('insertMethodArr',arr);\r\n            }else{\r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n            }\r\n        })\r\n\r\n        \r\n        \r\n    },[])\r\n\r\n    //<!--모달창 속성 및 이벤트 \r\n    const [open, setOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    const [CRegists,setCRegists] = useState({});\r\n\r\n\r\n\r\n    //상담등록 모달\r\n    const onhandleClickOpen = () => {\r\n        setStoreOpen(true); \r\n     \r\n     };  \r\n\r\n                //상담등록 저장버튼이벤트\r\n                // const onhandleStoreClose = () => {\r\n                //     setOpen(false);\r\n                // }\r\n            \r\n     const onhandleClose = (event) => {\r\n          \r\n        axios.post('/api/register/registers')\r\n        .then(response => {\r\n            if(response.data.success){\r\n                console.log(response.data.rows)\r\n                setConsultRegists(response.data.rows)\r\n            }else{ \r\n                alert(\"상담등록 페이지 가져오기를 실패하였습니다.\")\r\n            }\r\n\r\n        })\r\n\r\n        setStoreOpen(false);\r\n       };\r\n    //상담등록 모달 끝\r\n\r\n    //상세보기 모달\r\n    const handleClickOpen = (e) => {\r\n       setOpen(true); \r\n       rNum = e.target.innerHTML\r\n       Rnum= parseInt(rNum);\r\n       //console.log(Rnum)\r\n\r\n       axios.get(`/api/register/register_by_id?id=${Rnum}&type=single`) \r\n       .then(response => {\r\n           if(response.data.success){\r\n               console.log(response.data)\r\n               setCRegists(response.data.rows[0])\r\n               //console.log(response.data.consultRegistInfo.num)\r\n           }else{\r\n               alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n           }\r\n\r\n       })\r\n    };  \r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n      //상세보기 모달 끝 \r\n    //모달창 속성 및 이벤트 끝-->\r\n\r\n\r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n\r\n        // if(method.valueOf('전체') ||!startDate||!endDate||!searchName){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n         const body = {\r\n            startDate,\r\n            searchName,\r\n            method,\r\n            endDate\r\n        }\r\n        \r\n        //console.log(body);\r\n        \r\n        axios.post(\"/api/register/search\",body)\r\n        .then(response => {\r\n            if(response?.data?.success){\r\n                console.log('search',response.data.rows);\r\n                setConsultRegists(response.data.rows);\r\n            }else{\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    \r\n\r\n\r\n    const[searchName, setSearchName] = useState(\"\")\r\n\r\n    const MethodChangeHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const nameSearchHandler=(event)=>{\r\n        setSearchName(event.currentTarget.value);\r\n    }\r\n\r\n    //console.log('ConsultRegists',ConsultRegists);\r\n\r\n    const resultTable = ConsultRegists.map((ConsultRegists,index)=>{\r\n\r\n        return<tr>\r\n                <td name =\"cname\" variant=\"outlined\" color=\"primary\" onClick={handleClickOpen} id={ConsultRegists.num}><u>{ConsultRegists.num}\r\n                </u></td>\r\n                {/* 모달창 시작 */}\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{CRegists.cname+\"님의 상담내용 입니다.\"}</DialogTitle>\r\n                    <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {CRegists.content}\r\n                    </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                        확인\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* 모달창 끝*/}\r\n\r\n                <td>{ConsultRegists.roomtype}</td>\r\n                <td>{ConsultRegists.counseldate}</td>\r\n                <td>{ConsultRegists.method}</td>\r\n                <td>{ConsultRegists.cname}</td>\r\n                <td>{ConsultRegists.phone}</td>\r\n                <td>{ConsultRegists.path}</td>\r\n                \r\n            </tr>\r\n    })\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                \r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>상담현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                        문의일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        문의구분 \r\n                        <select onChange ={MethodChangeHandler} value ={method}>   \r\n                        \r\n                            {Methods.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                    \r\n                        </select>\r\n                        &nbsp; \r\n\r\n                        문의자명\r\n                         <input type=\"text\" value = {searchName} id=\"searchlName\" name=\"searchName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onhandleClickOpen} >상담등록</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    {/* 모달창 시작 --> 504에러 */}\r\n                        <Dialog\r\n                            open={storeOpen}\r\n                            onClose={onhandleClose}\r\n                            aria-labelledby=\"alert-dialog-title\"\r\n                            aria-describedby=\"alert-dialog-description\"\r\n                        >\r\n                            <DialogTitle id=\"alert-dialog-title\"><h1>상담등록</h1></DialogTitle>\r\n                            <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                                 <CounselStatus/>\r\n                            </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                            {/* <Button onClick={onhandleStoreClose} color=\"primary\" autoFocus>\r\n                                저장\r\n                            </Button> */}\r\n                            <Button onClick={onhandleClose} color=\"primary\">\r\n                                닫기\r\n                            </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                     {/* // 모달창 끝        */}\r\n\r\n                    \r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>No</th>\r\n                            <th>문의 구분</th>\r\n                            <th>문의일자</th>\r\n                            <th>문의방법</th>\r\n                            <th>문의자명</th>\r\n                            <th>연락처</th>\r\n                            <th>접근경로</th>\r\n                        </tr>\r\n\r\n                        \r\n                            {resultTable}\r\n                       \r\n\r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Counseling;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Main\\Main.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Counseling\\CounselStatus.js",["198","199"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\nimport { addDays } from 'date-fns';\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nimport \"./CounselStatus.css\";\r\nregisterLocale(\"ko\", ko);\r\n\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction CounselStatus(props) {\r\n\r\n    //Lov(List of Value)를 데이터 베이스에서 가져오기 \r\n        //select\r\n        const[RoomType,setRoomType] = useState(1)\r\n        const[Method, setMethod] = useState(1)\r\n        const[Path, setPath] = useState(1)\r\n\r\n        //문의구분\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/roomType')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('roomType',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    RoomTypes = arr;\r\n\r\n                    //console.log('roomTypeArr',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n            \r\n            \r\n        },[])\r\n\r\n        //문의방법\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/methodA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('method',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Methods = arr;\r\n\r\n                    //console.log('method',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n\r\n        //접근경로\r\n\r\n        useEffect(()=>{\r\n            Axios.post('/api/register/pathA')\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    //console.log('Paths',response.data);\r\n                    let arr = [{value: '전체', text: '전체' }]\r\n\r\n                    response.data.rows.map((data) => \r\n                        arr.push({\r\n                        value: '[' + data.CD_V + ']' + data.CD_V_MEANING, text: data.CD_V,\r\n                    }));\r\n                    \r\n                    Paths = arr;\r\n\r\n                    //console.log('Paths',arr);\r\n                }else{\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n        },[])\r\n    //Lov끝    \r\n\r\n\r\n    \r\n    //datepicker속성 및 이벤트 시작\r\n    const [StartDate, setStartDate] = useState(new Date());\r\n    //datepicker속성 및 이벤트 끝\r\n    console.log(StartDate.getMonth()+1);\r\n    console.log(StartDate);\r\n    \r\n    const[CounselName, setCounselName] = useState(\"\")\r\n    const[UserPhone, setUserPhone] = useState(\"\")\r\n    const[Content, setContent] = useState(\"\")\r\n\r\n\r\n    const onNameHandler=(event)=>{\r\n        setCounselName(event.currentTarget.value);\r\n    }\r\n\r\n    const MethodHandler=(event)=>{\r\n        setMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const PathHandler=(event)=>{\r\n        setPath(event.currentTarget.value);\r\n    }\r\n\r\n    const onPhoneHandler=(event)=>{\r\n        setUserPhone(event.currentTarget.value);\r\n    }\r\n\r\n    const onContentHandler=(event)=>{\r\n        setContent(event.currentTarget.value);\r\n    }\r\n\r\n    const RoomTypeChangeHandler=(event)=>{\r\n        setRoomType(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n        //console.log(RoomType)\r\n    \r\n        // if(RoomType.valueOf('전체') ||!CounselName||Method.valueOf('전체')||Path.valueOf('전체')||!UserPhone||!Content){\r\n        //     return alert(\"값을 입력하세요\")\r\n        // }\r\n\r\n        \r\n        \r\n        //서버에 채운 값들을 request로 보낸다.\r\n        const body = {\r\n            roomtype: RoomType,\r\n            counseldate: StartDate,\r\n            cname: CounselName,\r\n            method: Method,\r\n            path: Path,\r\n            phone: UserPhone,\r\n            content: Content\r\n            \r\n        }\r\n        \r\n        \r\n        Axios.post(\"/api/register\",body)\r\n        .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 등록되었습니다.')\r\n               // props.history.push('/counseling')\r\n            }else{\r\n                alert('등록에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          {/* <Main/>\r\n          <h1>상담등록</h1> */}\r\n          <table>\r\n            <tr>\r\n                <th>문의구분</th>\r\n                    <td>\r\n                        <select onChange ={RoomTypeChangeHandler} value ={RoomType}>   \r\n                        \r\n                            {RoomTypes.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                        \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의일자</th>\r\n                    <td>   \r\n                    <DatePicker\r\n                        locale=\"ko\"\r\n                        selected={StartDate}\r\n                        onChange={date => setStartDate(date)}\r\n                        minDate={new Date()}\r\n                        maxDate={addDays(new Date(), 0)}  \r\n                        dateFormat=\"yyyy.MM.dd (eee)\"\r\n                    />\r\n\r\n                    </td>\r\n                <th>문의자명</th>\r\n                    <td>\r\n                    <input type=\"text\" value = {CounselName}id=\"counselName\" name=\"counselName\" size = \"7\"\r\n                    onChange={onNameHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n            <tr>\r\n                <th>문의방법</th>\r\n                    <td>\r\n                        <select value={Method} onChange={MethodHandler} >\r\n                        {Methods.map(item=>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                        ))}\r\n                        </select>\r\n                    </td>\r\n                <th>접근경로</th>\r\n                    <td>\r\n                        <select value={Path} onChange={PathHandler} >\r\n                            {Paths.map(item =>(\r\n                                <option key = {item.key} value = {item.key}>{item.value}</option>\r\n                            ))}\r\n                            \r\n                        </select>\r\n                    </td>\r\n\r\n                <th>문의자연락처</th>\r\n                    <td>\r\n                    <input type = \"text\" value = {UserPhone}id = \"userPhone\" name = \"userPhone\" size = \"7\"\r\n                    onChange={onPhoneHandler}/>\r\n                    </td>  \r\n            </tr>\r\n\r\n\r\n            <tr>\r\n                <th>상담내용</th>\r\n                    <td colSpan=\"5\">\r\n                        <textarea rows =\"5\" cols = \"100\" value = {Content}id=\"content\" name = \"content\"\r\n                        onChange={onContentHandler}></textarea>\r\n                    </td>\r\n            </tr>\r\n          </table>\r\n          <div id = \"popbtn\"> \r\n            <button type = \"submit\">저장</button>\r\n            {/* <button>닫기</button> */}\r\n          </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n\r\nexport default CounselStatus;",["200","201"],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\LoginPage\\LoginPage.js",["202"],"// import { Component, Fragment } from 'react';\r\n// import {useDispatch} from 'react-redux';\r\n//import {loginUser} from '../_actions/user_action';\r\nimport axios from 'axios';\r\nimport React,{Fragment} from 'react';\r\nimport {useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js'\r\n\r\n\r\nfunction LoginPage( props){\r\n  // const dispatch = useDispatch();\r\n\r\n  const [E_mal,setE_mal] = useState(\"\")\r\n  const [Password, setPassword] = useState(\"\")\r\n\r\n  const onEmailHandler = (event) => {\r\n    setE_mal(event.currentTarget.value)\r\n  }\r\n\r\n  const onPasswordHandler = (event) => {\r\n    setPassword(event.currentTarget.value)\r\n  }\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    let body = {\r\n        Email: E_mal,\r\n        PASSWORD: Password\r\n    }\r\n\r\n   axios.post('/api/users/login',body)\r\n        .then(response => {\r\n            if (response.data.loginResult) {\r\n                alert('로그인 되었습니다.')\r\n                //props.history.push('/counseling')\r\n                console.log(response.data.loginResult)\r\n            } else {\r\n                alert('아이디와 비밀번호를 확인하세요')\r\n            }\r\n        })\r\n      }\r\n\r\n    return (\r\n      <Fragment>\r\n          <Main/>\r\n          <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%',height:'50vh'}}>\r\n            <form style = {{display:'flex', flexDirection:'column'}}\r\n             onSubmit={onSubmitHandler}\r\n            >\r\n              \r\n                <label style={{fontFamily:'Jua',width:'180px'}}>Email</label>\r\n                <input style={{width:\"300px\"}} type = \"email\" value={E_mal} onChange={onEmailHandler} />\r\n                <label style={{fontFamily:'Jua'}}>Password</label>\r\n                <input style={{width:\"300px\"}} type = \"password\" value={Password} onChange={onPasswordHandler}/>\r\n                <br/>\r\n                <button type=\"submit\">Login</button>\r\n            \r\n            \r\n            </form>\r\n          </div>\r\n         \r\n          </Fragment>\r\n    )\r\n}\r\n\r\nexport default LoginPage","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\NavBar\\NavBar.js",[],"C:\\Users\\team_\\Desktop\\mysqltest\\src\\Routes.js",["203"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Member from './Components/Member/Member';\r\nimport Counseling from './Components/Counseling/Counseling';\r\nimport CounselStatus from './Components/Counseling/CounselStatus';\r\nimport LoginPage from './Components/LoginPage/LoginPage';\r\nimport PaymentStatus from './Components/PaymentStatus/PaymentStatus';\r\nimport Swon from './Components/Staff/Swon';\r\nimport Main from './Components/Main/Main';\r\n\r\nexport default () => (\r\n  <Router>\r\n          {/* 메인 */}\r\n          <Route exact path = \"/\" component = {Main}></Route>\r\n\r\n\r\n          {/* 회원현황 */}\r\n          <Route exact path = \"/member\" component = {Member}></Route> \r\n          {/* 납부현황 */}\r\n          <Route path = \"/paymentStatus\" component = {PaymentStatus}></Route>\r\n          {/* 상담현황 */}\r\n          <Route exact path = \"/counseling\" component = {Counseling}></Route>\r\n          {/* 직원관리 */}\r\n          <Route exact path = \"/swon\" component = {Swon}></Route>\r\n          {/* 로그인/로그아웃*/}\r\n          <Route exact path = \"/login\" component = {LoginPage}></Route>\r\n\r\n\r\n\r\n          {/* 상담등록 */}\r\n          <Route exact path = \"/counselStatus\" component = {CounselStatus}></Route>\r\n  </Router>\r\n)\r\n\r\n","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Member\\Member.js",["204","205","206","207","208","209","210","211","212","213","214","215","216"],"import React, { useState,useEffect} from 'react';\r\nimport Main from'../Main/Main.js';\r\nimport Axios from 'axios';\r\n\r\n//datepicker 시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale(\"ko\", ko);\r\n//datepicker끝\r\n\r\nlet RoomTypes = []\r\nlet Methods = []\r\nlet Paths = []\r\n\r\nvar registNums = 0;\r\n\r\nfunction Member(props) {\r\n\r\n\r\n    const handleFormSubmit=(event)=> {\r\n        \r\n        event.preventDefault();\r\n      \r\n    }\r\n    const[userName,setUserName] = useState(\"\")\r\n    const[bnum,setBnum] = useState(\"\")\r\n    const[ownerName,setOwnerName] = useState(\"\")\r\n    const[userSort,setUserSort] = useState([])\r\n    const[endStatus,setEndStatus] = useState(\"\")\r\n    const[status,setStatus] = useState(\"\")\r\n    return (\r\n      <form onSubmit={handleFormSubmit}>\r\n          <Main/>\r\n          <h1>회원현황</h1>\r\n          <table >\r\n            <tr>\r\n                <th>회원명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {userName} id = \"userName\" name = \"userName\" size = \"7\"\r\n                        />\r\n                    </td>  \r\n                    {/* onChange={onPhoneHandler} */}\r\n                <th>사업자번호</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {bnum} id = \"bnum\" name = \"bnum\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>대표자명</th>\r\n                    <td>\r\n                        <input type = \"text\" value = {ownerName} id = \"ownerName\" name = \"ownerName\" size = \"7\"\r\n                        />\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>회원구분</th>\r\n                    <td>\r\n                        <select value ={userSort}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>종류</th>\r\n                    <td>\r\n                        <select value ={endStatus}>  {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                <th>상태</th>\r\n                    <td>\r\n                        <select value ={status}>   {/*  onChange ={RoomTypeChangeHandler}  */}\r\n                        \r\n                            {/* {RoomTypes.map(item => (  */}\r\n                                <option></option>                          \r\n                            {/* ))} */}\r\n                        \r\n                        </select>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                    <div > \r\n                        <button type = \"submit\">조회</button>\r\n                \r\n                    </div>\r\n                    </td>\r\n\r\n                \r\n            </tr>\r\n               \r\n            \r\n          </table>\r\n          <table>\r\n            <tr>\r\n                <td>\r\n                    <button>신규회원</button>\r\n                    <button>SNS</button>\r\n                    <button>메일전송</button>\r\n                    <button>엑셀다운로드</button>\r\n                </td>\r\n            </tr>\r\n          </table>\r\n          \r\n          <table>\r\n                <tr>\r\n                    <th>No</th>\r\n                    <th>문의 구분</th>\r\n                    <th>문의일자</th>\r\n                    <th>문의방법</th>\r\n                    <th>문의자명</th>\r\n                    <th>연락처</th>\r\n                    <th>접근경로</th>\r\n                </tr>\r\n          </table>\r\n\r\n      </form>\r\n\r\n      \r\n    );\r\n  }\r\n\r\n\r\nexport default Member;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\PaymentStatus\\PaymentStatus.js",["217"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction PaymentStatus (props) {\r\n\r\n    \r\n    const[userName, setUserName] = useState(\"\")\r\n    const[paymentStatus, setPaymentStatus]=useState([])\r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const nameSearchHandler=(event)=>{\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler=(event)=>{\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n    \r\n    const onPaymenthandler=()=>{\r\n        \r\n    }\r\n\r\n\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>고객납부현황</h1>\r\n                    <div id = \"search\">\r\n                        \r\n                    납부예정일   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                        회원명\r\n                         <input type=\"text\" value = {userName} id=\"userName\" name=\"userName\" size = \"5\"\r\n                          onChange={nameSearchHandler}/>\r\n                        &nbsp; \r\n\r\n                        납부여부\r\n                        <select onChange ={paymentStatusHandler} value ={paymentStatus}>   \r\n{/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                        </select>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onPaymenthandler}> 납부</button> </td>                    \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>No</th>\r\n                            <th>회원명</th>\r\n                            <th>납부예정일</th>\r\n                            <th>납부여부</th>\r\n                            <th>납부일자</th>\r\n                            <th>계약기간</th>\r\n                            <th>대표자</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default PaymentStatus;","C:\\Users\\team_\\Desktop\\mysqltest\\src\\Components\\Staff\\Swon.js",["218"],"import React,{ Component, Fragment,useState } from 'react';\r\nimport Main from'../Main/Main.js';\r\n\r\n//<!--켈린더 라이브러리시작\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale(\"ko\", ko);\r\n//켈린더 라이브러리 끝-->\r\n\r\n\r\n\r\n\r\nfunction Swon (props) {\r\n\r\n    \r\n    const[staffName, setStaffName] = useState(\"\")\r\n    const[staffClass, setStaffClass] = useState([])\r\n    const[closeStatus, setCloseStatus] = useState([])\r\n    \r\n    \r\n    //<!--캘린더 속성 \r\n    const [startDate, setStartDate] = useState(new Date(\"2020/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date(\"2022/01/01\"));\r\n    //캘린더 속성 끝--> \r\n\r\n\r\n    //<!--onSubmit\r\n      const onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n      }\r\n    //onSubmit끝-->\r\n    \r\n    const staffNameHandler=(event)=>{\r\n        setStaffName(event.currentTarget.value);\r\n    }\r\n\r\n    const staffClassHandler=(event)=>{\r\n        setStaffClass(event.currentTarget.value);\r\n    }\r\n    \r\n    const closeStatusHandler=(event)=>{\r\n        setCloseStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onRegistHandler = (event)=>{\r\n\r\n    }\r\n    const onModifyHandler = (event)=>{\r\n        \r\n    }\r\n    const onApprovalHandler = (event)=>{\r\n        \r\n    }\r\n  \r\n      return (\r\n            <Fragment>\r\n                <Main/>\r\n                <div style={{display:'flex', justifyContent:'center',alignItems:'center',width:'100%'}}>\r\n                    <form style = {{display:'flex', flexDirection:'column'}}\r\n                     onSubmit={onSubmitHandler}\r\n                    >\r\n\r\n                    <h1>직원현황</h1>\r\n                    <div id = \"search\">\r\n\r\n                     성명\r\n                    <input type=\"text\" value = {staffName} id=\"staffName\" name=\"staffName\" size = \"5\"\r\n                    onChange={staffNameHandler}/>\r\n                    &nbsp; \r\n\r\n\r\n                    입사일자   \r\n                    {/* date클릭할 때 고정 */}\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => setStartDate(date)}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        /> ~ \r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => setEndDate(date)}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                        />\r\n                    \r\n                        {/* <input type=\"image\" src=\"/examples/images/submit_icon.png\" alt=\"제출버튼\" height=\"30\" width=\"30\"/> */}\r\n                        &nbsp;\r\n                       \r\n                        직원구분\r\n                        <select onChange ={staffClassHandler} value ={staffClass}>  \r\n                    {/*                         \r\n                            {paymentState.map(item => ( \r\n                                <option key ={item.key} value ={item.key}>{item.value}</option>                          \r\n                            ))}\r\n                     */}\r\n                     \r\n                        </select>\r\n                        종료\r\n                        <select onChange ={closeStatusHandler} value ={closeStatus}>   \r\n                        </select>\r\n                        \r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                        <button>조회</button>\r\n                    </div>\r\n                \r\n                   \r\n                    <table id = \"btn\">\r\n                        <tr>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onRegistHandler}> 등록</button> </td>\r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onModifyHandler}> 수정</button> </td>    \r\n                            <td id = \"btd\"> <button className='loginBtn'  onClick={onApprovalHandler}> 승인</button> </td>                        \r\n                            <td id = \"btd2\"> <button>엑셀다운로드</button> </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <table id = \"list\">\r\n                        <tr>\r\n                            <th>선택</th>\r\n                            <th>직번</th>\r\n                            <th>성명</th>\r\n                            <th>주민번호</th>\r\n                            <th>부서</th>\r\n                            <th>연락처</th>\r\n                            <th>E-mail</th>\r\n                            <th>직원구분</th>\r\n                            <th>승인여부</th>\r\n                            <th>직급</th>\r\n                        </tr>\r\n    \r\n                    </table>\r\n\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n      );\r\n    \r\n  }\r\n  \r\n  export default Swon;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\index.js",[],["219","220"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\App.js",["221","222","223","224"],"import { Fragment } from 'react';\nimport Routes from './Routes/Routes';\nimport {\n  BrowserView,\n  MobileView,\n  isBrowser,\n  isMobile\n} from 'react-device-detect';\n\nfunction App(props) {\n\n    return (\n      <Fragment>\n        <Routes/>\n      </Fragment>\n    );\n\n}\n\nexport default App;\n","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\reportWebVitals.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Routes\\Routes.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100010.js",["225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './css/S010100010.css';\r\nimport LeaseAgreement from './utils/LeaseAgreement';\r\nimport s010100010 from './service/s010100010';\r\n\r\nimport DaumPostcode from 'react-daum-postcode';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport DatePicker, { registerLocale } from 'react-datepicker';\r\nimport ko from 'date-fns/locale/ko';\r\nregisterLocale('ko', ko);\r\n\r\n\r\n\r\n// 출력용\r\nlet forPrint;\r\n// 확정-가계약\r\nlet forMemberStatus;\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n}));\r\n\r\nfunction S010100010(props) {\r\n\r\n    // 회원정보\r\n    const [memberNm, setMemberNm] = useState('');\r\n    const [firstRegNo, setFisrtRegNo] = useState('');\r\n    const [secondRegNo, setSecondRegNo] = useState('');\r\n    const [thirdRegNo, setThirdRegNo] = useState('');\r\n    const [memberTp, setMemberTp] = useState('');\r\n    const [empIdName, setEmpIdName] = useState('');\r\n    const [firstEmpHp, setFirstEmpHp] = useState('');\r\n    const [secondEmpHp, setSecondEmpHp] = useState('');\r\n    const [thirdEmpHp, setThirdEmpHp] = useState('');\r\n    const [empEmailId, setEmpEmailId] = useState('');\r\n    const [domainAddress, setDomainAddress] = useState('');\r\n    const [zipcode, setZipcode] = useState('');\r\n    const [empAddress, setEmpAddress] = useState('');\r\n    const [empDetailAddress, setEmpDetailAddress] = useState('');\r\n    const [ceoIdCardImg, setCeoIdCardImg] = useState('');\r\n    const [ceoRegistCardImg, setCeoRegistCardImg] = useState('');\r\n\r\n    // 계약정보\r\n    const [contractTp, setContractTp] = useState('');\r\n    const [contractTpVal, setContractTpVal] = useState('');\r\n    const [roomLockerTp, setRoomLockerTp] = useState(0);\r\n    const [contractMoney, setContractMoney] = useState(0);\r\n    const [contractTerm, setContractTerm] = useState('0');\r\n    const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endAsk_date, setEndAsk_date] = useState(new Date());\r\n    const [payDate, setPayDate] = useState('');\r\n    const [comment, setComment] = useState('');\r\n    const [payMethod, setPayMethod] = useState('');\r\n    const [contractPath, setContractPath] = useState('');\r\n    const [contractStart, setContractStart] = useState('');\r\n    const [contractEnd, setContractEnd] = useState('');\r\n    const [userStatus, setUserStatus] = useState('');\r\n    const [payedStatusForPrint, setPayedStatusForPrint] = useState('');\r\n\r\n    // 중복확인\r\n    const [regNoCheckBtn, setRegNoCheckBtn] = useState('');\r\n    const [empHpCheckBtn, setEmpHpCheckBtn] = useState('');\r\n    const [dateCheckBtn, setDateCheckBtn] = useState('');\r\n\r\n    // dialog open\r\n    const [printSheetOpen, setPrintSheetOpen] = useState(false);\r\n    const [leaseAgreementOpen, setLeaseAgreementOpen] = useState(false);\r\n\r\n    // cd_v_meaning for printing\r\n    const [memberTpPrint, setMemberTpPrint] = useState('');\r\n    const [contractTpPrint, setContractTpPrint] = useState('');\r\n    const [payMethodPrint, setPayMethodPrint] = useState('');\r\n    const [accessPrint, setAccessPrint] = useState('');\r\n\r\n    // 첨부파일업로드\r\n    const [idCardFile, setIdCardFile] = useState(null);\r\n    const [idCardFileName, setIdCardFileName] = useState('');\r\n\r\n    const [busiCardFile, setBusiCardFile] = useState(null);\r\n    const [busiCardFileName, setBusiCardFileName] = useState('');\r\n\r\n    const [hideEndBtn, setHideEndBtn] = useState('');\r\n    const [modalCContractSt, setModalCContractSt] = useState('');\r\n\r\n    // 확정-가계약구분\r\n    const [memberStFlag, setMemberStFlag] = useState('');\r\n\r\n    const [isPostOpen, setIsPostOpen] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleOpen = () => {\r\n        setIsPostOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setIsPostOpen(false);\r\n    };\r\n\r\n    const postCodeStyle = {\r\n        display: \"block\",\r\n        top: \"50%\",\r\n        width: \"400px\",\r\n        height: \"500px\",\r\n        padding: \"10px\",\r\n    };\r\n\r\n    const handleComplete = (data) => {\r\n        let fullAddress = data.address;\r\n        let extraAddress = \"\";\r\n\r\n        if (data.addressType === \"R\") {\r\n            if (data.bname !== \"\") {\r\n                extraAddress += data.bname;\r\n            }\r\n            if (data.buildingName !== \"\") {\r\n                extraAddress +=\r\n                    extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\r\n            }\r\n            fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\r\n        }\r\n\r\n        setZipcode(data.zonecode);\r\n        setEmpAddress(fullAddress);\r\n\r\n    };\r\n\r\n\r\n    const rNum = props.dataNum;\r\n    const modalMemberId = props.dataMem;\r\n\r\n    // s010100050 -> 신규계약버튼 클릭시 member상세정보\r\n    useEffect(() => {\r\n\r\n        if (props.newDataForm === 'N') {\r\n            axios.get(`/api/s010100010/insert/tb_s10_contract010_by_id?id=${modalMemberId}&type=single`)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n\r\n                        const modalCMemberNm = response.data.rows[0].MEMBER_NM;\r\n                        const modalCRegNo = response.data.rows[0].REG_NO;\r\n                        const modalCMemberTp = response.data.rows[0].MEMBER_TP;\r\n                        const modalCName = response.data.rows[0].NAME;\r\n                        const modalCEmpHp = response.data.rows[0].EMP_HP;\r\n                        const modalCEmpEmail = response.data.rows[0].EMP_EMAIL;\r\n                        const modalCZipCode = response.data.rows[0].ZIP_CODE;\r\n                        const modalCAddress = response.data.rows[0].ADDRESS;\r\n                        const modalCDetailAddress = response.data.rows[0].DETAIL_ADDRESS;\r\n\r\n                        const modalCCeoIdCardImg = response.data.rows[0].ID_CARD_IMAGE_NAME;\r\n                        const modalCRegistIdCardImg = response.data.rows[0].BUSI_LICS_IMAGE_NAME;\r\n\r\n\r\n                        const modalCRegNos = modalCRegNo.split(\"-\");\r\n                        const modalCEmpHps = modalCEmpHp.split(\"-\");\r\n                        const modalCEmpEmails = modalCEmpEmail.split(\"@\");\r\n\r\n                        setMemberNm(modalCMemberNm);\r\n                        setFisrtRegNo(modalCRegNos[0]);\r\n                        setSecondRegNo(modalCRegNos[1]);\r\n                        setThirdRegNo(modalCRegNos[2]);\r\n                        setMemberTp(modalCMemberTp);\r\n                        setEmpIdName(modalCName);\r\n                        setFirstEmpHp(modalCEmpHps[0]);\r\n                        setSecondEmpHp(modalCEmpHps[1]);\r\n                        setThirdEmpHp(modalCEmpHps[2]);\r\n                        setEmpEmailId(modalCEmpEmails[0]);\r\n                        setDomainAddress(modalCEmpEmails[1]);\r\n                        setCeoIdCardImg(modalCCeoIdCardImg);\r\n                        setCeoRegistCardImg(modalCRegistIdCardImg);\r\n                        setZipcode(modalCZipCode);\r\n                        setEmpAddress(modalCAddress);\r\n                        setEmpDetailAddress(modalCDetailAddress);\r\n                        setEmpDetailAddress(modalCDetailAddress);\r\n\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                    }\r\n                })\r\n        }\r\n\r\n    }, []);\r\n\r\n    // s01010050 -> 계약id클릭시 계약상세정보\r\n    useEffect(() => {\r\n        if (props.cDataForm === 'I') {\r\n\r\n            axios.get(`/api/s010100010/tb_s10_contract010_by_id?id=${rNum}&type=single`)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        // console.log('contract_', response.data.rows);\r\n\r\n                        const modalCMemberNm = response.data.rows[0].MEMBER_NM;\r\n                        const modalCRegNo = response.data.rows[0].REG_NO;\r\n                        const modalCMemberTp = response.data.rows[0].MEMBER_TP;\r\n                        const modalCName = response.data.rows[0].NAME;\r\n                        const modalCEmpHp = response.data.rows[0].EMP_HP;\r\n                        const modalCEmpEmail = response.data.rows[0].EMP_EMAIL;\r\n                        const modalCZipCode = response.data.rows[0].ZIP_CODE;\r\n                        const modalCAddress = response.data.rows[0].ADDRESS;\r\n                        const modalCDetailAddress = response.data.rows[0].DETAIL_ADDRESS;\r\n                        const modalCCeoIdCardImg = response.data.rows[0].ID_CARD_IMAGE_NAME;\r\n                        const modalCRegistIdCardImg = response.data.rows[0].BUSI_LICS_IMAGE_NAME;\r\n\r\n                        const modalCContractDate = response.data.rows[0].CONTRACT_DATE;\r\n\r\n                        const modalCContractTp = response.data.rows[0].CONTRACT_TP;\r\n                        const modalCContractTerm = response.data.rows[0].CONTRACT_TERM;\r\n                        const modalCPayDate = response.data.rows[0].PAY_DATE;\r\n                        const modalCContractMoney = response.data.rows[0].MONTHLY_FEE;\r\n                        // console.log('modalCContractMoney',modalCContractMoney);\r\n                        const modalCPayMethod = response.data.rows[0].PAY_METHOD;\r\n\r\n                        const modalCContractPath = response.data.rows[0].CONTRACT_PATH;\r\n                        const modalCContractPathM = response.data.rows[0].CONTRACT_PATH_M;\r\n\r\n                        const modalCStartDate = response.data.rows[0].START_DATE;\r\n                        const modalCEndDate = response.data.rows[0].END_DATE;\r\n\r\n                        const modalCContractTpVal = response.data.rows[0].CONTRACT_ROOM;\r\n                        const modalCRoomLockerTp = response.data.rows[0].CONTRACT_LOCKER;\r\n                        const modalCContractTpValM = response.data.rows[0].CONTRACT_ROOM_M;\r\n                        const modalCRoomLockerTpM = response.data.rows[0].CONTRACT_LOCKER_M;\r\n                        const modalCMemberSt = response.data.rows[0].MEMBER_ST;\r\n                        const modalCEndFlag = response.data.rows[0].END_FLAG;\r\n                        const modalCContractSt = response.data.rows[0].CONTRACT_ST;\r\n                        setModalCContractSt(modalCContractSt);\r\n                        setHideEndBtn(modalCEndFlag);\r\n                        //console.log('modalCEndFlag',modalCEndFlag);\r\n                        const modalCComment = response.data.rows[0].COMMENT;\r\n\r\n                        const modalCMemberTpPrint = response.data.rows[0].MEMBER_TP_M;\r\n                        const modalCContractTpPrint = response.data.rows[0].CONTRACT_TP_M;\r\n                        const modalCPayMethodPrint = response.data.rows[0].PAY_METHOD_M;\r\n                        const modalCAccessPrint = response.data.rows[0].CONTRACT_PATH_M;\r\n\r\n                        const modalCRegNos = modalCRegNo.split(\"-\");\r\n                        const modalCEmpHps = modalCEmpHp.split(\"-\");\r\n                        const modalCEmpEmails = modalCEmpEmail.split(\"@\");\r\n\r\n                        setUserStatus(modalCMemberSt);\r\n                        setMemberStFlag(modalCMemberSt);\r\n                        setMemberNm(modalCMemberNm);\r\n                        setFisrtRegNo(modalCRegNos[0]);\r\n                        setSecondRegNo(modalCRegNos[1]);\r\n                        setThirdRegNo(modalCRegNos[2]);\r\n                        setMemberTp(modalCMemberTp);\r\n\r\n                        setContractTpVal(modalCContractTpVal);\r\n\r\n                        setEmpIdName(modalCName);\r\n                        setFirstEmpHp(modalCEmpHps[0]);\r\n                        setSecondEmpHp(modalCEmpHps[1]);\r\n                        setThirdEmpHp(modalCEmpHps[2]);\r\n                        setEmpEmailId(modalCEmpEmails[0]);\r\n                        setDomainAddress(modalCEmpEmails[1]);\r\n                        setZipcode(modalCZipCode);\r\n                        setEmpAddress(modalCAddress);\r\n                        setCeoIdCardImg(modalCCeoIdCardImg);\r\n                        setCeoRegistCardImg(modalCRegistIdCardImg);\r\n\r\n                        setEmpDetailAddress(modalCDetailAddress);\r\n                        setContractStart(modalCContractDate);\r\n                        setContractEnd(modalCEndDate);\r\n\r\n                        setContractTp(modalCContractTp);\r\n                        setContractTerm(modalCContractTerm);\r\n                        setPayDate(modalCPayDate);\r\n                        setContractMoney(modalCContractMoney);\r\n                        // console.log('contractMoney',contractMoney);\r\n                        setPayMethod(modalCPayMethod);\r\n                        //setContractPath(modalCContractPath);\r\n                        setRoomLockerTp(modalCRoomLockerTp);\r\n                        setComment(modalCComment);\r\n\r\n                        setStartAsk_date(new Date(modalCStartDate));\r\n                        setEndAsk_date(modalCEndDate);\r\n\r\n                        setContractTpVal(modalCContractTpVal);\r\n                        setRoomLockerTp(modalCRoomLockerTp);\r\n                        setContractPath(modalCContractPath);\r\n\r\n                        setContractTpVals([{ key: modalCContractTpVal, value: modalCContractTpValM }]);\r\n                        setRoomLockers([{ key: modalCRoomLockerTp, value: modalCRoomLockerTpM }]);\r\n                        setContractPaths([{ key: modalCContractPath, value: modalCContractPathM }]);\r\n                        setSelectedOption(response.data.rows[0].PAYED_FLAG);\r\n\r\n                        if (response.data.rows[0].PAYED_FLAG === 'Y') {\r\n                            setPayedStatusForPrint('네');\r\n                        } else if (response.data.rows[0].PAYED_FLAG === 'N') {\r\n                            setPayedStatusForPrint('아니오');\r\n                        }\r\n\r\n                        //print용\r\n                        setMemberTpPrint(modalCMemberTpPrint);\r\n                        setContractTpPrint(modalCContractTpPrint);\r\n                        setPayMethodPrint(modalCPayMethodPrint);\r\n                        setAccessPrint(modalCAccessPrint);\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                    }\r\n                })\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n    const [memberTps, setMemberTps] = useState([]);\r\n    const [contractTps, setContractTps] = useState([]);\r\n    const [payMethods, setPayMethods] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let fstValue = 'MEMBER_TP';\r\n        let sndValue = '';\r\n\r\n        s010100010.getSelectBox(fstValue, sndValue).then((res) => {\r\n            if (res.status === 200) {\r\n\r\n                let arr = [{ key: '', value: '선택' }];\r\n                res.data.map((data) =>\r\n\r\n                    arr.push({\r\n                        value: data.cd_v_meaning,\r\n                        key: data.cd_v\r\n                    }));\r\n\r\n                setMemberTps(arr);\r\n            } else {\r\n                alert('실패');\r\n            }\r\n        });\r\n\r\n        fstValue = 'CONTRACT_TP';\r\n        sndValue = 'ASK';\r\n\r\n        s010100010.getSelectBox(fstValue, sndValue).then((res) => {\r\n            if (res.status === 200) {\r\n\r\n\r\n                let arr = [{ key: '', value: '선택' }];\r\n                res.data.map((data) =>\r\n\r\n                    arr.push({\r\n                        value: data.cd_v_meaning,\r\n                        key: data.cd_v\r\n                    }));\r\n\r\n                setContractTps(arr);\r\n            } else {\r\n                alert('실패');\r\n            }\r\n        });\r\n\r\n        fstValue = 'PAY_METHOD';\r\n        sndValue = '';\r\n\r\n        s010100010.getSelectBox(fstValue, sndValue).then((res) => {\r\n            if (res.status === 200) {\r\n\r\n\r\n                let arr = [{ key: '', value: '선택' }];\r\n                res.data.map((data) =>\r\n\r\n                    arr.push({\r\n                        value: data.cd_v_meaning,\r\n                        key: data.cd_v\r\n                    }));\r\n\r\n                setPayMethods(arr);\r\n            } else {\r\n                alert('실패');\r\n            }\r\n        });\r\n\r\n        fstValue = 'PAY_METHOD';\r\n        sndValue = '';\r\n\r\n        s010100010.getSelectBox(fstValue, sndValue).then((res) => {\r\n            if (res.status === 200) {\r\n\r\n\r\n                let arr = [{ key: '', value: '선택' }];\r\n                res.data.map((data) =>\r\n\r\n                    arr.push({\r\n                        value: data.cd_v_meaning,\r\n                        key: data.cd_v\r\n                    }));\r\n\r\n                setPayMethods(arr);\r\n            } else {\r\n                alert('실패');\r\n            }\r\n        });\r\n\r\n        fstValue = 'ACCESS_PATH';\r\n        sndValue = 'CONTRACT';\r\n\r\n        s010100010.getSelectBox(fstValue, sndValue).then((res) => {\r\n            if (res.status === 200) {\r\n               \r\n                let arr = [{ key: '', value: '선택' }];\r\n                res.data.map((data) =>\r\n\r\n                    arr.push({\r\n                        value: data.cd_v_meaning,\r\n                        key: data.cd_v\r\n                    }));\r\n\r\n                setContractPaths(arr);\r\n            } else {\r\n                alert('실패');\r\n            }\r\n        });\r\n    }, [])\r\n\r\n    const [contractTpVals, setContractTpVals] = useState([{ key: '선택', value: '선택' }]);\r\n    const [roomLockers, setRoomLockers] = useState([{ key: '선택', value: '선택' }]);\r\n    const [contractpaths, setContractPaths] = useState([{ key: '선택', value: '선택' }]);\r\n\r\n    const onContractTpHandler = (event) => {\r\n      \r\n        setContractTp(event.currentTarget.value);\r\n\r\n        let contractTpBody = event.currentTarget.value;\r\n\r\n        s010100010.getContractStHier(contractTpBody).then((res) => {\r\n            if (res.status === 200) {\r\n               \r\n                let arr = [{ key: '선택', value: '선택' }];\r\n\r\n                res.data.map((data) =>\r\n                    arr.push({\r\n                        value: data.cd_v_meaning, key: data.cd_v\r\n                    }));\r\n\r\n                switch (contractTpBody) {\r\n                    case 'R1':\r\n                        setContractTpVals(arr);\r\n                        break;\r\n                    case 'R2':\r\n                        setContractTpVals(arr);\r\n                        break;\r\n                    case 'R3':\r\n                        setContractTpVals(arr);\r\n                        break;\r\n                    case 'FI':\r\n                        setContractTpVals(arr);\r\n                        break;\r\n                    case 'FL':\r\n                        setContractTpVals(arr);\r\n                        break;\r\n                    case 'FR':\r\n                        setContractTpVals(arr);\r\n                        break;\r\n                }// switch\r\n\r\n                    // 사물함\r\n                    if (contractTpBody === 'FI' || contractTpBody === 'FL') {\r\n                        \r\n                        s010100010.getRoomLockerHier().then((res) => {\r\n\r\n                            let arr = [{ key: '선택', value: '선택' }]\r\n                            res.data.map((data) =>\r\n                                arr.push({\r\n                                    value: data.cd_v_meaning, key: data.cd_v\r\n                                }));\r\n                            setRoomLockers(arr);\r\n\r\n                        })\r\n\r\n                    } else {\r\n                        let arr = [{ key: '선택', value: '선택' }];\r\n                        setRoomLockers(arr);\r\n                    }\r\n\r\n                        // 월회비\r\n                        let cdTpRoom = contractTpBody;\r\n                    \r\n                        s010100010.getMonthlyMoney(cdTpRoom).then((res) => {\r\n                            if (res.status === 200) {\r\n                              \r\n                                if (res.data[0] == undefined) {\r\n                                    setContractMoney(0);\r\n                                } else {\r\n                                    setContractMoney(res.data[0].attribute3);\r\n                                }\r\n                            }else{\r\n                                alert('사물함정보를 불러오는데 실패하였습니다.');\r\n                            }\r\n                        })\r\n\r\n            } else {\r\n                alert('호실정보를 불러오는데 실패하였습니다.');\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    const onContractTpValHandler = (event) => {\r\n        setContractTpVal(event.currentTarget.value);\r\n    }\r\n\r\n    const onRoomLockerTpHandler = (event) => {\r\n        setRoomLockerTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onContractMoneyHandler = (event) => {\r\n        setContractMoney(event.currentTarget.value);\r\n    }\r\n\r\n    const onContractTermHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setContractTerm(regexData);\r\n    }\r\n    const onPayDateHandler = (event) => {\r\n        setPayDate(event.currentTarget.value);\r\n    }\r\n\r\n    const onCommentHandler = (event) => {\r\n        setComment(event.currentTarget.value);\r\n    }\r\n\r\n    const onPayMethodHandler = (event) => {\r\n        setPayMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const onContractPathHandler = (event) => {\r\n        setContractPath(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => setRegNoCheckBtn('');\r\n    }, []);\r\n    useEffect(() => {\r\n        return () => setEmpHpCheckBtn('');\r\n    }, []);\r\n    useEffect(() => {\r\n        return () => setDateCheckBtn('');\r\n    }, []);\r\n\r\n    // 파일확장자 체크 \r\n    const fileExtensionChk = (event) => {\r\n        let imageType = event.currentTarget.files[0].type;\r\n\r\n        if ((imageType != 'image/png') && (imageType != 'image/jpg') && (imageType != 'image/jpeg')) {\r\n            alert('.jpg, .jpeg, .png 확장자만 업로드 가능합니다.');\r\n        }\r\n    }\r\n\r\n    const idCardHandleFileChange = (event) => {\r\n        setIdCardFile(event.currentTarget.files[0]);\r\n        setIdCardFileName(event.currentTarget.value);\r\n        let imageType = event.currentTarget.files[0].type;\r\n\r\n        if ((imageType != 'image/png') && (imageType != 'image/jpg') && (imageType != 'image/jpeg')) {\r\n            alert('.jpg, .jpeg, .png 확장자만 업로드 가능합니다.');\r\n            setIdCardFile('');\r\n            setIdCardFileName('');\r\n        }\r\n\r\n    }\r\n\r\n    const busiCardHandleFileChange = (event) => {\r\n        setBusiCardFile(event.currentTarget.files[0]);\r\n        setBusiCardFileName(event.currentTarget.value);\r\n\r\n        let imageType = event.currentTarget.files[0].type;\r\n\r\n        if ((imageType != 'image/png') && (imageType != 'image/jpg') && (imageType != 'image/jpeg')) {\r\n            alert('.jpg, .jpeg, .png 확장자만 업로드 가능합니다.');\r\n            setBusiCardFile('');\r\n            setBusiCardFileName('');\r\n        }\r\n\r\n\r\n    }\r\n    // 대표자 신분증\r\n    const [idCardImg, setIdCardImg] = useState('');\r\n    // 사업자 등록증\r\n    const [busiLicfImg, setBusiLicfImg] = useState('');\r\n\r\n    // setState을 파라미터로\r\n    const encodeIdFileBase64 = (idCardfile) => {\r\n        let reader = new FileReader();\r\n        if (idCardfile) {\r\n            reader.readAsDataURL(idCardfile);\r\n            reader.onload = () => {\r\n                let Base64 = reader.result;\r\n                // console.log(Base64);\r\n                setIdCardImg(Base64);\r\n\r\n            };\r\n\r\n            reader.onerror = function (error) {\r\n                console.log('error : ', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const encodeBusiFileBase64 = (idCardfile) => {\r\n        let reader = new FileReader();\r\n        if (idCardfile) {\r\n            reader.readAsDataURL(idCardfile);\r\n            reader.onload = () => {\r\n                let Base64 = reader.result;\r\n                // console.log(Base64);\r\n                setBusiLicfImg(Base64);\r\n\r\n            };\r\n\r\n            reader.onerror = function (error) {\r\n                console.log('error : ', error);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    encodeIdFileBase64(idCardFile);\r\n    encodeBusiFileBase64(busiCardFile);\r\n\r\n\r\n    // 저장\r\n    const addMember = () => {\r\n\r\n        let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n\r\n        let realIdCardFileName;\r\n        let realBusiCardFileName;\r\n\r\n        if (idCardFileName) {\r\n            realIdCardFileName = idCardFileName.split('\\\\')[2].split('.')[0];\r\n        }\r\n\r\n        if (busiCardFileName) {\r\n            realBusiCardFileName = busiCardFileName.split('\\\\')[2].split('.')[0];\r\n        }\r\n\r\n        let dateToString = startDate.toString().substring(0, 10);\r\n                        \r\n        let wasteDateDay = dateToString.substring(7, 10);\r\n        let wasteContracMonthDay = dateToString.substring(5, 7);\r\n        let wasteContractYearDay = dateToString.substring(0, 4);\r\n\r\n        let contractDateDay = parseInt(wasteDateDay);\r\n        let wasteMonth = parseInt(wasteContracMonthDay);\r\n        let contractYearDay = parseInt(wasteContractYearDay);\r\n        let payDate = startAsk_date.getDate();\r\n\r\n        let finalDate = '';\r\n        let originDate = '';\r\n\r\n        let empHp =  firstEmpHp + '-' + secondEmpHp + '-' + thirdEmpHp;\r\n        let empEmail =  empEmailId + '@' + domainAddress;\r\n        let regNo = firstRegNo + '-'+  secondRegNo + '-' + thirdRegNo;\r\n    \r\n        let memberInfo = {\r\n            \r\n            //회원정보\r\n            idCardImg,\r\n            busiLicfImg,\r\n            realIdCardFileName,\r\n            realBusiCardFileName,\r\n            contractDateDay,\r\n            wasteMonth,\r\n            contractYearDay,\r\n            regNo,\r\n            empHp,\r\n            empEmail,\r\n            memberNm,\r\n            memberTp,\r\n            empIdName,\r\n            zipcode,\r\n            empAddress,\r\n            empDetailAddress,\r\n\r\n            // 계약정보\r\n            contractTp,\r\n            contractTpVal,\r\n            roomLockerTp,\r\n            contractMoney,\r\n            contractTerm,\r\n            startDate,\r\n            dateEnd,\r\n            payDate,\r\n            payMethod,\r\n            contractPath,\r\n            comment,\r\n            forMemberStatus,\r\n            selectedOption\r\n        }\r\n       \r\n        s010100010.createMember(memberInfo).then((res) => {\r\n            if(res.status === 200) {\r\n                setRegNoCheckBtn('');\r\n                setEmpHpCheckBtn('');\r\n                setDateCheckBtn('');\r\n                alert('정상적으로 등록 되었습니다.');\r\n                props.setStoreOpen(false);\r\n                props.memberList();\r\n            } else {\r\n                alert(\"등록 실패하였습니다.\");\r\n            }       \r\n        })\r\n\r\n    }\r\n\r\n\r\n    // 저장-확정\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        forMemberStatus = \"C\";\r\n\r\n        // if (empIdName == null || empIdName == '') {\r\n        //     return alert(\"대표자를 입력하세요.\");\r\n        // }\r\n\r\n        // // 연락처 NUll체크\r\n        // if (firstEmpHp == null || firstEmpHp == '' || secondEmpHp == null || secondEmpHp == '' || thirdEmpHp == null || thirdEmpHp == '') {\r\n        //     return alert(\"연락처를 입력하세요.\");\r\n        // }\r\n\r\n        // if (empEmailId == null || empEmailId == '' || domainAddress == null || domainAddress == '') {\r\n        //     return alert(\"email을 입력하세요.\");\r\n        // }\r\n\r\n        // // 계약구분 NUll체크\r\n        // if (contractTp == null || contractTp == '') {\r\n        //     return alert(\"계약구분을 선택하세요.\");\r\n        // }\r\n\r\n        // // 호실 NUll체크\r\n        // if (contractTpVal == null || contractTpVal == '') {\r\n        //     return alert(\"호실을 선택하세요.\");\r\n        // }\r\n\r\n        // // 이용기간 NUll체크\r\n        // if (contractTerm == null || contractTerm == '' || contractTerm == '0') {\r\n        //     return alert(\"이용기간을 입력하세요.\");\r\n        // }\r\n\r\n        // // 납부여부 NUll체크\r\n        // if (selectedOption == null || selectedOption == '') {\r\n        //     return alert(\"납부여부를 선택하세요.\");\r\n        // }\r\n\r\n        // // 납부방법 NUll체크\r\n        // if (payMethod == null || payMethod == '') {\r\n        //     return alert(\"납부방법을 선택하세요.\");\r\n        // }\r\n\r\n        // // 납부방법 NUll체크\r\n        // if (contractPath == null || contractPath == '') {\r\n        //     return alert(\"납부방법을 선택하세요.\");\r\n        // }\r\n\r\n        // // 중복확인\r\n        // if (regNoCheckBtn == '') {\r\n        //     return alert('사업자 번호 중복확인 하세요.');\r\n        // }\r\n\r\n        // if (empHpCheckBtn == '') {\r\n        //     return alert('전화번호 중복확인 하세요.');\r\n        // }\r\n\r\n        // if (dateCheckBtn == '') {\r\n        //     return alert('이용날짜 중복확인 하세요.');\r\n        // }\r\n\r\n        addMember();\r\n        \r\n\r\n    }\r\n\r\n\r\n    // 임시저장-가계약\r\n    const temporaryStorage = (event) => {\r\n        event.preventDefault();\r\n        forMemberStatus = \"T\";\r\n        setRegNoCheckBtn('');\r\n        setEmpHpCheckBtn('');\r\n        setDateCheckBtn('');\r\n        // nullChk();\r\n\r\n        if (empIdName == null || empIdName == '') {\r\n            return alert(\"대표자를 입력하세요.\");\r\n        }\r\n\r\n        // 연락처 NUll체크\r\n        if (firstEmpHp == null || firstEmpHp == '' || secondEmpHp == null || secondEmpHp == '' || thirdEmpHp == null || thirdEmpHp == '') {\r\n            return alert(\"연락처를 입력하세요.\");\r\n        }\r\n\r\n        if (empHpCheckBtn == '') {\r\n            return alert('전화번호 중복확인 하세요.');\r\n        }\r\n\r\n        alert((firstRegNo && secondRegNo && thirdRegNo) && (regNoCheckBtn == ''));\r\n        console.log(regNoCheckBtn);\r\n        console.log(firstRegNo,regNoCheckBtn);\r\n        console.log(dateCheckBtn);\r\n\r\n        if ((firstRegNo && secondRegNo && thirdRegNo) && (regNoCheckBtn == '')) {\r\n            \r\n            return alert('사업자번호 중복확인 하세요.');\r\n        }\r\n\r\n        if((contractTerm) && (dateCheckBtn == '')){\r\n            return alert('이용기간 중복확인 하세요.'); \r\n        }\r\n\r\n        addMember();\r\n\r\n    }\r\n\r\n    const nullChk = () => {\r\n        // 계약구분 NUll체크\r\n        if (contractTp == null || contractTp == '') {\r\n            return alert(\"계약구분을 선택하세요.\");\r\n        }\r\n\r\n        // 호실 NUll체크\r\n        if (contractTpVal == null || contractTpVal == '') {\r\n            return alert(\"호실을 선택하세요.\");\r\n        }\r\n\r\n        // 이용기간 NUll체크\r\n        if (contractTerm == null || contractTerm == '' || contractTerm == '0') {\r\n            return alert(\"이용기간을 입력하세요.\");\r\n        }\r\n\r\n        // 입금일 NUll체크\r\n        if (selectedOption == null || selectedOption == '') {\r\n            return alert(\"납부여부를 선택하세요.\");\r\n        }\r\n\r\n        // 납부방법 NUll체크\r\n        if (payMethod == null || payMethod == '') {\r\n            return alert(\"납부방법을 선택하세요.\");\r\n        }\r\n\r\n        // 계약접근경로 NUll체크\r\n        if (contractPath == null || contractPath == '') {\r\n            return alert(\"계약접근경로를 선택하세요.\");\r\n        }\r\n\r\n\r\n    }\r\n    // 신규계약추가\r\n    const newMemberIdStorage = () => {\r\n\r\n        // nullChk();\r\n\r\n        // memberId\r\n        let memberId = props.dataMem;\r\n        // 시작일자\r\n        let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n        let dateToString = startDate.toString().substring(0, 10);\r\n \r\n        let contractInfo = {\r\n\r\n            memberId : memberId,\r\n            contractTp : contractTp,\r\n            forMemberStatus : \"C\",\r\n            contractTpVal : contractTpVal,\r\n            roomLockerTp : roomLockerTp,\r\n            contractMoney : contractMoney,\r\n            contractTerm : contractTerm,\r\n            startDate : startDate,\r\n            contractDateDay : parseInt(dateToString.substring(7, 10)),\r\n            wasteMonth : parseInt(dateToString.substring(5, 6)),\r\n            contractYearDay : parseInt(dateToString.substring(0, 4)),\r\n            endDate : dateEnd,\r\n            payDate : parseInt(dateToString.substring(7, 10)),\r\n            payMethod : payMethod,\r\n            contractPath : contractPath,\r\n            comment : comment,\r\n            selectedOption : selectedOption\r\n        }      \r\n\r\n        s010100010.addContract(contractInfo).then((res) => {\r\n            if(res.status === 200) {\r\n                // console.log('res',res);\r\n                alert('신규계약에 성공 하였습니다');\r\n                props.setNewOpen(false);\r\n                props.detailMemberList();\r\n            } else {\r\n                alert('신규계약에 실패 하였습니다');\r\n            }       \r\n        })\r\n    }\r\n\r\n    // s010100050 -> insertMember010 \r\n    const contractModify = () => {\r\n\r\n        let modifyDataNum = props.dataNum;\r\n\r\n        let year = (startAsk_date.getFullYear() + '').substring(2);\r\n        let month = startAsk_date.getMonth() + 1;\r\n        let date = startAsk_date.getDate();\r\n        month = month < 10 ? '0' + month : month;\r\n        date = date < 10 ? '0' + date : date;\r\n\r\n        let startDate = year + '-' + month + '-' + date;\r\n\r\n        \r\n        let dateToString = startDate.toString().substring(0, 10);\r\n\r\n        let wasteDateDay = dateToString.substring(6, 8);\r\n        let wasteContracMonthDay = dateToString.substring(3, 5);\r\n        let wasteContractYearDay = dateToString.substring(0, 2);\r\n\r\n\r\n        //날 01\r\n        let contractDateDay = parseInt(wasteDateDay);\r\n        let wasteMonth = parseInt(wasteContracMonthDay);\r\n        let contractYearDay = parseInt(wasteContractYearDay);\r\n\r\n\r\n        let realIdCardFileName;\r\n        let realBusiCardFileName;\r\n\r\n        if (idCardFileName) {\r\n            realIdCardFileName = idCardFileName.split('\\\\')[2].split('.')[0];\r\n        }\r\n\r\n        if (busiCardFileName) {\r\n            realBusiCardFileName = busiCardFileName.split('\\\\')[2].split('.')[0];\r\n        }\r\n\r\n\r\n        let memberConInfo = {\r\n\r\n            // 회원정보\r\n            idCardImg,\r\n            busiLicfImg,\r\n            realIdCardFileName,\r\n            realBusiCardFileName,\r\n            memberNm,\r\n            regNo: firstRegNo + \"-\" + secondRegNo + \"-\" + thirdRegNo,\r\n            memberTp,\r\n            empIdName,\r\n            empHp: firstEmpHp + \"-\" + secondEmpHp + \"-\" + thirdEmpHp,\r\n            empEmail: empEmailId +\"-\"+ domainAddress,\r\n            zipcode,\r\n            empAddress,\r\n            empDetailAddress,\r\n\r\n            //계약정보\r\n            modifyDataNum,\r\n            contractTp,\r\n            contractTpVal,\r\n            roomLockerTp,\r\n            contractMoney,\r\n            contractTerm,\r\n            startDate,\r\n            endDate: dateEnd,\r\n            payDate,\r\n            payMethod,\r\n            contractPath,\r\n            comment,\r\n            selectedOption,\r\n            contractDateDay,\r\n            wasteMonth,\r\n            contractYearDay\r\n        }\r\n\r\n        let dateEndFrame = dateEnd.toString().substring(2, 10);\r\n\r\n        // 날짜 수정x\r\n        if (dateEndFrame === endAsk_date && contractTerm === contractTerm) {\r\n\r\n            setDateCheckBtn('check');\r\n            s010100010.modifyMemberConInfo(memberConInfo).then((res) => {\r\n                if(res.status === 200) {\r\n                    alert('이용계약서를 수정하였습니다');\r\n                        setDateCheckBtn('');\r\n                        props.setConOpen(false);\r\n                        props.detailMemberList();\r\n                } else {\r\n                    alert('이용계약서 수정을 실패 하였습니다');\r\n                }       \r\n            })\r\n\r\n        } else {\r\n            if (contractTp == null || contractTp == '' || contractTp == undefined || contractTpVal == null || contractTpVal == '' || contractTpVal == undefined) {\r\n\r\n                s010100010.modifyMemberConInfo(memberConInfo).then((res) => {\r\n                    if(res.status === 200) {\r\n                        alert('이용계약서를 수정하였습니다');\r\n                            setDateCheckBtn('');\r\n                            props.setConOpen(false);\r\n                            props.detailMemberList();\r\n                    } else {\r\n                        alert('이용계약서 수정을 실패 하였습니다');\r\n                    }       \r\n                })\r\n\r\n            } else {\r\n\r\n                if (dateCheckBtn == 'check') {\r\n\r\n                    s010100010.modifyMemberConInfo(memberConInfo).then((res) => {\r\n                        if(res.status === 200) {\r\n                            alert('이용계약서를 수정하였습니다');\r\n                                setDateCheckBtn('');\r\n                                props.setConOpen(false);\r\n                                props.detailMemberList();\r\n                        } else {\r\n                            alert('이용계약서 수정을 실패 하였습니다');\r\n                        }       \r\n                    })\r\n                } else if (dateCheckBtn == '') {\r\n                    alert('날짜 중복확인 하세요');\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const [memberStTModal, setMemberStModal] = React.useState(false);\r\n    const memberStTModalClose = () => {\r\n        setMemberStModal(false);\r\n    }\r\n\r\n    // 가계약을 확정으로 + 수정하기\r\n    const newContractIdStorage = (event) => {\r\n        if (memberStFlag == 'T') {\r\n            setMemberStModal(true);\r\n        } else if (memberStFlag == 'C') {\r\n            contractModify();\r\n        }\r\n    }\r\n\r\n    const memStTModifyHandler = () => {\r\n        contractModify();\r\n    }\r\n\r\n    const memberStHandler = () => {\r\n\r\n        if (memberNm && firstRegNo && secondRegNo && thirdRegNo) {\r\n\r\n            if (empIdName == null || empIdName == '') {\r\n                return alert(\"대표자를 입력하세요.\");\r\n            }\r\n\r\n            // 연락처 NUll체크\r\n            if (firstEmpHp == null || firstEmpHp == '' || secondEmpHp == null || secondEmpHp == '' || thirdEmpHp == null || thirdEmpHp == '') {\r\n                return alert(\"연락처를 입력하세요.\");\r\n            }\r\n\r\n            // 계약구분 NUll체크\r\n            if (contractTp == null || contractTp == '') {\r\n                return alert(\"계약구분을 선택하세요.\");\r\n            }\r\n\r\n            // 호실 NUll체크\r\n            if (contractTpVal == null || contractTpVal == '') {\r\n                return alert(\"호실을 선택하세요.\");\r\n            }\r\n\r\n            // 이용기간 NUll체크\r\n            if (contractTerm == null || contractTerm == '' || contractTerm == '0') {\r\n                return alert(\"이용기간을 입력하세요.\");\r\n            }\r\n\r\n            // 입금일 NUll체크\r\n            if (selectedOption == null || selectedOption == '') {\r\n                return alert(\"납부여부를 선택하세요.\");\r\n            }\r\n\r\n            // 납부방법 NUll체크\r\n            if (payMethod == null || payMethod == '') {\r\n                return alert(\"납부방법을 선택하세요.\");\r\n            }\r\n\r\n            // 계약접근경로 NUll체크\r\n            if (contractPath == null || contractPath == '') {\r\n                return alert(\"계약접근경로를 선택하세요.\");\r\n            }\r\n\r\n\r\n            contractModify();\r\n\r\n            // 가계약을 확정으로\r\n            let memberBody = {\r\n                rNum: rNum\r\n            }\r\n\r\n            axios.post('/api/s010100010/modifymemberSt', memberBody)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        alert('확정되었습니다');\r\n                        props.detailMemberList();\r\n                        setMemberStModal(false);\r\n                        props.setConOpen(false);\r\n\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert('확정실패 하였습니다');\r\n                    }\r\n                })\r\n        } else {\r\n            alert('회원명과 사업자번호를 먼저 저장하세요.');\r\n        }\r\n    }\r\n\r\n    const [printMemberSheetOpen, setPrintMemberSheetOpen] = useState(false);\r\n\r\n    // 출력버튼 모달 open\r\n    const onPrintHandler = (event) => {\r\n        forPrint = true;\r\n        setPrintSheetOpen(true);\r\n    }\r\n    // 출력버튼 모달 close\r\n    const onPrintSheetClose = (event) => {\r\n        forPrint = false;\r\n        setPrintSheetOpen(false);\r\n    }\r\n\r\n    const onPrintMemberHandler = (event) => {\r\n        forPrint = true;\r\n        setPrintMemberSheetOpen(true);\r\n    }\r\n\r\n    const onPrintMemberSheetClose = (event) => {\r\n        forPrint = false;\r\n        setPrintMemberSheetOpen(false);\r\n    }\r\n    const onleaseAgreementHandler = (event) => {\r\n        setLeaseAgreementOpen(true);\r\n    }\r\n\r\n    const onleaseAgreementClose = (event) => {\r\n        setLeaseAgreementOpen(false);\r\n    }\r\n\r\n    const onMemberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const onFirstRegNoHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setFisrtRegNo(regexData);\r\n    }\r\n\r\n    const onSecondRegNoHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setSecondRegNo(regexData);\r\n    }\r\n\r\n    const onThirdRegNoHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setThirdRegNo(regexData);\r\n    }\r\n\r\n    const onMemberTpHandler = (event) => {\r\n        setMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpIdNameHandler = (event) => {\r\n        setEmpIdName(event.currentTarget.value);\r\n    }\r\n\r\n    const onFirstEmpHpHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setFirstEmpHp(regexData);\r\n    }\r\n\r\n    const onSecondEmpHpHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setSecondEmpHp(regexData);\r\n    }\r\n\r\n    const onThirdEmpHpHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setThirdEmpHp(regexData);\r\n    }\r\n\r\n    const onEmpEmailIdHandler = (event) => {\r\n        const regexData = getRegexData(/[^-A-Za-z0-9_]/g, event.currentTarget.value);\r\n        setEmpEmailId(regexData);\r\n    }\r\n\r\n    const onDomainAddressHandler = (event) => {\r\n        const regexData = getRegexData(/[^a-zA-Z0-9.]+$/, event.currentTarget.value);\r\n        setDomainAddress(regexData);\r\n    }\r\n\r\n    const onZipcodeHandler = (event) => {\r\n        setZipcode(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpAddressHandler = (event) => {\r\n        setEmpAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpDetailAddressHandler = (event) => {\r\n        setEmpDetailAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const getRegexData = (regex, data) => {\r\n        return data.replace(regex, \"\");\r\n    }\r\n\r\n    // 종료\r\n    const newEndHandler = () => {\r\n       \r\n        let contractId = rNum;\r\n       \r\n        s010100010.updateEndFlag(contractId).then((res) => {\r\n            if(res.status === 200) {\r\n                // console.log('res',res);\r\n                alert('종료처리 하였습니다.');\r\n                props.setConOpen(false);\r\n                props.detailMemberList();\r\n            } else {\r\n                alert('종료처리에 실패하였습니다.');\r\n            }       \r\n        })\r\n\r\n    }\r\n\r\n\r\n    const onDeleteHandler = () => {\r\n\r\n        setUserStatus('');\r\n        let contractId = rNum;\r\n\r\n        s010100010.deleteMemberConInfo(contractId).then((res) => {\r\n            if(res.status === 200) {\r\n                alert('삭제하였습니다.');\r\n                props.setConOpen(false);\r\n            } else {\r\n                alert('삭제에 실패하였습니다.');\r\n            }       \r\n        })\r\n\r\n    }\r\n\r\n    const onRegNoCheckHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n            let checkValue = firstRegNo + '-' + secondRegNo + '-' + thirdRegNo;\r\n            let checkValLength = secondRegNo.length;\r\n            \r\n        if ((firstRegNo.length != 3 || firstRegNo.length === 0) || (secondRegNo.length != 2 || secondRegNo.length === 0) || (thirdRegNo.length != 5 || thirdRegNo.length === 0)) {\r\n            alert('사업자번호 형식을 확인하세요');\r\n        } else {\r\n\r\n            s010100010.duplicateVerification(checkValue,checkValLength).then((res) => {\r\n                if(res.status === 200){\r\n                    // console.log('res.data',res.data);\r\n                    if (res.data >= 1) {\r\n                        setRegNoCheckBtn('');\r\n                        alert('이미 존재하는 사업자번호입니다.');\r\n\r\n                    } else if (res.data === 0) {\r\n                        setRegNoCheckBtn('check');\r\n                        alert('사용할 수 있는 사업자 번호입니다.')\r\n                    }\r\n                }else{\r\n                    alert('중복체크에 실패하였습니다.');\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const onEmpHpChkHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        setEmpHpCheckBtn('check');\r\n\r\n        let checkValue = firstEmpHp + '-' + secondEmpHp + '-' + thirdEmpHp;\r\n        let checkValLength = secondEmpHp.length;\r\n      \r\n        if ((firstEmpHp.length != 3) || (secondEmpHp.length != 4) || (thirdEmpHp.length != 4) || (firstEmpHp.length === 0) || (secondEmpHp.length === 0) || (thirdEmpHp.length === 0)) {\r\n            alert('연락처 형식을 확인하세요');\r\n        } else {\r\n\r\n            s010100010.duplicateVerification(checkValue,checkValLength).then((res) => {\r\n                if(res.status === 200){\r\n                    if (res.data >= 1) {\r\n                        setEmpHpCheckBtn('');\r\n                        alert('존재하는 전화번호 입니다.');\r\n\r\n                    } else if (res.data === 0) {\r\n                        setEmpHpCheckBtn('check');\r\n                        alert('사용할 수 있는 전화번호입니다.')\r\n                    }\r\n                }else{\r\n                    alert('중복체크에 실패하였습니다.');\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    let finalYear = ((startAsk_date.getMonth() * 1 + contractTerm * 1) / 12) + startAsk_date.getFullYear();\r\n\r\n    let finalMonth = ((startAsk_date.getMonth() * 1 + contractTerm * 1) % 12) + 1;\r\n    finalMonth = finalMonth < 10 ? '0' + finalMonth : finalMonth;\r\n\r\n    let finalDate = new Date(finalYear, finalMonth, 0).getDate() > startAsk_date.getDate()\r\n        ? startAsk_date.getDate()\r\n        : new Date(finalYear, finalMonth, 0).getDate();\r\n    finalDate = finalDate < 10 ? '0' + finalDate : finalDate;\r\n    let dateEnd = Math.floor(finalYear) + '-' + finalMonth + '-' + finalDate;\r\n\r\n\r\n    // 이용기간 중복체크\r\n    const funcDateChk = () => {\r\n\r\n        // setDateCheckBtn('check');\r\n        const rNum = props.dataNum;\r\n        let startDate = startAsk_date.getFullYear() + '-' + (startAsk_date.getMonth() + 1) + '-' + startAsk_date.getDate();\r\n\r\n        const periodOfUseInfo = {\r\n            contractTp,\r\n            contractTpVal,\r\n            startDate,\r\n            endDate: dateEnd,\r\n            contractId: rNum\r\n        }\r\n      \r\n        if (contractTerm.length === 0) {\r\n            alert('개월수를 입력하세요');\r\n        } else {\r\n\r\n            s010100010.duplicatePeriodOfUse(periodOfUseInfo).then((res) => {\r\n                if(res.status === 200){\r\n                    if (res.data>= 1) {\r\n                        setDateCheckBtn('');\r\n                        alert('이미 이용중인 날짜입니다.');\r\n\r\n                    } else if (res.data === 0) {\r\n                        alert('사용가능한 날짜입니다.')\r\n                        setDateCheckBtn('check');\r\n                    }\r\n                }else{\r\n                    alert('중복체크에 실패하였습니다.');\r\n                }\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const [paymentY, setPaymentY] = useState('Y');\r\n    const [paymentN, setPaymentN] = useState('N');\r\n    const [selectedOption, setSelectedOption] = useState('');\r\n\r\n    const changeRadio = (event) => {\r\n        setSelectedOption(event.target.value);\r\n    };\r\n\r\n\r\n    const onDateHandler = (event) => {\r\n        event.preventDefault();\r\n        funcDateChk();\r\n    }\r\n\r\n    const onPrintSheetHandler = () => {\r\n        window.print();\r\n    }\r\n\r\n    return (\r\n\r\n        <form style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '100%'\r\n        }}\r\n            encType='multipart/form-data'\r\n        >\r\n            <div className=\"memInfoWrapper\">\r\n                <div className=\"memInfoWrap\">\r\n                    {/* 회원정보란 */}\r\n                    <h5 id=\"infoTitle\">회원 정보</h5>\r\n\r\n                    <table id=\"memberTable\">\r\n                        {/* 회원정보란 */}\r\n                        <tbody>\r\n                            <tr>\r\n                                <th rowSpan=\"6\" className=\"memberInfo\">회원정보</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"memberInfo\">회원명</th>\r\n                                <td hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={memberNm} id=\"memberNm\" name=\"memberNm\"\r\n                                        onChange={onMemberNmHandler} disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n                                </td>\r\n\r\n                                {/* 회원명 출력 td */}\r\n                                <td hidden={!forPrint}>\r\n                                    {memberNm}\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">사업자 번호</th>\r\n                                <td colSpan=\"2\" hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 4 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" maxLength=\"3\" required=\"required\" value={firstRegNo} id=\"firstRegNo\" name=\"firstRegNo\"\r\n                                        onChange={onFirstRegNoHandler} disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n\r\n                        &nbsp;\r\n                        -\r\n                        &nbsp;\r\n\r\n                        <Form.Control style={{ width: 3 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" maxLength=\"2\" required=\"required\" value={secondRegNo} id=\"secondRegNo\" name=\"secondRegNo\"\r\n                                        onChange={onSecondRegNoHandler} disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n                        &nbsp;\r\n                        -\r\n                        &nbsp;\r\n\r\n                        <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" maxLength=\"5\" required=\"required\" value={thirdRegNo} id=\"thirdRegNo\" name=\"thirdRegNo\"\r\n                                        onChange={onThirdRegNoHandler} disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n\r\n                                    {/*신규회원 중복확인 */}\r\n                                    <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"useContractBtn\" onClick={onRegNoCheckHandler}\r\n                                        hidden={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'}> 중복확인</Button>\r\n\r\n                                </td>\r\n\r\n                                {/*사업자 번호 출력용 */}\r\n                                <td colSpan=\"2\" hidden={!forPrint} >{firstRegNo}-{secondRegNo}-{thirdRegNo}</td>\r\n\r\n\r\n                                <th className=\"memberInfo\" >회원구분</th>\r\n                                <td colSpan=\"2\" hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onMemberTpHandler} value={memberTp}\r\n                                        disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'}>\r\n                                        {memberTps.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                {/*회원구분 출력용 */}\r\n                                <td colSpan=\"2\" hidden={!forPrint} >{memberTpPrint}</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"memberInfo\">대표자<span className=\"star\">(*)</span></th>\r\n                                <td hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={empIdName} id=\"empIdName\" name=\"empIdName\"\r\n                                        onChange={onEmpIdNameHandler} disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n                                </td>\r\n\r\n                                {/* 대표자(이름) 출력용 */}\r\n                                <td hidden={!forPrint} >{empIdName}</td>\r\n\r\n                                <th className=\"memberInfo\">연락처<span className=\"star\">(*)</span></th>\r\n                                <td colSpan=\"2\" hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" maxLength=\"3\" required=\"required\" value={firstEmpHp} id=\"firstEmpHp\" name=\"firstEmpHp\"\r\n                                        onChange={onFirstEmpHpHandler} disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n                        &nbsp;\r\n                        -\r\n                        &nbsp;\r\n                        <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" maxLength=\"4\" required=\"required\" value={secondEmpHp} id=\"secondEmpHp\" name=\"secondEmpHp\" name=\"firstEmpHp\"\r\n                                        onChange={onSecondEmpHpHandler} disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n                        -\r\n                        &nbsp;\r\n                        <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" maxLength=\"4\" required=\"required\" value={thirdEmpHp} id=\"thirdEmpHp\" name=\"thirdEmpHp\"\r\n                                        onChange={onThirdEmpHpHandler} disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n                                    <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} onClick={onEmpHpChkHandler} hidden={props.cDataForm == 'I' || props.newDataForm === 'N'} >중복확인</Button>\r\n                                </td>\r\n\r\n                                {/* 대표자(전화번호) 출력용 */}\r\n                                <td colSpan=\"2\" hidden={!forPrint} >{firstEmpHp}-{secondEmpHp}-{thirdEmpHp}</td>\r\n\r\n                                <th className=\"memberInfo\">E-mail</th>\r\n                                <td colSpan=\"2\" hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={empEmailId} id=\"empEmailId\" name=\"empEmailId\"\r\n                                        onChange={onEmpEmailIdHandler} disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n                        &nbsp;\r\n                        @\r\n                        &nbsp;\r\n\r\n                        <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={domainAddress} id=\"domainAddress\" name=\"domainAddress\"\r\n                                        onChange={onDomainAddressHandler} disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n                                </td>\r\n\r\n                                {/* 대표자(이메일) 출력용 */}\r\n                                <td colSpan=\"2\" hidden={!forPrint} >{empEmailId}@{domainAddress}</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th rowSpan=\"2\" className=\"memberInfo\">대표자 주소</th>\r\n\r\n                                <td colSpan=\"7\" hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={zipcode} id=\"zipcode\" name=\"zipcode\"\r\n                                        onChange={onZipcodeHandler} disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n                        &nbsp;\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} className=\"useContractBtn\" onClick={handleOpen}\r\n                                        disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'}\r\n                                    >우편</Button>\r\n\r\n                                    <Modal\r\n                                        className={classes.modal}\r\n                                        open={isPostOpen}\r\n                                        onClose={handleClose}\r\n                                        closeAfterTransition\r\n                                        BackdropComponent={Backdrop}\r\n\r\n                                    >\r\n                                        <Fade in={isPostOpen}>\r\n                                            <div className={classes.paper}>\r\n                                                <DaumPostcode style={postCodeStyle} onComplete={handleComplete} />\r\n                                            </div>\r\n                                        </Fade>\r\n                                    </Modal>\r\n                        &nbsp;\r\n                            <Form.Control style={{ width: 30 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={empAddress} id=\"empAddress\" name=\"empAddress\"\r\n                                        onChange={onEmpAddressHandler} disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n                                </td>\r\n\r\n                                <td colSpan=\"7\" hidden={!forPrint}>{zipcode}{empAddress}{empDetailAddress}</td>\r\n\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan=\"7\" hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 30 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={empDetailAddress}\r\n                                        id=\"empDetailAddress\"\r\n                                        name=\"empDetailAddress\"\r\n                                        onChange={onEmpDetailAddressHandler}\r\n                                        disabled={(props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'} />\r\n\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"memberInfo\" >첨부파일</th>\r\n                                <td colSpan=\"2\" hidden={forPrint || (props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'}>\r\n\r\n                                    <label htmlFor=\"file\">대표자신분증:</label>&nbsp;\r\n                                    <input type='file'\r\n                                        file={idCardFile}\r\n                                        name='idCardFile'\r\n                                        value={idCardFileName}\r\n                                        onChange={idCardHandleFileChange}\r\n                                    />\r\n                                    <div className='fileStar'> * jpg,jpeg,png 파일만 가능합니다.</div>\r\n                                </td>\r\n\r\n                                <td colSpan=\"4\" hidden={forPrint || (props.cDataForm === 'I' && modalCContractSt === 'C') || props.newDataForm === 'N'}>\r\n                                    <label htmlFor=\"file\">사업자등록증:</label>&nbsp;\r\n                                    <input type='file'\r\n                                        file={busiCardFile}\r\n                                        name='busiCardFile'\r\n                                        value={busiCardFileName}\r\n                                        onChange={busiCardHandleFileChange}\r\n                                    />\r\n                                    <div className='fileStar'> * jpg,jpeg,png 파일만 가���합니다.</div>\r\n                                </td>\r\n\r\n                                {/* 출력용 */}\r\n                                <td colSpan=\"4\" hidden={!forPrint && props.cDataForm === 'I' && props.newDataForm === 'N'}>\r\n                                    {ceoIdCardImg}\r\n                                </td>\r\n\r\n                                <td colSpan=\"5\" hidden={!forPrint && props.cDataForm !== 'I' && props.newDataForm !== 'N'}>\r\n                                    {ceoRegistCardImg}\r\n                                </td>\r\n                            </tr>\r\n\r\n\r\n                            {/* 계약정보란 */}\r\n                            <tr>\r\n                                <th rowSpan=\"7\" className=\"info\">계약정보</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"info\">계약구분</th>\r\n                                <td hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onContractTpHandler} value={contractTp}>\r\n                                        {contractTps.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                {/* 계약구분 출력용 */}\r\n                                <td hidden={!forPrint}>\r\n                                    {contractTpPrint}\r\n                                </td>\r\n\r\n                                <th className=\"info\">호실</th>\r\n\r\n                                <td hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onContractTpValHandler} value={contractTpVal}>\r\n                                        {contractTpVals.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n                                {/* 호실 출력용 */}\r\n                                <td hidden={!forPrint}>\r\n                                    {contractTpVals.map(item => (\r\n                                        <option key={item.key} value={item.key}>{item.value}</option>\r\n                                    ))}\r\n                                </td>\r\n\r\n                                <th className=\"info\">사물함</th>\r\n                                <td hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onRoomLockerTpHandler} value={roomLockerTp}>\r\n                                        {roomLockers.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n                                {/* 사물함 출력용 */}\r\n                                <td hidden={!forPrint}>\r\n                                    {roomLockers.map(item => (\r\n                                        <option key={item.key} value={item.key}>{item.value}</option>\r\n                                    ))}\r\n                                </td>\r\n\r\n                                <th className=\"info\">월회비</th>\r\n                                <td hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={contractMoney} id=\"contractMoney\" name=\"contractMoney\"\r\n                                        onChange={onContractMoneyHandler} />\r\n\r\n                                </td>\r\n\r\n                                {/* 월회비 출력용 */}\r\n                                <td hidden={!forPrint}>\r\n                                    {contractMoney}\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"info\">이용기간</th>\r\n                                <td hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 3 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={contractTerm} id=\"contractTerm\" name=\"contractTerm\"\r\n                                        onChange={onContractTermHandler} />\r\n\r\n                                &nbsp;개월 &nbsp;\r\n\r\n                                <DatePicker\r\n                                        className=\"dateSize\"\r\n                                        locale=\"ko\"\r\n                                        selected={startAsk_date.setHours(9, 0, 0, 0)}\r\n                                        onChange={date => setStartAsk_date(date)}\r\n                                        dateFormat=\"yyyy-MM-dd\"\r\n                                    />\r\n\r\n                                    {/* <DatePicker\r\n                                        id=\"dateSize\"\r\n                                        multiple={false}\r\n                                        locale=\"ko\"\r\n                                        selected={startAsk_date.setHours(9, 0, 0, 0)}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                                        onChange={date => setStartAsk_date(date)}\r\n                                        selectsStart\r\n                                        startDate={startAsk_date.setHours(9, 0, 0, 0)}\r\n                                        endDate={endAsk_date}\r\n                                        dateFormat=\"yyyy.MM.dd\"\r\n                                    />&nbsp; */}\r\n                           &nbsp; ~ &nbsp;\r\n\r\n                            <Form.Control style={{ width: 8 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={dateEnd} readOnly />\r\n\r\n                                    <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} onClick={onDateHandler} className=\"useContractBtn\"\r\n                                    >중복확인</Button>\r\n\r\n                                </td>\r\n\r\n                                {/* 이용기간 출력용 */}\r\n                                <td hidden={!forPrint}>\r\n                                    {contractTerm}개월 &nbsp;\r\n\r\n                                <DatePicker\r\n                                        className=\"dateSize\"\r\n                                        multiple={false}\r\n                                        locale=\"ko\"\r\n                                        selected={startAsk_date.setHours(9, 0, 0, 0)}//Front = 한국시 BackEnd = 표준시 9시간차이\r\n                                        onChange={date => setStartAsk_date(date)}\r\n                                        selectsStart\r\n                                        startDate={startAsk_date.setHours(9, 0, 0, 0)}\r\n                                        endDate={endAsk_date}\r\n                                        dateFormat=\"yyyy.MM.dd\"\r\n\r\n                                    />&nbsp;\r\n                            ~ &nbsp;\r\n                            <input type=\"text\" disabled={true} value={dateEnd} size=\"8\" />\r\n                                    {/* 신규계약 중복확인 */}\r\n                                    <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} onClick={onDateHandler} className=\"useContractBtn\"\r\n                                        hidden={forPrint}>중복확인</Button>\r\n\r\n                                </td>\r\n\r\n                                <th className=\"info\">납부여부</th>\r\n                                <td hidden={forPrint}>\r\n\r\n                                    &nbsp;\r\n                                    <div onChange={changeRadio}>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            id=\"paymentY\"\r\n                                            name=\"paymentFlag\"\r\n                                            value={paymentY}\r\n                                            checked={selectedOption === 'Y'}\r\n                                            readOnly\r\n                                        ></input>\r\n\r\n                                        네\r\n                                        &nbsp;&nbsp;\r\n\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            id=\"paymentN\"\r\n                                            name=\"paymentFlag\"\r\n                                            value={paymentN}\r\n                                            checked={selectedOption === 'N'}\r\n                                            readOnly\r\n                                        ></input>\r\n\r\n                                        아니오\r\n                                    </div>\r\n                                </td>\r\n\r\n\r\n\r\n                                <td hidden={!forPrint}>\r\n                                    {payedStatusForPrint}\r\n                                </td>\r\n\r\n                                <th className=\"info\">납부방법</th>\r\n                                <td hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onPayMethodHandler} value={payMethod}>\r\n                                        {payMethods.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                <td hidden={!forPrint}>\r\n                                    {payMethodPrint}\r\n                                </td>\r\n\r\n                                <th className=\"info\">예치금</th>\r\n                                <td hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={contractMoney} id=\"contractMoney\" name=\"contractMoney\"\r\n                                        onChange={onContractMoneyHandler} />\r\n\r\n                                </td>\r\n\r\n                                {/*예치금 출력용  */}\r\n                                <td hidden={!forPrint}>\r\n                                    {contractMoney}\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"info\">특약사항</th>\r\n                                <td colSpan=\"9\" className=\"alignLeft\" id=\"infoPadding\" hidden={forPrint}>\r\n                                    계약기간 만료 또는 종료시 사업지 주소지와 전화를 7일이내 이전해야 하고,<br />\r\n                            계약을 해지할 경우 7일이전에 서면 또는 구두 통보해야함.<br />\r\n\r\n                                    <Form.Control as=\"textarea\" rows={3} value={comment} id=\"comment\" name=\"comment\"\r\n                                        onChange={onCommentHandler} />\r\n\r\n                                </td>\r\n\r\n                                {/* 특약사항 출력용 */}\r\n                                <td colSpan=\"9\" className=\"alignLeft\" id=\"infoPadding\" hidden={!forPrint}>\r\n                                    계약기간 만료 또는 종료시 사업지 주소지와 전화를 7일이내 이전해야 하고,<br />\r\n                            계약을 해지할 경우 7일이전에 서면 또는 구두 통보해야함.<br />\r\n                                    <hr></hr>\r\n                                    {comment}\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"info\">이용범위</th>\r\n                                <td colSpan=\"9\" className=\"alignLeft\" id=\"etcInfoPadding\">\r\n                                    사무공간 제공과 부대시설(회의실,접견실,휴게실,IT기기,유무선 통신망)을 이용 가능\r\n                    </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"basicInfoTitle\">센터</th>\r\n                                <td className=\"basicInfo\">(주)에스원테크</td>\r\n\r\n                                <th className=\"basicInfoTitle\">전화번호</th>\r\n                                <td colSpan=\"2\" className=\"basicInfo\">070-4355-2312</td>\r\n\r\n                                <th className=\"basicInfoTitle\">E-mail</th>\r\n                                <td colSpan=\"2\" className=\"basicInfo\">swonbiz@s-onetech.com</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"basicInfoTitle\">성명</th>\r\n                                <td className=\"basicInfo\">이정희</td>\r\n\r\n                                <th className=\"basicInfoTitle\">FAX번호</th>\r\n                                <td colSpan=\"2\" className=\"basicInfo\">070-4015-3344/02-6203-4433</td>\r\n\r\n                                <th colSpan=\"2\" className=\"info\">계약접근경로</th>\r\n                                <td hidden={forPrint}>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onContractPathHandler} value={contractPath || ''}>\r\n                                        {contractpaths.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                {/* 계약접근경로 출력용 */}\r\n                                <td hidden={!forPrint}>\r\n                                    {accessPrint}\r\n                                </td>\r\n\r\n                            </tr>\r\n\r\n\r\n                            <tr>\r\n                                <td colSpan=\"9\" className=\"alignLeft\" id=\"borderBottom\">\r\n                                    -에스원비즈 삼성센터(이하 \"갑\")과 상기 회원(이하 \"을\")은 \"갑\"이 제공하는 서비스를 \"을\"이 이용함에 있어서 수반되는 사항을 본\r\n                                    이용계약서 약관대로 체결하고, 본 &nbsp; 계약의 성립을 증명하기 위하여 본 이용계약서 2부를 작성하여 기명, 날인하고 각 한 부씩 보관한다.\r\n                        <br />-본 이용계약서로는 임대차계약서를 대신할 수 없음\r\n                    </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan=\"9\"\r\n                                    id=\"borderTopBottom\"> 2021년 &nbsp;&nbsp; {new Date().getMonth() + 1}월 &nbsp;&nbsp; {new Date().getDate()}일\r\n                    </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td colSpan=\"5\" className=\"alignLeft\" id=\"fstTextSpacing\">\r\n\r\n                                    갑: &nbsp; &nbsp; &nbsp;\r\n                        서울특별시 강남구 봉은사로 63길 11 명화빌딩 3, 4층(삼성동) <br />\r\n\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;㈜ 에스원테크 최현수 (인)<br />\r\n\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;계좌번호 : 우리은행 1005-002-433395<br />\r\n\r\n                                </td>\r\n                                <td colSpan=\"4\" className=\"alignLeft\" id=\"sndTextSpacing\">\r\n                                    을 :&nbsp; &nbsp; &nbsp;\r\n                            {zipcode} {empAddress} {empDetailAddress}<br />\r\n                            &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {memberNm} {empIdName} (인)<br />\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className=\"btn-center\" hidden={forPrint}>\r\n                        {/* 신규계약 */}\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} hidden={props.newDataForm === 'N' || props.cDataForm === 'I'}\r\n                            onClick={temporaryStorage} >임시저장</Button>\r\n\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"new\"\r\n                            hidden={props.newDataForm === 'N' || props.cDataForm === 'I'}\r\n                            onClick={onSubmitHandler}   >저장</Button>\r\n\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"memberId\" hidden={props.newDataForm !== 'N'}\r\n                            onClick={newMemberIdStorage} >저장</Button>\r\n\r\n                        {/* 가계약을 확정으로  / 수정한 것 저장하기 */}\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"contractId\" hidden={props.cDataForm !== 'I' || hideEndBtn == 'Y'}\r\n                            onClick={newContractIdStorage} >저장</Button>\r\n\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} hidden={props.cDataForm !== 'I'} onClick={onPrintHandler} >출력</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} id=\"mem\" hidden={props.newDataForm !== 'N'} onClick={onPrintMemberHandler} >출력</Button>\r\n\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 150 }} onClick={onleaseAgreementHandler} id=\"btnWidth\" >임대차 계약서</Button>\r\n\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} className=\"contractId\" hidden={props.cDataForm !== 'I' || hideEndBtn == 'Y'}\r\n                            onClick={newEndHandler} >종료</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} hidden={userStatus !== 'T'}\r\n                            onClick={onDeleteHandler} >삭제</Button>\r\n\r\n\r\n\r\n                        <Button hidden={props.cDataForm === 'I' || props.newDataForm === 'N'} variant=\"contained\" color=\"primary\" style={{ width: 70 }}\r\n                            onClick={props.onHandleClickClose} >닫기</Button>\r\n                        {/* S010100050 -> 계약Id클릭시 닫기 */}\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }}\r\n                            hidden={props.cDataForm !== 'I'} onClick={props.onConContractHandler} >닫기</Button>\r\n                        {/* S010100050 -> 신규계약클릭시 닫기  */}\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }}\r\n                            hidden={props.newDataForm !== 'N'} onClick={props.onNewContractHandler} >닫기</Button>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Button onClick={onPrintSheetHandler} variant=\"contained\" color=\"primary\" style={{ width: 70 }} hidden={!forPrint} >출력</Button>\r\n\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={printSheetOpen}\r\n                onClose={onPrintSheetClose}>\r\n                <S010100010 dataNum={rNum} cDataForm={'I'} />\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} onClick={onPrintSheetClose} color=\"primary\" hidden={forPrint} >닫기</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={printMemberSheetOpen}\r\n                onClose={onPrintMemberSheetClose}>\r\n                <S010100010 dataMem={modalMemberId} newDataForm={'N'} />\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} onClick={onPrintMemberSheetClose} hidden={forPrint} >닫기</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={leaseAgreementOpen}\r\n                onClose={onleaseAgreementClose}>\r\n                <LeaseAgreement dataNum={rNum} />\r\n                <DialogActions>\r\n                    {/* <input type=\"button\" onClick={onleaseAgreementClose} color=\"primary\" value=\"닫기\" hidden={forPrint} /> */}\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={memberStTModal}\r\n                onClose={memberStTModalClose}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                    계약ID: \"{rNum}\" 번\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <DialogTitle id=\"alert-dialog-title\">{empIdName + \" 회원님의 가계약건을 수정하시려면 수정하기를, 확정하시려면 저장하기를 선택하세요.\"}</DialogTitle>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={memStTModifyHandler} color=\"primary\" style={{ width: 100 }} >\r\n                        수정하기\r\n                </Button>\r\n                    <Button onClick={memberStHandler} color=\"primary\" style={{ width: 100 }}>\r\n                        저장하기\r\n                </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </form>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default S010100010;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100090.js",["293","294","295","296","297","298","299","300","301","302","303","304"],"import React, { Fragment, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport S010100100 from './S010100100';\r\nimport './css/S010100090.css';\r\n\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { DatePicker } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport moment from 'moment';\r\n\r\nimport xlsx from 'xlsx';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport {useStyles} from './Test';\r\n\r\nlet empNm = '';\r\nlet chkSt = '';\r\nlet memberId;\r\nlet empIdM;\r\n\r\nfunction S010100090(props) {\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n\r\n    const [empInfo, setEmpInfo] = useState([].slice(0, 20));\r\n\r\n    const [staffName, setStaffName] = useState('');\r\n    const [memberNm, setMemberNm] = useState('');\r\n    const [staffClass, setStaffClass] = useState('');\r\n    const [staffClasses, setStaffClasses] = useState([{}])\r\n    const [closeStatus, setCloseStatus] = useState('');\r\n    const [startDate, setStartDate] = useState(new Date(moment().date('01')));\r\n    const [endDate, setEndDate] = useState(new Date());\r\n\r\n    const [empChecked, setEmpChecked] = useState([]);\r\n\r\n    const [empName, setEmpName] = useState('');\r\n    const [memId, setMemId] = useState(0);\r\n    const [empId,setEmpId] = useState();\r\n    const [dataForm, setdataForm] = useState('');\r\n    const [retireChecked, setRetireChecked] = useState([]);\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(empInfo.length / usersPerPage);\r\n\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    // 직원 구분\r\n    useEffect(() => {\r\n        axios.post('/api/s010100090/classification')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                    setStaffClasses(arr);\r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        empList();\r\n    }, [])\r\n\r\n    const empList = () => {\r\n\r\n        let body = {\r\n            staffName,\r\n            memberNm,\r\n            staffClass,\r\n            retireChecked,\r\n            startDate,\r\n            endDate\r\n        }\r\n\r\n        axios.post('/api/s010100090/empList', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    setEmpInfo(response.data.rows);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"직원 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    const staffNameHandler = (event) => {\r\n        setStaffName(event.currentTarget.value);\r\n    }\r\n    const memberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const staffClassHandler = (event) => {\r\n        setStaffClass(event.currentTarget.value);\r\n    }\r\n\r\n    const closeStatusHandler = (event) => {\r\n        setCloseStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onHandleClickClose = useCallback(() => {\r\n        setStoreOpen(false);\r\n        empList();\r\n    });\r\n\r\n    const onEmpSearchHandler = () => {\r\n        empList();\r\n    }\r\n\r\n    \r\n\r\n    const retireHandleToggle = (value) => {\r\n\r\n        // 승인empId 현재 index값\r\n        const currentIndex = retireChecked.indexOf(value);\r\n        // 등록시 회사명\r\n\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n      \r\n        const newChecked = [...retireChecked];\r\n        // // console.log('newChecked',newChecked);\r\n        // // console.log(retireChecked);\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setRetireChecked(newChecked);\r\n     \r\n\r\n    }\r\n\r\n    const handleToggle = (value) => {\r\n\r\n        // 승인empId 현재 index값\r\n        const currentIndex = empChecked.indexOf(value);\r\n    \r\n\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        \r\n        const newChecked = [...empChecked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setEmpChecked(newChecked);\r\n        // console.log(empChecked);\r\n        newChecked.length > 0 ? chkSt = 'check' : chkSt = '';\r\n\r\n    }\r\n\r\n\r\n\r\n    // 등록\r\n    const onRegistHandler = () => {\r\n        if (empChecked.length === 0) {\r\n            alert('선택하세요');\r\n        } else if (empChecked.length > 1) {\r\n            alert('하나만 체크하세요');\r\n        } else {\r\n            const checkedList = empChecked[0].split(',');\r\n            // console.log(checkedList[0]);\r\n            memberId = checkedList[0];\r\n            setEmpName(checkedList[2]);\r\n            setMemId(checkedList[0]);\r\n            setdataForm('I');\r\n            // console.log('empNm',empNm);\r\n            setStoreOpen(true);\r\n        }\r\n    }\r\n    \r\n    // 수정\r\n    const onModifyHandler = (event) => {\r\n        if (empChecked.length === 0) {\r\n            alert('선택하세요');\r\n        } else if (empChecked.length > 1) {\r\n            alert('하나만 체크하세요');\r\n        } else {\r\n            const checkedList = empChecked[0].split(',');\r\n            empIdM = checkedList[1];\r\n            // console.log('empIdM',empIdM);\r\n            setdataForm('U');\r\n            setEmpId(empIdM);\r\n            setStoreOpen(true);\r\n    \r\n        }\r\n    }\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = (event) => {\r\n        let checkedMemberId;\r\n\r\n        // // console.log('checkedMemberId',checkedMemberId);\r\n        // // console.log('empChecked',empChecked);\r\n\r\n        for(let i = 0; empChecked.length > i; i++){\r\n            \r\n            // // console.log('empChecked[i].split',empChecked[i].split(','));\r\n            checkedMemberId = empChecked[i].split(',');    \r\n    }\r\n    \r\n    if (checkedMemberId == undefined ||checkedMemberId == null) {\r\n        alert('승인할 회원을 선택하세요');\r\n    // }else if(JSON.parse(sessionStorage.getItem(\"member\"))[1] != checkedMemberId[0]){\r\n    //     alert('자회사의 직원승인만 가능합니다.');\r\n    }else{\r\n            let arr = [];\r\n\r\n            for(let i = 0; empChecked.length > i; i++){\r\n                const checkedList = empChecked[i].split(',');\r\n                // console.log('checkedList[1]',checkedList[1]);\r\n                // console.log('checkedList[0]',checkedList[0]);\r\n                // console.log('checkedList',checkedList);\r\n               \r\n                arr.push(checkedList[1]);\r\n\r\n        }\r\n        \r\n            let body = {\r\n                arr\r\n            }\r\n            \r\n            axios.post('/api/s010100090/approval', body)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        alert('승인처리 되었습니다.');\r\n                        empList();\r\n                        setEmpChecked('');\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert('승인처리에 실패하였습니다.');\r\n                        setEmpChecked('');\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    const cancelConfirm = () => alert('승인 취소하였습니다.');\r\n\r\n    const onApprovalHandler = useConfirm(\r\n        \"승인하시겠습니까?\",\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n\r\n    const logoutConfirm = () => {\r\n\r\n        axios.post('/api/s010100150/userLogout')\r\n        .then(response => {\r\n            if (response.data.logoutResult == true) {\r\n            alert('로그아웃 하였습니다.');\r\n            sessionStorage.removeItem('member');\r\n            sessionStorage.clear();\r\n            props.history.push('/');\r\n            }else if(response.data.loginResult == false){\r\n            alert(response.data.message);\r\n            alert('아이디 또는 비밀번호를 확인하세요.');\r\n            }\r\n        })\r\n    \r\n        };\r\n    \r\n        const logounCancelConfirm = () => alert('취소하였습니다.');\r\n    \r\n        const onLogoutHandler = useConfirm(\r\n            \"로그아웃 하시겠습니까?\",\r\n            logoutConfirm,\r\n            logounCancelConfirm\r\n        );\r\n\r\n    const excelHandler = () => {\r\n\r\n        const ws = xlsx.utils.json_to_sheet(empInfo);\r\n       \r\n\r\n        ['회원명', 'member_id', '직번', '성명', '생년월일', '부서', 'emp_id','연락처','직업구분','승인여부','E-mail','password','입사일자','퇴사일자']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][1] = { hidden: true };\r\n        ws['!cols'][6] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"상담현황.xlsx\");\r\n\r\n    }\r\n\r\n \r\n\r\n\r\n    const displayEmpMembers = empInfo.slice(pagesVisited, pagesVisited + usersPerPage).map((empInfo, index) => {\r\n        return (\r\n            <TableRow key={index}>\r\n                <TableCell>\r\n                    <input type=\"checkbox\" checked={empChecked.indexOf(empInfo.MEMBER_ID + ',' + empInfo.EMP_ID + ',' + empInfo.MEMBER_NM)===-1? false :true} onChange={()=> handleToggle(empInfo.MEMBER_ID + ',' + empInfo.EMP_ID + ',' + empInfo.MEMBER_NM)} id={empInfo.MEMBER_ID + ',' + empInfo.EMP_ID} className={empInfo.MEMBER_NM} />\r\n                </TableCell>\r\n                <TableCell>{empInfo.MEMBER_NM}</TableCell>\r\n                <TableCell>{empInfo.EMP_NUMBER}</TableCell>\r\n                <TableCell>{empInfo.NAME}</TableCell>\r\n                <TableCell>{empInfo.BIRTH_DATE}</TableCell>\r\n                <TableCell>{empInfo.DEPT_NM}</TableCell>\r\n                <TableCell>{empInfo.EMP_HP}</TableCell>\r\n                <TableCell>{empInfo.CEO_FLAG}</TableCell>\r\n                <TableCell>{empInfo.EMP_TP}</TableCell>\r\n                <TableCell>{empInfo.APPROVAL_FLAG}</TableCell>\r\n                <TableCell>{empInfo.EMP_EMAIL}</TableCell>\r\n                <TableCell>{empInfo.PWD}</TableCell>\r\n                <TableCell>{empInfo.JOIN_DATE === '00-00-00'||null ? '' :empInfo.JOIN_DATE }</TableCell>\r\n                <TableCell>{empInfo.RETIRE_DATE === '00-00-00'||null ? '' :empInfo.RETIRE_DATE}</TableCell>\r\n            </TableRow>\r\n        );\r\n    }); \r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단파란툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        SwonTech 고객관리시스템\r\n                        </Typography>\r\n                        \r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/* 왼쪽 메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>\r\n                        <div>\r\n                            <div hidden ={sessionStorage.getItem('member') == null}>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <PeopleIcon />\r\n                            </ListItemIcon>\r\n                            <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                                <ShoppingCartIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <DashboardIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                                <BarChartIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <DashboardIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                <LayersIcon />\r\n                                </ListItemIcon>\r\n                                <span onClick ={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n                            </ListItem>\r\n                            </div>\r\n                            <div hidden ={sessionStorage.getItem('member') != null}>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                <LayersIcon />\r\n                                </ListItemIcon>\r\n                                <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                            </ListItem>\r\n                            </div>\r\n                        </div></List>\r\n                  \r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <form onSubmit={onSubmitHandler}>\r\n                                        입사일자   &nbsp;\r\n                                    {/* date클릭할 때 고정 */}\r\n\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(date)}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            defaultValue={moment(moment().date('01'), 'YYYY-MM-DD')}\r\n                                        />&nbsp; ~ &nbsp;\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(date)}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            minDate={startDate}\r\n                                            defaultValue={moment(moment(), 'YYYY-MM-DD')}\r\n                                        />\r\n\r\n                                    &nbsp;&nbsp;회원명&nbsp;&nbsp;\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                            value={memberNm} id=\"memberNm\" name=\"memberNm\"\r\n                                            onChange={memberNmHandler} />\r\n\r\n                                    &nbsp;\r\n                                    성명&nbsp;&nbsp;\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                            value={staffName} id=\"staffName\" name=\"staffName\"\r\n                                            onChange={staffNameHandler} />\r\n\r\n                                        &nbsp;&nbsp;\r\n\r\n                                        직원구분&nbsp;&nbsp;\r\n                                        <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                            multiple={false} onChange={staffClassHandler} value={staffClass}>\r\n                                            {staffClasses.map((item,index) => (\r\n                                                <option key={index} value={item.key}>{item.value}</option>\r\n                                            ))}\r\n\r\n                                        </Form.Control>\r\n                                        &nbsp;&nbsp;\r\n                                        퇴사여부&nbsp;&nbsp;\r\n                                        <input type=\"checkbox\" checked = {retireChecked.indexOf(\"Y\") ===-1 ? false:true} onChange={() => retireHandleToggle(\"Y\")} />\r\n\r\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                        <Button variant=\"contained\" style={{ width: 80 }} color=\"primary\" href=\"#contained-buttons\"\r\n                                            onClick={onEmpSearchHandler}>\r\n                                            조회\r\n                                        </Button>\r\n\r\n\r\n                                    </form>\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                            <table className=\"btn\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td id=\"alignLeft\">\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" href=\"#contained-buttons\"\r\n                                                onClick={onRegistHandler}> 등록 </Button>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" href=\"#contained-buttons\"\r\n                                                onClick={onModifyHandler}> 수정 </Button>\r\n                                            <span hidden ={JSON.parse(sessionStorage.getItem(\"member\"))[0] === 'N'}>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" href=\"#contained-buttons\"\r\n                                                onClick={onApprovalHandler}> 승인 </Button>\r\n                                            </span>\r\n                                        </td>\r\n                                        <td id=\"alignRight\">\r\n                                            <Button variant=\"contained\" style={{ width: 140 }} color=\"primary\" href=\"#contained-buttons\" onClick={excelHandler}> 엑셀다운로드 </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </thead>\r\n                            </table>\r\n\r\n\r\n                            {/* 결과 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                        <Title>직원 현황</Title>\r\n                                        <Table size=\"small\">\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell>선택</TableCell>\r\n                                                    <TableCell>회원명</TableCell>\r\n                                                    <TableCell>직번</TableCell>\r\n                                                    <TableCell>성명</TableCell>\r\n                                                    <TableCell>생년월일</TableCell>\r\n                                                    <TableCell>부서</TableCell>\r\n                                                    <TableCell>연락처</TableCell>\r\n                                                    <TableCell>대표자여부</TableCell>\r\n                                                    <TableCell>직원구분</TableCell>\r\n                                                    <TableCell>승인여부</TableCell>\r\n                                                    <TableCell>E-mail</TableCell>\r\n                                                    <TableCell>password</TableCell>\r\n                                                    <TableCell>입사일자</TableCell>\r\n                                                    <TableCell>퇴사일자</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n\r\n                                            <TableBody>\r\n                                                {displayEmpMembers}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                        <div id=\"reactPage\">\r\n                                            <ReactPaginate\r\n                                                previousLabel={\"Previous\"}\r\n                                                nextLabel={\"Next\"}\r\n                                                pageCount={pageCount}\r\n                                                onPageChange={changePage}\r\n                                                containerClassName={\"paginationBtns\"}\r\n                                                previousLinkClassName={\"previousBtn\"}\r\n                                                nextLinkClassName={\"nextBtn\"}\r\n                                                disabledClassName={\"paginationDisabled\"}\r\n                                                activeClassName={\"paginationActive\"}\r\n                                            />\r\n                                        </div>\r\n                                    </React.Fragment>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n            <Dialog\r\n                    maxWidth={\"lg\"}\r\n                    open={storeOpen}>\r\n                    <S010100100 \r\n                    name={empName} \r\n                    memId={memberId}\r\n                    empIdM={empIdM} \r\n                    dataForm={dataForm}\r\n                    empList={empList} \r\n                    onHandleClickClose={onHandleClickClose} \r\n                    setStoreOpen={setStoreOpen}\r\n                    setEmpChecked={setEmpChecked}\r\n                    />\r\n            </Dialog>\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100090;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100040.js",["305","306","307","308","309","310","311"],"import React, { Fragment, useState, useEffect, useCallback } from 'react';\r\nimport axios from \"axios\";\r\nimport './css/S010100040.css';\r\nimport S010100010 from './S010100010';\r\nimport S010100050 from './S010100050';\r\nimport s010100040 from './service/s010100040';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { DatePicker } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport moment from 'moment';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\n// import {useStyles} from './Test';\r\n\r\nlet memberId = '';\r\n\r\nconst drawerWidth = 240;\r\n\r\nlet useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n\r\n}))\r\n\r\n\r\nfunction S010100040(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [modalOpen,setModalOpen] = React.useState(false);\r\n    const [memberNm,setMemberNm] = useState('')\r\n    const [regNo,setRegNo] = useState('')\r\n    const [memberTp,setMemberTp] = useState('')\r\n    const [contractStatus, setContractStatus] = useState('')\r\n    const [memberSt, setMemberSt] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [tbMember, setTbMember] = useState([].slice(0, 20))\r\n    const [memberStatus, setMemberStatus] = useState([{}]);\r\n    const [memberType, setMemberType] = useState([{}]);\r\n    const [startDate, setStartDate] = useState(moment().date('01'));\r\n    const [endDate, setEndDate] = useState(moment());\r\n    const [open, setOpen] = React.useState(true);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    const [memberIdModal, setMemberIdModal] = useState(0);\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(tbMember.length / usersPerPage);\r\n\r\n\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    // 조회\r\n    const memberList = () => {\r\n    \r\n        let searchListValue = {\r\n            startDate,\r\n            endDate,\r\n            memberNm,\r\n            regNo,\r\n            name,\r\n            memberTp,\r\n            contractStatus,\r\n            memberSt\r\n        }\r\n\r\n\r\n        s010100040.getMemStList(searchListValue).then((res) => {\r\n            // console.log('res.data',res.data);\r\n            if(res.status === 200){\r\n                setTbMember(res.data);\r\n            }else{\r\n                alert('실패');\r\n            }\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let cdTpValue='MEMBER_TP';\r\n        \r\n        s010100040.getSelectBox(cdTpValue).then((res) => {\r\n            \r\n            if(res.status === 200){\r\n                \r\n                let memTpArr = [{ key: '', value: '전체' }]\r\n               \r\n                res.data.map((data) =>\r\n                    memTpArr.push({\r\n                        value: data.cd_v_meaning,\r\n                        key: data.cd_v\r\n                    })\r\n                    );\r\n\r\n                setMemberType(memTpArr);               \r\n            }else{\r\n                alert('실패');\r\n            }\r\n        });\r\n\r\n        cdTpValue='MEMBER_ST';\r\n\r\n        s010100040.getSelectBox(cdTpValue).then((res) => {\r\n            \r\n            if(res.status === 200){\r\n                \r\n                let memStArr = [{ key: '', value: '전체' }]\r\n\r\n                res.data.map((data) =>\r\n                    memStArr.push({\r\n                        value: data.cd_v_meaning,\r\n                        key: data.cd_v\r\n\r\n                    }));\r\n\r\n                setMemberStatus(memStArr);            \r\n            }else{\r\n                alert('실패');\r\n            }\r\n        });\r\n\r\n        // 전체조회\r\n        memberList();\r\n\r\n    }, [])\r\n\r\n\r\n    // 조회버튼\r\n    const onSearchSubmitHandler = () => {\r\n        memberList();\r\n    }\r\n\r\n    const onHandleClickOpen = () => {\r\n        setStoreOpen(true);\r\n    };\r\n\r\n    const onHandleClickClose = useCallback(() => {\r\n        setStoreOpen(false);\r\n        memberList();\r\n    });\r\n\r\n    const memberStHandler = (event) => {\r\n        setMemberSt(event.currentTarget.value);\r\n    }\r\n\r\n    const nameHandler = (event) => {\r\n        setName(event.currentTarget.value);\r\n    }\r\n\r\n    const memberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const regNoHandler = (event) => {\r\n        setRegNo(event.currentTarget.value);\r\n    }\r\n\r\n    const memberTpHandler = (event) => {\r\n        setMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onHandleDetailClickOpen = (event) => {\r\n        memberId = event.target.id;\r\n        setMemberIdModal(memberId);\r\n        setModalOpen(true);\r\n    }\r\n\r\n    const onHandleDetailClickClose = useCallback(() => {\r\n        memberList();\r\n        setModalOpen(false);\r\n    });\r\n\r\n    const onSNSHandler = (event) => {\r\n           // 추후개발\r\n    }\r\n\r\n    const onEmailHandler = (event) => {\r\n           // 추후개발\r\n    }\r\n\r\n    const excelHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const ws = xlsx.utils.json_to_sheet(tbMember);\r\n\r\n        ['NO', '사업자번호', '회원명', '회원구분', '상태', '대표자 성명', '대표자 연락처', '대표자 E-mail', '종료여부']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][0] = { hidden: true };\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"회원현황.xlsx\");\r\n    }\r\n\r\n    const displayMemSt = tbMember.slice(pagesVisited, pagesVisited + usersPerPage).map((tbMember, index) => {\r\n        return (\r\n            <TableRow key={index}>\r\n                <TableCell id={tbMember.tbS10Member010.member_id} >{tbMember.tbS10Member010.member_id}</TableCell>\r\n                <TableCell>{tbMember.tbS10Member010.member_nm}</TableCell>\r\n                <TableCell>{tbMember.tbS10Member010.reg_no}</TableCell>\r\n                <TableCell onClick={onHandleDetailClickOpen} className='underLineForDetail' id={tbMember.tbS10Member010.member_id}>{tbMember.name}</TableCell>\r\n                <TableCell>{tbMember.emp_hp}</TableCell>\r\n                <TableCell>{tbMember.emp_email}</TableCell>\r\n                <TableCell>{tbMember.tbS10Member010.member_tp}</TableCell>\r\n                <TableCell>{tbMember.tbS10Member010.member_st}</TableCell>\r\n                <TableCell>{tbMember.tbS10Member010.tbS10Contract010.end_flag}</TableCell>\r\n            </TableRow>\r\n        )\r\n    });\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n    \r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n    \r\n        return confirmAction;\r\n      };\r\n    \r\n\r\n      const approvalConfirm = () => {\r\n    \r\n        axios.post('/api/s010100150/userLogout')\r\n        .then(response => {\r\n          if (response.data.logoutResult == true) {\r\n            alert('로그아웃 하였습니다.');\r\n            sessionStorage.removeItem('member');\r\n            sessionStorage.clear();\r\n            props.history.push('/');\r\n          }else if(response.data.loginResult == false){\r\n            alert(response.data.message);\r\n            alert('아이디 또는 비밀번호를 확인하세요.');\r\n          }\r\n        })\r\n    \r\n      };\r\n    \r\n      const cancelConfirm = () => alert('취소하였습니다.');\r\n    \r\n      const onLogoutHandler = useConfirm(\r\n          \"로그아웃 하시겠습니까?\",\r\n          approvalConfirm,\r\n          cancelConfirm\r\n      );\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단파란툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        SwonTech 고객관리시스템\r\n                        </Typography>\r\n                      \r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/* 왼쪽 메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                        <List>\r\n                            <div>\r\n                                <div hidden ={sessionStorage.getItem('member') === null}>\r\n                                    <ListItem button>\r\n                                    <ListItemIcon>\r\n                                    <PeopleIcon />\r\n                                    </ListItemIcon>\r\n                                    <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n                                    </ListItem>\r\n                                    <ListItem button>\r\n                                    <ListItemIcon>\r\n                                        <ShoppingCartIcon />\r\n                                    </ListItemIcon>\r\n                                    <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n                                    </ListItem>\r\n                                    <ListItem button>\r\n                                    <ListItemIcon>\r\n                                    <DashboardIcon />\r\n                                    </ListItemIcon>\r\n                                    <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n                                    </ListItem>\r\n                                    <ListItem button>\r\n                                    <ListItemIcon>\r\n                                        <BarChartIcon />\r\n                                    </ListItemIcon>\r\n                                    <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n                                    </ListItem>\r\n                                    <ListItem button>\r\n                                    <ListItemIcon>\r\n                                    <DashboardIcon />\r\n                                    </ListItemIcon>\r\n                                    <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n                                    </ListItem>\r\n                                    <ListItem button>\r\n                                        <ListItemIcon>\r\n                                        <LayersIcon />\r\n                                        </ListItemIcon>\r\n                                        <span onClick={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n                                    </ListItem>\r\n                                </div>\r\n                                <div hidden ={sessionStorage.getItem('member') != null}>\r\n                                    <ListItem button>\r\n                                        <ListItemIcon>\r\n                                        <LayersIcon />\r\n                                        </ListItemIcon>\r\n                                        <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                                    </ListItem>\r\n                                </div>\r\n                        </div>\r\n                    </List>\r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper style={{ padding: 16 }}>\r\n                                    <form onSubmit={onSearchSubmitHandler}>\r\n                                        <div className = \"searchMenu\">\r\n                                            계약일자 \r\n                                            &nbsp;\r\n                                            <DatePicker\r\n                                            locale='ko'\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(moment(date))}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            defaultValue={startDate}\r\n                                        /> &nbsp;~&nbsp;\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(moment(date))}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            // minDate={startDate}\r\n                                            defaultValue={endDate}\r\n                                        />\r\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                        회원명&nbsp;\r\n                                            <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                                value={memberNm} id=\"memberNm\" name=\"memberNm\" onChange={memberNmHandler} />\r\n\r\n                   &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                    사업자번호 &nbsp;\r\n                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                                value={regNo} id=\"regNo\" name=\"regNo\"\r\n                                                onChange={regNoHandler} />\r\n\r\n                   &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                    대표자명 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" type=\"text\"\r\n                                                value={name} id=\"name\" name=\"name\"\r\n                                                onChange={nameHandler} />\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    회원구분 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                                multiple={false} onChange={memberTpHandler} value={memberTp}>\r\n                                                {memberType.map((item,index) => (\r\n                                                    <option key={index} value={item.key}>{item.value}</option>\r\n                                                ))}\r\n\r\n                                            </Form.Control>\r\n\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                                            </div>\r\n                                        <div className = \"searchMenu\">\r\n                                    \r\n                    상태 &nbsp;\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\"\r\n                                                multiple={false} onChange={memberStHandler} value={memberSt}>\r\n                                                {memberStatus.map((item,index) => (\r\n                                                    <option key={index} value={item.key}>{item.value}</option>\r\n                                                ))}\r\n\r\n                                            </Form.Control>\r\n\r\n\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                    <Button variant=\"contained\" style={{ width: 80 }} color=\"primary\" onClick={onSearchSubmitHandler}>\r\n                                                조회\r\n                                    </Button>\r\n                                        </div>\r\n                                    </form>\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                            <table className=\"btn\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td colSpan=\"5\" id=\"alignLeft\">\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" onClick={onHandleClickOpen} >\r\n                                                신규회원\r\n                                            </Button>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" onClick={onSNSHandler} >\r\n                                                SNS\r\n                                            </Button>\r\n                                            <Button variant=\"contained\" style={{ width: 100 }} color=\"primary\" onClick={onEmailHandler} >\r\n                                                메일전송\r\n                                            </Button>\r\n                                        </td>\r\n\r\n\r\n                                        <td colSpan=\"5\" id=\"alignRight\">\r\n                                            <Button variant=\"contained\" style={{ width: 140 }} color=\"primary\" onClick={excelHandler}>\r\n                                                엑셀다운로드\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </thead>\r\n                            </table>\r\n\r\n                            {/* 결과 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                        <Title>회원 현황</Title>\r\n                                        <Table size=\"small\">\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell rowSpan=\"2\">No</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">회원명</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">사업자번호</TableCell>\r\n                                                    <TableCell colSpan=\"3\">대표자</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">회원구분</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">상태</TableCell>\r\n                                                    <TableCell rowSpan=\"2\">종료여부</TableCell>\r\n                                                </TableRow>\r\n                                                <TableRow>\r\n                                                    <TableCell>성명</TableCell>\r\n                                                    <TableCell>연락처</TableCell>\r\n                                                    <TableCell>E-mail</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {displayMemSt}\r\n                                            </TableBody>\r\n                                        </Table>\r\n\r\n                                    </React.Fragment>\r\n\r\n                                    <div id=\"reactPage\">\r\n                                        <ReactPaginate\r\n                                            previousLabel={\"Previous\"}\r\n                                            nextLabel={\"Next\"}\r\n                                            pageCount={pageCount}\r\n                                            onPageChange={changePage}\r\n                                            containerClassName={\"paginationBtns\"}\r\n                                            previousLinkClassName={\"previousBtn\"}\r\n                                            nextLinkClassName={\"nextBtn\"}\r\n                                            disabledClassName={\"paginationDisabled\"}\r\n                                            activeClassName={\"paginationActive\"}\r\n                                        />\r\n                                    </div>\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n            {/* 이름클릭 상세보기 */}\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={modalOpen}\r\n                onClose={onHandleDetailClickClose}>\r\n                <S010100050 \r\n                    dataMemId={memberIdModal} \r\n                    dataForm={\"U\"} \r\n                    memberList={memberList}\r\n                    onHandleDetailClickClose={onHandleDetailClickClose} \r\n                    setModalOpen={setModalOpen} \r\n                    setModalOpen={setModalOpen}/>\r\n            </Dialog>\r\n\r\n            {/* 신규등록 */}\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={storeOpen}\r\n                onClose={onHandleClickClose}>\r\n                <S010100010 \r\n                    onHandleClickClose={onHandleClickClose} \r\n                    setStoreOpen={setStoreOpen} \r\n                    memberList={memberList}/>\r\n            </Dialog>\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100040;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100060.js",["312","313","314","315"],"import React, { Fragment, useEffect, useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport S010100070 from './S010100070';\r\nimport s010100060 from './service/s010100060';\r\n\r\nimport clsx from 'clsx';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { DatePicker } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport moment from 'moment';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\nimport {useStyles} from './Test';\r\n\r\nlet paymentState = [{ key: '', value: '전체' },\r\n{ key: 'Y', value: 'Y' },\r\n{ key: 'N', value: 'N' }]\r\n\r\nfunction S010100060(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const [userName, setUserName] = useState('');\r\n    const [paymentStatus, setPaymentStatus] = useState('');\r\n    const [payChecked, setPayChecked] = useState([]);\r\n\r\n    const [startDate, setStartDate] = useState(new Date(moment().date('01')));\r\n    const [endDate, setEndDate] = useState(new Date());\r\n\r\n    const [payStatusList, setPayStatusList] = useState([].slice(0,20));\r\n    const [storeOpen, setStoreOpen] = useState(false);\r\n    const [dataAllContract, setDataAllContract] = useState('');\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const paymentList = () => {\r\n\r\n        let paymentSearchVal = {\r\n            startDate:startDate,\r\n            endDate:endDate,\r\n            memberNm:userName,\r\n            paymentStatus:paymentStatus\r\n        }\r\n\r\n        s010100060.getPaymentInfo(paymentSearchVal).then((res) => {\r\n            // console.log('res.data',res.data);\r\n            if(res.status === 200){\r\n                setPayStatusList(res.data);\r\n            }else{\r\n                alert('데이터 조회를 실패하였습니다.');\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n    useEffect(() => {\r\n        paymentList();\r\n    }, [])\r\n\r\n    const paymentSearchHandler = () => {\r\n        paymentList();\r\n    }\r\n\r\n\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    const nameSearchHandler = (event) => {\r\n        setUserName(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStatusHandler = (event) => {\r\n        setPaymentStatus(event.currentTarget.value);\r\n    }\r\n\r\n    const onPayHandleClickClose = useCallback(() => {\r\n        setStoreOpen(false);\r\n        paymentSearchHandler();\r\n    });\r\n\r\n\r\n    const handleToggle = (value) => {\r\n        const currentIndex = payChecked.indexOf(value);\r\n        //전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        const newChecked = [...payChecked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n\r\n        setPayChecked(newChecked);\r\n    }\r\n\r\n    const onPaymenthandler = () => {\r\n        if (payChecked.length === 0) {\r\n            alert('선택하세요');\r\n        } else if (payChecked.length > 1) {\r\n            alert('하나만 체크하세요');\r\n        } else {\r\n            setDataAllContract(payChecked);\r\n            setStoreOpen(true);\r\n        }\r\n    }\r\n\r\n    const excelHandler = () => {\r\n\r\n        const ws = xlsx.utils.json_to_sheet(payStatusList);\r\n\r\n        ['회원명', '납부예정일', '납부여부', '납부일자', '계약기간', '계약기간', '대표자 성명', '대표자 연락처', '대표자 E-mail', '계약ID']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][9] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n        xlsx.writeFile(wb, '고객납부현황.xlsx');\r\n\r\n    }\r\n   \r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n\r\n    const displayPayStList = payStatusList.slice(pagesVisited, pagesVisited + usersPerPage).map((payStatusList, index) => {\r\n        return (\r\n            <TableRow key={payStatusList.contractId}>\r\n                <TableCell><input type='checkbox' checked = {payChecked.indexOf(payStatusList.contractId) === -1 ? false:true} onChange={()=>handleToggle(payStatusList.contractId)} id={payStatusList.contractId} /></TableCell>\r\n                <TableCell>{payStatusList.contractId}</TableCell>\r\n                <TableCell>{payStatusList.memberNm}</TableCell>\r\n                <TableCell>{payStatusList.payPlanDate}</TableCell>\r\n                <TableCell>{payStatusList.payedFlag}</TableCell>\r\n                <TableCell>{payStatusList.payedDate=== '00-00-00'||null ? '' :payStatusList.payedDate}</TableCell>\r\n                <TableCell>{payStatusList.startDate} ~ {payStatusList.endDate}</TableCell>\r\n                <TableCell>{payStatusList.name}</TableCell>\r\n                <TableCell>{payStatusList.empHp}</TableCell>\r\n                <TableCell>{payStatusList.empEmail}</TableCell>\r\n            </TableRow>\r\n        )\r\n    });\r\n\r\n\r\n    const pageCount = Math.ceil(payStatusList.length / usersPerPage);\r\n    \r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n    \r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n    \r\n        return confirmAction;\r\n      };\r\n    \r\n      const approvalConfirm = () => {\r\n    \r\n        axios.post('/api/s010100150/userLogout')\r\n        .then(response => {\r\n          if (response.data.logoutResult == true) {\r\n            alert('로그아웃 하였습니다.');\r\n            sessionStorage.removeItem('member');\r\n            sessionStorage.clear();\r\n            props.history.push('/');\r\n            // console.log (sessionStorage.getItem('member'));\r\n          }else if(response.data.loginResult == false){\r\n            alert(response.data.message);\r\n            alert('아이디 또는 비밀번호를 확인하세요.');\r\n          }\r\n        })\r\n    \r\n      };\r\n    \r\n      const cancelConfirm = () => alert('취소하였습니다.');\r\n    \r\n      const onLogoutHandler = useConfirm(\r\n          \"로그아웃 하시겠습니까?\",\r\n          approvalConfirm,\r\n          cancelConfirm\r\n      );\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단파란툴바 */}\r\n                <AppBar position='absolute' className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge='start'\r\n                            color='inherit'\r\n                            aria-label='open drawer'\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component='h1' variant='h6' color='inherit' noWrap className={classes.title}>\r\n                        SwonTech 고객관리시스템\r\n                        </Typography>\r\n                        \r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/* 왼쪽 메뉴바 */}\r\n                <Drawer\r\n                    variant='permanent'\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>\r\n                        <div>\r\n                            <div hidden ={sessionStorage.getItem('member') == null}>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <PeopleIcon />\r\n                            </ListItemIcon>\r\n                            <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                                <ShoppingCartIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <DashboardIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                                <BarChartIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                            <ListItemIcon>\r\n                            <DashboardIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n                            </ListItem>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                <LayersIcon />\r\n                                </ListItemIcon>\r\n                                <span onClick={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n                            </ListItem>\r\n                            </div>\r\n                        <div hidden ={sessionStorage.getItem('member') != null}>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                <LayersIcon />\r\n                                </ListItemIcon>\r\n                                <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                            </ListItem>\r\n                            </div>\r\n                        </div>\r\n                    </List>\r\n                   \r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth='lg' className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Chart */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <form\r\n                                        onSubmit={onSubmitHandler}\r\n                                    >\r\n                                        납부예정일&nbsp;\r\n                   \r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={startDate}\r\n                                            onChange={date => setStartDate(date)}\r\n                                            selectsStart\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            defaultValue={moment(moment().date('01'),'YYYY-MM-DD')}\r\n                                        /> &nbsp;~&nbsp;\r\n                                        <DatePicker\r\n                                            locale='ko'\r\n                                            selected={endDate}\r\n                                            onChange={date => setEndDate(date)}\r\n                                            selectsEnd\r\n                                            startDate={startDate}\r\n                                            endDate={endDate}\r\n                                            minDate={startDate}\r\n                                            defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                        />\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    회원명&nbsp;\r\n\r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size='sm' type='text'\r\n                                            value={userName}\r\n                                            id='userName'\r\n                                            name='userName'\r\n                                            onChange={nameSearchHandler} />\r\n\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                    납부여부&nbsp;\r\n                    \r\n                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size='sm' as='select'\r\n                                            multiple={false} onChange={paymentStatusHandler} value={paymentStatus}>\r\n                                            {paymentState.map(item => (\r\n                                                <option key={item.key} value={item.key}>{item.value}</option>\r\n                                            ))}\r\n\r\n                                        </Form.Control>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <Button variant='contained' style={{ width: 80 }} color='primary' onClick={paymentSearchHandler}>\r\n                                            조회\r\n                    </Button>\r\n\r\n                                    </form>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                            <table className='btn'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td id=\"alignLeft\">\r\n                                            <Button variant='contained' style={{ width: 80 }} color='primary' onClick = {onPaymenthandler}> 납부 </Button>\r\n                                        </td>\r\n                                        <td id=\"alignRight\">\r\n                                            <Button variant='contained' style={{ width: 140 }} color='primary' onClick = {excelHandler} >엑셀다운로드 </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </thead>\r\n                            </table>\r\n\r\n                            {/* 결과 테이블 */}\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                        <Title>납부 현황</Title>\r\n                                        <Table size='small'>\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell rowSpan='2'>선택</TableCell>\r\n                                                    <TableCell rowSpan='2'>No</TableCell>\r\n                                                    <TableCell rowSpan='2'>회원명</TableCell>\r\n                                                    <TableCell rowSpan='2'>납부예정일</TableCell>\r\n                                                    <TableCell rowSpan='2'>납부여부</TableCell>\r\n                                                    <TableCell rowSpan='2'>납부일자</TableCell>\r\n                                                    <TableCell rowSpan='2'>계약기간</TableCell>\r\n                                                    <TableCell colSpan='3'>대표자</TableCell>\r\n                                                </TableRow>\r\n                                                <TableRow>\r\n                                                    <TableCell>성명</TableCell>\r\n                                                    <TableCell>연락처</TableCell>\r\n                                                    <TableCell>E-mail</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {displayPayStList}\r\n                                            </TableBody>\r\n                                        </Table>\r\n\r\n                                    </React.Fragment>\r\n                                    <div id='reactPage'>\r\n                                        <ReactPaginate\r\n                                            previousLabel={'Previous'}\r\n                                            nextLabel={'Next'}\r\n                                            pageCount={pageCount}\r\n                                            onPageChange={changePage}\r\n                                            containerClassName={'paginationBtns'}\r\n                                            previousLinkClassName={'previousBtn'}\r\n                                            nextLinkClassName={'nextBtn'}\r\n                                            disabledClassName={'paginationDisabled'}\r\n                                            activeClassName={'paginationActive'}\r\n                                        />\r\n                                    </div>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n\r\n            <Dialog\r\n                maxWidth={'lg'}\r\n                open={storeOpen}\r\n                onClose={onPayHandleClickClose}>\r\n                <S010100070 \r\n                    dataContracId={dataAllContract} \r\n                    onPayHandleClickClose={onPayHandleClickClose} \r\n                    setStoreOpen={setStoreOpen}\r\n                    setPayChecked={setPayChecked}\r\n                    paymentList = {paymentList}\r\n                />\r\n            </Dialog>\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100060;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100130.js",["316","317","318","319","320","321","322","323"],"import React, { Fragment, useEffect, useState, useCallback } from 'react';\r\nimport './css/S010100130.css';\r\nimport axios from 'axios';\r\nimport S010100140 from './S010100140';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { DatePicker } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport moment from 'moment';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\nimport {useStyles} from './Test';\r\n\r\n\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\nlet chkSt = '';\r\n\r\nfunction S010100130(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const [mOpen, setMOpen] = React.useState(false);\r\n    const [storeOpen, setStoreOpen] = React.useState(false);\r\n    \r\n    const [data] = useState('I');\r\n\r\n    const [numForDetail, setNumForDetail] = useState('');\r\n    const [tb_s10_ask010, setTb_s10_ask010] = useState([].slice(0,20));\r\n    const [ask_tps, setAsk_tps] = useState([{}])\r\n    const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endAsk_date, setEndAsk_date] = useState(new Date());\r\n\r\n    // 문의구분\r\n    const [ask_tp, setAsk_tp] = useState('');\r\n    // 문의자명\r\n    const [ask_name, setAsk_name] = useState('');\r\n    // 삭제\r\n    const [checkForDelete, setCheckForDelete] = useState(true);\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    // 페이징\r\n    const [pageNumber,setPageNumber] = useState(0);\r\n    const usersPerPage = 20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(tb_s10_ask010.length/usersPerPage);\r\n    \r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const searchAsk = () => {\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n        // // console.log('startAsk_date',startAsk_date);\r\n        // // console.log('endAsk_date',endAsk_date);\r\n\r\n        axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                // // console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        searchAsk();\r\n    }, []);\r\n\r\n    // 문의 구분\r\n    useEffect(() => {\r\n        axios.post('/api/s010100130/ask_tp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    //// console.log('Lov-ask_tp',response.data);\r\n                    let arr = [{ key: '전체', value: '전체' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                    setAsk_tps(arr);\r\n\r\n                } else {\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n    \r\n    // 상담등록 모달\r\n    const onHandleClickOpen = () => {\r\n        //// console.log('상담열기');\r\n        setStoreOpen(true);\r\n\r\n    };\r\n    \r\n\r\n    const onHandleClickClose = useCallback(() => {\r\n        setStoreOpen(false);\r\n        searchAsk();\r\n    });\r\n\r\n    // 상세보기 모달\r\n    const onDetailHandleClickOpen = (event) => {\r\n        //// console.log('target',event.target.id);\r\n        num = event.target.id;\r\n        rNum = parseInt(num);\r\n        setNumForDetail(rNum);\r\n        setMOpen(true);\r\n    };\r\n\r\n    const onDetailHandleClickClose = useCallback(() => {\r\n        setMOpen(false);\r\n        searchAsk();\r\n\r\n    });\r\n    \r\n\r\n    const handleToggle = (value) => {\r\n\r\n        const currentIndex = checked.indexOf(value);\r\n        // 전체 Checked된 State에서 현재 누를 Checkbox가 있는지 확인\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n        \r\n            newChecked.push(value)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setChecked(newChecked);\r\n\r\n        newChecked.length > 0 ? chkSt = 'check' : chkSt = ''; \r\n        // // console.log('chkSt',chkSt);\r\n        // // console.log('newChecked.length',newChecked.length);\r\n\r\n    }\r\n\r\n    const onAsk_tpHandler = (event) => {\r\n        setAsk_tp(event.currentTarget.value);\r\n    }\r\n\r\n    const onAsk_nameHandler = (event) => {\r\n        setAsk_name(event.currentTarget.value);\r\n    }\r\n\r\n  \r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = () => {\r\n\r\n        if (checked.length === 0) {\r\n            alert('삭제할 사용자를 선택하세요');\r\n        }  else {\r\n            let askIdArray = checked;\r\n       \r\n            axios.post('/api/s010100130/delete', askIdArray)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                            alert('삭제 하였습니다.');\r\n                            searchAsk();\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert(\"삭제에 실패하였습니다.\")\r\n                    }\r\n                })\r\n            chkSt = '';        \r\n        \r\n            setChecked([]);\r\n            setCheckForDelete(true);\r\n        }\r\n\r\n    }\r\n\r\n    const cancelConfirm = () => alert('삭제를 취소하였습니다.');\r\n\r\n    const onHandleDelete = useConfirm(\r\n        \"삭제하시겠습니까?\",\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n\r\n    // 조회 \r\n    const onHandleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const body = {\r\n            startAsk_date,\r\n            ask_name,\r\n            ask_tp,\r\n            endAsk_date\r\n        }\r\n    \r\n        axios.post(\"/api/s010100130/search\", body).then(response => {\r\n            if (response.data.success) {\r\n                // // console.log('검색결과:'+response.data.rows);\r\n                setTb_s10_ask010(response.data.rows);\r\n            } else {\r\n                alert('검색에 실패하였습니다.')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    const logoutConfirm = () => {\r\n\r\n    axios.post('/api/s010100150/userLogout')\r\n    .then(response => {\r\n        if (response.data.logoutResult == true) {\r\n        alert('로그아웃 하였습니다.');\r\n        sessionStorage.removeItem('member');\r\n        sessionStorage.clear();\r\n        props.history.push('/');\r\n        // console.log(sessionStorage.getItem('member'));\r\n        }else if(response.data.loginResult == false){\r\n        alert(response.data.message);\r\n        alert('아이디 또는 비밀번호를 확인하세요.');\r\n        }\r\n    })\r\n\r\n    };\r\n\r\n    const logounCancelConfirm = () => alert('취소하였습니다.');\r\n\r\n    const onLogoutHandler = useConfirm(\r\n        \"로그아웃 하시겠습니까?\",\r\n        logoutConfirm,\r\n        logounCancelConfirm\r\n    );\r\n\r\n    const excelHandler = () => {\r\n        // const body = {\r\n        //     startAsk_date,\r\n        //     ask_name,\r\n        //     ask_tp,\r\n        //     endAsk_date\r\n        // }\r\n\r\n        // axios.post('/api/s010100130/xlsx', body).then(response => {\r\n        //     if (response.data.success) {\r\n        //         setAskXlsx(response.data.rows);\r\n        //         console.log(response.data.rows);\r\n        //     } else {\r\n        //         alert('검색에 실패하였습니다.')\r\n        //     }\r\n       \r\n\r\n\r\n        const ws = xlsx.utils.json_to_sheet(tb_s10_ask010);\r\n        // console.log(tb_s10_ask010);\r\n\r\n        ['NO', '문의구분', '문의일자', '문의방법', '접근경로', '문의자명', '연락처']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][0] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"상담현황.xlsx\");\r\n    // })\r\n    }\r\n\r\n    \r\n    \r\n    const displayUsers = tb_s10_ask010.slice(pagesVisited,pagesVisited + usersPerPage).map((tb_s10_ask010, index) => {\r\n        return (\r\n            <TableRow key={tb_s10_ask010.ASK_ID}>\r\n                    <TableCell >\r\n                <input  key={tb_s10_ask010.ASK_ID+1} checked ={checked.indexOf(tb_s10_ask010.ASK_ID) === -1 ? false : true}type=\"checkbox\" onChange={()=>handleToggle(tb_s10_ask010.ASK_ID)} id={tb_s10_ask010.ASK_ID} />\r\n                </TableCell>\r\n                <TableCell onClick={onDetailHandleClickOpen} id={tb_s10_ask010.ASK_ID} className='underLineForDetail'>{tb_s10_ask010.ASK_ID}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_TP}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_DATE}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_METHOD}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_NAME}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_INFO}</TableCell>\r\n                <TableCell >{tb_s10_ask010.ASK_PATH}</TableCell>\r\n            </TableRow>\r\n           \r\n        );\r\n    });\r\n\r\n\r\n    \r\n   \r\n    return (\r\n        <Fragment>\r\n\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단 파란색 툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        SwonTech 고객관리시스템\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {/* 왼쪽메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider/>\r\n                    <List>\r\n                    <div>\r\n                        <div hidden ={sessionStorage.getItem('member') == null}>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                        <PeopleIcon />\r\n                        </ListItemIcon>\r\n                        <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                            <ShoppingCartIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                        <DashboardIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                            <BarChartIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                        <DashboardIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                            <ListItemIcon>\r\n                            <LayersIcon />\r\n                            </ListItemIcon>\r\n                            <span onClick ={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n                        </ListItem>\r\n                        </div>\r\n                    <div hidden ={sessionStorage.getItem('member') != null}>\r\n                        <ListItem button>\r\n                            <ListItemIcon>\r\n                            <LayersIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                        </ListItem>\r\n                        </div>\r\n                    </div>\r\n\r\n             </List>\r\n        </Drawer>\r\n           \r\n                {/* 메인화면  */}\r\n                <main className={classes.content}>\r\n                    <form onSubmit={onHandleFormSubmit}>\r\n                        <div className={classes.appBarSpacer} />\r\n                        <Container maxWidth=\"lg\" className={classes.container}>\r\n                            <Grid container spacing={3}>\r\n                                {/* Chart */}\r\n                                <Grid item xs={12}>\r\n                                    <Paper style={{ padding: 16 }}>\r\n\r\n                                        <div className=\"gridInline\">\r\n\r\n                                            문의일자\r\n                                            &nbsp;\r\n                                        \r\n                                            <DatePicker\r\n                                                locale=\"ko\"\r\n                                                selected={startAsk_date}\r\n                                                onChange={date => setStartAsk_date(date)}\r\n                                                selectsStart\r\n                                                startDate={startAsk_date}\r\n                                                // endDate={endAsk_date.setHours(9, 0, 0, 0)}\r\n                                                endDate={endAsk_date}\r\n                                                dateFormat=\"yyyy.MM.dd\"\r\n                                                defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                            />\r\n                                          &nbsp;\r\n                                        ~ &nbsp;\r\n                                        <DatePicker\r\n                                                locale=\"ko\"\r\n                                                selected={endAsk_date}\r\n                                                onChange={date => setEndAsk_date(date)}\r\n                                                selectsEnd\r\n                                                startDate={startAsk_date}\r\n                                                endDate={endAsk_date}\r\n                                                minDate={startAsk_date}\r\n                                                defaultValue={moment(moment(),'YYYY-MM-DD')}\r\n                                            />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                                            문의구분\r\n                                            &nbsp;\r\n\r\n                                                                <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onAsk_tpHandler} value={ask_tp}>\r\n                                                                    {ask_tps.map((item,index) => (\r\n                                                                        <option key={index} value={item.key}>{item.value}</option>\r\n                                                                    ))}\r\n\r\n                                                                </Form.Control>\r\n                                                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                                            문의자명\r\n                                            &nbsp;\r\n                                            <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\" type=\"text\" value={ask_name} id=\"ask_name\" name=\"ask_name\" onChange={onAsk_nameHandler} />\r\n                                            &nbsp;\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n                                            <Button variant=\"contained\" style={{ width: 80, display: 'inline' }} color=\"primary\" onClick={onHandleFormSubmit}>\r\n                                                조회\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Paper>\r\n                                </Grid>\r\n\r\n                                <table className=\"btn\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <td colSpan=\"5\"id = \"alignLeft\" >\r\n                                                \r\n                                                    <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} onClick={onHandleClickOpen} >\r\n                                                        상담등록\r\n                                                    </Button>\r\n                                                    <Button variant=\"contained\" color=\"primary\"  style={{ width: 100 }} onClick={onHandleDelete}\r\n                                                        value=\"삭제하기\" >\r\n                                                        삭제하기\r\n                                                    </Button>\r\n                                                \r\n                                            </td>\r\n                                            \r\n                                            <td  id=\"alignRight\"><Button variant=\"contained\" style={{ width: 150 }} color=\"primary\" onClick={excelHandler}>엑셀다운로드</Button></td>\r\n                                        </tr>                                \r\n                                    </thead>\r\n                                </table>\r\n\r\n\r\n                                {/*상담현황 테이블 */}\r\n                                <Grid item xs={12}>\r\n                                    <Paper className={classes.paper}>\r\n                                    <React.Fragment>\r\n                                            <Title>상담 현황</Title>\r\n                                            <Table size=\"small\">\r\n\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                <TableCell>선택</TableCell>\r\n                                                <TableCell>No</TableCell>\r\n                                                <TableCell>문의구분</TableCell>\r\n                                                <TableCell>문의일자</TableCell>\r\n                                                <TableCell>문의방법</TableCell>\r\n                                                <TableCell>문의자명</TableCell>\r\n                                                <TableCell>연락처</TableCell>\r\n                                                <TableCell>접근경로</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                { displayUsers}\r\n                                            </TableBody>\r\n                                            </Table>\r\n                                            <div id = \"reactPage\">\r\n                                                <ReactPaginate\r\n                                                    previousLabel = {\"Previous\"}\r\n                                                    nextLabel = {\"Next\"}\r\n                                                    pageCount = {pageCount}\r\n                                                    onPageChange = {changePage}\r\n                                                    containerClassName={\"paginationBtns\"}\r\n                                                    previousLinkClassName={\"previousBtn\"}\r\n                                                    nextLinkClassName={\"nextBtn\"}\r\n                                                    disabledClassName={\"paginationDisabled\"}\r\n                                                    activeClassName={\"paginationActive\"}   \r\n                                                />\r\n                                            </div>\r\n                                        </React.Fragment>\r\n                                    </Paper>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Container>\r\n                    </form>\r\n                </main>\r\n            </div>\r\n           \r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={mOpen}>\r\n                <S010100140 \r\n                    dataForm={\"U\"} \r\n                    num={numForDetail} \r\n                    searchAsk ={searchAsk} \r\n                    onDetailHandleClickClose={onDetailHandleClickClose} \r\n                    setMOpen={setMOpen}/>\r\n            </Dialog>\r\n                      \r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={storeOpen}>\r\n                <S010100140 \r\n                    dataForm={data} \r\n                    num={numForDetail} \r\n                    searchAsk ={searchAsk} \r\n                    onHandleClickClose={onHandleClickClose} \r\n                    setStoreOpen={setStoreOpen} />\r\n            </Dialog>\r\n           \r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100130;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100050.js",["324","325","326","327","328","329","330","331","332","333","334","335","336","337"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport './css/S010100050.css';\r\nimport S010100010 from './S010100010';\r\nimport s010100040 from './service/s010100040';\r\nimport s010100050 from './service/s010100050';\r\nimport Base64Downloader from 'react-base64-downloader';\r\nimport DaumPostcode from 'react-daum-postcode';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\nimport {useStyles} from './Test';\r\n\r\nlet num = '';\r\nlet rNum = 0;\r\nlet memberTpDetail = [];\r\n\r\nfunction S010100050(props) {\r\n\r\n    const [isPostOpen, setIsPostOpen] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const handleOpen = () => {\r\n        setIsPostOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setIsPostOpen(false);\r\n    };\r\n\r\n    const [detailAllInfo, setDetailAllInfo] = useState([]);\r\n\r\n    const [nameForDetailCModal, setNameForDetailCModal] = useState('');\r\n\r\n    // 회원정보\r\n    const [detailMemberNm, setDetailMemberNm] = useState('');\r\n\r\n    const [detailFstRegNo, setDetailFstRegNo] = useState('');\r\n    const [detailSndRegNo, setDetailSndRegNo] = useState('');\r\n    const [detailThdRegNo, setDetailThdRegNo] = useState('');\r\n\r\n    const [detailMemberTp, setDetailMemberTp] = useState('')\r\n    const [detailName, setDetailName] = useState('');\r\n\r\n    const [detailFstEmpHp, setDetailFstEmpHp] = useState('');\r\n    const [detailSndEmpHp, setDetailSndEmpHp] = useState('');\r\n    const [detailThdEmpHp, setDetailThdEmpHp] = useState('');\r\n\r\n    const [detailEmpEmail, setDetailEmpEmail] = useState('');\r\n    const [detailDomain, setDetailDomain] = useState('');\r\n    const [detailAddress, setDetailAddress] = useState('');\r\n    const [detailZipcode, setDetailZipcode] = useState('');\r\n    const [detailDetailAddress, setDetailDetailAddress] = useState('');\r\n\r\n    //const [startAsk_date, setStartAsk_date] = useState(new Date());\r\n    const [endDateTest, setEndDateTest] = useState('');\r\n\r\n    const dataMemId = props.dataMemId;\r\n\r\n\r\n    const [conOpen, setConOpen] = React.useState(false);\r\n    const [newOpen, setNewOpen] = React.useState(false);\r\n    const [detailMemberId, setDetailMemberId] = useState('');\r\n    const [mEndFlag, setMEndFlag] = useState('');\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage =20;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(detailAllInfo / usersPerPage);\r\n\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage, setPostsPerPage] = useState(3);\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n\r\n    // 첨부파일업로드\r\n    const [detailIdCardFile, setDetailIdCardFile] = useState(null);\r\n    const [detailIdCardFileName, setDetailIdCardFileName] = useState('');\r\n\r\n\r\n    const [detailBusiCardFile, setDetailBusiCardFile] = useState(null);\r\n    const [detailBusiCardFileName, setDetailBusiCardFileName] = useState('');\r\n\r\n\r\n    const [idCardImg,setIdCardImg] = useState('');\r\n    const [busiLicfImg,setBusiLicfImg] = useState('');\r\n    const [realIdCardFileName,setRealIdCardFileName] = useState('');\r\n    const [realRegistCardFileName,setRealRegistCardFileName] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n    let cdTpValue='MEMBER_TP';\r\n        \r\n        s010100040.getSelectBox(cdTpValue).then((res) => {\r\n            \r\n            if(res.status === 200){\r\n                \r\n                let arr = [{ key: '선택', value: '선택' }]\r\n\r\n                res.data.map((data) =>\r\n                    arr.push({\r\n                        value: data.cd_v_meaning,\r\n                        key: data.cd_v\r\n                    }));\r\n\r\n                memberTpDetail = arr;\r\n            } else {\r\n                alert(\" 데이터를 불러오는데 실패하였습니다.\");\r\n            }\r\n        });\r\n\r\n\r\n    }, [])\r\n\r\n    const detailMemberList = () => {\r\n        let memberId = dataMemId;\r\n        \r\n        s010100050.getDetailMemInfo(memberId).then((res) => {\r\n            if(res.status === 200){\r\n                \r\n                    setDetailAllInfo(res.data);\r\n                    setDetailMemberId(res.data[0].memberId);\r\n                if((res.data[0].retireDate) === '00-00-00'){\r\n                    setEndDateTest('');\r\n                }else{\r\n                    setEndDateTest(res.data[0].retireDate);\r\n                }\r\n\r\n                    setDetailMemberNm(res.data[0].memberNm);\r\n                    setDetailMemberTp(res.data[0].memberTp);\r\n                    setDetailName(res.data[0].name);\r\n                    setMEndFlag(res.data[0].countMemberConEndFlag);\r\n                    setDetailZipcode(res.data[0].zipcode);\r\n                    setDetailAddress(res.data[0].empAddress);\r\n                    setDetailDetailAddress(res.data[0].empDetailAddress);\r\n\r\n                if(res.data[0].regNo){\r\n                    setDetailFstRegNo((res.data[0].regNo).split('-')[0]);\r\n                    setDetailSndRegNo((res.data[0].regNo).split('-')[1]);\r\n                    setDetailThdRegNo((res.data[0].regNo).split('-')[2]);    \r\n                }else{\r\n                    setDetailFstRegNo('');\r\n                    setDetailSndRegNo('');\r\n                    setDetailThdRegNo('');\r\n                }\r\n                if(res.data[0].empHp){\r\n                    setDetailFstEmpHp((res.data[0].empHp).split('-')[0]);\r\n                    setDetailSndEmpHp((res.data[0].empHp).split('-')[1]);\r\n                    setDetailThdEmpHp((res.data[0].empHp).split('-')[2]);\r\n                }else{\r\n                    setDetailFstEmpHp('');\r\n                    setDetailSndEmpHp('');\r\n                    setDetailThdEmpHp('');\r\n                }\r\n                if(res.data[0].empEmail){\r\n                    setDetailEmpEmail((res.data[0].empEmail).split('@')[0]);\r\n                    setDetailDomain((res.data[0].empEmail).split('@')[1]);\r\n                }else{\r\n                    setDetailEmpEmail('');\r\n                    setDetailDomain('');                    \r\n                }\r\n                // const idCardImg = new Buffer.from(res.data[0].ID_CARD_IMAGE).toString();\r\n                // const busiLicfImg = new Buffer.from(res.data[0].BUSI_LICS_IMAGE).toString(); \r\n                    setIdCardImg(res.data[0].idCardImg);\r\n                    setBusiLicfImg(res.data[0].busiLicfImg);\r\n                    setRealIdCardFileName(res.data[0].realIdCardFileName);\r\n                    setRealRegistCardFileName(res.data[0].realBusiCardFileName);\r\n\r\n            } else {\r\n                alert('상세정보 데이터를 불러오는데 실패하였습니다.');\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        detailMemberList();\r\n    }, [])\r\n\r\n    const detailIdCardHandleFileChange = (event) => {\r\n        setDetailIdCardFile(event.currentTarget.files[0]);\r\n        setDetailIdCardFileName(event.currentTarget.value);\r\n        \r\n        let imageType = event.currentTarget.files[0].type;\r\n        \r\n        if((imageType != 'image/png')&&(imageType != 'image/jpg')&&(imageType != 'image/jpeg')){\r\n            alert('.jpg, .jpeg, .png 확장자만 업로드 가능합니다.');\r\n            setDetailIdCardFile('');\r\n            setDetailIdCardFileName('');\r\n        }\r\n    }   \r\n\r\n    const detailBusiCardHandleFileChange = (event) => {\r\n        setDetailBusiCardFile(event.currentTarget.files[0]);\r\n        setDetailBusiCardFileName(event.currentTarget.value);\r\n\r\n        let imageType = event.currentTarget.files[0].type;\r\n        \r\n        if((imageType != 'image/png')&&(imageType != 'image/jpg')&&(imageType != 'image/jpeg')){\r\n            alert('.jpg, .jpeg, .png 확장자만 업로드 가능합니다.');\r\n            setDetailBusiCardFile('');\r\n            setDetailBusiCardFileName('');\r\n        }\r\n    }\r\n\r\n    const [detailIdCardImg,setDetailIdCardImg] = useState('');\r\n    const [detailBusiLicfImg,setDetailBusiLicfImg] = useState('');\r\n    // setState을 파라미터로\r\n    const encodeIdFileBase64 = (idCardfile) => {\r\n        let reader = new FileReader();\r\n        if(idCardfile){\r\n            reader.readAsDataURL(idCardfile);\r\n            reader.onload = () => {\r\n                let Base64 = reader.result;\r\n                // console.log(Base64);\r\n                setDetailIdCardImg(Base64);\r\n               \r\n            };\r\n            \r\n            reader.onerror = function (error){\r\n                console.log('error : ',error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const encodeBusiFileBase64 = (idCardfile) => {\r\n        let reader = new FileReader();\r\n        if(idCardfile){\r\n            reader.readAsDataURL(idCardfile);\r\n            reader.onload = () => {\r\n                let Base64 = reader.result;\r\n                // console.log(Base64);\r\n                setDetailBusiLicfImg(Base64);\r\n               \r\n            };\r\n            \r\n            reader.onerror = function (error){\r\n                console.log('error : ',error);\r\n            }\r\n        }\r\n    };\r\n\r\n    encodeIdFileBase64(detailIdCardFile);\r\n    encodeBusiFileBase64(detailBusiCardFile);\r\n\r\n    // 회원정보수정 함수\r\n    const tempAddMember = () => {\r\n        \r\n        let realDetailIdCardFileName;\r\n        let realDetailBusiCardFileName;\r\n\r\n        if(detailIdCardFileName){\r\n            realDetailIdCardFileName = detailIdCardFileName.split('\\\\')[2].split('.')[0];    \r\n        }\r\n        \r\n        if(detailBusiCardFileName){\r\n            realDetailBusiCardFileName = detailBusiCardFileName.split('\\\\')[2].split('.')[0];\r\n        }\r\n        \r\n        let detailMemInfo ={\r\n            memberId : props.dataMemId,\r\n            idCardImg : detailIdCardImg,\r\n            busiLicfImg : detailBusiLicfImg,\r\n            realIdCardFileName : realDetailIdCardFileName,\r\n            realBusiCardFileName : realDetailBusiCardFileName,\r\n            memberNm : detailMemberNm,\r\n            regNo : detailFstRegNo +\"-\"+ detailSndRegNo +\"-\"+ detailThdRegNo,\r\n            memberTp : detailMemberTp,\r\n            name : detailName,\r\n            empHp : detailFstEmpHp +\"-\"+ detailSndEmpHp +\"-\"+ detailThdEmpHp,\r\n            empEmail : detailDomain +\"@\"+ detailEmpEmail,\r\n            zipcode : detailZipcode,\r\n            empAddress : detailAddress,\r\n            empDetailAddress: detailDetailAddress\r\n        }\r\n\r\n        s010100050.updateDetailMemInfo(detailMemInfo).then((res) => {\r\n            if(res.status === 200){\r\n                alert('정상적으로 수정 되었습니다.');\r\n                props.setModalOpen(false);\r\n                props.memberList();\r\n            } else {\r\n                alert('수정에 실패하였습니다.');\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    // 회원정보 수정\r\n    const onModifyHandler = () => {\r\n        tempAddMember();\r\n    }\r\n\r\n    const onDetailMemberNmHandler = (event) => {\r\n        setDetailMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailFstRegNoHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setDetailFstRegNo(regexData);\r\n    }\r\n\r\n    const onDetailSndRegNoHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setDetailSndRegNo(regexData);\r\n    }\r\n    const onDetailThdRegNoHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setDetailThdRegNo(regexData);\r\n    }\r\n\r\n    const onDetailMemberTpHandler = (event) => {\r\n        setDetailMemberTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailNameHandler = (event) => {\r\n        setDetailName(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailFstEmpHpHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setDetailFstEmpHp(regexData);\r\n    }\r\n\r\n    const onDetailSndEmpHpHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setDetailSndEmpHp(regexData);\r\n    }\r\n\r\n    const onDetailThdEmpHpHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setDetailThdEmpHp(regexData);\r\n    }\r\n\r\n    const onDetailEmpEmailHandler = (event) => {\r\n        const regexData = getRegexData(/[^-A-Za-z0-9_]/g, event.currentTarget.value);\r\n        setDetailEmpEmail(regexData);\r\n    }\r\n\r\n    const onDetailDomainHandler = (event) => {\r\n        const regexData = getRegexData(/[^-A-Za-z0-9_]/g, event.currentTarget.value);\r\n        setDetailDomain(regexData);\r\n    }\r\n\r\n    const onDetailZipcodeHandler = (event) => {\r\n        setDetailZipcode(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailAddressHandler = (event) => {\r\n        setDetailAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onDetailDetailAddressHandler = (event) => {\r\n        setDetailDetailAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onSubmitDetailHandler = () => {\r\n\r\n    }\r\n\r\n    const onAllContractEndHandler = () => {\r\n\r\n        let memberId = dataMemId;\r\n       \r\n        s010100050.updateMemStEndFlag(memberId).then((res) => {\r\n            if(res.status === 200){\r\n                alert('종료처리 되었습니다.');\r\n                detailMemberList();\r\n            } else {\r\n                alert('종료처리를 실패 하였습니다.');\r\n            }\r\n        });\r\n    \r\n    }\r\n\r\n    const onDetailClickOpen = (event) => {\r\n        num = event.target.innerHTML;\r\n        rNum = parseInt(num);\r\n        setNameForDetailCModal(rNum);\r\n        setConOpen(true);\r\n    }\r\n\r\n    const onConContractHandler = useCallback(() => {\r\n        setConOpen(false);\r\n        detailMemberList();\r\n    });\r\n\r\n    // 신규계약 닫기\r\n    const onNewContractHandler = useCallback(() => {\r\n        setNewOpen(false);\r\n        detailMemberList();\r\n    });\r\n\r\n    const onNewOpenContractHandler = (event) => {\r\n        setNewOpen(true);\r\n    }\r\n\r\n    const getRegexData = (regex, data) => {\r\n        return data.replace(regex, \"\");\r\n    }\r\n\r\n\r\n    const displayUsers = detailAllInfo.slice(pagesVisited, pagesVisited + usersPerPage).map((detailAllInfo, index) => {\r\n        return (\r\n            <TableRow key={index}>\r\n                <TableCell onClick={onDetailClickOpen} className='underLineForDetail' id={detailAllInfo.contractId}>{detailAllInfo.contractId}</TableCell>\r\n                <TableCell>{detailAllInfo.contractDate}</TableCell>\r\n                <TableCell>{detailAllInfo.contractTp}</TableCell>\r\n                <TableCell>{detailAllInfo.contractRoom}</TableCell>\r\n                <TableCell>{detailAllInfo.contractTerm}개월 ({detailAllInfo.startDate} ~ {detailAllInfo.endDate})</TableCell>\r\n                <TableCell>{detailAllInfo.contractSt}</TableCell>\r\n                <TableCell>{detailAllInfo.payDate}일</TableCell>\r\n                <TableCell>{detailAllInfo.monthlyFee}</TableCell>\r\n                <TableCell>{detailAllInfo.contractLocker}</TableCell>\r\n                <TableCell>{detailAllInfo.endFlag}</TableCell>\r\n            </TableRow>\r\n        )\r\n\r\n    });\r\n\r\n\r\n    const postCodeStyle = {\r\n        display: \"block\",\r\n        top: \"50%\",\r\n        width: \"400px\",\r\n        height: \"500px\",\r\n        padding: \"10px\",\r\n    };\r\n\r\n    const handleComplete = (data) => {\r\n        let fullAddress = data.address;\r\n        let extraAddress = \"\";\r\n\r\n        if (data.addressType === \"R\") {\r\n            if (data.bname !== \"\") {\r\n                extraAddress += data.bname;\r\n            }\r\n            if (data.buildingName !== \"\") {\r\n                extraAddress +=\r\n                    extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\r\n            }\r\n            fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\r\n        }\r\n        setDetailZipcode(data.zonecode);\r\n        setDetailAddress(fullAddress);\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <form style={{\r\n            display: 'flex',\r\n            flexDirection: 'column14',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '100%'\r\n        }}\r\n            encType='multipart/form-data'\r\n            onSubmit={onSubmitDetailHandler}\r\n        >\r\n            <div className=\"memberInfoWrapper\">\r\n                <div className=\"memberInfoWrap\">\r\n                    {/* 회원정보란 */}\r\n                    <h5 id=\"infoTitle\">회원 정보</h5>\r\n\r\n                    <table id=\"memberDetailTable\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th colSpan=\"2\">회원명</th>\r\n\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 12 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailMemberNm} id=\"detailMemberNm\" name=\"detailMemberNm\"\r\n                                        onChange={onDetailMemberNmHandler} />\r\n\r\n                                </td>\r\n                                <th>사업자번호</th>\r\n                                <td colSpan=\"2\">\r\n\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailFstRegNo||''} id=\"detailRegNo\" name=\"detailRegNo\"\r\n                                        onChange={onDetailFstRegNoHandler} maxLength=\"3\"/>\r\n                                &nbsp; - &nbsp;\r\n\r\n                                <Form.Control style={{ width: 3 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailSndRegNo} id=\"detailRegNo\" name=\"detailRegNo\"\r\n                                        onChange={onDetailSndRegNoHandler} maxLength=\"2\"/>\r\n                                &nbsp; - &nbsp;\r\n\r\n                                <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailThdRegNo} id=\"detailRegNo\" name=\"detailRegNo\"\r\n                                        onChange={onDetailThdRegNoHandler} maxLength=\"5\"/>\r\n\r\n                                </td>\r\n                                <th>회원구분</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onDetailMemberTpHandler} value={detailMemberTp || ''}>\r\n                                        {memberTpDetail.map((item, index) => (\r\n                                            <option key={index} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n                                <th>퇴실일자</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 8 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={endDateTest} disabled />\r\n\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th rowSpan=\"2\">대표자</th>\r\n\r\n                                <th>성명</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailName} id=\"detailName\" name=\"detailName\"\r\n                                        onChange={onDetailNameHandler} />\r\n                                </td>\r\n                                <th>연락처</th>\r\n                                <td colSpan=\"2\">\r\n\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailFstEmpHp} id=\"detailEmpHp\" name=\"detailEmpHp\"\r\n                                        onChange={onDetailFstEmpHpHandler} maxLength=\"3\"/>\r\n\r\n                                     &nbsp; - &nbsp;\r\n                                     <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailSndEmpHp} id=\"detailEmpHp\" name=\"detailEmpHp\"\r\n                                        onChange={onDetailSndEmpHpHandler} maxLength=\"4\"/>\r\n\r\n\r\n                                     &nbsp; - &nbsp;\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailThdEmpHp} id=\"detailEmpHp\" name=\"detailEmpHp\"\r\n                                        onChange={onDetailThdEmpHpHandler} maxLength=\"4\"/>\r\n\r\n                                </td>\r\n                                <th>E-mail</th>\r\n\r\n                                <td colSpan=\"3\">\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailEmpEmail} id=\"detailEmpEmail\" name=\"detailEmpEmail\"\r\n                                        onChange={onDetailEmpEmailHandler} />\r\n\r\n\r\n                            &nbsp; @ &nbsp;\r\n                            <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailDomain} id=\"detailEmpEmail\" name=\"detailEmpEmail\"\r\n                                        onChange={onDetailDomainHandler} />\r\n\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>주소</th>\r\n                                <td colSpan=\"8\">\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailZipcode} id=\"detailAddress\" name=\"detailAddress\"\r\n                                        onChange={onDetailZipcodeHandler} />\r\n\r\n\r\n                            &nbsp;\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} onClick={handleOpen}>우편</Button>&nbsp;\r\n\r\n                            <Modal\r\n                                        className={classes.modal}\r\n                                        open={isPostOpen}\r\n                                        onClose={handleClose}\r\n                                        closeAfterTransition\r\n                                        BackdropComponent={Backdrop}\r\n                                     \r\n                                    >\r\n                                        <Fade in={isPostOpen}>\r\n                                            <div className={classes.paper}>\r\n                                                <DaumPostcode  style={postCodeStyle} onComplete={handleComplete} />\r\n                                            </div>\r\n                                        </Fade>\r\n                                    </Modal>\r\n\r\n                                    <Form.Control style={{ width: 30 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailAddress} id=\"detailAddress\" name=\"detailAddress\"\r\n                                        onChange={onDetailAddressHandler} />\r\n\r\n\r\n\r\n                                    <Form.Control style={{ width: 45 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={detailDetailAddress} id=\"detailAddress\" name=\"detailAddress\"\r\n                                        onChange={onDetailDetailAddressHandler} />\r\n\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                {/* onClick={onIdDownloadHandler} */}\r\n                                <th rowSpan=\"2\" colSpan=\"2\">첨부파일</th>\r\n                                <td colSpan=\"8\">\r\n                                <label htmlFor=\"file\">대표자신분증:</label>&nbsp;\r\n                                    <Base64Downloader\r\n                                        base64={idCardImg}\r\n                                        downloadName={realIdCardFileName}\r\n                                        Tag=\"a\"\r\n                                        extraAttributes={{ href: '#' }}\r\n                                        className=\"my-class-name\"\r\n                                        style={{ color: 'orange' }}\r\n                                    >\r\n                                      {realIdCardFileName}\r\n                                    </Base64Downloader>\r\n                                    &nbsp;\r\n                                   \r\n                                <input type='file'\r\n                                        file={detailIdCardFile}\r\n                                        name='detailIdCardFile'\r\n                                        value={detailIdCardFileName}\r\n                                        onChange={detailIdCardHandleFileChange}\r\n                                    />\r\n                                <div className = 'fileStar'> * jpg,jpeg,png 파일만 가능합니다.</div>\r\n                                </td>\r\n\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan=\"8\">\r\n                                <label htmlFor=\"file\">사업자등록증:</label>&nbsp;\r\n                                <Base64Downloader\r\n                                        base64={busiLicfImg}\r\n                                        downloadName={realRegistCardFileName}\r\n                                        Tag=\"a\"\r\n                                        extraAttributes={{ href: '#' }}\r\n                                        className=\"my-class-name\"\r\n                                        style={{ color: 'orange' }}\r\n                                    >\r\n                                       {realRegistCardFileName}\r\n                                    </Base64Downloader>\r\n                                    &nbsp;\r\n                                   \r\n                                <input type='file'\r\n                                        file={detailBusiCardFile}\r\n                                        name='detailBusiCardFile'\r\n                                        value={detailBusiCardFileName}\r\n                                        onChange={detailBusiCardHandleFileChange}\r\n                                />\r\n                                <div className = 'fileStar'> * jpg,jpeg,png 파일만 가능합니다.</div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <React.Fragment >\r\n                        <Title>상담 현황</Title>\r\n                        <Table size=\"small\">\r\n\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>계약ID</TableCell>\r\n                                    <TableCell>계약일자</TableCell>\r\n                                    <TableCell>계약상품</TableCell>\r\n                                    <TableCell>호    실</TableCell>\r\n                                    <TableCell>계약기간</TableCell>\r\n                                    <TableCell>계약상태</TableCell>\r\n                                    <TableCell>매월입금일</TableCell>\r\n                                    <TableCell>월회비</TableCell>\r\n                                    <TableCell>사물함</TableCell>\r\n                                    <TableCell>종료여부</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {displayUsers}\r\n                            </TableBody>\r\n                        </Table>\r\n\r\n                    </React.Fragment>\r\n                    {/* </Paper> */}\r\n                    {/* </Grid> */}\r\n                    <div className=\"pageCenter\">\r\n                        <div id=\"reactPage\">\r\n                            <ReactPaginate\r\n                                previousLabel={\"Previous\"}\r\n                                nextLabel={\"Next\"}\r\n                                pageCount={pageCount}\r\n                                onPageChange={changePage}\r\n                                containerClassName={\"paginationBtns\"}\r\n                                previousLinkClassName={\"previousBtn\"}\r\n                                nextLinkClassName={\"nextBtn\"}\r\n                                disabledClassName={\"paginationDisabled\"}\r\n                                activeClassName={\"paginationActive\"}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div id=\"btnAlign\">\r\n\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} id=\"btn-centerN\" onClick={onNewOpenContractHandler} >\r\n                            신규계약\r\n                        </Button>\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} id=\"btn-centerN\" onClick={onModifyHandler} >\r\n                            수정하기\r\n                        </Button>\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} id=\"btn-centerN\" onClick={onAllContractEndHandler} >\r\n                            종료\r\n                        </Button>\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} id=\"btn-centerN\" onClick={props.onHandleDetailClickClose} >\r\n                            닫기\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/*계약ID클릭*/}\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={conOpen}\r\n                onClose={onConContractHandler}>\r\n                <S010100010 dataNum={rNum} cDataForm={'I'} detailMemberList={detailMemberList} onConContractHandler={onConContractHandler} setConOpen={setConOpen} />\r\n            </Dialog>\r\n\r\n            {/*신규계약 멤버ID클릭*/}\r\n            <Dialog\r\n                maxWidth={\"lg\"}\r\n                open={newOpen}\r\n                onClose={onNewContractHandler}>\r\n                <S010100010 dataMem={detailMemberId} newDataForm={'N'} detailMemberList={detailMemberList} onNewContractHandler={onNewContractHandler} setNewOpen={setNewOpen} />\r\n            </Dialog>\r\n\r\n        </form>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default S010100050;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100150.js",["338","339","340","341","342","343"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport logos from './css/logos.png';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport {useStyles} from './Test';\r\n\r\n\r\n\r\n\r\nfunction S010100150(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = React.useState(true);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const onEmailHandler = (event) => {\r\n    setEmail(event.currentTarget.value)\r\n  };\r\n\r\n  const onPasswordHandler = (event) => {\r\n    setPassword(event.currentTarget.value)\r\n  };\r\n\r\n  const useConfirm = (message = null, onConfirm, onCancel) => {\r\n    if (!onConfirm || typeof onConfirm !== \"function\") {\r\n        return;\r\n    }\r\n    if (onCancel && typeof onCancel !== \"function\") {\r\n        return;\r\n    }\r\n\r\n    const confirmAction = () => {\r\n        if (window.confirm(message)) {\r\n            onConfirm();\r\n        } else {\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    return confirmAction;\r\n  };\r\n\r\n  const approvalConfirm = () => {\r\n\r\n    axios.post('/api/s010100150/userLogout')\r\n    .then(response => {\r\n      if (response.data.logoutResult == true) {\r\n        alert('로그아웃 하였습니다.');\r\n        sessionStorage.removeItem('member');\r\n        sessionStorage.clear();\r\n        props.history.push('/');\r\n        // console.log(sessionStorage.getItem('member'));\r\n      }else if(response.data.loginResult == false){\r\n        alert(response.data.message);\r\n        alert('아이디 또는 비밀번호를 확인하세요.');\r\n      }\r\n    })\r\n\r\n  };\r\n\r\n  const cancelConfirm = () => alert('취소하였습니다.');\r\n\r\n  const onLogoutHandler = useConfirm(\r\n      \"로그아웃 하시겠습니까?\",\r\n      approvalConfirm,\r\n      cancelConfirm\r\n  );\r\n\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    let body = {\r\n      email: email,\r\n      password: password\r\n    }\r\n\r\n    axios.post('/api/s010100150/userLogin', body)\r\n      .then(response => {\r\n        if (response.data.loginResult == true) {\r\n          alert('로그인 되었습니다.');\r\n          let arr = [response.data.cf,response.data.mI];\r\n          \r\n          sessionStorage.setItem('member',JSON.stringify(arr));\r\n          props.history.push('/member');       \r\n        }else if(response.data.pwdResult == false){\r\n          alert('비밀번호를 확인하세요');\r\n        }else if(response.data.loginResult == false){\r\n          // alert(response.data.message);\r\n          alert('가입되어 있지 않은 사용자 입니다.');\r\n        }\r\n      })\r\n  }\r\n\r\n  return (\r\n\r\n    <div className={classes.root}>\r\n      {/* 백그라운드 */}\r\n      <CssBaseline />\r\n      {/* 상단파란툴바 */}\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n          SwonTech 고객관리시스템\r\n          </Typography>\r\n         \r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* 왼쪽 메뉴바 */}\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          <div>\r\n            <div id = \"hey\" hidden ={sessionStorage.getItem('member') === null}>\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n              <PeopleIcon />\r\n              </ListItemIcon>\r\n              <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n            </ListItem>\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n                <ShoppingCartIcon />\r\n              </ListItemIcon>\r\n              <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n            </ListItem>\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n              <DashboardIcon />\r\n              </ListItemIcon>\r\n              <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n            </ListItem>\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n                <BarChartIcon />\r\n              </ListItemIcon>\r\n              <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n            </ListItem>\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n              <DashboardIcon />\r\n              </ListItemIcon>\r\n              <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n            </ListItem>\r\n            <ListItem button>\r\n                <ListItemIcon>\r\n                  <LayersIcon />\r\n                </ListItemIcon>\r\n                <span onClick={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n              </ListItem>\r\n            </div>\r\n\r\n            <div hidden = {sessionStorage.getItem('member') != null}>\r\n              <ListItem button>\r\n                <ListItemIcon>\r\n                  <LayersIcon />\r\n                </ListItemIcon>\r\n                <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n              </ListItem>\r\n            </div>\r\n\r\n          </div>\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n              <CssBaseline />\r\n              <div className={classes.paper}>\r\n              <img  src={logos} width=\"true\"></img>\r\n\r\n                <div hidden ={sessionStorage.getItem('member') != null}>\r\n                  <Typography component=\"h1\" variant=\"h5\">\r\n                    로그인\r\n                  </Typography>\r\n                </div>\r\n                <div hidden ={sessionStorage.getItem('member') === null} style={{marginTop:'5px'}}>\r\n                  <Typography component=\"h1\" variant=\"h5\">\r\n                    로그아웃\r\n                  </Typography>\r\n                </div>\r\n                <form onSubmit={onSubmitHandler} >\r\n                  <div hidden ={sessionStorage.getItem('member') != null}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      margin=\"normal\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"이메일을 입력하세요\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      autoFocus\r\n                      value={email}\r\n                      onChange={onEmailHandler}\r\n                    />\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      margin=\"normal\"\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"비밀번호를 입력하세요\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                      value={password}\r\n                      onChange={onPasswordHandler}\r\n                    />\r\n                  </div>\r\n                  <div hidden ={sessionStorage.getItem('member') != null}> \r\n                    <Button type=\"submit\"\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.submit}\r\n                    > 로그인 </Button>\r\n                  </div>\r\n                  \r\n                  <div hidden ={sessionStorage.getItem('member') === null}>\r\n                    <Button onClick = {onLogoutHandler}\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.submit}\r\n                    > 로그아웃 </Button>\r\n                  </div>\r\n                  <Grid container>\r\n                    <Grid item>\r\n                      <Link href=\"/findemailPwd\" variant=\"body2\">\r\n                      <span hidden ={sessionStorage.getItem('member') != null}>\r\n                        비밀번호초기화\r\n                      </span>\r\n                      </Link>\r\n                    </Grid>\r\n                  </Grid>\r\n     \r\n                </form>\r\n              </div>\r\n\r\n            </Container>\r\n\r\n          </Grid>\r\n         \r\n        </Container>\r\n      </main>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default S010100150;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100140.js",["344","345","346"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './css/S010100140.css';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport ko from 'date-fns/locale/ko'\r\n\r\nregisterLocale(\"ko\", ko);\r\n\r\n\r\n\r\n\r\nfunction S010100140(props) {\r\n\r\n    const rNum = props.num;\r\n    // 상세보기\r\n    useEffect(() => {\r\n      \r\n        if (props.dataForm === 'U') {\r\n\r\n            axios.get(`/api/s010100140/tb_s10_ask010_by_id?id=${rNum}&type=single`)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        // // console.log(response.data)\r\n                        const askTp = (response.data.rows[0].ASK_TP);\r\n                        const askDate = (response.data.rows[0].ASK_DATE);\r\n                        const askMethod = (response.data.rows[0].ASK_METHOD);\r\n                        const askName = (response.data.rows[0].ASK_NAME);\r\n                        const askPath = (response.data.rows[0].ASK_PATH);\r\n                        const askInfo = (response.data.rows[0].ASK_INFO);\r\n                        const askContent = (response.data.rows[0].ASK_CONTENT);\r\n    \r\n                        setModalAskTp(askTp);\r\n                        setModalAskName(askName);\r\n                        setModalAskMethod(askMethod);\r\n                        setModalAskPath(askPath);\r\n                        setModalAskInfo(askInfo);\r\n                        setModalAskContent(askContent);\r\n                        setStartDate(new Date(askDate));\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n                    }\r\n                })\r\n        }\r\n\r\n    }, [])\r\n\r\n    //select-option\r\n    const [modalAskTp, setModalAskTp] = useState('')\r\n    const [modalAskMethod, setModalAskMethod] = useState('')\r\n    const [modalAskPath, setModalAskPath] = useState('')\r\n\r\n    const [modalContractTpLov, setModalContractTpLov] = useState([{ key: '', value: '선택' }])\r\n    const [modalAskMethodLov, setModalAskMethodLov] = useState([{ key: '', value: '선택' }])\r\n    const [modalAccessPathLov, setModalAccessPathLov] = useState([{ key: '', value: '선택' }])\r\n\r\n    useEffect(() => {\r\n        getContractTpLov();\r\n        getAskMethodLov();\r\n        getAccessPathLov();\r\n    }, []);\r\n\r\n    const getContractTpLov = () => {\r\n        getLovByCdTp('CONTRACT_TP', 'ASK');\r\n    };\r\n    const getAskMethodLov = () => {\r\n        getLovByCdTp('ASK_METHOD', '');\r\n    };\r\n    const getAccessPathLov = () => {\r\n        getLovByCdTp('ACCESS_PATH', 'ASK');\r\n    };\r\n\r\n    /**\r\n     * desc : LOV에 필요한 항목을 받아 DB조회 후 조회값을 반환하는 로직\r\n     * */\r\n\r\n    async function getLovByCdTp(cdTp, attribute2) {\r\n        let arr = [{ key: '', value: '선택' }];\r\n        return await axios.post('/api/s010100140/selectTest', { firstVal: cdTp, secondVal: attribute2 })\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                   // console.log('modalAskTp',response.data.rows);\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING,\r\n                            key: data.CD_V\r\n                        }));\r\n                    \r\n                    switch (cdTp) {\r\n                        case 'CONTRACT_TP': setModalContractTpLov(arr); break;\r\n                        case 'ASK_METHOD': setModalAskMethodLov(arr); break;\r\n                        case 'ACCESS_PATH': setModalAccessPathLov(arr); break;\r\n                    }\r\n                    if (cdTp === 'CONTRACT_TP')\r\n                        setModalAccessPathLov(arr);\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\")\r\n                }\r\n            }).catch(() => {\r\n               \r\n                alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n            })\r\n     \r\n    }\r\n\r\n    const [startDate, setStartDate] = useState(new Date());\r\n  \r\n    const [modalAskName, setModalAskName] = useState(\"\")\r\n    const [modalAskInfo, setModalAskInfo] = useState(\"\")\r\n    const [modalAskContent, setModalAskContent] = useState(\"\")\r\n\r\n\r\n    const onAskTpHandler = (event) => {\r\n        setModalAskTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskMethodHandler = (event) => {\r\n        setModalAskMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskPathHandler = (event) => {\r\n        setModalAskPath(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskNameHandler = (event) => {\r\n        setModalAskName(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskInfoHandler = (event) => {\r\n        setModalAskInfo(event.currentTarget.value);\r\n    }\r\n\r\n    const onAskContentHandler = (event) => {\r\n        setModalAskContent(event.currentTarget.value);\r\n    }\r\n    \r\n\r\n\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = () => {\r\n\r\n        const body = {\r\n            modalAskId: rNum,\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: startDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n\r\n        axios.post('/api/s010100140/modify', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('정상적으로 수정되었습니다.');\r\n                    props.setMOpen(false);\r\n                    props.searchAsk();\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('수정에 실패하였습니다.')\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    const cancelConfirm = () => alert('수정을 취소하였습니다.');\r\n\r\n    const onModifyHandler = useConfirm(\r\n        modalAskName+'님의 정보를 수정하시겠습니까?',\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n\r\n\r\n    // 상담 등록 저장 버튼 클릭시\r\n    const onHandleSubmit = (event) => {\r\n        event.preventDefault();\r\n        //   //문의구분 NUll체크\r\n        if (!modalAskTp || modalAskTp === '선택') {\r\n            return alert(\"문의구분을 선택하세요.\");\r\n        }\r\n\r\n        //문의방법 NUll체크\r\n        if (!modalAskMethod) {\r\n           \r\n            return alert(\"문의방법을 선택하세요.\");\r\n        }\r\n\r\n        //접근경로 NUll체크\r\n        if (!modalAskPath) {\r\n            return alert(\"접근경로를 선택하세요.\");\r\n        }\r\n\r\n        const body = {\r\n            modalAskTp: modalAskTp,\r\n            modalAskDate: startDate,\r\n            modalAskName: modalAskName,\r\n            modalAskMethod: modalAskMethod,\r\n            modalAskPath: modalAskPath,\r\n            modalAskInfo: modalAskInfo,\r\n            modalAskContent: modalAskContent\r\n        }\r\n\r\n        axios.post('/api/s010100140/insert', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('정상적으로 등록되었습니다.');\r\n                    props.setStoreOpen(false);\r\n                    props.searchAsk();\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('등록에 실패하였습니다.')\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={onHandleSubmit} >\r\n        \r\n            <div className=\"askInfoWrapper\">\r\n                <div className=\"memberInfoWrap\">\r\n                    {/* 회원정보란 */}\r\n                    <h5 id=\"infoTitle\">상담 등록</h5>\r\n\r\n                    <table id=\"memberDetailTable\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>문의구분</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} onChange={onAskTpHandler} value={modalAskTp}>\r\n                                        {modalContractTpLov.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                <th>문의일자</th>\r\n                                <td>\r\n                                \r\n                                    <DatePicker\r\n                                        className=\"dateSize\"\r\n                                        locale=\"ko\"\r\n                                        selected={startDate.setHours(9, 0, 0, 0)}\r\n                                        onChange={date => setStartDate(date)}\r\n                                        dateFormat=\"yyyy-MM-dd (eee)\"\r\n                                    />\r\n\r\n                                </td>\r\n\r\n                                <th>문의자명</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        value={modalAskName}\r\n                                        id=\"modalAskName\"\r\n                                        name=\"modalAskName\"\r\n                                        onChange={onAskNameHandler} />\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>문의방법</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} value={modalAskMethod} onChange={onAskMethodHandler}>\r\n                                        {modalAskMethodLov.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                <th>접근경로</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false} value={modalAskPath} onChange={onAskPathHandler}>\r\n                                        {modalAccessPathLov.map(item => (\r\n                                            <option key={item.key} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n\r\n                                    </Form.Control>\r\n\r\n                                </td>\r\n\r\n                                <th>문의자연락처</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={modalAskInfo} id=\"modalAskInfo\" name=\"modalAskInfo\" onChange={onAskInfoHandler} />\r\n                                </td>\r\n                            </tr>\r\n\r\n\r\n                            <tr>\r\n                                <th>상담내용</th>\r\n\r\n                                <td colSpan=\"5\">\r\n                                    <Form.Control as=\"textarea\" rows={3} value={modalAskContent} id=\"modalAskContent\" name=\"modalAskContent\"\r\n                                        onChange={onAskContentHandler} />\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div id=\"btnAlign\">\r\n                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"popBtn\" onClick={onModifyHandler} hidden={props.dataForm !== 'U'} >수정하기</Button>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"popBtn\" type=\"submit\" hidden={props.dataForm === 'U'} >등록하기</Button>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"popBtn\" hidden={props.dataForm !== 'U'} onClick={props.onDetailHandleClickClose}>닫기</Button>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"popBtn\" hidden={props.dataForm === 'U'} onClick={props.onHandleClickClose}>닫기</Button>\r\n            </div>\r\n        </form>\r\n\r\n    );\r\n}\r\nexport default S010100140;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\Pagination.js",["347"],"import React from 'react';\r\n\r\nconst Pagination = ({postsPerPage,totalPosts,paginate}) =>{\r\n    const pageNumbers = [];\r\n\r\n    for(let i = 1;i <= Math.ceil(totalPosts/postsPerPage);i++){\r\n        pageNumbers.push(i);\r\n\r\n    }\r\n    return(\r\n        <nav id = \"pageCenter\">\r\n            <ul className = \"pagination\" style = {{ margin:0, padding:0}} >\r\n                {pageNumbers.map(number =>(\r\n                    <li key = {number} className = \"pageItem\" style = {{float:\"left\",  margin:0, padding:0}}>\r\n                        <a onClick={()=>paginate(number)} className = \"pageLink\">\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Pagination;",["348","349"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100070.js",["350","351","352","353","354","355","356","357","358","359","360"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './css/S010100070.css';\r\n\r\n\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport xlsx from 'xlsx';\r\n\r\nimport DatePicker, { registerLocale } from 'react-datepicker';\r\nimport ko from 'date-fns/locale/ko';\r\nimport {useStyles} from './Test';\r\nregisterLocale(\"ko\", ko);\r\n\r\n\r\n\r\nfunction S010100070(props) {\r\n\r\n    const [paymentMemberNm, setPaymentMemberNm] = useState('');\r\n    const [paymentPeriod, setPaymentPeriod] = useState('');\r\n    const [paymentCeoNm, setPaymentCeoNm] = useState('');\r\n    const [paymentEmpHp, setPaymentEmpHp] = useState('');\r\n    const [paymentEmpEmail, setPaymentEmpEmail] = useState('');\r\n    const [paymentEmpComment, setPaymentEmpComment] = useState('');\r\n    const [paymentStatusList, setPaymentStatusList] = useState([]);\r\n    const [payMethod, setPayMethod] = useState('');\r\n    const [payPlanMoney, setPayPlanMoney] = useState('');\r\n\r\n    // 페이징\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage, setPostsPerPage] = useState(12);\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n\r\n    const [checked, setChecked] = useState([]);\r\n    const [sequenceChk, setSequenceChk] = useState('');\r\n    const [checkStatusChk, setCheckStatusChk] = useState('');\r\n    \r\n    const [payMethodM, setPayMethodM] = useState('');\r\n\r\n    const [pageNumber,setPageNumber] = useState(0);\r\n    const usersPerPage = 12;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n    const pageCount = Math.ceil(paymentStatusList/usersPerPage);\r\n\r\n    const classes = useStyles();\r\n        \r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const paymentMemberNmHandler = (event) => {\r\n        setPaymentMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentPeriodHandler = (event) => {\r\n        setPaymentPeriod(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentCeoNmHandler = (event) => {\r\n        setPaymentCeoNm(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentEmpHpHandler = (event) => {\r\n        setPaymentEmpHp(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentEmpEmailHandler = (event) => {\r\n        setPaymentEmpEmail(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentEmpCommentHandler = (event) => {\r\n        setPaymentEmpComment(event.currentTarget.value);\r\n    }\r\n\r\n    const payMethodHandler = (event) => {\r\n        setPayMethod(event.currentTarget.value);\r\n    }\r\n\r\n    const paymentStList = () => {\r\n        axios.get(`/api/s010100070/insert/tb_s10_contract020_by_id?id=${dataContracId}`)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    // 초기값 세팅\r\n                    response.data.rows.map((row) => {\r\n                        if (row.PAYED_DATE === null || row.PAYED_DATE === undefined) row.PAYED_DATE = makeYYMMDD(new Date());\r\n                        if (row.COMMENT === null || row.COMMENT === undefined) row.COMMENT = '';\r\n                    })\r\n\r\n                    setPaymentStatusList(response.data.rows);\r\n                    setPaymentMemberNm(response.data.rows[0].MEMBER_NM);\r\n                    setPaymentPeriod(response.data.rows[0].CONTRACT_TERM + '개월 ' +\r\n                        '(' + response.data.rows[0].START_DATE + ' ~ ' + response.data.rows[0].END_DATE + ')');\r\n                    setPaymentCeoNm(response.data.rows[0].NAME);\r\n                    setPaymentEmpHp(response.data.rows[0].EMP_HP);\r\n                    setPaymentEmpEmail(response.data.rows[0].EMP_EMAIL);\r\n                    setPaymentEmpComment(response.data.rows[0].COMMENT);\r\n                    setPayMethodM(response.data.rows[0].PAY_METHOD);\r\n                    // if(response.data.rows[0].PAY_METHOD_M === null){\r\n                    //     setPayMethod('가계약');\r\n                    // }else{\r\n                        setPayMethod(response.data.rows[0].PAY_METHOD_M);\r\n                    // }\r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"데이터 조회를 실패하였습니다.\")\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        paymentStList();\r\n    }, [])\r\n\r\n    let newChecked;\r\n   \r\n    const toggleHandler = (value) => {\r\n           \r\n            \r\n            const currentIndex = checked.indexOf(value);\r\n            // console.log(checked);\r\n          \r\n            const newChecked = [...checked];\r\n           \r\n            if (currentIndex === -1) {\r\n                newChecked.push(value)\r\n            } else {\r\n                newChecked.splice(currentIndex, 1)\r\n            }\r\n            setChecked(newChecked);\r\n            // console.log('Checked',checked);\r\n            \r\n    }\r\n\r\n    const snsBtnHandler = (event) => {\r\n\r\n    }\r\n    const emailBtnHandler = (event) => {\r\n\r\n    }\r\n \r\n    const excelBtnHandler = () => {\r\n\r\n        const ws = xlsx.utils.json_to_sheet(paymentStatusList);\r\n\r\n        ['대표자', '연락처', 'E-mail', '회원명', '계약상태', '계약기간', '계약기간', '납부일자', '특약사항', '계약기간(개월)', '납부예정일', 'contract_id', '납부여부', '비고']\r\n            .forEach((x, idx) => {\r\n                const cellAdd = xlsx.utils.encode_cell({ c: idx, r: 0 });\r\n                ws[cellAdd].v = x;\r\n\r\n            })\r\n\r\n        ws['!cols'] = [];\r\n        ws['!cols'][11] = { hidden: true };\r\n\r\n\r\n        const wb = xlsx.utils.book_new();\r\n\r\n        xlsx.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        xlsx.writeFile(wb, \"고객납부등록.xlsx\");\r\n    }\r\n\r\n\r\n    let dataContracId = props.dataContracId;\r\n\r\n    const makeYYMMDD = (value) => {\r\n        let year = (value.getFullYear() + '').substring(2);\r\n        let month = value.getMonth() + 1;\r\n        let date = value.getDate();\r\n        month = month < 10 ? '0' + month : month;\r\n        date = date < 10 ? '0' + date : date;\r\n        return year + '-' + month + '-' + date;\r\n    }\r\n \r\n  \r\n\r\n    const displayUsers = paymentStatusList.slice(pagesVisited,pagesVisited + usersPerPage).map((paymentStatus, index) => {\r\n        let insertPayDate = paymentStatus.PAYED_DATE\r\n            ? new Date('20' + paymentStatus.PAYED_DATE)\r\n            : new Date();\r\n\r\n        return (\r\n            <TableRow key={index}>\r\n                <TableCell>\r\n                    <input type=\"checkbox\" checked = {checked.indexOf(paymentStatus.PAY_PLAN_DATE + ',' + paymentStatus.PAYED_DATE + ',' + paymentStatus.COMMENT)=== -1 ? false : true} onChange={()=>toggleHandler(paymentStatus.PAY_PLAN_DATE + ',' + paymentStatus.PAYED_DATE + ',' + paymentStatus.COMMENT)} id={paymentStatus.PAY_PLAN_DATE + ',' + paymentStatus.PAYED_DATE + ',' + paymentStatus.COMMENT} />\r\n                </TableCell>\r\n                <TableCell id={paymentStatus.CONTRACT_ID}>{paymentStatus.CONTRACT_ID}</TableCell>\r\n                <TableCell>{paymentStatus.PAYED_PLAN_MONEY}</TableCell>\r\n                <TableCell>{paymentStatus.PAY_PLAN_DATE}</TableCell>\r\n                <TableCell>{paymentStatus.PAYED_FLAG}</TableCell>\r\n                <TableCell>\r\n                    {/* api보고 바뀐 이벤트 값 들고오는거 찾아서 했어요 */}\r\n                    <DatePicker\r\n                        className =\"dateSize\"\r\n                        id={paymentStatus.PAY_PLAN_DATE}\r\n                        locale=\"ko\"\r\n                        selected={insertPayDate.setHours(9, 0, 0, 0)}\r\n                        onChange={\r\n                            date => {\r\n                                setPaymentStatusList(\r\n                                    paymentStatusList.map(changePaymentStatus =>\r\n                                        changePaymentStatus.PAY_PLAN_DATE === paymentStatus.PAY_PLAN_DATE ?\r\n                                            { ...changePaymentStatus, PAYED_DATE: makeYYMMDD(date) }\r\n                                            : changePaymentStatus\r\n                                    ))\r\n\r\n                                    setSequenceChk('dateChecked');\r\n                            }\r\n                        }\r\n                        selectsStart\r\n                        startDate={insertPayDate}\r\n                        dateFormat=\"yyyy-MM-dd (eee)\"\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <Form.Control as=\"textarea\" cols=\"20\" rows=\"2\"\r\n                        value={paymentStatus.COMMENT}\r\n                        size=\"5\"\r\n                        id={paymentStatus.PAY_PLAN_DATE}\r\n                        onChange={(e) => {\r\n                            setPaymentStatusList(\r\n                                paymentStatusList.map((changePaymentStatus, chIndex) =>\r\n                                    chIndex === index ?\r\n                                        { ...changePaymentStatus, COMMENT: e.target.value }\r\n                                        : changePaymentStatus\r\n                                ))\r\n                        }\r\n                        }\r\n                    />\r\n                </TableCell>\r\n            </TableRow>\r\n        )\r\n    });\r\n\r\n    const payCancelBtnHandler = (event) => {\r\n        let modalContractId = props.dataContracId;\r\n        let modalPayPlanDate = checked;\r\n\r\n        if(checked.length > 0){\r\n            let body = {\r\n                modalContractId: modalContractId,\r\n                modalPayPlanDate: modalPayPlanDate,\r\n                payMethodM: payMethodM,\r\n                newChecked: newChecked,\r\n                checked: checked\r\n            }\r\n    \r\n            axios.post('/api/s010100070/paymentCancel', body)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        alert('취소처리되었습니다.');\r\n                        setChecked('');\r\n                        paymentStList();\r\n                        props.paymentList();\r\n                        props.setStoreOpen(false);\r\n                       \r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert('취소처리를 실패하였습니다.');\r\n                        props.paymentList();\r\n                        props.setStoreOpen(false);\r\n                      \r\n                    }\r\n                })\r\n        }else if(checked.length === 0){\r\n            alert('선택하세요');\r\n        }\r\n        \r\n    }\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = () => {\r\n\r\n        let modalContractId = props.dataContracId;\r\n        let modalPayPlanDate = checked;\r\n       \r\n        setSequenceChk('');\r\n\r\n        if(checked.length > 0){\r\n        let body = {\r\n            modalContractId: modalContractId,\r\n            modalPayPlanDate: modalPayPlanDate,\r\n            payMethodM: payMethodM,\r\n            newChecked: newChecked,\r\n            checked: checked\r\n        }\r\n        // console.log('newChecked', body);\r\n         \r\n\r\n            if(sequenceChk ==''){\r\n                alert('날짜먼저 선택한 후 체크하세요.');\r\n                setChecked('');\r\n            }\r\n            else{\r\n            axios.post('/api/s010100070/paymentUpdate', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('납부처리 되었습니다.');\r\n                  \r\n                    setChecked('');\r\n                    paymentStList();\r\n                    props.setPayChecked('');\r\n                    props.paymentList();\r\n                    props.setStoreOpen(false);\r\n                    \r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('납부처리를 실패하였습니다.');\r\n                    props.setPayChecked('');\r\n                    props.paymentList();\r\n                    props.setStoreOpen(false);\r\n                }\r\n            })\r\n        \r\n        }\r\n       \r\n    }else if(checked.length === 0){\r\n        alert('선택하세요');\r\n    }\r\n    \r\n\r\n    }\r\n\r\n    const cancelConfirm = () => {\r\n        alert('납부처리를 취소하였습니다.');\r\n        props.setPayChecked('');\r\n        props.setStoreOpen(false);\r\n    \r\n    }\r\n\r\n    const payBtnHandler = useConfirm(\r\n        paymentMemberNm+'('+ paymentCeoNm+')님의 계약건을 납부처리 하시겠습니까?',\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n\r\n            <form style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                width: '100%'\r\n            }}>\r\n\r\n                <div className=\"memberInfoWrapper\">\r\n                    <div className=\"memberInfoWrap\">\r\n                        <h5 id=\"infoTitle\">고객 납부 등록</h5>\r\n                        <table id=\"memberDetailTable\">\r\n                            <tbody>\r\n                            <tr>\r\n                                <th>회원명</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 12 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={paymentMemberNm} id=\"memberNm\" name=\"memberNm\"\r\n                                        onChange={paymentMemberNmHandler} />\r\n\r\n                                </td>\r\n                                <th>계약기간</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 15 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={paymentPeriod} id=\"paymentPeriod\" name=\"paymentPeriod\"\r\n                                        onChange={paymentPeriodHandler} />\r\n\r\n                                </td>\r\n                                <th>납부방법</th>\r\n                                <td >\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={payMethod|| ''} id=\"payMethod\" name=\"payMethod\"\r\n                                        onChange={payMethodHandler} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th> 대표자</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={paymentCeoNm} id=\"name\" name=\"name\"\r\n                                        onChange={paymentCeoNmHandler} />\r\n\r\n                                </td>\r\n                                <th>연락처</th>\r\n                                <td>\r\n                                    \r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={paymentEmpHp} id=\"ceoHp\" name=\"ceoHp\"\r\n                                        onChange={paymentEmpHpHandler} />\r\n\r\n                                </td>\r\n                                <th>메일주소</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 14 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={paymentEmpEmail} id=\"eAddr\" name=\"eAddr\"\r\n                                        onChange={paymentEmpEmailHandler} />\r\n\r\n                                </td>\r\n\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>특약사항</th>\r\n                                <td colSpan=\"5\">\r\n\r\n                                    <Form.Control as=\"textarea\" rows={3} value={paymentEmpComment} id=\"comment\"\r\n                                        name=\"comment\"\r\n                                        onChange={paymentEmpCommentHandler} />\r\n                                  \r\n                                </td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n\r\n                        <React.Fragment >\r\n                            <Table size=\"small\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>선택</TableCell>\r\n                                        <TableCell>No</TableCell>\r\n                                        <TableCell>납부예정금액</TableCell>\r\n                                        <TableCell>납부예정일</TableCell>\r\n                                        <TableCell>납부여부</TableCell>\r\n                                        <TableCell>납부일자</TableCell>\r\n                                        <TableCell>비     고</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                { displayUsers}\r\n                                </TableBody>\r\n                            </Table>\r\n                            \r\n                        </React.Fragment>\r\n                        <div className=\"pageCenter\">\r\n                        <div id = \"reactPage\">\r\n                                                <ReactPaginate\r\n                                                    previousLabel = {\"Previous\"}\r\n                                                    nextLabel = {\"Next\"}\r\n                                                    pageCount = {pageCount}\r\n                                                    onPageChange = {changePage}\r\n                                                    containerClassName={\"paginationBtns\"}\r\n                                                    previousLinkClassName={\"previousBtn\"}\r\n                                                    nextLinkClassName={\"nextBtn\"}\r\n                                                    disabledClassName={\"paginationDisabled\"}\r\n                                                    activeClassName={\"paginationActive\"}   \r\n                                                />\r\n                                            </div>\r\n                        </div>\r\n                        <div id=\"btnAlign\">\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }}\r\n                                onClick={payBtnHandler}  >납부</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }}\r\n                            onClick={payCancelBtnHandler}>취소</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 110 }} className=\"new\"\r\n                                onClick={snsBtnHandler}  >SNS 전송</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"memberId\"\r\n                                onClick={emailBtnHandler} >메일 전송</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 130 }} className=\"contractId\"\r\n                                onClick={excelBtnHandler} >엑셀다운로드</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 110 }} id=\"btnWidth\">계산서발행</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} className=\"contractId\"\r\n                                onClick={props.onPayHandleClickClose} >닫기</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </form>\r\n        </Fragment>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default S010100070;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\LeaseAgreement.js",["361","362"],"import React,{Fragment, useState, useEffect}from 'react';\r\nimport axios from 'axios';\r\nimport './utilsCss/LeaseAgreement.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction LeaseAgreement (props){\r\n\r\n    // 계약시작년도,월,일\r\n    const [startYear,setStartYear] = useState('');\r\n    const [startMonth,setStartMonth] = useState('');\r\n    const [startDay,setStartDay] = useState('');\r\n    \r\n    // 계약종료년도,월,일\r\n    const [endYear,setEndYear] = useState('');\r\n    const [endMonth,setEndMonth] = useState('');\r\n    const [endDay,setEndDay] = useState('');\r\n\r\n    const [contractMoney,setContractMoney] = useState('');\r\n    const [roomLockerTp,setRoomLockerTp] = useState('');\r\n    const [contractPayDate,setContractPayDate] = useState('');\r\n    const [vatMoney, setVatMoney] = useState(0);\r\n\r\n    const [companyName,setCompanyName] = useState('');\r\n    const [ceoName,setCeoName] = useState('');\r\n    const [bLicenseNum,setBLicenseNum] = useState('');\r\n    const [companyAddr,setCompanyAddr] = useState('');\r\n    const [ceoTel,setCeoTel] = useState('');\r\n\r\n    const  numberWithCommas = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n    \r\n    const onPrintHandler = (event) => {\r\n        window.print();\r\n    }\r\n\r\n    useEffect(() => {\r\n      const rNum = props.dataNum;\r\n      axios.get(`/api/s010100010/tb_s10_contract010_by_id?id=${rNum}&type=single`)\r\n          .then(response => {\r\n              if (response.data.success) {\r\n\r\n                const modalCContractDate = response.data.rows[0].CONTRACT_DATE;\r\n\r\n                let modalCContractMoney;\r\n                if((response.data.rows[0].PAYED_PLAN_MONEY === null)||(response.data.rows[0].PAYED_PLAN_MONEY === '')||(response.data.rows[0].PAYED_PLAN_MONEY === undefined)){\r\n                    modalCContractMoney = '';\r\n                }else{\r\n                    modalCContractMoney = numberWithCommas(response.data.rows[0].PAYED_PLAN_MONEY);\r\n                }   \r\n               \r\n                const contractMoney =response.data.rows[0].PAYED_PLAN_MONEY;\r\n               \r\n                const modalCContractTpValM = response.data.rows[0].CONTRACT_ROOM_M;\r\n                const modalCPayDate = response.data.rows[0].PAY_DATE;\r\n\r\n                //VAT(10%)적용한 modalCContractMoney 값\r\n                let VatMoney = numberWithCommas(contractMoney*(10/100));\r\n               \r\n                const modalCStartDate = response.data.rows[0].START_DATE;\r\n                const modalCEndDate = response.data.rows[0].END_DATE;\r\n                \r\n                let wasteStartYear = modalCStartDate.substring(0, 4);\r\n                let wasteStartMonth = modalCStartDate.substring(5, 7);\r\n                let wasteStartDay = modalCStartDate.substring(8, 10);\r\n\r\n                let wasteEndYear = modalCEndDate.substring(0, 2);\r\n                let wasteEndMonth = modalCEndDate.substring(3, 5);\r\n                let wasteEndDay = modalCEndDate.substring(6, 8);\r\n\r\n                const modalCMemberNm = response.data.rows[0].MEMBER_NM;\r\n                const modalCRegNo = response.data.rows[0].REG_NO;\r\n                const modalCName = response.data.rows[0].NAME;\r\n                const modalCEmpHp = response.data.rows[0].EMP_HP;\r\n            \r\n                const modalCZipCode = response.data.rows[0].ZIP_CODE;\r\n                const modalCAddress = response.data.rows[0].ADDRESS;\r\n                const modalCDetailAddress = response.data.rows[0].DETAIL_ADDRESS;\r\n                \r\n                \r\n                setStartYear(wasteStartYear);\r\n                setStartMonth(wasteStartMonth);\r\n                setStartDay(wasteStartDay);\r\n\r\n                setEndYear(wasteEndYear);\r\n                setEndMonth(wasteEndMonth);\r\n                setEndDay(wasteEndDay);\r\n\r\n             \r\n                setContractMoney(modalCContractMoney);\r\n             \r\n                \r\n                setVatMoney(VatMoney);\r\n                setRoomLockerTp(modalCContractTpValM);\r\n                setContractPayDate(modalCPayDate);\r\n\r\n                setCompanyName(modalCMemberNm);\r\n                setCeoName(modalCName);\r\n\r\n                setBLicenseNum(modalCRegNo);\r\n                setCompanyAddr(modalCZipCode + ' ' + modalCAddress + ' ' + modalCDetailAddress);\r\n                setCeoTel(modalCEmpHp);\r\n\r\n              } else {\r\n                  alert(\"상세 정보 가져오기를 실패하였습니다.\")\r\n              }\r\n          })\r\n        }, [])\r\n\r\n        // 현재날짜 출력\r\n        let today = new Date();\r\n        let dd = today.getDate();\r\n        let mm = today.getMonth()+1; \r\n        let yyyy = today.getFullYear();\r\n\r\n        if(dd<10) {\r\n            dd='0'+dd\r\n        } \r\n\r\n        if(mm<10) {\r\n            mm='0'+mm\r\n        } \r\n\r\n        return(\r\n                        <Fragment>\r\n                        <div className = \"agreementWrapper\">\r\n                        <h1> 임 대 차 계 약 서 </h1>\r\n                        <br/>\r\n                            <div className = \"paragraph\">\r\n                            <h3> 갑 : ㈜에스원테크   최현수</h3>\t\t\t\t\t\t\t\t\r\n                            <h3> 을 : {companyName}\t{ceoName}\t</h3>\t\t\t\t\t\t\t\r\n                            </div>     \r\n\r\n                            <div className = \"paragraph\">                                \r\n                                위 '갑'과 '을'은  {yyyy}년 {mm}월 {dd}일 다음과 같이 회원 가입을 체결 한다.\t\t\t\t\t\t\t\t\t\r\n                            </div>   \r\n\r\n                            <div className = \"paragraph\">\r\n                                <h3>1. 본 계약의 목적</h3>                        \t\t\t\t\t\t\t\t\r\n                                    본 계약은 '갑'이 '을'에게 '갑'의 사무실 및 부대시설을 사용 할 수 있는 권리를 허용함과 동시에 '을'이\t\t\t\t\t\t\t\t\t\r\n                                    필요로하는 서비스를 제공함에 있어서 '갑-을'간의 권리의무에 관한 사항을 정하기 위한 목적에서 체결 한다.\t\t\t\t\t\t\t\t\t\r\n                            </div> \r\n\r\n                            <div className = \"paragraph\">                                   \r\n                            <h3>2. 을의 권리의 책임</h3>\r\n                                    <ul>\t\t\t\t\t\t\t\t\r\n                                        <li>\r\n                                            1) '갑'은 '을'에게 제2항 및 제3항에 규정된 바와 같이 '갑'의 사무실 및 기타 부대시설을 사용할 수 있는\t\t\t\t\t\t\t\t\t\r\n                                                권리를 부여한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            2) '을'이 사용 할 수 있는 사무실의 내역은 다음과 같다.<br/>\t\t\t\t\t\t\t\t\r\n                                            &emsp;&nbsp;대상 : 서울시 강남구 봉은사로63길 11, 3,4층      {roomLockerTp}(삼성동,명화빌딩)<br/>\t\t\t\t\t\t\t\t\t\r\n                                            &emsp;&nbsp;용도 : 업무용<br/>\t\t\t\t\t\t\t\t\t\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;월회비  :         {contractMoney}원<br/>\t\t\t\t\t\t\t\t\t\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VAT     :         {vatMoney}원<br/>\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            3) '을'은 상기한 제3항의 사무실 제공과 동시에 부대시설 (회의실, 접견실, 휴게실, OA기기)을 '갑'이\t\t\t\t\t\t\t\t\t\r\n                                            정한 원칙에 의거하여 사용할 수 있다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            4) '을'은 사무실과 부대시설을 사용함에 있어서 선량한 관리자의 주의 의무를 다해야 하며, 사무실과\t\t\t\t\t\t\t\t\t\r\n                                            부대시설에 야기된 제반 손상이나 훼손에 대하여 자신의 비용으로 이를 처리해야 한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            5) '을'은 건물주 및 '갑'의 이해관계인에게 손해 등 문제가 발생할 우려가 있는 경우, 즉시 '갑'에게 사전\t\t\t\t\t\t\t\t\t\r\n                                            고지를 해야 하며 그렇지 않을 경우, 이로 인해 발생하는 '갑'의 모든 손해 (6개월간의 월회비와 법적인\t\t\t\t\t\t\t\t\t\r\n                                            문제 해결을 위한 제반 경비)에 대하여 배상을 한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            6) 상기 5)항에 대하여 '을'은 '갑'에게 관련 정보제공, 법적인 문제인 경우 이를 해결하기 위해 적극\t\t\t\t\t\t\t\t\t\r\n                                            협조한다.(또한, 채권 가압류의 경우 즉시항고, 이의신청 등을 진행하기 위한 업무협조를 포함한다.)\t\t\t\t\t\t\t\t\t\r\n                                        </li>    \r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                 \r\n                                <h3>3. 계약기간</h3>\t\t\t\t\t\t\t\t\t\r\n                                <ul>\r\n                                    <li>\r\n                                        1) 본 계약의 계약기간은 {startYear}년 {startMonth}월 {startDay}일부터 20{endYear}년 {endMonth}월 {endDay}일까지로 한다.\t\t\t\t\t\t\t\t\t\r\n                                    </li>            \r\n                                </ul>\r\n                                </div>  \r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>4. 예치금</h3>\t\t\t\t\t\t\t\t\t\r\n                                <ul>\r\n                                    <li>\r\n                                        1) '을'은 본 계약서에 서명함과 동시에 예치금 {contractMoney}원을 '갑'에게 지급하여야 한다.\t\t\t\t\t\t\t\t\t\r\n                                    </li>\r\n                                    <li>            \r\n                                        2) 위 제1항에 명시된 예치금은 본 계약기간 동안 '갑'이 보유하며, 계약기간 만료 또는 종료 시 '을'이\t\t\t\t\t\t\t\t\t\r\n                                            '갑'에게 사무실 및 부대시설을 원상 복구하여 반환하고, '갑'에게 지급할 모든 금액의 지급을 완료하고,\t\t\t\t\t\t\t\t\t\r\n                                            사업자 주소지와 전화를 7일 이내에 옮긴다.\t\t\t\t\t\t\t\t\t\r\n                                        이것이 확인된 후 3일 이내에 예치금을 반환하기로 한다. 단, 예치금에는 이자가 발생하지 않는 것으로\t\t\t\t\t\t\t\t\t\r\n                                        한다.\r\n                                    </li>           \r\n                                </ul>\t\r\n                                </div>           \r\n\r\n                                                                    \r\n                                <div className = \"paragraph\">                                               \r\n                                <h3>5. 회비 및 부가서비스 이용대금의 지급</h3>\t\t\t\t\t\t\t\t\t\r\n                                    <ul>\r\n                                        <li>\r\n                                            1) '을'은 매월  {contractPayDate} 일에 월 회비를 '갑'에게 지급하여야 하며, 그 지급일이 공휴일인 경우에는 익일까지\t\t\t\t\t\t\t\t\t\r\n                                            납부해야 한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\r\n                                            2) 월 회비나 부가서비스 이용대금이 납부기한까지 전액 납부되지 않은 경우, '갑'은 본 계약에 의하여\t\t\t\t\t\t\t\t\t\r\n                                            부여된 여타 권리와는 별도로 연체료 월 2%를 을에게 청구할 수 있다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\t        \r\n                                    </ul>            \r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>6. '갑'의 면책사항</h3>\t\t\r\n                                    <ul>\r\n                                        <li>\r\n                                            1) 본 계약서의 내용은 사정에 의하여 변동될 수 있으며, '갑'은 이러한 변경에 대하여 '을'에게\t\t\t\t\t\t\t\t\t\r\n                                            사전고지하고 상호 합의가 있는 경우, '을'은 본 계약 위반의 책임을 지지 아니한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>\r\n                                            2) '을'이나 제3자가 다음과 같은 원인에 의하여 다치거나 재산상의 손해를 입게 된 경우 \t\t\t\t\t\t\t\t\t\r\n                                            '갑'은 이에 대하여 여하한 배상책임도 부담하지 않는다.\t\r\n                                            <ul>\r\n                                                <li>\t\t\t\t\t\t\t\t\r\n                                                - 배수관, 스프링쿨러, 연기 혹은 기타 물질이 건물에서 누출 될 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                - 건물의 서비스와 설비에 결함이 있는 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                - 건물의 보안이나 보호\r\n                                                </li>\r\n                                            </ul>    \r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            3) '갑'이 '을'에게 제공하는 세무전문서비스는 '을'과 '갑'의 제휴세무사가 직접 계약을 체결하기로 한다.\t\t\t\t\t\t\t\t\t\r\n                                            세무전문서비스의 제공과 관련하는 발생하는 문제에 대하여 '갑'은 책임을 지지 아니한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                    </ul>           \r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>7. 계약의 양도 금지</h3>\t\t\t\t\t\t\t\t\t\r\n                                '을'은 본 계약상의 권리나 의무를 '갑'의 동의 없이 제3자에게 양도하거나 처분할 수 없다.\t\t\t\t\t\t\t\t\t\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>8. 계약의 해지 및 갱신</h3>\r\n                                    <ul>\r\n                                        <li>\t\t\t\t\t\t\t\t\r\n                                            1) '을'이 본 계약의 해지 및 갱신을 원하는 경우, 본 계약서 제 3조에 명시된 계약기간의 만료 15일 전까지\t\t\t\t\t\t\t\t\t\r\n                                            그러한 의사를 '갑'에게 반드시 통지 해야한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>        \r\n                                            2) 계약 만료일 15일전에 의사표시를 하지않는 경우에는, 계약만료를 통보한 날로부터 15일 이후를\t\t\t\t\t\t\t\t\t\r\n                                            계약만료일로 하며, 해당 기간의 사용료를 손해배상금으로 '갑'에게  지급한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>        \r\n                                            3) 월회비 할인률이 적용된 경우,  '을'의 사정으로 계약만료일 이전에 중도 해지할 경우는 해당기간 동안\t\t\t\t\t\t\t\t\t\r\n                                            할인 받은 총금액을 최종 정산시 일괄 반환한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>       \r\n                                            4) '갑'이 부득이한 사정으로 인하여 중도에 본 계약을 해지하고자 하는 경우 '갑'은 1개월 전에 해지의사를\t\t\t\t\t\t\t\t\t\r\n                                            '을'에게 표시하여야 한다.\r\n                                        </li>\r\n                                        <li>    \t\t\t\t\t\t\t\t\t\r\n                                            5) 다음의 경우에는 '갑'이 일방적으로 계약을 해지 할 수 있다.\r\n                                                <ul>\r\n                                                <li>\r\n                                                    - '을' 이 30일 이내 2회 이상 '갑'으로부터 납부 권고를 받고도 월 이용회비를 납부하지 않은 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '갑' 이 규정한 ‘회원이용안내’의 규칙을 준수하지 않고 질서를 문란하여 타 회원에게 피해를\t\t\t\t\t\t\t\t\t\r\n                                                    입힌 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '을'이  '갑' 의 사전 승인 없이 회원계약을 제 3자에게 인도한 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '을' 의 업무가 반사회적이거나, 현행 법률에 저촉되어 물의가 될 것으로 판단되는 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                <li>\r\n                                                    - '을' 로 인해  '갑' 과  '갑'의 이해당사자에게 법적인 문제(채권 가압류등) 및 피해가 발생한 경우\t\t\t\t\t\t\t\t\t\r\n                                                </li>\r\n                                                </ul>\r\n                                            </li>\r\n                                    \r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>9. 위 제8조 제5항에 의거하여 '갑'이 일방적으로 본 계약을 해지 할 경우</h3>\r\n                                    <ul>\t\r\n                                        <li>\t\t\t\t\t\t\t\t\r\n                                            1) 해지 3일 전에 서면 또는 전자메일로 통보하며 계약해지에 따른 월회비나 서비스 이용대금을 정산하고\t\t\t\t\t\t\t\t\t\r\n                                            '을'의 회원자격을 박탈한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            2) '을'은 계약해지를 통보 받은 날로부터 3일 이내에 '갑'의 유치물품을 퇴거해야 하며, 퇴거하지 않을 경우\t\t\t\t\t\t\t\t\t\r\n                                            '을'의 유치물품에 대한 분실이나 도난에 대해 '갑'은 책임을 지지 않는다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>\r\n                                        <li>                            \r\n                                            3) 본 계약서에 명시된 월회비나 서비스 이용대금을 전액 납부하지 않은 경우, '갑'은 사무실 또는 건물에\t\t\t\t\t\t\t\t\t\r\n                                            있는 '을'의 자산에 대하여 최우선적인 담보권을 취득한다. 만일 '을'이 '갑'의 서면 통지를 받은\t\t\t\t\t\t\t\t\t\r\n                                            날로부터 10일 내에 미지급된 금액을 납부하지 않을 경우, '갑'은 '을'의 동의 없이 '갑'이 자산을 이전\t\t\t\t\t\t\t\t\t\r\n                                            및 임의 처분할 권리를 가진다.\r\n                                        </li>\r\n                                    </ul>\t\t\t\t\t\t\t\t\t\r\n                                </div>\r\n\r\n                                <div className = \"paragraph\">                                    \r\n                                <h3>10. 분쟁의 해결</h3>\r\n                                    <ul>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            1) '갑'과 '을'간에 본 계약과 관련하여 분쟁이 야기되는 경우, 해당 분쟁은 대한상사중재원에게 상사중재에 \t\t\t\t\t\t\t\t\t\r\n                                                의하여 상호 해결하는데 동의한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            2) 본 계약의 준거법은 대한국민법으로 한다.\r\n                                        </li>\r\n                                        <li>\t\t\t\t\t\t\t\t\t\r\n                                            3) '을'이 계약을 해지하고자 할 경우에는 해지를 희망하는 날로부터 15일전에 '갑'에게 서면 통지하여야\t\t\t\t\t\t\t\t\t\r\n                                                하며, '갑'은 사용료를 일할 정산한다.\t\t\t\t\t\t\t\t\t\r\n                                        </li>        \r\n                                    </ul>\r\n                                </div>                                    \r\n                                <br/>\r\n                                                             \r\n                                <div className = \"paragraph\">\r\n                                이상과 같은 합의를 증명하기 위하여 본 계약을 체결하며, 양 당사자는 계약서에 각기 서명 날인하여 1부씩\t\t\t\t\t\t\t\t\t\r\n                                이를 보관 한다.\t\t\r\n                                </div>\t\t\t\t\t\t\t\r\n                                                                    \r\n                                <div className = \"paragraph\" id = \"processOfSign\">      \r\n                                    <table>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>센터매니저</td>\r\n                                                <td></td>\r\n                                                <td></td>\r\n                                                <td>상기내용을 잘 주지시켰음</td>\r\n                                                <td></td>\r\n                                                <td></td>\r\n                                                <td>서명</td>\r\n                                            </tr> \r\n                                            <tr>\r\n                                                <td>이용자</td>\r\n                                                <td></td>\r\n                                                <td></td>\r\n                                                <td>상기내용을 완전히 숙지하였음</td>\r\n                                                <td></td>\r\n                                                <td></td>\r\n                                                <td>서명</td>\r\n                                            </tr>                             \r\n                                \t\t\t\t\t\t\t\t\t\t\t\t\t\r\n                                        </tbody>        \r\n                                    </table>            \r\n                                </div>                                    \r\n                                                                    \r\n                                                                    \r\n                                <div className = \"paragraph\">                                    \r\n                                임대인 : ㈜에스원테크 &emsp;&emsp;서명(인)<br/>             \t\t\t\t\t\t\t\t\t\r\n                                &emsp;&emsp;&emsp;&nbsp;&nbsp; 최현수<br/>\t\t\t\t\t\t\t\t\t\r\n                                법인등록번호 110111-4806381<br/>           \t\t\t\t\t\t\t\t\t\r\n                                사업등록번호 105-87-68698<br/>              \t\t\t\t\t\t\t\t\t\r\n                                주소 : 서울시 강남구 봉은사로63길 11, 3,4층<br/>  \t\t\t\t\t\t\t\t\t\r\n                                연락처 : 070-4355-2312<br/>                 \t\t\t\t\t\t\t\t\t\r\n                                </div>                                   \r\n                                <br/>\r\n                                <div className = \"paragraph\">                                   \r\n                                임차인 : {companyName} &emsp;&emsp;서명(인)<br/>\t\t\t\t\t\t\t\t\t\r\n                                &emsp;&emsp;&emsp;&nbsp;&nbsp; {ceoName}\r\n                                <br/>                        \r\n                                법인등록번호 :\t\t\t\t\t\t\t\t<br/>\r\n                                사업자등록번호 : \t{bLicenseNum}\t\t\t\t\t\t\t\t<br/>\t\r\n                                주소 : {companyAddr}\t\t\t\t\t\t\t\t\t<br/>\r\n                                <br/>                                                    \r\n                                연락처 : {ceoTel} <br/>\r\n                                </div>\r\n                        </div>\r\n                        <div style = {{textAlign : 'center'}}>                       \r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} onClick={onPrintHandler} >출력</Button>                                    \r\n                        </div>                        \r\n                    </Fragment>\r\n             \r\n\r\n\r\n     );\r\n}\r\nexport default LeaseAgreement;\r\n","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\listItems.js",[],["363","364"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\PostCard.js",[],["365","366"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100100.js",["367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { post } from 'axios';\r\n\r\nimport Base64Downloader from 'react-base64-downloader';\r\nimport DaumPostcode from 'react-daum-postcode';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport DatePicker, { registerLocale } from 'react-datepicker';\r\nimport ko from 'date-fns/locale/ko';\r\n\r\nregisterLocale('ko', ko);\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n}));\r\n\r\nfunction S010100100(props) {\r\n\r\n    let name = props.name;\r\n  \r\n    // 회원정보\r\n    const [memberNm, setMemberNm] = useState('');\r\n    const [empName, setEmpName] = useState('');\r\n    const [fstResidentRegiNum, setFstResidentRegiNum] = useState('');\r\n    const [sndResidentRegiNum, setSndResidentRegiNum] = useState('');\r\n    const [empTp, setEmpTp] = useState('');\r\n    const [empTps, setEmpTps] = useState([{}]);\r\n    const [finalSchoolName, setFinalSchoolName] = useState('');\r\n    const [firstEmpHp, setFirstEmpHp] = useState('');\r\n    const [secondEmpHp, setSecondEmpHp] = useState('');\r\n    const [thirdEmpHp, setThirdEmpHp] = useState('');\r\n    const [empEmailId, setEmpEmailId] = useState('');\r\n    const [domainAddress, setDomainAddress] = useState('');\r\n    const [zipcode, setZipcode] = useState('');\r\n    const [empAddress, setEmpAddress] = useState('');\r\n    const [empDetailAddress, setEmpDetailAddress] = useState('');\r\n\r\n    const [isPostOpen, setIsPostOpen] = useState(false);\r\n\r\n    // 첨부파일업로드\r\n    const [famRelCertificate, setFamRelCertificate] = useState(null);\r\n    const [famRelCertificateName, setFamRelCertificateName] = useState('');\r\n    const [realFamRelCertificateName, setRealFamRelCertificateName] = useState('');\r\n    \r\n\r\n    const [graduationCertificate, setGraduationCertificate] = useState(null);\r\n    const [graduationCertificateName, setGraduationCertificateName] = useState('');\r\n    const [realGraduationCertificateName, setRealGraduationCertificateName] = useState('');\r\n\r\n    const [copyOfBankbook, setCopyOfBankbook] = useState(null);\r\n    const [copyOfBankbookName, setCopyOfBankbookName] = useState('');\r\n    const [realCopyOfBankbookName, setRealCopyOfBankbookName] = useState('');\r\n\r\n    const [detailFamRelCert,setDetailFamRelCert] = useState('');\r\n    const [detailGraduationCert,setDetailGraduationCert] = useState('');\r\n    const [detailCopyBankbook,setDetailCopyBankbook] = useState('');\r\n\r\n    const [empNum, setEmpNum] = useState('');\r\n    const [empLevel, setEmpLevel] = useState('');\r\n    const [deptNm, setDeptNm] = useState('');\r\n    const [pwd, setPwd] = useState('');\r\n    const [wages, setWages] = useState('0');\r\n    const [joinDate, setJoinDate] = useState('');\r\n    const [retireDate, setRetireDate] = useState('');\r\n    const [birthDate, setBirthDate] = useState('');\r\n    const [empComment, setEmpComment] = useState('');\r\n  \r\n    // 중복확인\r\n    const [regNumCheckBtn, setRegNumCheckBtn] = useState('');\r\n    const [emailCheckBtn, setEmailCheckBtn] = useState('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleOpen = () => {\r\n        setIsPostOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setIsPostOpen(false);\r\n    };\r\n\r\n\r\n    const postCodeStyle = {\r\n        display: \"block\",\r\n        // position: \"absolute\",\r\n        top: \"50%\",\r\n        width: \"400px\",\r\n        height: \"500px\",\r\n        padding: \"10px\",\r\n    };\r\n\r\n    const handleComplete = (data) => {\r\n        let fullAddress = data.address;\r\n        let extraAddress = \"\";\r\n\r\n        if (data.addressType === \"R\") {\r\n            if (data.bname !== \"\") {\r\n                extraAddress += data.bname;\r\n            }\r\n            if (data.buildingName !== \"\") {\r\n                extraAddress +=\r\n                    extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\r\n            }\r\n            fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\r\n        }\r\n\r\n\r\n        setZipcode(data.zonecode);\r\n        setEmpAddress(fullAddress);\r\n\r\n    };\r\n\r\n    // 직원 구분\r\n    useEffect(() => {\r\n        axios.post('/api/s010100090/classification')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    let arr = [{ key: '', value: '선택' }]\r\n\r\n                    response.data.rows.map((data) =>\r\n                        arr.push({\r\n                            value: data.CD_V_MEANING, key: data.CD_V\r\n                        }));\r\n\r\n                    setEmpTps(arr);\r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"문의구분 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    // 파일확장자 체크 \r\n    // const fileExtensionChk = (event) => {\r\n    //     let imageType = event.currentTarget.files[0].type;\r\n        \r\n    //     if((imageType != 'image/png')&&(imageType != 'image/jpg')&&(imageType != 'image/jpeg')){\r\n    //         alert('.jpg, .jpeg, .png 확장자만 업로드 가능합니다.');\r\n\r\n    //         // setState 파라미터\r\n    //         setFamRelCertificate('');\r\n    //         setFamRelCertificateName('');\r\n           \r\n    //     }\r\n    // }\r\n\r\n    const onFamRelCertifiacteChange = (event) => {\r\n        setFamRelCertificate(event.currentTarget.files[0]);\r\n        setFamRelCertificateName(event.currentTarget.value);\r\n        \r\n        let imageType = event.currentTarget.files[0].type;\r\n        \r\n        if((imageType != 'image/png')&&(imageType != 'image/jpg')&&(imageType != 'image/jpeg')){\r\n            alert('.jpg, .jpeg, .png 확장자만 업로드 가능합니다.');\r\n\r\n            setFamRelCertificate('');\r\n            setFamRelCertificateName('');\r\n           \r\n        }\r\n    }\r\n\r\n    const onGraduationCertificateChange = (event) => {\r\n        setGraduationCertificate(event.currentTarget.files[0]);\r\n        setGraduationCertificateName(event.currentTarget.value);\r\n        \r\n        let imageType = event.currentTarget.files[0].type;\r\n        \r\n        if((imageType != 'image/png')&&(imageType != 'image/jpg')&&(imageType != 'image/jpeg')){\r\n            alert('.jpg, .jpeg, .png 확장자만 업로드 가능합니다.');\r\n           \r\n            setGraduationCertificate('');\r\n            setGraduationCertificateName('');\r\n           \r\n        }\r\n    }\r\n\r\n    const onCopyOfBankbookChange = (event) => {\r\n        setCopyOfBankbook(event.currentTarget.files[0]);\r\n        setCopyOfBankbookName(event.currentTarget.value);\r\n\r\n        let imageType = event.currentTarget.files[0].type;\r\n        \r\n        if((imageType != 'image/png')&&(imageType != 'image/jpg')&&(imageType != 'image/jpeg')){\r\n            alert('.jpg, .jpeg, .png 확장자만 업로드 가능합니다.');\r\n           \r\n            setCopyOfBankbook('');\r\n            setCopyOfBankbookName('');\r\n           \r\n        }\r\n    }\r\n\r\n    const [famRelFile,setFamRelFile] = useState('');\r\n    const [graduationFile,setGraduationFile] = useState('');\r\n    const [bankbookFile,setBankbookFile] = useState('');\r\n\r\n\r\n    const encodeFamRelFileBase64 = (idCardfile) => {\r\n        let reader = new FileReader();\r\n        if(idCardfile){\r\n            reader.readAsDataURL(idCardfile);\r\n            reader.onload = () => {\r\n                let Base64 = reader.result;\r\n                // console.log(Base64);\r\n                setFamRelFile(Base64);\r\n               \r\n            };\r\n            \r\n            reader.onerror = function (error){\r\n                console.log('error : ',error);\r\n            }\r\n        }\r\n    };\r\n    \r\n    const encodeGraduationFileBase64 = (idCardfile) => {\r\n        let reader = new FileReader();\r\n        if(idCardfile){\r\n            reader.readAsDataURL(idCardfile);\r\n            reader.onload = () => {\r\n                let Base64 = reader.result;\r\n                // console.log(Base64);\r\n                setGraduationFile(Base64);\r\n               \r\n            };\r\n            \r\n            reader.onerror = function (error){\r\n                console.log('error : ',error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const encodeBankbookFileBase64 = (idCardfile) => {\r\n        let reader = new FileReader();\r\n        if(idCardfile){\r\n            reader.readAsDataURL(idCardfile);\r\n            reader.onload = () => {\r\n                let Base64 = reader.result;\r\n                // console.log(Base64);\r\n                setBankbookFile(Base64);\r\n               \r\n            };\r\n            \r\n            reader.onerror = function (error){\r\n                console.log('error : ',error);\r\n            }\r\n        }\r\n    };\r\n\r\n    encodeFamRelFileBase64(famRelCertificate);\r\n    encodeGraduationFileBase64(graduationCertificate);\r\n    encodeBankbookFileBase64(copyOfBankbook);\r\n   \r\n\r\n    // 저장 함수\r\n    const addEmp = () => {\r\n     \r\n        let memId = props.memId;\r\n\r\n        let retire;\r\n        let join;\r\n    \r\n        if(retireDate){\r\n           \r\n            retire = retireDate.getFullYear()+'-'+ (retireDate.getMonth()+1)+'-'+retireDate.getDate();\r\n        }\r\n        if(joinDate){\r\n          \r\n            join = joinDate.getFullYear()+'-'+ (joinDate.getMonth()+1)+'-'+joinDate.getDate();\r\n        }\r\n\r\n\r\n        let realFamRelCertFileName;\r\n        let realGraduationFileName;\r\n        let realCopyOfBankFileName;\r\n\r\n        if(famRelCertificateName){\r\n            realFamRelCertFileName = famRelCertificateName.split('\\\\')[2].split('.')[0];    \r\n        }\r\n        \r\n        if(graduationCertificateName){\r\n            realGraduationFileName = graduationCertificateName.split('\\\\')[2].split('.')[0];\r\n        }\r\n\r\n        if(copyOfBankbookName){\r\n            realCopyOfBankFileName = copyOfBankbookName.split('\\\\')[2].split('.')[0];\r\n        }\r\n\r\n     \r\n        let body = {\r\n            memId: memId,\r\n            memberNm: memberNm,\r\n            empName: empName,\r\n            fstResidentRegiNum: fstResidentRegiNum,\r\n            sndResidentRegiNum: sndResidentRegiNum,\r\n            empTp: empTp,\r\n            finalSchoolName: finalSchoolName,\r\n            firstEmpHp: firstEmpHp,\r\n            secondEmpHp: secondEmpHp,\r\n            thirdEmpHp: thirdEmpHp,\r\n            empEmailId: empEmailId,\r\n            domainAddress: domainAddress,\r\n            zipcode: zipcode,\r\n            empAddress: empAddress,\r\n            empDetailAddress: empDetailAddress,\r\n        \r\n            famRelFile:famRelFile,\r\n            graduationFile:graduationFile,\r\n            bankbookFile:bankbookFile,\r\n\r\n            realFamRelCertFileName:realFamRelCertFileName,\r\n            realGraduationFileName:realGraduationFileName,\r\n            realCopyOfBankFileName:realCopyOfBankFileName,\r\n    \r\n            empNum: empNum,\r\n            empLevel: empLevel,\r\n            joinDate: join,\r\n            deptNm: deptNm,\r\n            pwd: pwd,\r\n            wages: wages,\r\n            retireDate: retire,\r\n            empComment: empComment\r\n        }\r\n\r\n         axios.post('/api/s010100100/insertEmp',body)\r\n         .then(response => {\r\n                if(response.data.success){\r\n                    alert('정상적으로 등록 되었습니다.');\r\n                    props.setEmpChecked('');\r\n                    props.setStoreOpen(false);\r\n                    props.empList();\r\n                }else{\r\n                    alert(response.data.message);\r\n                    props.setEmpChecked('');\r\n                    alert('등록에 실패하였습니다.');\r\n                }\r\n         })\r\n    }\r\n\r\n\r\n    // 저장\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        // 회원명 NUll체크\r\n        if (memberNm == null || memberNm == '') {\r\n            return alert(\"회원명을 선택하세요.\");\r\n        }\r\n\r\n        // 성명 NUll체크\r\n        if (empName == null || empName == '' ) {\r\n            return alert(\"이름을 입력하세요.\");\r\n        }\r\n\r\n        // 주민번호 NUll체크\r\n        if (fstResidentRegiNum == null || fstResidentRegiNum == '' || sndResidentRegiNum == null || sndResidentRegiNum == '') {\r\n            return alert(\"주민번호를 입력하세요.\");\r\n        }\r\n\r\n        // 연락처 NUll체크\r\n        if (firstEmpHp == null || firstEmpHp == ''||secondEmpHp == null || secondEmpHp == ''|| thirdEmpHp == null || thirdEmpHp == '') {\r\n            return alert(\"연락처를 입력하세요.\");\r\n        }\r\n\r\n        // E-mail NUll체크\r\n        if (empEmailId == null || empEmailId == '' || domainAddress == null || domainAddress == '') {\r\n            return alert(\"E-mail을 입력하세요.\");\r\n        }\r\n\r\n        // Password NUll체크\r\n        if (pwd == null || pwd == '') {\r\n            return alert(\"Password를 입력하세요.\");\r\n        }\r\n\r\n        if (regNumCheckBtn == '') {\r\n            return alert('주민번호번호 중복확인 하세요.');\r\n        } \r\n        if (emailCheckBtn == '') {\r\n            return alert('이메일 중복확인 하세요.');\r\n        }\r\n           \r\n        if((firstEmpHp.length != 3)||(secondEmpHp.length != 4)||(thirdEmpHp.length != 4)){\r\n            return alert('연락처 형식을 확인하세요');\r\n        }\r\n        \r\n        addEmp();\r\n    }\r\n\r\n\r\n    // 수정\r\n    const modifyEmp = (event) => {\r\n\r\n        let empId = props.empIdM;\r\n   \r\n        let retire;\r\n        let join;\r\n        let wages;\r\n\r\n        if(retireDate){\r\n           \r\n            retire = retireDate.getFullYear()+'-'+ (retireDate.getMonth()+1)+'-'+retireDate.getDate();\r\n        }\r\n        if(joinDate){\r\n          \r\n            join = joinDate.getFullYear()+'-'+ (joinDate.getMonth()+1)+'-'+joinDate.getDate();\r\n        }\r\n        if(retireDate == '' || retireDate == undefined || retireDate == null ){\r\n         \r\n            retire='0000-00-00';\r\n        }\r\n        if(joinDate == '' || joinDate == undefined || joinDate == null){\r\n           \r\n            join='0000-00-00';\r\n        }\r\n        if(wages == null){\r\n            wages = 0;\r\n        }\r\n\r\n        let realFamRelCertFileName;\r\n        let realGraduationFileName;\r\n        let realCopyOfBankFileName;\r\n\r\n        if(famRelCertificateName){\r\n            realFamRelCertFileName = famRelCertificateName.split('\\\\')[2].split('.')[0];    \r\n        }\r\n        \r\n        if(graduationCertificateName){\r\n            realGraduationFileName = graduationCertificateName.split('\\\\')[2].split('.')[0];\r\n        }\r\n\r\n        if(copyOfBankbookName){\r\n            realCopyOfBankFileName = copyOfBankbookName.split('\\\\')[2].split('.')[0];\r\n        }\r\n\r\n        console.log()\r\n        let body = {\r\n\r\n            empId:empId,\r\n            memberNm: memberNm,\r\n            empName: empName,\r\n            fstResidentRegiNum: fstResidentRegiNum,\r\n            sndResidentRegiNum: sndResidentRegiNum,\r\n            empTp: empTp,\r\n            finalSchoolName: finalSchoolName,\r\n            firstEmpHp: firstEmpHp,\r\n            secondEmpHp: secondEmpHp,\r\n            thirdEmpHp: thirdEmpHp,\r\n            empEmailId: empEmailId,\r\n            domainAddress: domainAddress,\r\n            zipcode: zipcode,\r\n            empAddress: empAddress,\r\n            empDetailAddress: empDetailAddress,\r\n\r\n            famRelFile,\r\n            graduationFile,\r\n            bankbookFile,\r\n\r\n            realFamRelCertFileName,\r\n            realGraduationFileName,\r\n            realCopyOfBankFileName,\r\n\r\n            empNum: empNum,\r\n            empLevel: empLevel,\r\n            joinDate: join,\r\n            deptNm: deptNm,\r\n            pwd: pwd,\r\n            wages: wages,\r\n            retireDate: retire,\r\n            empComment: empComment,\r\n         \r\n            famRelFile:famRelFile,\r\n            graduationFile:graduationFile,\r\n            bankbookFile:bankbookFile,\r\n\r\n            realFamRelCertFileName:realFamRelCertFileName,\r\n            realGraduationFileName:realGraduationFileName,\r\n            realCopyOfBankFileName:realCopyOfBankFileName,\r\n    \r\n     \r\n        }\r\n\r\n         axios.post('/api/s010100100/modifyEmp',body)\r\n         .then(response => {\r\n            if(response.data.success){\r\n                alert('정상적으로 수정 되었습니다.');\r\n                props.setEmpChecked('');\r\n                props.setStoreOpen(false);\r\n                props.empList();\r\n            }else{\r\n                alert(response.data.message);\r\n                props.setEmpChecked('');\r\n                alert('수정에 실패하였습니다.');\r\n            }\r\n         })\r\n   \r\n    }\r\n\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const approvalConfirm = () => {\r\n\r\n        if((firstEmpHp.length != 3)||(secondEmpHp.length != 4)||(thirdEmpHp.length != 4)){\r\n            alert('연락처 형식을 확인하세요');\r\n        }else{\r\n            modifyEmp();\r\n        }\r\n    }\r\n\r\n    const cancelConfirm = () => alert('수정을 취소하였습니다.');\r\n\r\n    const onModifyHandler = useConfirm(\r\n        \"수정하시겠습니까?\",\r\n        approvalConfirm,\r\n        cancelConfirm\r\n    );\r\n\r\n    let dataForm = props.dataForm;\r\n    let memId = props.memId;\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('/api/s010100040/selectMemberTp')\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    \r\n\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert(\"회원상태 데이터를 불러오는데 실패하였습니다.\");\r\n                }\r\n            })\r\n    }, [])\r\n    \r\n    // 직원 등록\r\n    useEffect(() => {\r\n\r\n        if (dataForm == 'I') {\r\n            setMemberNm(name);\r\n        }\r\n\r\n    }, [])\r\n\r\n    // 직원 상세보기-(s010100090 수정버튼)\r\n    useEffect(() => {\r\n\r\n        if (dataForm == 'U') {\r\n            let empId = props.empIdM;\r\n\r\n            let body = {\r\n                empId\r\n            }\r\n        \r\n            axios.post('/api/s010100100/empDetail', body)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                    \r\n                        setMemberNm(response.data.rows[0].MEMBER_NM);\r\n                        setEmpName(response.data.rows[0].NAME);\r\n\r\n                        if((response.data.rows[0].REG_NUMBER1) && (response.data.rows[0].REG_NUMBER2) != null){\r\n                          setFstResidentRegiNum((response.data.rows[0].REG_NUMBER1));\r\n                          setSndResidentRegiNum((response.data.rows[0].REG_NUMBER2));\r\n                        }\r\n\r\n                        setEmpTp(response.data.rows[0].EMP_TP);\r\n                     \r\n                        setFinalSchoolName(response.data.rows[0].FINAL_SCHOOL_NAME);\r\n                        console.log();\r\n                        setFirstEmpHp(((response.data.rows[0].EMP_HP).split(\"-\"))[0]);\r\n                        setSecondEmpHp(((response.data.rows[0].EMP_HP).split(\"-\"))[1]);\r\n                        setThirdEmpHp(((response.data.rows[0].EMP_HP).split(\"-\"))[2]);\r\n                        setEmpEmailId(((response.data.rows[0].EMP_EMAIL).split(\"@\"))[0]);\r\n                        setDomainAddress(((response.data.rows[0].EMP_EMAIL).split(\"@\"))[1]);\r\n\r\n                        setZipcode(response.data.rows[0].ZIP_CODE);\r\n                        setEmpAddress(response.data.rows[0].ADDRESS);\r\n                        setEmpDetailAddress(response.data.rows[0].DETAIL_ADDRESS);\r\n                        \r\n                        setEmpNum(response.data.rows[0].EMP_NUMBER);\r\n                        setEmpLevel(response.data.rows[0].EMP_LEVEL);\r\n\r\n                        const modalJoinDate = response.data.rows[0].JOIN_DATE;\r\n                        // console.log('response.data.rows[0].JOIN_DATE',response.data.rows[0].JOIN_DATE);\r\n                        if(modalJoinDate === '0000-00-00'||modalJoinDate === null){\r\n                             // console.log('조인날짜 00000');\r\n                            setJoinDate('')\r\n                        }else{\r\n                            // console.log('조인날짜 있음');\r\n                            setJoinDate(new Date(modalJoinDate));\r\n                        }\r\n                        \r\n                        setDeptNm(response.data.rows[0].DEPT_NM);\r\n                        setPwd(response.data.rows[0].PWD);\r\n                        setWages(response.data.rows[0].WAGES);\r\n\r\n                        const modalRetireDate = response.data.rows[0].RETIRE_DATE;\r\n                       \r\n                        if(modalRetireDate === '0000-00-00'||modalRetireDate === null){\r\n                            setRetireDate('')\r\n                        }else{\r\n                            setRetireDate(new Date(modalRetireDate));\r\n                        }\r\n\r\n                        setBirthDate(response.data.rows[0].BIRTH_DATE);\r\n                        setEmpComment(response.data.rows[0].EMP_COMMENT);\r\n\r\n                        let famRelImg;\r\n                        let gradCertImg;\r\n                        let copyBankBookImg;\r\n\r\n                        if(response.data.rows[0].FAM_REL_CERT_IMAGE){\r\n                            famRelImg = new Buffer.from(response.data.rows[0].FAM_REL_CERT_IMAGE).toString();    \r\n                        }else{\r\n                            famRelImg = '';\r\n                        }\r\n                        if(response.data.rows[0].GRADUATION_CERT_IMAGE){\r\n                            gradCertImg = new Buffer.from(response.data.rows[0].GRADUATION_CERT_IMAGE).toString();    \r\n                        }else{\r\n                            gradCertImg='';\r\n                        }\r\n                        if(response.data.rows[0].BANKBOOK_COPY_IMAGE){\r\n                            copyBankBookImg = new Buffer.from(response.data.rows[0].BANKBOOK_COPY_IMAGE).toString();\r\n                        }else{\r\n                            copyBankBookImg='';\r\n                        }\r\n                         \r\n    \r\n                        setDetailFamRelCert(famRelImg);\r\n                        setDetailGraduationCert(gradCertImg);\r\n                        setDetailCopyBankbook(copyBankBookImg);\r\n\r\n                        setRealFamRelCertificateName(response.data.rows[0].FAM_REL_CERT_IMAGE_NAME);\r\n                        setRealGraduationCertificateName(response.data.rows[0].GRADUATION_CERT_IMAGE_NAME);\r\n                        setRealCopyOfBankbookName(response.data.rows[0].BANKBOOK_COPY_IMAGE_NAME);\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        alert(\"직원 상세 데이터를 불러오는데 실패하였습니다.\");\r\n                    }\r\n                })\r\n\r\n        }\r\n\r\n    }, [])\r\n\r\n    const getRegexData = (regex,data) => {\r\n        return data.replace(regex, \"\");\r\n    }\r\n\r\n    const onMemberNmHandler = (event) => {\r\n        setMemberNm(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpNameHandler = (event) => {\r\n        setEmpName(event.currentTarget.value);\r\n    }\r\n\r\n    const onFstResidentRegiNumHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g,event.currentTarget.value);\r\n        setFstResidentRegiNum(regexData);      \r\n    }\r\n    \r\n\r\n    const onSndResidentRegiNumHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g,event.currentTarget.value);\r\n        setSndResidentRegiNum(regexData);\r\n        \r\n    }\r\n\r\n    const onEmpTpHandler = (event) => {\r\n        setEmpTp(event.currentTarget.value);\r\n    }\r\n\r\n    const onFinalSchoolNameHandler = (event) => {\r\n        setFinalSchoolName(event.currentTarget.value);\r\n    }\r\n\r\n    const onFirstEmpHpHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setFirstEmpHp(regexData);\r\n    }\r\n\r\n    const onSecondEmpHpHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setSecondEmpHp(regexData);\r\n    }\r\n\r\n    const onThirdEmpHpHandler = (event) => {\r\n        const regexData = getRegexData(/[^0-9]/g, event.currentTarget.value);\r\n        setThirdEmpHp(regexData);\r\n    }\r\n\r\n    const onEmpEmailIdHandler = (event) => {\r\n        const regexData = getRegexData(/[^-A-Za-z0-9_]/g,event.currentTarget.value);\r\n        setEmpEmailId(regexData);\r\n    }\r\n\r\n    const onDomainAddressHandler = (event) => {\r\n        const regexData = getRegexData(/[^a-zA-Z0-9.]+$/,event.currentTarget.value);\r\n        setDomainAddress(regexData);\r\n    }\r\n\r\n    const onZipcodeHandler = (event) => {\r\n        setZipcode(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpAddressHandler = (event) => {\r\n        setEmpAddress(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpDetailAddressHandler = (event) => {\r\n        setEmpDetailAddress(event.currentTarget.value);\r\n    }\r\n\r\n   \r\n\r\n    const onEmpNumHandler = (event) => {\r\n        setEmpNum(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpLevelHandler = (event) => {\r\n        setEmpLevel(event.currentTarget.value);\r\n    }\r\n\r\n    const onDeptNmHandler = (event) => {\r\n        setDeptNm(event.currentTarget.value);\r\n    }\r\n\r\n    const onPwdHandler = (event) => {\r\n        setPwd(event.currentTarget.value);\r\n    }\r\n\r\n    const onWagesHandler = (event) => {\r\n        setWages(event.currentTarget.value);\r\n    }\r\n\r\n    const onBirthDateHandler = (event) => {\r\n        setBirthDate(event.currentTarget.value);\r\n    }\r\n\r\n    const onEmpCommentHandler = (event) => {\r\n        setEmpComment(event.currentTarget.value);\r\n    }\r\n\r\n    // 중복확인\r\n    const onRegNumCheckHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const body = {\r\n        \r\n            fstResidentRegiNum,\r\n            sndResidentRegiNum\r\n        }\r\n        if((fstResidentRegiNum.length != 6)||(sndResidentRegiNum.length != 7)||(fstResidentRegiNum.length === 0)||(sndResidentRegiNum.length === 0)){\r\n            alert('주민번호 형식을 확인하세요');\r\n        }else{\r\n        axios.post('/api/s010100100/regNoCheck', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    if (response.data.number[0].RowNum >= 1) {\r\n                        alert('이미 존재하는 주민번호입니다.');\r\n                        setRegNumCheckBtn('');\r\n                        \r\n                    } else if (response.data.number[0].RowNum === 0) {\r\n                        alert('사용할 수 있는 주민번호입니다.')\r\n                        setRegNumCheckBtn('check');\r\n                    }\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('중복체크에 실패 하였습니다.')\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const onEmpEmailChkHandler = (event) => {\r\n        event.preventDefault();\r\n        let memId = props.memId;\r\n\r\n        const body = {\r\n            // 회원정보\r\n            memId,\r\n            empEmailId,\r\n            domainAddress\r\n        }\r\n        if((empEmailId.length === 0)||(domainAddress.length === 0)){\r\n            alert('이메일 형식을 확인하세요');\r\n        }else{\r\n        axios.post('/api/s010100100/emailCheck', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    if (response.data.number[0].RowNum >= 1) {\r\n                        alert('이미 존재하는 이메일입니다.');\r\n                        setEmailCheckBtn('');\r\n                    } else if (response.data.number[0].RowNum === 0) {\r\n                        alert('사용할 수 있는 이메일입니다.');\r\n                        setEmailCheckBtn('check');\r\n                    }\r\n                } else {\r\n                    alert(response.data.message);\r\n                    alert('중복체크에 실패 하였습니다.')\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <form style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '100%'\r\n        }}\r\n            encType='multipart/form-data'\r\n        >\r\n            <div className=\"memInfoWrapper\">\r\n                <div className=\"memInfoWrap\">\r\n                    {/* 회원정보란 */}\r\n                    <h5 id=\"infoTitle\">회원 정보</h5>\r\n\r\n                    <table id=\"memberTable\">\r\n                        {/* 회원정보란 */}\r\n                        <tbody>\r\n                            <tr>\r\n                                <th rowSpan=\"9\" className=\"memberInfo\">직원정보</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"memberInfo\">회원명<span className=\"star\">(*)</span></th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 12 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onMemberNmHandler} disabled value={memberNm} id=\"memberNm\" name=\"memberNm\"\r\n                                    />\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">성명<span className=\"star\">(*)</span></th>\r\n                                <td colSpan=\"2\">\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onEmpNameHandler} value={empName} id=\"empName\" name=\"empName\" />\r\n\r\n                                </td>\r\n\r\n\r\n                                <th className=\"memberInfo\">주민번호<span className=\"star\">(*)</span></th>\r\n                                <td colSpan=\"4\">\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={fstResidentRegiNum} maxLength =\"6\" id=\"fstResidentRegiNum\" name=\"fstResidentRegiNum\"\r\n                                        onChange={onFstResidentRegiNumHandler} />\r\n                                        &nbsp;\r\n                                        -\r\n                                        &nbsp;\r\n                                        <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={sndResidentRegiNum} maxLength =\"7\" id=\"sndResidentRegiNum\" name=\"sndResidentRegiNum\"\r\n                                        onChange={onSndResidentRegiNumHandler} />\r\n\r\n                                        &nbsp;\r\n\r\n                                        <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"useContractBtn\"\r\n                                            onClick = {onRegNumCheckHandler}\r\n                                    > 중복확인</Button>\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">직원구분</th>\r\n                                <td>\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\" as=\"select\" multiple={false}\r\n                                        onChange={onEmpTpHandler} value={empTp} id=\"empTp\" name=\"empTp\"\r\n                                    >\r\n                                        {empTps.map((item,index) => (\r\n                                            <option key={index} value={item.key}>{item.value}</option>\r\n                                        ))}\r\n                                    </Form.Control>\r\n                                </td>\r\n                            </tr> \r\n                            <tr>\r\n                                <th className=\"memberInfo\">최종학교명</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 9 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={finalSchoolName|| ''}\r\n                                        onChange={onFinalSchoolNameHandler} id=\"finalSchoolName\" name=\"finalSchoolName\" />\r\n\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">연락처<span className=\"star\">(*)</span></th>\r\n                                <td colSpan=\"2\">\r\n\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={firstEmpHp} maxLength =\"3\" id=\"firstEmpHp\" name=\"firstEmpHp\"\r\n                                        onChange={onFirstEmpHpHandler} />\r\n\r\n                                    &nbsp;\r\n                                    -\r\n                                    &nbsp;\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={secondEmpHp} maxLength =\"4\" id=\"secondEmpHp\" name=\"secondEmpHp\" name=\"firstEmpHp\"\r\n                                        onChange={onSecondEmpHpHandler} />\r\n                                    &nbsp;\r\n                                    -\r\n                                    &nbsp;\r\n                                    <Form.Control style={{ width: 5 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={thirdEmpHp} maxLength =\"4\" id=\"thirdEmpHp\" name=\"thirdEmpHp\"\r\n                                        onChange={onThirdEmpHpHandler} />\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">E-mail<span className=\"star\">(*)</span></th>\r\n                                <td colSpan=\"7\">\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={empEmailId} id=\"empEmailId\" name=\"empEmailId\"\r\n                                        onChange={onEmpEmailIdHandler} />\r\n\r\n                                    &nbsp;\r\n                                    @\r\n                                    &nbsp;\r\n\r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={domainAddress} id=\"domainAddress\" name=\"domainAddress\"\r\n                                        onChange={onDomainAddressHandler} />  &nbsp;\r\n                                         <Button variant=\"contained\" color=\"primary\" style={{ width: 100 }} className=\"useContractBtn\"\r\n                                            onClick = {onEmpEmailChkHandler}\r\n                                    > 중복확인</Button>\r\n                                </td>\r\n\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th rowSpan=\"2\" className=\"memberInfo\">대표자 주소</th>\r\n\r\n                                <td colSpan=\"11\">\r\n\r\n                                    <Form.Control style={{ width: 10 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={zipcode} id=\"zipcode\" name=\"zipcode\"\r\n                                        onChange={onZipcodeHandler} />\r\n\r\n                        &nbsp;\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} className=\"useContractBtn\" onClick={handleOpen}\r\n\r\n                                    >우편</Button>\r\n\r\n                                    <Modal\r\n                                        className={classes.modal}\r\n                                        open={isPostOpen}\r\n                                        onClose={handleClose}\r\n                                        closeAfterTransition={true}\r\n                                        BackdropComponent={Backdrop}\r\n                                       \r\n                                    >\r\n                                        <Fade in={isPostOpen}>\r\n                                            <div className={classes.paper}>\r\n                                                <DaumPostcode style={postCodeStyle} onComplete={handleComplete} />\r\n                                            </div>\r\n                                        </Fade>\r\n                                    </Modal>\r\n                        &nbsp;\r\n                            <Form.Control style={{ width: 30 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={empAddress} id=\"empAddress\" name=\"empAddress\"\r\n                                        onChange={onEmpAddressHandler} />\r\n\r\n                                </td>\r\n\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan=\"11\">\r\n\r\n                                    <Form.Control style={{ width: 30 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\" value={empDetailAddress}\r\n                                        id=\"empDetailAddress\"\r\n                                        name=\"empDetailAddress\"\r\n                                        onChange={onEmpDetailAddressHandler}\r\n                                    />\r\n\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"memberInfo\" >첨부파일</th>\r\n                                <td colSpan=\"4\" >\r\n                                <label htmlFor=\"file\">가족관계증명서:</label>&nbsp;\r\n                                    <Base64Downloader\r\n                                        base64={detailFamRelCert}\r\n                                        downloadName={realFamRelCertificateName}\r\n                                        Tag=\"a\"\r\n                                        extraAttributes={{ href: '#' }}\r\n                                        className=\"my-class-name\"\r\n                                        style={{ color: 'orange' }}\r\n                                    >\r\n                                       {realFamRelCertificateName}\r\n                                    </Base64Downloader>&nbsp;\r\n\r\n                                    <input type='file'\r\n                                        file={famRelCertificate}\r\n                                        name='famRelCertificate'\r\n                                        value={famRelCertificateName}\r\n                                        onChange={onFamRelCertifiacteChange}\r\n                                    />\r\n                                    <div className = 'fileStar'> * jpg,jpeg,png 파일만 가능합니다.</div>\r\n                                </td>\r\n                                <td colSpan=\"5\" >\r\n                                <label htmlFor=\"file\">졸업증명서:</label>&nbsp;\r\n                                    <Base64Downloader\r\n                                        base64={detailGraduationCert}\r\n                                        downloadName={realGraduationCertificateName}\r\n                                        Tag=\"a\"\r\n                                        extraAttributes={{ href: '#' }}\r\n                                        className=\"my-class-name\"\r\n                                        style={{ color: 'orange' }}\r\n                                    >\r\n                                       {realGraduationCertificateName}\r\n                                    </Base64Downloader>        \r\n                                    <input type='file'\r\n                                        file={graduationCertificate}\r\n                                        name='graduationCertificate'\r\n                                        value={graduationCertificateName}\r\n                                        onChange={onGraduationCertificateChange}\r\n                                    />\r\n                                    <div className = 'fileStar'> * jpg,jpeg,png 파일만 가능합니다.</div>\r\n                                </td>\r\n\r\n                                <td colSpan=\"5\" >\r\n                                <label htmlFor=\"file\">통장사본:</label>&nbsp;\r\n                                <Base64Downloader\r\n                                        base64={detailCopyBankbook}\r\n                                        downloadName={realCopyOfBankbookName}\r\n                                        Tag=\"a\"\r\n                                        extraAttributes={{ href: '#' }}\r\n                                        className=\"my-class-name\"\r\n                                        style={{ color: 'orange' }}\r\n                                    >\r\n                                       {realCopyOfBankbookName}\r\n                                    </Base64Downloader>\r\n\r\n                                    <input type='file'\r\n                                        file={copyOfBankbook}\r\n                                        name='copyOfBankbook'\r\n                                        value={copyOfBankbookName}\r\n                                        onChange={onCopyOfBankbookChange}\r\n                                    />\r\n                                    <div className = 'fileStar'> * jpg,jpeg,png 파일만 가능합니다.</div>\r\n                                </td>\r\n                                \r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"memberInfo\">직번</th>\r\n                                <td colSpan=\"2\">\r\n\r\n                                    <Form.Control style={{ width: 7 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onEmpNumHandler} value={empNum|| ''} id=\"empNum\" name=\"empNum\" />\r\n\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">직급</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onEmpLevelHandler} value={empLevel} id=\"empLevel\" name=\"empLevel\" />\r\n\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">입사일자</th>\r\n                                <td colSpan=\"4\">\r\n\r\n                                <DatePicker\r\n                                        className=\"dateSize\"\r\n                                        locale=\"ko\"\r\n                                        selected={joinDate}// .setHours(9, 0, 0, 0)\r\n                                        onChange={date => setJoinDate(date)}\r\n                                        dateFormat=\"yyyy-MM-dd\"\r\n                                       \r\n                                    />\r\n                                \r\n                                </td>\r\n                                <th className=\"memberInfo\">부서</th>\r\n                                <td>\r\n\r\n                                    <Form.Control style={{ width: 8 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onDeptNmHandler} value={deptNm|| ''} id=\"deptNm\" name=\"deptNm\" />\r\n\r\n                                </td>\r\n\r\n                            </tr>\r\n \r\n                            <tr>\r\n                                <th className=\"memberInfo\">Password</th>\r\n                                <td colSpan=\"2\">\r\n\r\n                                    <Form.Control style={{ width: 6 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onPwdHandler} value={pwd|| ''} id=\"pwd\" name=\"pwd\" />\r\n\r\n                                </td>\r\n\r\n                                <th >급여</th>\r\n                                <td>\r\n\r\n                                <Form.Control style={{ width: 8 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onWagesHandler} value={wages || ''} id=\"wages\" name=\"wages\"  />\r\n\r\n                                </td>\r\n\r\n                                <th className=\"memberInfo\">퇴사일자</th>\r\n                                <td colSpan=\"4\">\r\n\r\n                                <DatePicker\r\n                                        className=\"dateSize\"\r\n                                        locale=\"ko\"\r\n                                        selected={retireDate}//.setHours(9, 0, 0, 0)\r\n                                        onChange={date => setRetireDate(date)}\r\n                                        dateFormat=\"yyyy-MM-dd\"\r\n                                     \r\n                                    />\r\n\r\n                                </td>\r\n                                <th className=\"memberInfo\">생년월일</th>\r\n                                <td>\r\n                             \r\n                                     <Form.Control style={{ width: 8 + 'em', display: 'inline' }} size=\"sm\"\r\n                                        type=\"text\"\r\n                                        onChange={onBirthDateHandler} value={birthDate|| ''} id=\"birthDate\" name=\"birthDate\" readOnly/> \r\n\r\n\r\n                            </td>\r\n\r\n                            </tr>  \r\n                            <tr>\r\n                                <th className=\"memberInfo\">특이사항</th>\r\n                                <td colSpan=\"11\">\r\n\r\n                                    <Form.Control as=\"textarea\" rows={3} value={empComment|| ''} id=\"empComment\" name=\"empComment\"\r\n                                        onChange={onEmpCommentHandler} />\r\n\r\n                                </td>\r\n\r\n                            </tr>\r\n\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className=\"btn-center\">\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} className=\"new\"\r\n                            hidden ={props.dataForm !== 'I'}onClick={onSubmitHandler}>저장</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} className=\"new\"\r\n                            hidden ={props.dataForm !== 'U'}onClick={onModifyHandler}>저장</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" style={{ width: 70 }} className=\"new\"\r\n                        onClick={props.onHandleClickClose}>닫기</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </form>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default S010100100;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100160.js",["413","414","415","416"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\S010100151.js",["417","418","419","420"],"import React, {useState} from 'react';\r\nimport './css/S010100130.css';\r\nimport axios from 'axios';\r\n\r\nimport clsx from 'clsx';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\nimport \"antd/dist/antd.css\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport {useStyles} from './Test';\r\n\r\n\r\n\r\n\r\nfunction S010100151(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [empRegNo, setEmpRegNo] = useState(\"\")\r\n    const [fstResidentRegiNum, setFstResidentRegiNum] = useState('');\r\n    const [sndResidentRegiNum, setSndResidentRegiNum] = useState('');\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const onEmailHandler = (event) => {\r\n        setEmail(event.currentTarget.value)\r\n    }\r\n\r\n    const onFstResidentRegiNumHandler = (event) => {\r\n        setFstResidentRegiNum(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onSndResidentRegiNumHandler = (event) => {\r\n        setSndResidentRegiNum(event.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onSubmitHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n        if(email.length === 0) {\r\n            alert('이메일을 입력하세요.');\r\n        }else if(fstResidentRegiNum.length === 0 || sndResidentRegiNum.length === 0){\r\n            alert('주민번호를 입력하세요.');\r\n        }else{\r\n            let body = {\r\n                email: email,\r\n                fstResidentRegiNum: fstResidentRegiNum,\r\n                sndResidentRegiNum: sndResidentRegiNum\r\n            }\r\n           // console.log(body);\r\n    \r\n            axios.post('/api/s010100151/findPwd', body)\r\n                .then(response => {\r\n                    if (response.data.success == true) {\r\n                        alert('비밀번호가 초기화 되었습니다.');\r\n                        props.history.push('/');\r\n                    } else if (response.data.success == false) {\r\n                        alert(response.data.message);\r\n                        alert('이메일 또는 주민번호를 확인하세요..');\r\n                    }\r\n                })\r\n        }\r\n     \r\n        \r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {/* 백그라운드 */}\r\n            <CssBaseline />\r\n            {/* 상단파란툴바 */}\r\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                    SwonTech 고객관리시스템\r\n                    </Typography>\r\n                    \r\n                </Toolbar>\r\n            </AppBar>\r\n            {/* 왼쪽 메뉴바 */}\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                }}\r\n                open={open}\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    <div>\r\n                        <div>\r\n                        <ListItem button>\r\n                            <ListItemIcon>\r\n                            <LayersIcon />\r\n                            </ListItemIcon>\r\n                            <span hidden ={sessionStorage.getItem('member') != null}>\r\n                            <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                            </span>\r\n                        </ListItem>\r\n                        </div>\r\n                        </div>\r\n                    </List>\r\n            </Drawer>\r\n\r\n            <main className={classes.content}>\r\n                <div className={classes.appBarSpacer} />\r\n                <Container maxWidth=\"lg\" className={classes.container}>\r\n                    <Grid container spacing={3}>\r\n                        <Container component=\"main\" maxWidth=\"xs\">\r\n                            <CssBaseline />\r\n                            <div className={classes.paper}>\r\n\r\n                                <Typography component=\"h1\" variant=\"h5\">\r\n                                    비밀번호 초기화\r\n                                </Typography>\r\n\r\n                                <Form onSubmit={onSubmitHandler} >\r\n                                   \r\n                                        <Form.Group>\r\n                                            <Form.Label>Email address</Form.Label>\r\n                                            <Form.Control type=\"email\" placeholder=\"이메일을 입력하세요\" \r\n                                                value={email}\r\n                                                onChange={onEmailHandler} \r\n                                                id=\"email\"\r\n                                                name=\"email\"\r\n                                                />\r\n                                            <Form.Text className=\"text-muted\">\r\n                                                We'll never share your email with anyone else.\r\n                                        </Form.Text>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group>\r\n                                            <Form.Label>주민번호</Form.Label>\r\n                                            <Form.Control type=\"password\" placeholder=\"주민번호를 앞자리를 입력하세요\" \r\n                                                value={fstResidentRegiNum}\r\n                                                onChange={onFstResidentRegiNumHandler} \r\n                                                name=\"empRegNo\"\r\n                                                \r\n                                                id=\"empRegNo\"\r\n                                               />\r\n                                        </Form.Group>\r\n                                        <Form.Group >\r\n                                            <Form.Control type=\"password\" placeholder=\"주민번호를 뒷자리를 입력하세요\" value={sndResidentRegiNum}\r\n                                                onChange={onSndResidentRegiNumHandler}\r\n                                                name=\"empRegNo\"\r\n                                                id=\"empRegNo\"\r\n                                               />\r\n                                        </Form.Group>\r\n                                   \r\n                                    <Button type=\"submit\"\r\n                                            fullWidth\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.submit}\r\n                                        > 초기화 </Button>\r\n                                </Form>\r\n                            </div>\r\n\r\n                        </Container>\r\n\r\n                    </Grid>\r\n\r\n                </Container>\r\n            </main>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default S010100151;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\utils\\taste.js",["421"],"import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction taste () {\r\nreturn(\r\n  <div>\r\n    <div hidden ={sessionStorage.getItem('member') == null}>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n      <PeopleIcon />\r\n      </ListItemIcon>\r\n      <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <ShoppingCartIcon />\r\n      </ListItemIcon>\r\n      <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n      <DashboardIcon />\r\n      </ListItemIcon>\r\n      <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <BarChartIcon />\r\n      </ListItemIcon>\r\n      <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n      <DashboardIcon />\r\n      </ListItemIcon>\r\n      <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n    </ListItem>\r\n    <ListItem button>\r\n        <ListItemIcon>\r\n          <LayersIcon />\r\n        </ListItemIcon>\r\n        <Link to =\"/\"><ListItemText primary=\"로그아웃\" /></Link>\r\n      </ListItem>\r\n    </div>\r\n   <div hidden ={sessionStorage.getItem('member') != null}>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <LayersIcon />\r\n        </ListItemIcon>\r\n        <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n      </ListItem>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default taste;",["422","423"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Title.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\ScreenLayout.js",["424","425","426","427","428","429"],"import React, { Fragment, useEffect, useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport S010100150 from './S010100150';\r\n\r\nimport clsx from 'clsx';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\n\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport {useStyles} from './Test';\r\n\r\n\r\nfunction ScreenLayout(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = useState(true);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const useConfirm = (message = null, onConfirm, onCancel) => {\r\n        if (!onConfirm || typeof onConfirm !== \"function\") {\r\n            return;\r\n        }\r\n        if (onCancel && typeof onCancel !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        const confirmAction = () => {\r\n            if (window.confirm(message)) {\r\n                onConfirm();\r\n            } else {\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        return confirmAction;\r\n    };\r\n\r\n    const logoutConfirm = () => {\r\n\r\n        axios.post('/api/s010100150/userLogout')\r\n        .then(response => {\r\n            if (response.data.logoutResult == true) {\r\n\r\n            alert('로그아웃 하였습니다.');\r\n            \r\n            sessionStorage.removeItem('member');\r\n            sessionStorage.clear();\r\n            \r\n            props.history.push('./');\r\n            console.log(props.history);\r\n          \r\n            }else if(response.data.loginResult == false){\r\n           \r\n                alert(response.data.message);\r\n           \r\n                alert('아이디 또는 비밀번호를 확인하세요.');\r\n            }\r\n        })\r\n    \r\n        };\r\n    \r\n        const logounCancelConfirm = () => alert('취소하였습니다.');\r\n    \r\n        const onLogoutHandler = useConfirm(\r\n            \"로그아웃 하시겠습니까?\",\r\n            logoutConfirm,\r\n            logounCancelConfirm\r\n        );\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.root}>\r\n                {/* 백그라운드 */}\r\n                <CssBaseline />\r\n                {/* 상단 파란색 툴바 */}\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        SwonTech 고객관리시스템\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {/* 왼쪽메뉴바 */}\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider/>\r\n                    <List>\r\n                    <div>\r\n                        <div hidden ={sessionStorage.getItem('member') == null}>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                        <PeopleIcon />\r\n                        </ListItemIcon>\r\n                        <Link to=\"/member\"><ListItemText primary=\"회원현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                            <ShoppingCartIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/paymentStatus\"><ListItemText primary=\"납부현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                        <DashboardIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/consultationStatus\"><ListItemText primary=\"상담현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                            <BarChartIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/staff\"><ListItemText primary=\"직원현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                        <ListItemIcon>\r\n                        <DashboardIcon />\r\n                        </ListItemIcon>\r\n                        <Link to =\"/contractStatus\"><ListItemText primary=\"계약현황\" /></Link>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                            <ListItemIcon>\r\n                            <LayersIcon />\r\n                            </ListItemIcon>\r\n                            <span onClick ={onLogoutHandler}><ListItemText primary=\"로그아웃\" /></span>\r\n                        </ListItem>\r\n                        </div>\r\n                    <div hidden ={sessionStorage.getItem('member') != null}>\r\n                        <ListItem button>\r\n                            <ListItemIcon>\r\n                            <LayersIcon />\r\n                            </ListItemIcon>\r\n                            <Link to =\"/\"><ListItemText primary=\"로그인\" /></Link>\r\n                        </ListItem>\r\n                        </div>\r\n                    </div>\r\n\r\n             </List>\r\n        </Drawer>\r\n             \r\n\r\n                {/* 메인화면  */}\r\n                <main className={classes.content}>\r\n                    <form>\r\n                        <div className={classes.appBarSpacer} />\r\n                        \r\n\r\n                    </form>\r\n                </main>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default  ScreenLayout;","C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\service\\s010100040.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\service\\s010100010.js",[],["430","431"],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\Test.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\service\\s010100050.js",[],"C:\\Users\\team_\\Desktop\\mysqltestCopy\\src\\service\\s010100060.js",[],{"ruleId":"432","replacedBy":"433"},{"ruleId":"434","replacedBy":"435"},{"ruleId":"436","severity":1,"message":"437","line":1,"column":16,"nodeType":"438","messageId":"439","endLine":1,"endColumn":25},{"ruleId":"436","severity":1,"message":"440","line":6,"column":10,"nodeType":"438","messageId":"439","endLine":6,"endColumn":14},{"ruleId":"436","severity":1,"message":"441","line":2,"column":8,"nodeType":"438","messageId":"439","endLine":2,"endColumn":12},{"ruleId":"436","severity":1,"message":"442","line":17,"column":5,"nodeType":"438","messageId":"439","endLine":17,"endColumn":15},{"ruleId":"432","replacedBy":"443"},{"ruleId":"434","replacedBy":"444"},{"ruleId":"436","severity":1,"message":"445","line":6,"column":18,"nodeType":"438","messageId":"439","endLine":6,"endColumn":27},{"ruleId":"446","severity":1,"message":"447","line":11,"column":1,"nodeType":"448","endLine":33,"endColumn":2},{"ruleId":"436","severity":1,"message":"445","line":1,"column":26,"nodeType":"438","messageId":"439","endLine":1,"endColumn":35},{"ruleId":"436","severity":1,"message":"449","line":3,"column":8,"nodeType":"438","messageId":"439","endLine":3,"endColumn":13},{"ruleId":"436","severity":1,"message":"450","line":6,"column":8,"nodeType":"438","messageId":"439","endLine":6,"endColumn":18},{"ruleId":"436","severity":1,"message":"451","line":11,"column":5,"nodeType":"438","messageId":"439","endLine":11,"endColumn":14},{"ruleId":"436","severity":1,"message":"452","line":12,"column":5,"nodeType":"438","messageId":"439","endLine":12,"endColumn":12},{"ruleId":"436","severity":1,"message":"453","line":13,"column":5,"nodeType":"438","messageId":"439","endLine":13,"endColumn":10},{"ruleId":"436","severity":1,"message":"442","line":15,"column":5,"nodeType":"438","messageId":"439","endLine":15,"endColumn":15},{"ruleId":"436","severity":1,"message":"454","line":25,"column":20,"nodeType":"438","messageId":"439","endLine":25,"endColumn":31},{"ruleId":"436","severity":1,"message":"455","line":26,"column":16,"nodeType":"438","messageId":"439","endLine":26,"endColumn":23},{"ruleId":"436","severity":1,"message":"456","line":27,"column":21,"nodeType":"438","messageId":"439","endLine":27,"endColumn":33},{"ruleId":"436","severity":1,"message":"457","line":28,"column":20,"nodeType":"438","messageId":"439","endLine":28,"endColumn":31},{"ruleId":"436","severity":1,"message":"458","line":29,"column":21,"nodeType":"438","messageId":"439","endLine":29,"endColumn":33},{"ruleId":"436","severity":1,"message":"459","line":30,"column":18,"nodeType":"438","messageId":"439","endLine":30,"endColumn":27},{"ruleId":"436","severity":1,"message":"437","line":1,"column":16,"nodeType":"438","messageId":"439","endLine":1,"endColumn":25},{"ruleId":"436","severity":1,"message":"437","line":1,"column":16,"nodeType":"438","messageId":"439","endLine":1,"endColumn":25},{"ruleId":"432","replacedBy":"460"},{"ruleId":"434","replacedBy":"461"},{"ruleId":"436","severity":1,"message":"462","line":4,"column":3,"nodeType":"438","messageId":"439","endLine":4,"endColumn":14},{"ruleId":"436","severity":1,"message":"463","line":5,"column":3,"nodeType":"438","messageId":"439","endLine":5,"endColumn":13},{"ruleId":"436","severity":1,"message":"464","line":6,"column":3,"nodeType":"438","messageId":"439","endLine":6,"endColumn":12},{"ruleId":"436","severity":1,"message":"465","line":7,"column":3,"nodeType":"438","messageId":"439","endLine":7,"endColumn":11},{"ruleId":"436","severity":1,"message":"466","line":74,"column":12,"nodeType":"438","messageId":"439","endLine":74,"endColumn":25},{"ruleId":"436","severity":1,"message":"467","line":75,"column":12,"nodeType":"438","messageId":"439","endLine":75,"endColumn":23},{"ruleId":"468","severity":1,"message":"469","line":202,"column":8,"nodeType":"470","endLine":202,"endColumn":10,"suggestions":"471"},{"ruleId":"468","severity":1,"message":"472","line":326,"column":8,"nodeType":"470","endLine":326,"endColumn":10,"suggestions":"473"},{"ruleId":"474","severity":1,"message":"475","line":459,"column":17,"nodeType":"476","messageId":"477","endLine":478,"endColumn":18},{"ruleId":"478","severity":1,"message":"479","line":505,"column":49,"nodeType":"480","messageId":"481","endLine":505,"endColumn":51},{"ruleId":"436","severity":1,"message":"482","line":538,"column":11,"nodeType":"438","messageId":"439","endLine":538,"endColumn":27},{"ruleId":"436","severity":1,"message":"483","line":566,"column":11,"nodeType":"438","messageId":"439","endLine":566,"endColumn":27},{"ruleId":"478","severity":1,"message":"484","line":569,"column":24,"nodeType":"480","messageId":"481","endLine":569,"endColumn":26},{"ruleId":"478","severity":1,"message":"484","line":569,"column":54,"nodeType":"480","messageId":"481","endLine":569,"endColumn":56},{"ruleId":"478","severity":1,"message":"484","line":569,"column":84,"nodeType":"480","messageId":"481","endLine":569,"endColumn":86},{"ruleId":"478","severity":1,"message":"484","line":579,"column":24,"nodeType":"480","messageId":"481","endLine":579,"endColumn":26},{"ruleId":"478","severity":1,"message":"484","line":579,"column":54,"nodeType":"480","messageId":"481","endLine":579,"endColumn":56},{"ruleId":"478","severity":1,"message":"484","line":579,"column":84,"nodeType":"480","messageId":"481","endLine":579,"endColumn":86},{"ruleId":"478","severity":1,"message":"484","line":593,"column":24,"nodeType":"480","messageId":"481","endLine":593,"endColumn":26},{"ruleId":"478","severity":1,"message":"484","line":593,"column":54,"nodeType":"480","messageId":"481","endLine":593,"endColumn":56},{"ruleId":"478","severity":1,"message":"484","line":593,"column":84,"nodeType":"480","messageId":"481","endLine":593,"endColumn":86},{"ruleId":"436","severity":1,"message":"485","line":673,"column":13,"nodeType":"438","messageId":"439","endLine":673,"endColumn":22},{"ruleId":"436","severity":1,"message":"486","line":674,"column":13,"nodeType":"438","messageId":"439","endLine":674,"endColumn":23},{"ruleId":"478","severity":1,"message":"479","line":809,"column":44,"nodeType":"480","messageId":"481","endLine":809,"endColumn":46},{"ruleId":"478","severity":1,"message":"479","line":814,"column":46,"nodeType":"480","messageId":"481","endLine":814,"endColumn":48},{"ruleId":"478","severity":1,"message":"479","line":814,"column":90,"nodeType":"480","messageId":"481","endLine":814,"endColumn":92},{"ruleId":"478","severity":1,"message":"479","line":814,"column":132,"nodeType":"480","messageId":"481","endLine":814,"endColumn":134},{"ruleId":"478","severity":1,"message":"479","line":818,"column":27,"nodeType":"480","messageId":"481","endLine":818,"endColumn":29},{"ruleId":"478","severity":1,"message":"479","line":822,"column":75,"nodeType":"480","messageId":"481","endLine":822,"endColumn":77},{"ruleId":"478","severity":1,"message":"479","line":827,"column":73,"nodeType":"480","messageId":"481","endLine":827,"endColumn":75},{"ruleId":"478","severity":1,"message":"479","line":832,"column":44,"nodeType":"480","messageId":"481","endLine":832,"endColumn":46},{"ruleId":"436","severity":1,"message":"487","line":840,"column":11,"nodeType":"438","messageId":"439","endLine":840,"endColumn":18},{"ruleId":"478","severity":1,"message":"479","line":842,"column":46,"nodeType":"480","messageId":"481","endLine":842,"endColumn":48},{"ruleId":"478","severity":1,"message":"479","line":847,"column":52,"nodeType":"480","messageId":"481","endLine":847,"endColumn":54},{"ruleId":"478","severity":1,"message":"479","line":852,"column":50,"nodeType":"480","messageId":"481","endLine":852,"endColumn":52},{"ruleId":"478","severity":1,"message":"479","line":852,"column":72,"nodeType":"480","messageId":"481","endLine":852,"endColumn":74},{"ruleId":"478","severity":1,"message":"479","line":857,"column":54,"nodeType":"480","messageId":"481","endLine":857,"endColumn":56},{"ruleId":"478","severity":1,"message":"479","line":862,"column":44,"nodeType":"480","messageId":"481","endLine":862,"endColumn":46},{"ruleId":"478","severity":1,"message":"479","line":867,"column":50,"nodeType":"480","messageId":"481","endLine":867,"endColumn":52},{"ruleId":"488","severity":1,"message":"489","line":995,"column":45,"nodeType":"480","messageId":"490","endLine":995,"endColumn":74},{"ruleId":"478","severity":1,"message":"479","line":1010,"column":50,"nodeType":"480","messageId":"481","endLine":1010,"endColumn":52},{"ruleId":"478","severity":1,"message":"479","line":1010,"column":70,"nodeType":"480","messageId":"481","endLine":1010,"endColumn":72},{"ruleId":"478","severity":1,"message":"479","line":1010,"column":125,"nodeType":"480","messageId":"481","endLine":1010,"endColumn":127},{"ruleId":"478","severity":1,"message":"479","line":1010,"column":148,"nodeType":"480","messageId":"481","endLine":1010,"endColumn":150},{"ruleId":"478","severity":1,"message":"479","line":1025,"column":34,"nodeType":"480","messageId":"481","endLine":1025,"endColumn":36},{"ruleId":"478","severity":1,"message":"479","line":1037,"column":41,"nodeType":"480","messageId":"481","endLine":1037,"endColumn":43},{"ruleId":"478","severity":1,"message":"479","line":1053,"column":26,"nodeType":"480","messageId":"481","endLine":1053,"endColumn":28},{"ruleId":"478","severity":1,"message":"479","line":1055,"column":33,"nodeType":"480","messageId":"481","endLine":1055,"endColumn":35},{"ruleId":"478","severity":1,"message":"479","line":1068,"column":48,"nodeType":"480","messageId":"481","endLine":1068,"endColumn":50},{"ruleId":"478","severity":1,"message":"479","line":1073,"column":50,"nodeType":"480","messageId":"481","endLine":1073,"endColumn":52},{"ruleId":"478","severity":1,"message":"479","line":1073,"column":94,"nodeType":"480","messageId":"481","endLine":1073,"endColumn":96},{"ruleId":"478","severity":1,"message":"479","line":1073,"column":136,"nodeType":"480","messageId":"481","endLine":1073,"endColumn":138},{"ruleId":"478","severity":1,"message":"479","line":1078,"column":50,"nodeType":"480","messageId":"481","endLine":1078,"endColumn":52},{"ruleId":"478","severity":1,"message":"479","line":1083,"column":56,"nodeType":"480","messageId":"481","endLine":1083,"endColumn":58},{"ruleId":"478","severity":1,"message":"479","line":1088,"column":54,"nodeType":"480","messageId":"481","endLine":1088,"endColumn":56},{"ruleId":"478","severity":1,"message":"479","line":1088,"column":76,"nodeType":"480","messageId":"481","endLine":1088,"endColumn":78},{"ruleId":"478","severity":1,"message":"479","line":1093,"column":58,"nodeType":"480","messageId":"481","endLine":1093,"endColumn":60},{"ruleId":"478","severity":1,"message":"479","line":1098,"column":48,"nodeType":"480","messageId":"481","endLine":1098,"endColumn":50},{"ruleId":"478","severity":1,"message":"479","line":1103,"column":54,"nodeType":"480","messageId":"481","endLine":1103,"endColumn":56},{"ruleId":"478","severity":1,"message":"484","line":1272,"column":32,"nodeType":"480","messageId":"481","endLine":1272,"endColumn":34},{"ruleId":"478","severity":1,"message":"484","line":1272,"column":88,"nodeType":"480","messageId":"481","endLine":1272,"endColumn":90},{"ruleId":"478","severity":1,"message":"484","line":1272,"column":144,"nodeType":"480","messageId":"481","endLine":1272,"endColumn":146},{"ruleId":"478","severity":1,"message":"484","line":1303,"column":32,"nodeType":"480","messageId":"481","endLine":1303,"endColumn":34},{"ruleId":"478","severity":1,"message":"484","line":1303,"column":61,"nodeType":"480","messageId":"481","endLine":1303,"endColumn":63},{"ruleId":"478","severity":1,"message":"484","line":1303,"column":89,"nodeType":"480","messageId":"481","endLine":1303,"endColumn":91},{"ruleId":"436","severity":1,"message":"491","line":1375,"column":22,"nodeType":"438","messageId":"439","endLine":1375,"endColumn":33},{"ruleId":"436","severity":1,"message":"492","line":1376,"column":22,"nodeType":"438","messageId":"439","endLine":1376,"endColumn":33},{"ruleId":"493","severity":1,"message":"494","line":1507,"column":143,"nodeType":"495","endLine":1507,"endColumn":160},{"ruleId":"478","severity":1,"message":"479","line":1516,"column":156,"nodeType":"480","messageId":"481","endLine":1516,"endColumn":158},{"ruleId":"478","severity":1,"message":"479","line":1942,"column":161,"nodeType":"480","messageId":"481","endLine":1942,"endColumn":163},{"ruleId":"478","severity":1,"message":"479","line":1950,"column":160,"nodeType":"480","messageId":"481","endLine":1950,"endColumn":162},{"ruleId":"493","severity":1,"message":"494","line":1978,"column":115,"nodeType":"495","endLine":1978,"endColumn":130},{"ruleId":"436","severity":1,"message":"496","line":8,"column":10,"nodeType":"438","messageId":"439","endLine":8,"endColumn":20},{"ruleId":"436","severity":1,"message":"497","line":53,"column":5,"nodeType":"438","messageId":"439","endLine":53,"endColumn":10},{"ruleId":"436","severity":1,"message":"498","line":70,"column":12,"nodeType":"438","messageId":"439","endLine":70,"endColumn":23},{"ruleId":"436","severity":1,"message":"499","line":77,"column":12,"nodeType":"438","messageId":"439","endLine":77,"endColumn":17},{"ruleId":"436","severity":1,"message":"500","line":78,"column":12,"nodeType":"438","messageId":"439","endLine":78,"endColumn":17},{"ruleId":"468","severity":1,"message":"501","line":120,"column":8,"nodeType":"470","endLine":120,"endColumn":10,"suggestions":"502"},{"ruleId":"436","severity":1,"message":"503","line":161,"column":11,"nodeType":"438","messageId":"439","endLine":161,"endColumn":29},{"ruleId":"468","severity":1,"message":"504","line":165,"column":32,"nodeType":"438","endLine":165,"endColumn":43},{"ruleId":"436","severity":1,"message":"505","line":214,"column":51,"nodeType":"438","messageId":"439","endLine":214,"endColumn":56},{"ruleId":"478","severity":1,"message":"479","line":286,"column":25,"nodeType":"480","messageId":"481","endLine":286,"endColumn":27},{"ruleId":"478","severity":1,"message":"479","line":336,"column":44,"nodeType":"480","messageId":"481","endLine":336,"endColumn":46},{"ruleId":"478","severity":1,"message":"479","line":341,"column":48,"nodeType":"480","messageId":"481","endLine":341,"endColumn":50},{"ruleId":"436","severity":1,"message":"506","line":146,"column":28,"nodeType":"438","messageId":"439","endLine":146,"endColumn":45},{"ruleId":"468","severity":1,"message":"507","line":245,"column":8,"nodeType":"470","endLine":245,"endColumn":10,"suggestions":"508"},{"ruleId":"468","severity":1,"message":"504","line":257,"column":32,"nodeType":"438","endLine":257,"endColumn":43},{"ruleId":"468","severity":1,"message":"504","line":288,"column":38,"nodeType":"438","endLine":288,"endColumn":49},{"ruleId":"478","severity":1,"message":"479","line":361,"column":42,"nodeType":"480","messageId":"481","endLine":361,"endColumn":44},{"ruleId":"478","severity":1,"message":"479","line":366,"column":46,"nodeType":"480","messageId":"481","endLine":366,"endColumn":48},{"ruleId":"493","severity":1,"message":"494","line":644,"column":21,"nodeType":"495","endLine":644,"endColumn":48},{"ruleId":"468","severity":1,"message":"509","line":101,"column":8,"nodeType":"470","endLine":101,"endColumn":10,"suggestions":"510"},{"ruleId":"468","severity":1,"message":"504","line":120,"column":35,"nodeType":"438","endLine":120,"endColumn":46},{"ruleId":"478","severity":1,"message":"479","line":225,"column":42,"nodeType":"480","messageId":"481","endLine":225,"endColumn":44},{"ruleId":"478","severity":1,"message":"479","line":231,"column":46,"nodeType":"480","messageId":"481","endLine":231,"endColumn":48},{"ruleId":"436","severity":1,"message":"496","line":7,"column":10,"nodeType":"438","messageId":"439","endLine":7,"endColumn":20},{"ruleId":"436","severity":1,"message":"511","line":78,"column":12,"nodeType":"438","messageId":"439","endLine":78,"endColumn":26},{"ruleId":"468","severity":1,"message":"512","line":121,"column":8,"nodeType":"470","endLine":121,"endColumn":10,"suggestions":"513"},{"ruleId":"468","severity":1,"message":"504","line":152,"column":32,"nodeType":"438","endLine":152,"endColumn":43},{"ruleId":"468","severity":1,"message":"504","line":166,"column":38,"nodeType":"438","endLine":166,"endColumn":49},{"ruleId":"436","severity":1,"message":"505","line":239,"column":13,"nodeType":"438","messageId":"439","endLine":239,"endColumn":18},{"ruleId":"478","severity":1,"message":"479","line":283,"column":40,"nodeType":"480","messageId":"481","endLine":283,"endColumn":42},{"ruleId":"478","severity":1,"message":"479","line":289,"column":44,"nodeType":"480","messageId":"481","endLine":289,"endColumn":46},{"ruleId":"436","severity":1,"message":"514","line":44,"column":12,"nodeType":"438","messageId":"439","endLine":44,"endColumn":31},{"ruleId":"436","severity":1,"message":"515","line":75,"column":12,"nodeType":"438","messageId":"439","endLine":75,"endColumn":20},{"ruleId":"436","severity":1,"message":"516","line":86,"column":25,"nodeType":"438","messageId":"439","endLine":86,"endColumn":39},{"ruleId":"436","severity":1,"message":"517","line":87,"column":26,"nodeType":"438","messageId":"439","endLine":87,"endColumn":41},{"ruleId":"436","severity":1,"message":"518","line":88,"column":11,"nodeType":"438","messageId":"439","endLine":88,"endColumn":26},{"ruleId":"468","severity":1,"message":"519","line":191,"column":8,"nodeType":"470","endLine":191,"endColumn":10,"suggestions":"520"},{"ruleId":"478","severity":1,"message":"484","line":199,"column":23,"nodeType":"480","messageId":"481","endLine":199,"endColumn":25},{"ruleId":"478","severity":1,"message":"484","line":199,"column":51,"nodeType":"480","messageId":"481","endLine":199,"endColumn":53},{"ruleId":"478","severity":1,"message":"484","line":199,"column":79,"nodeType":"480","messageId":"481","endLine":199,"endColumn":81},{"ruleId":"478","severity":1,"message":"484","line":212,"column":23,"nodeType":"480","messageId":"481","endLine":212,"endColumn":25},{"ruleId":"478","severity":1,"message":"484","line":212,"column":51,"nodeType":"480","messageId":"481","endLine":212,"endColumn":53},{"ruleId":"478","severity":1,"message":"484","line":212,"column":79,"nodeType":"480","messageId":"481","endLine":212,"endColumn":81},{"ruleId":"468","severity":1,"message":"504","line":396,"column":34,"nodeType":"438","endLine":396,"endColumn":45},{"ruleId":"468","severity":1,"message":"504","line":402,"column":34,"nodeType":"438","endLine":402,"endColumn":45},{"ruleId":"478","severity":1,"message":"479","line":82,"column":38,"nodeType":"480","messageId":"481","endLine":82,"endColumn":40},{"ruleId":"478","severity":1,"message":"479","line":88,"column":42,"nodeType":"480","messageId":"481","endLine":88,"endColumn":44},{"ruleId":"478","severity":1,"message":"479","line":114,"column":39,"nodeType":"480","messageId":"481","endLine":114,"endColumn":41},{"ruleId":"478","severity":1,"message":"479","line":120,"column":42,"nodeType":"480","messageId":"481","endLine":120,"endColumn":44},{"ruleId":"478","severity":1,"message":"479","line":122,"column":44,"nodeType":"480","messageId":"481","endLine":122,"endColumn":46},{"ruleId":"521","severity":1,"message":"522","line":226,"column":15,"nodeType":"523","endLine":226,"endColumn":46},{"ruleId":"468","severity":1,"message":"524","line":51,"column":8,"nodeType":"470","endLine":51,"endColumn":10,"suggestions":"525"},{"ruleId":"468","severity":1,"message":"526","line":66,"column":8,"nodeType":"470","endLine":66,"endColumn":10,"suggestions":"527"},{"ruleId":"474","severity":1,"message":"475","line":94,"column":21,"nodeType":"476","messageId":"477","endLine":98,"endColumn":22},{"ruleId":"528","severity":1,"message":"529","line":15,"column":25,"nodeType":"523","endLine":15,"endColumn":82},{"ruleId":"432","replacedBy":"530"},{"ruleId":"434","replacedBy":"531"},{"ruleId":"436","severity":1,"message":"532","line":36,"column":12,"nodeType":"438","messageId":"439","endLine":36,"endColumn":24},{"ruleId":"436","severity":1,"message":"533","line":36,"column":26,"nodeType":"438","messageId":"439","endLine":36,"endColumn":41},{"ruleId":"436","severity":1,"message":"516","line":39,"column":25,"nodeType":"438","messageId":"439","endLine":39,"endColumn":39},{"ruleId":"436","severity":1,"message":"517","line":40,"column":26,"nodeType":"438","messageId":"439","endLine":40,"endColumn":41},{"ruleId":"436","severity":1,"message":"518","line":41,"column":11,"nodeType":"438","messageId":"439","endLine":41,"endColumn":26},{"ruleId":"436","severity":1,"message":"534","line":45,"column":12,"nodeType":"438","messageId":"439","endLine":45,"endColumn":26},{"ruleId":"436","severity":1,"message":"535","line":45,"column":28,"nodeType":"438","messageId":"439","endLine":45,"endColumn":45},{"ruleId":"436","severity":1,"message":"536","line":54,"column":11,"nodeType":"438","messageId":"439","endLine":54,"endColumn":18},{"ruleId":"537","severity":1,"message":"538","line":93,"column":50,"nodeType":"539","messageId":"540","endLine":93,"endColumn":52},{"ruleId":"468","severity":1,"message":"541","line":123,"column":8,"nodeType":"470","endLine":123,"endColumn":10,"suggestions":"542"},{"ruleId":"478","severity":1,"message":"479","line":318,"column":28,"nodeType":"480","messageId":"481","endLine":318,"endColumn":30},{"ruleId":"436","severity":1,"message":"543","line":43,"column":23,"nodeType":"438","messageId":"439","endLine":43,"endColumn":41},{"ruleId":"468","severity":1,"message":"544","line":108,"column":12,"nodeType":"470","endLine":108,"endColumn":14,"suggestions":"545"},{"ruleId":"432","replacedBy":"546"},{"ruleId":"434","replacedBy":"547"},{"ruleId":"432","replacedBy":"548"},{"ruleId":"434","replacedBy":"549"},{"ruleId":"436","severity":1,"message":"550","line":3,"column":10,"nodeType":"438","messageId":"439","endLine":3,"endColumn":14},{"ruleId":"478","severity":1,"message":"484","line":168,"column":23,"nodeType":"480","messageId":"481","endLine":168,"endColumn":25},{"ruleId":"478","severity":1,"message":"484","line":168,"column":51,"nodeType":"480","messageId":"481","endLine":168,"endColumn":53},{"ruleId":"478","severity":1,"message":"484","line":168,"column":79,"nodeType":"480","messageId":"481","endLine":168,"endColumn":81},{"ruleId":"478","severity":1,"message":"484","line":183,"column":23,"nodeType":"480","messageId":"481","endLine":183,"endColumn":25},{"ruleId":"478","severity":1,"message":"484","line":183,"column":51,"nodeType":"480","messageId":"481","endLine":183,"endColumn":53},{"ruleId":"478","severity":1,"message":"484","line":183,"column":79,"nodeType":"480","messageId":"481","endLine":183,"endColumn":81},{"ruleId":"478","severity":1,"message":"484","line":198,"column":23,"nodeType":"480","messageId":"481","endLine":198,"endColumn":25},{"ruleId":"478","severity":1,"message":"484","line":198,"column":51,"nodeType":"480","messageId":"481","endLine":198,"endColumn":53},{"ruleId":"478","severity":1,"message":"484","line":198,"column":79,"nodeType":"480","messageId":"481","endLine":198,"endColumn":81},{"ruleId":"478","severity":1,"message":"479","line":359,"column":42,"nodeType":"480","messageId":"481","endLine":359,"endColumn":44},{"ruleId":"478","severity":1,"message":"479","line":364,"column":40,"nodeType":"480","messageId":"481","endLine":364,"endColumn":42},{"ruleId":"478","severity":1,"message":"479","line":369,"column":62,"nodeType":"480","messageId":"481","endLine":369,"endColumn":64},{"ruleId":"478","severity":1,"message":"479","line":369,"column":120,"nodeType":"480","messageId":"481","endLine":369,"endColumn":122},{"ruleId":"478","severity":1,"message":"479","line":374,"column":46,"nodeType":"480","messageId":"481","endLine":374,"endColumn":48},{"ruleId":"478","severity":1,"message":"479","line":374,"column":88,"nodeType":"480","messageId":"481","endLine":374,"endColumn":90},{"ruleId":"478","severity":1,"message":"479","line":374,"column":129,"nodeType":"480","messageId":"481","endLine":374,"endColumn":131},{"ruleId":"478","severity":1,"message":"479","line":379,"column":46,"nodeType":"480","messageId":"481","endLine":379,"endColumn":48},{"ruleId":"478","severity":1,"message":"479","line":379,"column":94,"nodeType":"480","messageId":"481","endLine":379,"endColumn":96},{"ruleId":"478","severity":1,"message":"479","line":384,"column":32,"nodeType":"480","messageId":"481","endLine":384,"endColumn":34},{"ruleId":"478","severity":1,"message":"479","line":388,"column":28,"nodeType":"480","messageId":"481","endLine":388,"endColumn":30},{"ruleId":"478","severity":1,"message":"479","line":391,"column":27,"nodeType":"480","messageId":"481","endLine":391,"endColumn":29},{"ruleId":"478","severity":1,"message":"484","line":395,"column":31,"nodeType":"480","messageId":"481","endLine":395,"endColumn":33},{"ruleId":"478","severity":1,"message":"484","line":395,"column":58,"nodeType":"480","messageId":"481","endLine":395,"endColumn":60},{"ruleId":"478","severity":1,"message":"484","line":395,"column":84,"nodeType":"480","messageId":"481","endLine":395,"endColumn":86},{"ruleId":"478","severity":1,"message":"479","line":420,"column":23,"nodeType":"480","messageId":"481","endLine":420,"endColumn":25},{"ruleId":"478","severity":1,"message":"479","line":420,"column":43,"nodeType":"480","messageId":"481","endLine":420,"endColumn":45},{"ruleId":"478","severity":1,"message":"479","line":424,"column":21,"nodeType":"480","messageId":"481","endLine":424,"endColumn":23},{"ruleId":"478","severity":1,"message":"479","line":424,"column":39,"nodeType":"480","messageId":"481","endLine":424,"endColumn":41},{"ruleId":"551","severity":1,"message":"552","line":484,"column":13,"nodeType":"553","messageId":"481","endLine":484,"endColumn":23},{"ruleId":"551","severity":1,"message":"554","line":485,"column":13,"nodeType":"553","messageId":"481","endLine":485,"endColumn":27},{"ruleId":"551","severity":1,"message":"555","line":486,"column":13,"nodeType":"553","messageId":"481","endLine":486,"endColumn":25},{"ruleId":"551","severity":1,"message":"556","line":488,"column":13,"nodeType":"553","messageId":"481","endLine":488,"endColumn":35},{"ruleId":"551","severity":1,"message":"557","line":489,"column":13,"nodeType":"553","messageId":"481","endLine":489,"endColumn":35},{"ruleId":"551","severity":1,"message":"558","line":490,"column":13,"nodeType":"553","messageId":"481","endLine":490,"endColumn":35},{"ruleId":"478","severity":1,"message":"484","line":533,"column":31,"nodeType":"480","messageId":"481","endLine":533,"endColumn":33},{"ruleId":"478","severity":1,"message":"484","line":533,"column":58,"nodeType":"480","messageId":"481","endLine":533,"endColumn":60},{"ruleId":"478","severity":1,"message":"484","line":533,"column":84,"nodeType":"480","messageId":"481","endLine":533,"endColumn":86},{"ruleId":"436","severity":1,"message":"499","line":549,"column":9,"nodeType":"438","messageId":"439","endLine":549,"endColumn":14},{"ruleId":"478","severity":1,"message":"479","line":568,"column":22,"nodeType":"480","messageId":"481","endLine":568,"endColumn":24},{"ruleId":"468","severity":1,"message":"559","line":572,"column":8,"nodeType":"470","endLine":572,"endColumn":10,"suggestions":"560"},{"ruleId":"478","severity":1,"message":"479","line":577,"column":22,"nodeType":"480","messageId":"481","endLine":577,"endColumn":24},{"ruleId":"468","severity":1,"message":"561","line":674,"column":8,"nodeType":"470","endLine":674,"endColumn":10,"suggestions":"562"},{"ruleId":"478","severity":1,"message":"484","line":784,"column":39,"nodeType":"480","messageId":"481","endLine":784,"endColumn":41},{"ruleId":"478","severity":1,"message":"484","line":784,"column":73,"nodeType":"480","messageId":"481","endLine":784,"endColumn":75},{"ruleId":"493","severity":1,"message":"494","line":931,"column":124,"nodeType":"495","endLine":931,"endColumn":141},{"ruleId":"468","severity":1,"message":"563","line":161,"column":8,"nodeType":"470","endLine":161,"endColumn":10,"suggestions":"564"},{"ruleId":"468","severity":1,"message":"504","line":178,"column":36,"nodeType":"438","endLine":178,"endColumn":47},{"ruleId":"478","severity":1,"message":"479","line":251,"column":42,"nodeType":"480","messageId":"481","endLine":251,"endColumn":44},{"ruleId":"478","severity":1,"message":"479","line":256,"column":46,"nodeType":"480","messageId":"481","endLine":256,"endColumn":48},{"ruleId":"436","severity":1,"message":"565","line":41,"column":12,"nodeType":"438","messageId":"439","endLine":41,"endColumn":20},{"ruleId":"436","severity":1,"message":"566","line":41,"column":22,"nodeType":"438","messageId":"439","endLine":41,"endColumn":33},{"ruleId":"478","severity":1,"message":"479","line":83,"column":47,"nodeType":"480","messageId":"481","endLine":83,"endColumn":49},{"ruleId":"478","severity":1,"message":"479","line":86,"column":54,"nodeType":"480","messageId":"481","endLine":86,"endColumn":56},{"ruleId":"436","severity":1,"message":"567","line":5,"column":8,"nodeType":"438","messageId":"439","endLine":5,"endColumn":21},{"ruleId":"432","replacedBy":"568"},{"ruleId":"434","replacedBy":"569"},{"ruleId":"436","severity":1,"message":"570","line":1,"column":17,"nodeType":"438","messageId":"439","endLine":1,"endColumn":25},{"ruleId":"436","severity":1,"message":"445","line":1,"column":27,"nodeType":"438","messageId":"439","endLine":1,"endColumn":36},{"ruleId":"436","severity":1,"message":"571","line":1,"column":48,"nodeType":"438","messageId":"439","endLine":1,"endColumn":59},{"ruleId":"436","severity":1,"message":"572","line":3,"column":8,"nodeType":"438","messageId":"439","endLine":3,"endColumn":18},{"ruleId":"478","severity":1,"message":"479","line":68,"column":44,"nodeType":"480","messageId":"481","endLine":68,"endColumn":46},{"ruleId":"478","severity":1,"message":"479","line":78,"column":48,"nodeType":"480","messageId":"481","endLine":78,"endColumn":50},{"ruleId":"432","replacedBy":"573"},{"ruleId":"434","replacedBy":"574"},"no-native-reassign",["575"],"no-negated-in-lhs",["576"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Main' is defined but never used.","'registNums' is assigned a value but never used.",["575"],["576"],"'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Axios' is defined but never used.","'DatePicker' is defined but never used.","'RoomTypes' is assigned a value but never used.","'Methods' is assigned a value but never used.","'Paths' is assigned a value but never used.","'setUserName' is assigned a value but never used.","'setBnum' is assigned a value but never used.","'setOwnerName' is assigned a value but never used.","'setUserSort' is assigned a value but never used.","'setEndStatus' is assigned a value but never used.","'setStatus' is assigned a value but never used.",["575"],["576"],"'BrowserView' is defined but never used.","'MobileView' is defined but never used.","'isBrowser' is defined but never used.","'isMobile' is defined but never used.","'contractStart' is assigned a value but never used.","'contractEnd' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'modalMemberId' and 'props.newDataForm'. Either include them or remove the dependency array.","ArrayExpression",["577"],"React Hook useEffect has missing dependencies: 'props.cDataForm' and 'rNum'. Either include them or remove the dependency array.",["578"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'onPayDateHandler' is assigned a value but never used.","'fileExtensionChk' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'finalDate' is assigned a value but never used.","'originDate' is assigned a value but never used.","'nullChk' is assigned a value but never used.","no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf","'setPaymentY' is assigned a value but never used.","'setPaymentN' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'makeStyles' is defined but never used.","'empNm' is assigned a value but never used.","'closeStatus' is assigned a value but never used.","'memId' is assigned a value but never used.","'empId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'empList'. Either include it or remove the dependency array.",["579"],"'closeStatusHandler' is assigned a value but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'chkSt' is assigned a value but never used.","'setContractStatus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'memberList'. Either include it or remove the dependency array.",["580"],"React Hook useEffect has a missing dependency: 'paymentList'. Either include it or remove the dependency array.",["581"],"'checkForDelete' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'searchAsk'. Either include it or remove the dependency array.",["582"],"'nameForDetailCModal' is assigned a value but never used.","'mEndFlag' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.","'setPostsPerPage' is assigned a value but never used.","'indexOfLastPost' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'detailMemberList'. Either include it or remove the dependency array.",["583"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'props.dataForm' and 'rNum'. Either include them or remove the dependency array.",["584"],"React Hook useEffect has missing dependencies: 'getAccessPathLov', 'getAskMethodLov', and 'getContractTpLov'. Either include them or remove the dependency array.",["585"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["575"],["576"],"'payPlanMoney' is assigned a value but never used.","'setPayPlanMoney' is assigned a value but never used.","'checkStatusChk' is assigned a value but never used.","'setCheckStatusChk' is assigned a value but never used.","'classes' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'paymentStList'. Either include it or remove the dependency array.",["586"],"'modalCContractDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.dataNum'. Either include it or remove the dependency array.",["587"],["575"],["576"],["575"],["576"],"'post' is defined but never used.","no-dupe-keys","Duplicate key 'famRelFile'.","ObjectExpression","Duplicate key 'graduationFile'.","Duplicate key 'bankbookFile'.","Duplicate key 'realFamRelCertFileName'.","Duplicate key 'realGraduationFileName'.","Duplicate key 'realCopyOfBankFileName'.","React Hook useEffect has missing dependencies: 'dataForm' and 'name'. Either include them or remove the dependency array.",["588"],"React Hook useEffect has missing dependencies: 'dataForm' and 'props.empIdM'. Either include them or remove the dependency array.",["589"],"React Hook useEffect has a missing dependency: 'allOfcontractList'. Either include it or remove the dependency array.",["590"],"'empRegNo' is assigned a value but never used.","'setEmpRegNo' is assigned a value but never used.","'ListSubheader' is defined but never used.",["575"],["576"],"'Fragment' is defined but never used.","'useCallback' is defined but never used.","'S010100150' is defined but never used.",["575"],["576"],"no-global-assign","no-unsafe-negation",{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},{"desc":"601","fix":"602"},{"desc":"603","fix":"604"},{"desc":"605","fix":"606"},{"desc":"607","fix":"608"},{"desc":"609","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"615","fix":"616"},{"desc":"617","fix":"618"},"Update the dependencies array to be: [modalMemberId, props.newDataForm]",{"range":"619","text":"620"},"Update the dependencies array to be: [props.cDataForm, rNum]",{"range":"621","text":"622"},"Update the dependencies array to be: [empList]",{"range":"623","text":"624"},"Update the dependencies array to be: [memberList]",{"range":"625","text":"626"},"Update the dependencies array to be: [paymentList]",{"range":"627","text":"628"},"Update the dependencies array to be: [searchAsk]",{"range":"629","text":"630"},"Update the dependencies array to be: [detailMemberList]",{"range":"631","text":"632"},"Update the dependencies array to be: [props.dataForm, rNum]",{"range":"633","text":"634"},"Update the dependencies array to be: [getAccessPathLov, getAskMethodLov, getContractTpLov]",{"range":"635","text":"636"},"Update the dependencies array to be: [paymentStList]",{"range":"637","text":"638"},"Update the dependencies array to be: [props.dataNum]",{"range":"639","text":"640"},"Update the dependencies array to be: [dataForm, name]",{"range":"641","text":"642"},"Update the dependencies array to be: [dataForm, props.empIdM]",{"range":"643","text":"644"},"Update the dependencies array to be: [allOfcontractList]",{"range":"645","text":"646"},[7846,7848],"[modalMemberId, props.newDataForm]",[14807,14809],"[props.cDataForm, rNum]",[4235,4237],"[empList]",[7541,7543],"[memberList]",[3537,3539],"[paymentList]",[4083,4085],"[searchAsk]",[7246,7248],"[detailMemberList]",[1833,1835],"[props.dataForm, rNum]",[2435,2437],"[getAccessPathLov, getAskMethodLov, getContractTpLov]",[4610,4612],"[paymentStList]",[4433,4435],"[props.dataNum]",[17723,17725],"[dataForm, name]",[22681,22683],"[dataForm, props.empIdM]",[5151,5153],"[allOfcontractList]"]